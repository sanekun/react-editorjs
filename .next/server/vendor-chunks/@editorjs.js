/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@editorjs";
exports.ids = ["vendor-chunks/@editorjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@editorjs/attaches/dist/bundle.js":
/*!********************************************************!*\
  !*** ./node_modules/@editorjs/attaches/dist/bundle.js ***!
  \********************************************************/
/***/ ((module) => {

eval("!function(e,t){ true?module.exports=t():0}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"/\",n(n.s=6)}([function(e,t,n){window,e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,\"a\",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p=\"\",n(n.s=3)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function(\"return this\")()}catch(e){\"object\"==typeof window&&(n=window)}e.exports=n},function(e,t,n){\"use strict\";(function(e){var r=n(2),o=setTimeout;function i(){}function a(e){if(!(this instanceof a))throw new TypeError(\"Promises must be constructed via new\");if(\"function\"!=typeof e)throw new TypeError(\"not a function\");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],d(e,this)}function s(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,a._immediateFn((function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void l(t.promise,e)}c(t.promise,r)}else(1===e._state?c:l)(t.promise,e._value)}))):e._deferreds.push(t)}function c(e,t){try{if(t===e)throw new TypeError(\"A promise cannot be resolved with itself.\");if(t&&(\"object\"==typeof t||\"function\"==typeof t)){var n=t.then;if(t instanceof a)return e._state=3,e._value=t,void u(e);if(\"function\"==typeof n)return void d((r=n,o=t,function(){r.apply(o,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){l(e,t)}var r,o}function l(e,t){e._state=2,e._value=t,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&a._immediateFn((function(){e._handled||a._unhandledRejectionFn(e._value)}));for(var t=0,n=e._deferreds.length;t<n;t++)s(e,e._deferreds[t]);e._deferreds=null}function f(e,t,n){this.onFulfilled=\"function\"==typeof e?e:null,this.onRejected=\"function\"==typeof t?t:null,this.promise=n}function d(e,t){var n=!1;try{e((function(e){n||(n=!0,c(t,e))}),(function(e){n||(n=!0,l(t,e))}))}catch(e){if(n)return;n=!0,l(t,e)}}a.prototype.catch=function(e){return this.then(null,e)},a.prototype.then=function(e,t){var n=new this.constructor(i);return s(this,new f(e,t,n)),n},a.prototype.finally=r.a,a.all=function(e){return new a((function(t,n){if(!e||void 0===e.length)throw new TypeError(\"Promise.all accepts an array\");var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,a){try{if(a&&(\"object\"==typeof a||\"function\"==typeof a)){var s=a.then;if(\"function\"==typeof s)return void s.call(a,(function(t){i(e,t)}),n)}r[e]=a,0==--o&&t(r)}catch(e){n(e)}}for(var a=0;a<r.length;a++)i(a,r[a])}))},a.resolve=function(e){return e&&\"object\"==typeof e&&e.constructor===a?e:new a((function(t){t(e)}))},a.reject=function(e){return new a((function(t,n){n(e)}))},a.race=function(e){return new a((function(t,n){for(var r=0,o=e.length;r<o;r++)e[r].then(t,n)}))},a._immediateFn=\"function\"==typeof e&&function(t){e(t)}||function(e){o(e,0)},a._unhandledRejectionFn=function(e){\"undefined\"!=typeof console&&console&&console.warn(\"Possible Unhandled Promise Rejection:\",e)},t.a=a}).call(this,n(5).setImmediate)},function(e,t,n){\"use strict\";t.a=function(e){var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))}},function(e,t,n){\"use strict\";function r(e){return(r=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}n(4);var o,i,a,s,c,l,u,f=n(8),d=(i=function(e){return new Promise((function(t,n){e=s(e),(e=c(e)).beforeSend&&e.beforeSend();var r=window.XMLHttpRequest?new window.XMLHttpRequest:new window.ActiveXObject(\"Microsoft.XMLHTTP\");r.open(e.method,e.url),r.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\"),Object.keys(e.headers).forEach((function(t){var n=e.headers[t];r.setRequestHeader(t,n)}));var o=e.ratio;r.upload.addEventListener(\"progress\",(function(t){var n=Math.round(t.loaded/t.total*100),r=Math.ceil(n*o/100);e.progress(Math.min(r,100))}),!1),r.addEventListener(\"progress\",(function(t){var n=Math.round(t.loaded/t.total*100),r=Math.ceil(n*(100-o)/100)+o;e.progress(Math.min(r,100))}),!1),r.onreadystatechange=function(){if(4===r.readyState){var e=r.response;try{e=JSON.parse(e)}catch(e){}var o=f.parseHeaders(r.getAllResponseHeaders()),i={body:e,code:r.status,headers:o};u(r.status)?t(i):n(i)}},r.send(e.data)}))},a=function(e){return e.method=\"POST\",i(e)},s=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(e.url&&\"string\"!=typeof e.url)throw new Error(\"Url must be a string\");if(e.url=e.url||\"\",e.method&&\"string\"!=typeof e.method)throw new Error(\"`method` must be a string or null\");if(e.method=e.method?e.method.toUpperCase():\"GET\",e.headers&&\"object\"!==r(e.headers))throw new Error(\"`headers` must be an object or null\");if(e.headers=e.headers||{},e.type&&(\"string\"!=typeof e.type||!Object.values(o).includes(e.type)))throw new Error(\"`type` must be taken from module's «contentType» library\");if(e.progress&&\"function\"!=typeof e.progress)throw new Error(\"`progress` must be a function or null\");if(e.progress=e.progress||function(e){},e.beforeSend=e.beforeSend||function(e){},e.ratio&&\"number\"!=typeof e.ratio)throw new Error(\"`ratio` must be a number\");if(e.ratio<0||e.ratio>100)throw new Error(\"`ratio` must be in a 0-100 interval\");if(e.ratio=e.ratio||90,e.accept&&\"string\"!=typeof e.accept)throw new Error(\"`accept` must be a string with a list of allowed mime-types\");if(e.accept=e.accept||\"*/*\",e.multiple&&\"boolean\"!=typeof e.multiple)throw new Error(\"`multiple` must be a true or false\");if(e.multiple=e.multiple||!1,e.fieldName&&\"string\"!=typeof e.fieldName)throw new Error(\"`fieldName` must be a string\");return e.fieldName=e.fieldName||\"files\",e},c=function(e){switch(e.method){case\"GET\":var t=l(e.data,o.URLENCODED);delete e.data,e.url=/\\?/.test(e.url)?e.url+\"&\"+t:e.url+\"?\"+t;break;case\"POST\":case\"PUT\":case\"DELETE\":case\"UPDATE\":var n=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).type||o.JSON}(e);(f.isFormData(e.data)||f.isFormElement(e.data))&&(n=o.FORM),e.data=l(e.data,n),n!==d.contentType.FORM&&(e.headers[\"content-type\"]=n)}return e},l=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};switch(arguments.length>1?arguments[1]:void 0){case o.URLENCODED:return f.urlEncode(e);case o.JSON:return f.jsonEncode(e);case o.FORM:return f.formEncode(e);default:return e}},u=function(e){return e>=200&&e<300},{contentType:o={URLENCODED:\"application/x-www-form-urlencoded; charset=utf-8\",FORM:\"multipart/form-data\",JSON:\"application/json; charset=utf-8\"},request:i,get:function(e){return e.method=\"GET\",i(e)},post:a,transport:function(e){return e=s(e),f.selectFiles(e).then((function(t){for(var n=new FormData,r=0;r<t.length;r++)n.append(e.fieldName,t[r],t[r].name);f.isObject(e.data)&&Object.keys(e.data).forEach((function(t){var r=e.data[t];n.append(t,r)}));var o=e.beforeSend;return e.beforeSend=function(){return o(t)},e.data=n,a(e)}))},selectFiles:function(e){return delete(e=s(e)).beforeSend,f.selectFiles(e)}});e.exports=d},function(e,t,n){\"use strict\";n.r(t);var r=n(1);window.Promise=window.Promise||r.a},function(e,t,n){(function(e){var r=void 0!==e&&e||\"undefined\"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(6),t.setImmediate=\"undefined\"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate=\"undefined\"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(e,t){!function(e,n){\"use strict\";if(!e.setImmediate){var r,o,i,a,s,c=1,l={},u=!1,f=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,\"[object process]\"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){h(e)}))}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage(\"\",\"*\"),e.onmessage=n,t}}()?(a=\"setImmediate$\"+Math.random()+\"$\",s=function(t){t.source===e&&\"string\"==typeof t.data&&0===t.data.indexOf(a)&&h(+t.data.slice(a.length))},e.addEventListener?e.addEventListener(\"message\",s,!1):e.attachEvent(\"onmessage\",s),r=function(t){e.postMessage(a+t,\"*\")}):e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){h(e.data)},r=function(e){i.port2.postMessage(e)}):f&&\"onreadystatechange\"in f.createElement(\"script\")?(o=f.documentElement,r=function(e){var t=f.createElement(\"script\");t.onreadystatechange=function(){h(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(h,0,e)},d.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return l[c]=o,r(c),c++},d.clearImmediate=p}function p(e){delete l[e]}function h(e){if(u)setTimeout(h,0,e);else{var t=l[e];if(t){u=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{p(e),u=!1}}}}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(7))},function(e,t){var n,r,o=e.exports={};function i(){throw new Error(\"setTimeout has not been defined\")}function a(){throw new Error(\"clearTimeout has not been defined\")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n=\"function\"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r=\"function\"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var c,l=[],u=!1,f=-1;function d(){u&&c&&(u=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!u){var e=s(d);u=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||u||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title=\"browser\",o.browser=!0,o.env={},o.argv=[],o.version=\"\",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error(\"process.binding is not supported\")},o.cwd=function(){return\"/\"},o.chdir=function(e){throw new Error(\"process.chdir is not supported\")},o.umask=function(){return 0}},function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=n(9);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e)}var t,n;return t=e,(n=[{key:\"urlEncode\",value:function(e){return o(e)}},{key:\"jsonEncode\",value:function(e){return JSON.stringify(e)}},{key:\"formEncode\",value:function(e){if(this.isFormData(e))return e;if(this.isFormElement(e))return new FormData(e);if(this.isObject(e)){var t=new FormData;return Object.keys(e).forEach((function(n){var r=e[n];t.append(n,r)})),t}throw new Error(\"`data` must be an instance of Object, FormData or <FORM> HTMLElement\")}},{key:\"isObject\",value:function(e){return\"[object Object]\"===Object.prototype.toString.call(e)}},{key:\"isFormData\",value:function(e){return e instanceof FormData}},{key:\"isFormElement\",value:function(e){return e instanceof HTMLFormElement}},{key:\"selectFiles\",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise((function(t,n){var r=document.createElement(\"INPUT\");r.type=\"file\",e.multiple&&r.setAttribute(\"multiple\",\"multiple\"),e.accept&&r.setAttribute(\"accept\",e.accept),r.style.display=\"none\",document.body.appendChild(r),r.addEventListener(\"change\",(function(e){var n=e.target.files;t(n),document.body.removeChild(r)}),!1),r.click()}))}},{key:\"parseHeaders\",value:function(e){var t=e.trim().split(/[\\r\\n]+/),n={};return t.forEach((function(e){var t=e.split(\": \"),r=t.shift(),o=t.join(\": \");r&&(n[r]=o)})),n}}])&&r(t,n),e}()},function(e,t){var n=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,escape).replace(/%20/g,\"+\")},r=function(e,t,o,i){return t=t||null,o=o||\"&\",i=i||null,e?function(e){for(var t=new Array,n=0;n<e.length;n++)e[n]&&t.push(e[n]);return t}(Object.keys(e).map((function(a){var s,c,l=a;if(i&&(l=i+\"[\"+l+\"]\"),\"object\"==typeof e[a]&&null!==e[a])s=r(e[a],null,o,l);else{t&&(c=l,l=!isNaN(parseFloat(c))&&isFinite(c)?t+Number(l):l);var u=e[a];u=(u=0===(u=!1===(u=!0===u?\"1\":u)?\"0\":u)?\"0\":u)||\"\",s=n(l)+\"=\"+n(u)}return s}))).join(o).replace(/[!'()*]/g,\"\"):\"\"};e.exports=r}])},function(e,t,n){var r=n(2);\"string\"==typeof r&&(r=[[e.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,\".cdx-attaches {\\n  --color-line: #EFF0F1;\\n  --color-bg: #fff;\\n  --color-bg-secondary: #F8F8F8;\\n  --color-bg-secondary--hover: #f2f2f2;\\n  --color-text-secondary: #707684;\\n}\\n\\n  .cdx-attaches--with-file {\\n    display: flex;\\n    align-items: center;\\n    padding: 10px 12px;\\n    border: 1px solid var(--color-line);\\n    border-radius: 7px;\\n    background: var(--color-bg);\\n  }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-info {\\n      display: grid;\\n      grid-gap: 4px;\\n      max-width: calc(100% - 80px);\\n      margin: auto 0;\\n      flex-grow: 2;\\n    }\\n\\n  .cdx-attaches--with-file .cdx-attaches__download-button {\\n      display: flex;\\n      align-items: center;\\n      background: var(--color-bg-secondary);\\n      padding: 6px;\\n      border-radius: 6px;\\n      margin: auto 0 auto auto;\\n    }\\n\\n  .cdx-attaches--with-file .cdx-attaches__download-button:hover {\\n        background: var(--color-bg-secondary--hover);\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__download-button svg {\\n        width: 20px;\\n        height: 20px;\\n        fill: none;\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon {\\n      position: relative;\\n    }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon-background {\\n        background-color: #333;\\n\\n        width: 27px;\\n        height: 30px;\\n        margin-right: 12px;\\n        border-radius: 8px;\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n      }\\n\\n  @supports(-webkit-mask-box-image: url('')){\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon-background {\\n          border-radius: 0;\\n          -webkit-mask-box-image: url(\\\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 10.3872C0 1.83334 1.83334 0 10.3872 0H13.6128C22.1667 0 24 1.83334 24 10.3872V13.6128C24 22.1667 22.1667 24 13.6128 24H10.3872C1.83334 24 0 22.1667 0 13.6128V10.3872Z' fill='black'/%3E%3C/svg%3E%0A\\\") 48% 41% 37.9% 53.3%\\n      };\\n        }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon-label {\\n        position: absolute;\\n        left: 3px;\\n        top: 11px;\\n        background: inherit;\\n        text-transform: uppercase;\\n        line-height: 1em;\\n        color: #fff;\\n        padding: 1px 2px;\\n        border-radius: 3px;\\n        font-size: 10px;\\n        font-weight: bold;\\n        /* box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.22); */\\n        font-family: ui-monospace,SFMono-Regular,SF Mono,Menlo,Consolas,Liberation Mono,monospace;\\n        letter-spacing: 0.02em;\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon svg {\\n        width: 20px;\\n        height: 20px;\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__file-icon path {\\n        stroke: #fff;\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__size {\\n      color: var(--color-text-secondary);\\n      font-size: 12px;\\n      line-height: 1em;\\n    }\\n\\n  .cdx-attaches--with-file .cdx-attaches__size::after {\\n        content: attr(data-size);\\n        margin-left: 0.2em;\\n      }\\n\\n  .cdx-attaches--with-file .cdx-attaches__title {\\n      white-space: nowrap;\\n      text-overflow: ellipsis;\\n      overflow: hidden;\\n      outline: none;\\n      max-width: 90%;\\n      font-size: 14px;\\n      font-weight: 500;\\n      line-height: 1em;\\n    }\\n\\n  .cdx-attaches--with-file .cdx-attaches__title:empty::before {\\n      content: attr(data-placeholder);\\n      color: #7b7e89;\\n    }\\n\\n  .cdx-attaches--loading .cdx-attaches__title,\\n    .cdx-attaches--loading .cdx-attaches__file-icon,\\n    .cdx-attaches--loading .cdx-attaches__size,\\n    .cdx-attaches--loading .cdx-attaches__download-button,\\n    .cdx-attaches--loading .cdx-attaches__button {\\n      opacity: 0;\\n      font-size: 0;\\n    }\\n\\n  .cdx-attaches__button {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    color: #000;\\n    border-radius: 7px;\\n    font-weight: 500;\\n  }\\n\\n  .cdx-attaches__button svg {\\n      margin-top: 0;\\n    }\\n\",\"\"])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||\"\",r=e[3];if(!r)return n;if(t&&\"function\"==typeof btoa){var o=(a=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+\" */\"),i=r.sources.map((function(e){return\"/*# sourceURL=\"+r.sourceRoot+e+\" */\"}));return[n].concat(i).concat([o]).join(\"\\n\")}var a;return[n].join(\"\\n\")}(t,e);return t[2]?\"@media \"+t[2]+\"{\"+n+\"}\":n})).join(\"\")},t.i=function(e,n){\"string\"==typeof e&&(e=[[null,e,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];\"number\"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var a=e[o];\"number\"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]=\"(\"+a[2]+\") and (\"+n+\")\"),t.push(a))}},t}},function(e,t,n){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(e){return document.querySelector(e)},c=function(e){var t={};return function(e){if(\"function\"==typeof e)return e();if(void 0===t[e]){var n=s.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),l=null,u=0,f=[],d=n(5);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(b(r.parts[a],t))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(b(r.parts[a],t));i[r.id]={id:r.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):n.push(r[a]={id:a,parts:[s]})}return n}function m(e,t){var n=c(e.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),f.push(t);else if(\"bottom\"===e.insertAt)n.appendChild(t);else{if(\"object\"!=typeof e.insertAt||!e.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=c(e.insertInto+\" \"+e.insertAt.before);n.insertBefore(t,o)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=f.indexOf(e);t>=0&&f.splice(t,1)}function y(e){var t=document.createElement(\"style\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),g(t,e.attrs),m(e,t),t}function g(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var a=u++;n=l||(l=y(t)),r=_.bind(null,n,a,!1),o=_.bind(null,n,a,!0)}else e.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(e){var t=document.createElement(\"link\");return void 0===e.attrs.type&&(e.attrs.type=\"text/css\"),e.attrs.rel=\"stylesheet\",g(t,e.attrs),m(e,t),t}(t),r=E.bind(null,n,t),o=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),r=S.bind(null,n),o=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(t=t||{}).attrs=\"object\"==typeof t.attrs?t.attrs:{},t.singleton||\"boolean\"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto=\"head\"),t.insertAt||(t.insertAt=\"bottom\");var n=h(e,t);return p(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(s=i[a.id]).refs--,r.push(s)}e&&p(h(e,t),t);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete i[s.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join(\"\\n\")});function _(e,t,n,r){var o=n?\"\":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function S(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute(\"media\",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function E(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=d(r)),o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var a=new Blob([r],{type:\"text/css\"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}},function(e,t){e.exports=function(e){var t=\"undefined\"!=typeof window&&window.location;if(!t)throw new Error(\"fixUrls requires window.location\");if(!e||\"string\"!=typeof e)return e;var n=t.protocol+\"//\"+t.host,r=n+t.pathname.replace(/\\/[^\\/]*$/,\"/\");return e.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(e,t){var o,i=t.trim().replace(/^\"(.*)\"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?e:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")}))}},function(e,t,n){\"use strict\";n.r(t),n.d(t,\"default\",(function(){return p}));n(1);var r=n(0),o=n.n(r);function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){var n=t.config,r=t.onUpload,o=t.onError;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.config=n,this.onUpload=r,this.onError=o}var t,n,r;return t=e,(n=[{key:\"uploadSelectedFile\",value:function(e){var t=this,n=e.onPreview;(this.config.uploader&&\"function\"==typeof this.config.uploader.uploadByFile?o.a.selectFiles({accept:this.config.types}).then((function(e){n();var r,o=t.config.uploader.uploadByFile(e[0]);return(r=o)&&\"function\"==typeof r.then||console.warn(\"Custom uploader method uploadByFile should return a Promise\"),o})):o.a.transport({url:this.config.endpoint,accept:this.config.types,beforeSend:function(){return n()},fieldName:this.config.field,headers:this.config.additionalRequestHeaders||{}}).then((function(e){return e.body}))).then((function(e){t.onUpload(e)})).catch((function(e){var n=e.body,r=n&&n.message?n.message:t.config.errorMessage;t.onError(r)}))}}])&&i(t.prototype,n),r&&i(t,r),e}();function s(e){return function(e){if(Array.isArray(e))return c(e)}(e)||function(e){if(\"undefined\"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e[\"@@iterator\"])return Array.from(e)}(e)||function(e,t){if(!e)return;if(\"string\"==typeof e)return c(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);\"Object\"===n&&e.constructor&&(n=e.constructor.name);if(\"Map\"===n||\"Set\"===n)return Array.from(e);if(\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return c(e,t)}(e)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=document.createElement(e);Array.isArray(n)?(t=o.classList).add.apply(t,s(n)):n&&o.classList.add(n);for(var i in r)o[i]=r[i];return o}function u(e){return 0===Object.keys(e).length}const f='<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13.3236 8.43554L9.49533 12.1908C9.13119 12.5505 8.93118 13.043 8.9393 13.5598C8.94741 14.0767 9.163 14.5757 9.53862 14.947C9.91424 15.3182 10.4191 15.5314 10.9422 15.5397C11.4653 15.5479 11.9637 15.3504 12.3279 14.9908L16.1562 11.2355C16.8845 10.5161 17.2845 9.53123 17.2682 8.4975C17.252 7.46376 16.8208 6.46583 16.0696 5.72324C15.3184 4.98066 14.3086 4.55425 13.2624 4.53782C12.2162 4.52138 11.2193 4.91627 10.4911 5.63562L6.66277 9.39093C5.57035 10.4699 4.97032 11.9473 4.99467 13.4979C5.01903 15.0485 5.66578 16.5454 6.79264 17.6592C7.9195 18.7731 9.43417 19.4127 11.0034 19.4374C12.5727 19.462 14.068 18.8697 15.1604 17.7907L18.9887 14.0354\"/></svg>';function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t){var n=this,r=t.data,o=t.config,i=t.api,s=t.readOnly;!function(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}(this,e),this.api=i,this.readOnly=s,this.nodes={wrapper:null,button:null,title:null},this._data={file:{},title:\"\"},this.config={endpoint:o.endpoint||\"\",field:o.field||\"file\",types:o.types||\"*\",buttonText:o.buttonText||\"Select file to upload\",errorMessage:o.errorMessage||\"File upload failed\",uploader:o.uploader||void 0,additionalRequestHeaders:o.additionalRequestHeaders||{}},void 0===r||u(r)||(this.data=r),this.uploader=new a({config:this.config,onUpload:function(e){return n.onUpload(e)},onError:function(e){return n.uploadingFailed(e)}}),this.enableFileUpload=this.enableFileUpload.bind(this)}var t,n,r;return t=e,r=[{key:\"toolbox\",get:function(){return{icon:f,title:\"Attachment\"}}},{key:\"isReadOnlySupported\",get:function(){return!0}}],(n=[{key:\"CSS\",get:function(){return{baseClass:this.api.styles.block,apiButton:this.api.styles.button,loader:this.api.styles.loader,wrapper:\"cdx-attaches\",wrapperWithFile:\"cdx-attaches--with-file\",wrapperLoading:\"cdx-attaches--loading\",button:\"cdx-attaches__button\",title:\"cdx-attaches__title\",size:\"cdx-attaches__size\",downloadButton:\"cdx-attaches__download-button\",fileInfo:\"cdx-attaches__file-info\",fileIcon:\"cdx-attaches__file-icon\",fileIconBackground:\"cdx-attaches__file-icon-background\",fileIconLabel:\"cdx-attaches__file-icon-label\"}}},{key:\"EXTENSIONS\",get:function(){return{doc:\"#1483E9\",docx:\"#1483E9\",odt:\"#1483E9\",pdf:\"#DB2F2F\",rtf:\"#744FDC\",tex:\"#5a5a5b\",txt:\"#5a5a5b\",pptx:\"#E35200\",ppt:\"#E35200\",mp3:\"#eab456\",mp4:\"#f676a6\",xls:\"#11AE3D\",html:\"#2988f0\",htm:\"#2988f0\",png:\"#AA2284\",jpg:\"#D13359\",jpeg:\"#D13359\",gif:\"#f6af76\",zip:\"#4f566f\",rar:\"#4f566f\",exe:\"#e26f6f\",svg:\"#bf5252\",key:\"#00B2FF\",sketch:\"#FFC700\",ai:\"#FB601D\",psd:\"#388ae5\",dmg:\"#e26f6f\",json:\"#2988f0\",csv:\"#11AE3D\"}}},{key:\"validate\",value:function(e){return!u(e.file)}},{key:\"save\",value:function(e){if(this.pluginHasData()){var t=e.querySelector(\".\".concat(this.CSS.title));t&&Object.assign(this.data,{title:t.innerHTML})}return this.data}},{key:\"render\",value:function(){var e=l(\"div\",this.CSS.baseClass);return this.nodes.wrapper=l(\"div\",this.CSS.wrapper),this.pluginHasData()?this.showFileData():this.prepareUploadButton(),e.appendChild(this.nodes.wrapper),e}},{key:\"prepareUploadButton\",value:function(){this.nodes.button=l(\"div\",[this.CSS.apiButton,this.CSS.button]),this.nodes.button.innerHTML=\"\".concat(f,\" \").concat(this.config.buttonText),this.readOnly||this.nodes.button.addEventListener(\"click\",this.enableFileUpload),this.nodes.wrapper.appendChild(this.nodes.button)}},{key:\"appendCallback\",value:function(){this.nodes.button.click()}},{key:\"pluginHasData\",value:function(){return\"\"!==this.data.title||Object.values(this.data.file).some((function(e){return void 0!==e}))}},{key:\"enableFileUpload\",value:function(){var e=this;this.uploader.uploadSelectedFile({onPreview:function(){e.nodes.wrapper.classList.add(e.CSS.wrapperLoading,e.CSS.loader)}})}},{key:\"onUpload\",value:function(e){var t,n,r,o=e;try{o.success&&void 0!==o.file&&!u(o.file)?(this.data={file:o.file,title:o.file.title||\"\"},this.nodes.button.remove(),this.showFileData(),t=this.nodes.title,n=document.createRange(),r=window.getSelection(),n.selectNodeContents(t),n.collapse(!1),r.removeAllRanges(),r.addRange(n),this.removeLoader()):this.uploadingFailed(this.config.errorMessage)}catch(e){console.error(\"Attaches tool error:\",e),this.uploadingFailed(this.config.errorMessage)}this.api.blocks.getBlockByIndex(this.api.blocks.getCurrentBlockIndex()).dispatchChange()}},{key:\"appendFileIcon\",value:function(e){var t,n=e.extension||(void 0===(t=e.name)?\"\":t.split(\".\").pop()),r=this.EXTENSIONS[n],o=l(\"div\",this.CSS.fileIcon),i=l(\"div\",this.CSS.fileIconBackground);if(r&&(i.style.backgroundColor=r),o.appendChild(i),n){var a=n;n.length>4&&(a=n.substring(0,4)+\"…\");var s=l(\"div\",this.CSS.fileIconLabel,{textContent:a,title:n});r&&(s.style.backgroundColor=r),o.appendChild(s)}else i.innerHTML=f;this.nodes.wrapper.appendChild(o)}},{key:\"removeLoader\",value:function(){var e=this;setTimeout((function(){return e.nodes.wrapper.classList.remove(e.CSS.wrapperLoading,e.CSS.loader)}),500)}},{key:\"showFileData\",value:function(){this.nodes.wrapper.classList.add(this.CSS.wrapperWithFile);var e=this.data,t=e.file,n=e.title;this.appendFileIcon(t);var r=l(\"div\",this.CSS.fileInfo);if(this.nodes.title=l(\"div\",this.CSS.title,{contentEditable:!1===this.readOnly}),this.nodes.title.dataset.placeholder=this.api.i18n.t(\"File title\"),this.nodes.title.textContent=n||\"\",r.appendChild(this.nodes.title),t.size){var o,i,a=l(\"div\",this.CSS.size);Math.log10(+t.size)>=6?(o=\"MiB\",i=t.size/Math.pow(2,20)):(o=\"KiB\",i=t.size/Math.pow(2,10)),a.textContent=i.toFixed(1),a.setAttribute(\"data-size\",o),r.appendChild(a)}if(this.nodes.wrapper.appendChild(r),void 0!==t.url){var s=l(\"a\",this.CSS.downloadButton,{innerHTML:'<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10\"/></svg>',href:t.url,target:\"_blank\",rel:\"nofollow noindex noreferrer\"});this.nodes.wrapper.appendChild(s)}}},{key:\"uploadingFailed\",value:function(e){this.api.notifier.show({message:e,style:\"error\"}),this.removeLoader()}},{key:\"data\",get:function(){return this._data},set:function(e){var t=e.file,n=e.title;this._data={file:t,title:n}}}])&&d(t.prototype,n),r&&d(t,r),e}()}]).default}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/attaches/dist/bundle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/checklist/dist/checklist.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@editorjs/checklist/dist/checklist.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.cdx-checklist{gap:6px;display:flex;flex-direction:column}.cdx-checklist__item{display:flex;box-sizing:content-box;align-items:flex-start}.cdx-checklist__item-text{outline:none;flex-grow:1;line-height:1.57em}.cdx-checklist__item-checkbox{width:22px;height:22px;display:flex;align-items:center;margin-right:8px;margin-top:calc(.785em - 11px);cursor:pointer}.cdx-checklist__item-checkbox svg{opacity:0;height:20px;width:20px;position:absolute;left:-1px;top:-1px;max-height:20px}@media (hover: hover){.cdx-checklist__item-checkbox:not(.cdx-checklist__item-checkbox--no-hover):hover .cdx-checklist__item-checkbox-check svg{opacity:1}}.cdx-checklist__item-checkbox-check{cursor:pointer;display:inline-block;flex-shrink:0;position:relative;width:20px;height:20px;box-sizing:border-box;margin-left:0;border-radius:5px;border:1px solid #C9C9C9;background:#fff}.cdx-checklist__item-checkbox-check:before{content:\"\";position:absolute;top:0;right:0;bottom:0;left:0;border-radius:100%;background-color:#369fff;visibility:hidden;pointer-events:none;transform:scale(1);transition:transform .4s ease-out,opacity .4s}@media (hover: hover){.cdx-checklist__item--checked .cdx-checklist__item-checkbox:not(.cdx-checklist__item--checked .cdx-checklist__item-checkbox--no-hover):hover .cdx-checklist__item-checkbox-check{background:#0059AB;border-color:#0059ab}}.cdx-checklist__item--checked .cdx-checklist__item-checkbox-check{background:#369FFF;border-color:#369fff}.cdx-checklist__item--checked .cdx-checklist__item-checkbox-check svg{opacity:1}.cdx-checklist__item--checked .cdx-checklist__item-checkbox-check svg path{stroke:#fff}.cdx-checklist__item--checked .cdx-checklist__item-checkbox-check:before{opacity:0;visibility:visible;transform:scale(2.5)}')),document.head.appendChild(e)}}catch(c){console.error(\"vite-plugin-css-injected-by-js\",c)}})();\nconst k = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 12L10.4884 15.8372C10.5677 15.9245 10.705 15.9245 10.7844 15.8372L17 9\"/></svg>', g = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.2 12L11.0586 13.8586C11.1367 13.9367 11.2633 13.9367 11.3414 13.8586L14.7 10.5\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>';\nfunction d() {\n  const s = document.activeElement, t = window.getSelection().getRangeAt(0), n = t.cloneRange();\n  return n.selectNodeContents(s), n.setStart(t.endContainer, t.endOffset), n.extractContents();\n}\nfunction C(s) {\n  const e = document.createElement(\"div\");\n  return e.appendChild(s), e.innerHTML;\n}\nfunction c(s, e = null, t = {}) {\n  const n = document.createElement(s);\n  Array.isArray(e) ? n.classList.add(...e) : e && n.classList.add(e);\n  for (const i in t)\n    n[i] = t[i];\n  return n;\n}\nfunction m(s) {\n  return s.innerHTML.replace(\"<br>\", \" \").trim();\n}\nfunction p(s, e = !1, t = void 0) {\n  const n = document.createRange(), i = window.getSelection();\n  n.selectNodeContents(s), t !== void 0 && (n.setStart(s, t), n.setEnd(s, t)), n.collapse(e), i.removeAllRanges(), i.addRange(n);\n}\nElement.prototype.matches || (Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector);\nElement.prototype.closest || (Element.prototype.closest = function(s) {\n  let e = this;\n  if (!document.documentElement.contains(e))\n    return null;\n  do {\n    if (e.matches(s))\n      return e;\n    e = e.parentElement || e.parentNode;\n  } while (e !== null && e.nodeType === 1);\n  return null;\n});\nclass f {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: g,\n      title: \"Checklist\"\n    };\n  }\n  /**\n   * Allow Checkbox Tool to be converted to/from other block\n   *\n   * @returns {{export: Function, import: Function}}\n   */\n  static get conversionConfig() {\n    return {\n      /**\n       * To create exported string from the checkbox, concatenate items by dot-symbol.\n       *\n       * @param {ChecklistData} data - checklist data to create a string from that\n       * @returns {string}\n       */\n      export: (e) => e.items.map(({ text: t }) => t).join(\". \"),\n      /**\n       * To create a checklist from other block's string, just put it at the first item\n       *\n       * @param {string} string - string to create list tool data from that\n       * @returns {ChecklistData}\n       */\n      import: (e) => ({\n        items: [\n          {\n            text: e,\n            checked: !1\n          }\n        ]\n      })\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} options - block constructor options\n   * @param {ChecklistData} options.data - previously saved data\n   * @param {object} options.config - user config for Tool\n   * @param {object} options.api - Editor.js API\n   * @param {boolean} options.readOnly - read only mode flag\n   */\n  constructor({ data: e, config: t, api: n, readOnly: i }) {\n    this._elements = {\n      wrapper: null,\n      items: []\n    }, this.readOnly = i, this.api = n, this.data = e || {};\n  }\n  /**\n   * Returns checklist tag with items\n   *\n   * @returns {Element}\n   */\n  render() {\n    return this._elements.wrapper = c(\"div\", [this.CSS.baseBlock, this.CSS.wrapper]), this.data.items || (this.data.items = [\n      {\n        text: \"\",\n        checked: !1\n      }\n    ]), this.data.items.forEach((e) => {\n      const t = this.createChecklistItem(e);\n      this._elements.wrapper.appendChild(t);\n    }), this.readOnly ? this._elements.wrapper : (this._elements.wrapper.addEventListener(\"keydown\", (e) => {\n      const [t, n] = [13, 8];\n      switch (e.keyCode) {\n        case t:\n          this.enterPressed(e);\n          break;\n        case n:\n          this.backspace(e);\n          break;\n      }\n    }, !1), this._elements.wrapper.addEventListener(\"click\", (e) => {\n      this.toggleCheckbox(e);\n    }), this._elements.wrapper);\n  }\n  /**\n   * Return Checklist data\n   *\n   * @returns {ChecklistData}\n   */\n  save() {\n    let e = this.items.map((t) => {\n      const n = this.getItemInput(t);\n      return {\n        text: m(n),\n        checked: t.classList.contains(this.CSS.itemChecked)\n      };\n    });\n    return e = e.filter((t) => t.text.trim().length !== 0), {\n      items: e\n    };\n  }\n  /**\n   * Validate data: check if Checklist has items\n   *\n   * @param {ChecklistData} savedData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return !!e.items.length;\n  }\n  /**\n   * Toggle checklist item state\n   *\n   * @param {MouseEvent} event - click\n   * @returns {void}\n   */\n  toggleCheckbox(e) {\n    const t = e.target.closest(`.${this.CSS.item}`), n = t.querySelector(`.${this.CSS.checkboxContainer}`);\n    n.contains(e.target) && (t.classList.toggle(this.CSS.itemChecked), n.classList.add(this.CSS.noHover), n.addEventListener(\"mouseleave\", () => this.removeSpecialHoverBehavior(n), { once: !0 }));\n  }\n  /**\n   * Create Checklist items\n   *\n   * @param {ChecklistItem} item - data.item\n   * @returns {Element} checkListItem - new element of checklist\n   */\n  createChecklistItem(e = {}) {\n    const t = c(\"div\", this.CSS.item), n = c(\"span\", this.CSS.checkbox), i = c(\"div\", this.CSS.checkboxContainer), o = c(\"div\", this.CSS.textField, {\n      innerHTML: e.text ? e.text : \"\",\n      contentEditable: !this.readOnly\n    });\n    return e.checked && t.classList.add(this.CSS.itemChecked), n.innerHTML = k, i.appendChild(n), t.appendChild(i), t.appendChild(o), t;\n  }\n  /**\n   * Append new elements to the list by pressing Enter\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  enterPressed(e) {\n    e.preventDefault();\n    const t = this.items, n = document.activeElement.closest(`.${this.CSS.item}`);\n    if (t.indexOf(n) === t.length - 1 && m(this.getItemInput(n)).length === 0) {\n      const u = this.api.blocks.getCurrentBlockIndex();\n      n.remove(), this.api.blocks.insert(), this.api.caret.setToBlock(u + 1);\n      return;\n    }\n    const a = d(), l = C(a), r = this.createChecklistItem({\n      text: l,\n      checked: !1\n    });\n    this._elements.wrapper.insertBefore(r, n.nextSibling), p(this.getItemInput(r), !0);\n  }\n  /**\n   * Handle backspace\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  backspace(e) {\n    const t = e.target.closest(`.${this.CSS.item}`), n = this.items.indexOf(t), i = this.items[n - 1];\n    if (!i || !(window.getSelection().focusOffset === 0))\n      return;\n    e.preventDefault();\n    const l = d(), r = this.getItemInput(i), h = r.childNodes.length;\n    r.appendChild(l), p(r, void 0, h), t.remove();\n  }\n  /**\n   * Styles\n   *\n   * @private\n   * @returns {object<string>}\n   */\n  get CSS() {\n    return {\n      baseBlock: this.api.styles.block,\n      wrapper: \"cdx-checklist\",\n      item: \"cdx-checklist__item\",\n      itemChecked: \"cdx-checklist__item--checked\",\n      noHover: \"cdx-checklist__item-checkbox--no-hover\",\n      checkbox: \"cdx-checklist__item-checkbox-check\",\n      textField: \"cdx-checklist__item-text\",\n      checkboxContainer: \"cdx-checklist__item-checkbox\"\n    };\n  }\n  /**\n   * Return all items elements\n   *\n   * @returns {Element[]}\n   */\n  get items() {\n    return Array.from(this._elements.wrapper.querySelectorAll(`.${this.CSS.item}`));\n  }\n  /**\n   * Removes class responsible for special hover behavior on an item\n   * \n   * @private\n   * @param {Element} el - item wrapper\n   * @returns {Element}\n   */\n  removeSpecialHoverBehavior(e) {\n    e.classList.remove(this.CSS.noHover);\n  }\n  /**\n   * Find and return item's content editable element\n   *\n   * @private\n   * @param {Element} el - item wrapper\n   * @returns {Element}\n   */\n  getItemInput(e) {\n    return e.querySelector(`.${this.CSS.textField}`);\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/checklist/dist/checklist.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/code/dist/code.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@editorjs/code/dist/code.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ d)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-code__textarea{min-height:200px;font-family:Menlo,Monaco,Consolas,Courier New,monospace;color:#41314e;line-height:1.6em;font-size:12px;background:#f8f7fa;border:1px solid #f1f1f4;box-shadow:none;white-space:pre;word-wrap:normal;overflow-x:auto;resize:vertical}\")),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nfunction l(c, t) {\n  let r = \"\";\n  for (; r !== `\n` && t > 0; )\n    t = t - 1, r = c.substr(t, 1);\n  return r === `\n` && (t += 1), t;\n}\nconst h = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 8L5 12L9 16\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8L19 12L15 16\"/></svg>';\n/**\n * CodeTool for Editor.js\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */\nclass d {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the CodeTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * @typedef {object} CodeData — plugin saved data\n   * @property {string} code - previously saved plugin code\n   */\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} options - tool constricting options\n   * @param {CodeData} options.data — previously saved plugin code\n   * @param {object} options.config - user config for Tool\n   * @param {object} options.api - Editor.js API\n   * @param {boolean} options.readOnly - read only mode flag\n   */\n  constructor({ data: t, config: e, api: r, readOnly: a }) {\n    this.api = r, this.readOnly = a, this.placeholder = this.api.i18n.t(e.placeholder || d.DEFAULT_PLACEHOLDER), this.CSS = {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      wrapper: \"ce-code\",\n      textarea: \"ce-code__textarea\"\n    }, this.nodes = {\n      holder: null,\n      textarea: null\n    }, this.data = {\n      code: t.code || \"\"\n    }, this.nodes.holder = this.drawView();\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLElement}\n   * @private\n   */\n  drawView() {\n    const t = document.createElement(\"div\"), e = document.createElement(\"textarea\");\n    return t.classList.add(this.CSS.baseClass, this.CSS.wrapper), e.classList.add(this.CSS.textarea, this.CSS.input), e.textContent = this.data.code, e.placeholder = this.placeholder, this.readOnly && (e.disabled = !0), t.appendChild(e), e.addEventListener(\"keydown\", (r) => {\n      switch (r.code) {\n        case \"Tab\":\n          this.tabHandler(r);\n          break;\n      }\n    }), this.nodes.textarea = e, t;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement} this.nodes.holder - Code's wrapper\n   * @public\n   */\n  render() {\n    return this.nodes.holder;\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} codeWrapper - CodeTool's wrapper, containing textarea with code\n   * @returns {CodeData} - saved plugin code\n   * @public\n   */\n  save(t) {\n    return {\n      code: t.querySelector(\"textarea\").value\n    };\n  }\n  /**\n   * onPaste callback fired from Editor`s core\n   *\n   * @param {PasteEvent} event - event with pasted content\n   */\n  onPaste(t) {\n    const e = t.detail.data;\n    this.data = {\n      code: e.textContent\n    };\n  }\n  /**\n   * Returns Tool`s data from private property\n   *\n   * @returns {CodeData}\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * Set Tool`s data to private property and update view\n   *\n   * @param {CodeData} data - saved tool data\n   */\n  set data(t) {\n    this._data = t, this.nodes.textarea && (this.nodes.textarea.textContent = t.code);\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: h,\n      title: \"Code\"\n    };\n  }\n  /**\n   * Default placeholder for CodeTool's textarea\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"Enter a code\";\n  }\n  /**\n   *  Used by Editor.js paste handling API.\n   *  Provides configuration to handle CODE tag.\n   *\n   * @static\n   * @returns {{tags: string[]}}\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"pre\"]\n    };\n  }\n  /**\n   * Automatic sanitize config\n   *\n   * @returns {{code: boolean}}\n   */\n  static get sanitize() {\n    return {\n      code: !0\n      // Allow HTML tags\n    };\n  }\n  /**\n   * Handles Tab key pressing (adds/removes indentations)\n   *\n   * @private\n   * @param {KeyboardEvent} event - keydown\n   * @returns {void}\n   */\n  tabHandler(t) {\n    t.stopPropagation(), t.preventDefault();\n    const e = t.target, r = t.shiftKey, a = e.selectionStart, s = e.value, n = \"  \";\n    let i;\n    if (!r)\n      i = a + n.length, e.value = s.substring(0, a) + n + s.substring(a);\n    else {\n      const o = l(s, a);\n      if (s.substr(o, n.length) !== n)\n        return;\n      e.value = s.substring(0, o) + s.substring(o + n.length), i = a - n.length;\n    }\n    e.setSelectionRange(i, i);\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/code/dist/code.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/delimiter/dist/delimiter.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/@editorjs/delimiter/dist/delimiter.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ n)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.ce-delimiter{line-height:1.6em;width:100%;text-align:center}.ce-delimiter:before{display:inline-block;content:\"***\";font-size:30px;line-height:65px;height:30px;letter-spacing:.2em}')),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst r = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"6\" x2=\"10\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"14\" x2=\"18\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>';\n/**\n * Delimiter Block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n * @version 2.0.0\n */\nclass n {\n  /**\n   * Notify core that read-only mode is supported\n   * @return {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow Tool to have no content\n   * @return {boolean}\n   */\n  static get contentless() {\n    return !0;\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {{data: DelimiterData, config: object, api: object}}\n   *   data — previously saved data\n   *   config - user config for Tool\n   *   api - Editor.js API\n   */\n  constructor({ data: t, config: s, api: e }) {\n    this.api = e, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-delimiter\"\n    }, this._element = this.drawView(), this.data = t;\n  }\n  /**\n   * Create Tool's view\n   * @return {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    let t = document.createElement(\"div\");\n    return t.classList.add(this._CSS.wrapper, this._CSS.block), t;\n  }\n  /**\n   * Return Tool's view\n   * @returns {HTMLDivElement}\n   * @public\n   */\n  render() {\n    return this._element;\n  }\n  /**\n   * Extract Tool's data from the view\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {DelimiterData} - saved data\n   * @public\n   */\n  save(t) {\n    return {};\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @return {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: r,\n      title: \"Delimiter\"\n    };\n  }\n  /**\n   * Delimiter onPaste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return { tags: [\"HR\"] };\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(t) {\n    this.data = {};\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2RlbGltaXRlci9kaXN0L2RlbGltaXRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFlBQVksYUFBYSxJQUFJLHdCQUF3QixzQ0FBc0MscURBQXFELGtCQUFrQixXQUFXLGtCQUFrQixxQkFBcUIscUJBQXFCLGNBQWMsZUFBZSxpQkFBaUIsWUFBWSxvQkFBb0Isa0NBQWtDLFNBQVMsbURBQW1EO0FBQ3JaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNEJBQTRCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCLGVBQWUsZUFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZGl0b3Jqc19uZXh0anMvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2RlbGltaXRlci9kaXN0L2RlbGltaXRlci5tanM/NzJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnLmNlLWRlbGltaXRlcntsaW5lLWhlaWdodDoxLjZlbTt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5jZS1kZWxpbWl0ZXI6YmVmb3Jle2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbnRlbnQ6XCIqKipcIjtmb250LXNpemU6MzBweDtsaW5lLWhlaWdodDo2NXB4O2hlaWdodDozMHB4O2xldHRlci1zcGFjaW5nOi4yZW19JykpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZSl9fWNhdGNoKHQpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIix0KX19KSgpO1xuY29uc3QgciA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48bGluZSB4MT1cIjZcIiB4Mj1cIjEwXCIgeTE9XCIxMlwiIHkyPVwiMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48bGluZSB4MT1cIjE0XCIgeDI9XCIxOFwiIHkxPVwiMTJcIiB5Mj1cIjEyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+Jztcbi8qKlxuICogRGVsaW1pdGVyIEJsb2NrIGZvciB0aGUgRWRpdG9yLmpzLlxuICpcbiAqIEBhdXRob3IgQ29kZVggKHRlYW1AaWZtby5zdSlcbiAqIEBjb3B5cmlnaHQgQ29kZVggMjAxOFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKiBAdmVyc2lvbiAyLjAuMFxuICovXG5jbGFzcyBuIHtcbiAgLyoqXG4gICAqIE5vdGlmeSBjb3JlIHRoYXQgcmVhZC1vbmx5IG1vZGUgaXMgc3VwcG9ydGVkXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyBUb29sIHRvIGhhdmUgbm8gY29udGVudFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGdldCBjb250ZW50bGVzcygpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIFJlbmRlciBwbHVnaW5gcyBtYWluIEVsZW1lbnQgYW5kIGZpbGwgaXQgd2l0aCBzYXZlZCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7e2RhdGE6IERlbGltaXRlckRhdGEsIGNvbmZpZzogb2JqZWN0LCBhcGk6IG9iamVjdH19XG4gICAqICAgZGF0YSDigJQgcHJldmlvdXNseSBzYXZlZCBkYXRhXG4gICAqICAgY29uZmlnIC0gdXNlciBjb25maWcgZm9yIFRvb2xcbiAgICogICBhcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IHQsIGNvbmZpZzogcywgYXBpOiBlIH0pIHtcbiAgICB0aGlzLmFwaSA9IGUsIHRoaXMuX0NTUyA9IHtcbiAgICAgIGJsb2NrOiB0aGlzLmFwaS5zdHlsZXMuYmxvY2ssXG4gICAgICB3cmFwcGVyOiBcImNlLWRlbGltaXRlclwiXG4gICAgfSwgdGhpcy5fZWxlbWVudCA9IHRoaXMuZHJhd1ZpZXcoKSwgdGhpcy5kYXRhID0gdDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIFRvb2wncyB2aWV3XG4gICAqIEByZXR1cm4ge0hUTUxEaXZFbGVtZW50fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZHJhd1ZpZXcoKSB7XG4gICAgbGV0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHJldHVybiB0LmNsYXNzTGlzdC5hZGQodGhpcy5fQ1NTLndyYXBwZXIsIHRoaXMuX0NTUy5ibG9jayksIHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBUb29sJ3Mgdmlld1xuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogRXh0cmFjdCBUb29sJ3MgZGF0YSBmcm9tIHRoZSB2aWV3XG4gICAqIEBwYXJhbSB7SFRNTERpdkVsZW1lbnR9IHRvb2xzQ29udGVudCAtIFBhcmFncmFwaCB0b29scyByZW5kZXJlZCB2aWV3XG4gICAqIEByZXR1cm5zIHtEZWxpbWl0ZXJEYXRhfSAtIHNhdmVkIGRhdGFcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2F2ZSh0KSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIC8qKlxuICAgKiBHZXQgVG9vbCB0b29sYm94IHNldHRpbmdzXG4gICAqIGljb24gLSBUb29sIGljb24ncyBTVkdcbiAgICogdGl0bGUgLSB0aXRsZSB0byBzaG93IGluIHRvb2xib3hcbiAgICpcbiAgICogQHJldHVybiB7e2ljb246IHN0cmluZywgdGl0bGU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRvb2xib3goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IHIsXG4gICAgICB0aXRsZTogXCJEZWxpbWl0ZXJcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERlbGltaXRlciBvblBhc3RlIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4geyB0YWdzOiBbXCJIUlwiXSB9O1xuICB9XG4gIC8qKlxuICAgKiBPbiBwYXN0ZSBjYWxsYmFjayB0aGF0IGlzIGZpcmVkIGZyb20gRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudH0gZXZlbnQgLSBldmVudCB3aXRoIHBhc3RlZCBkYXRhXG4gICAqL1xuICBvblBhc3RlKHQpIHtcbiAgICB0aGlzLmRhdGEgPSB7fTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgbiBhcyBkZWZhdWx0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/delimiter/dist/delimiter.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/editorjs/dist/editorjs.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@editorjs/editorjs/dist/editorjs.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ts)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-hint--align-start{text-align:left}.ce-hint--align-center{text-align:center}.ce-hint__description{opacity:.6;margin-top:3px}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nvar ko = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction Fe(n) {\n  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, \"default\") ? n.default : n;\n}\nfunction ze() {\n}\nObject.assign(ze, {\n  default: ze,\n  register: ze,\n  revert: function() {\n  },\n  __esModule: !0\n});\nElement.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(n) {\n  const e = (this.document || this.ownerDocument).querySelectorAll(n);\n  let t = e.length;\n  for (; --t >= 0 && e.item(t) !== this; )\n    ;\n  return t > -1;\n});\nElement.prototype.closest || (Element.prototype.closest = function(n) {\n  let e = this;\n  if (!document.documentElement.contains(e))\n    return null;\n  do {\n    if (e.matches(n))\n      return e;\n    e = e.parentElement || e.parentNode;\n  } while (e !== null);\n  return null;\n});\nElement.prototype.prepend || (Element.prototype.prepend = function(e) {\n  const t = document.createDocumentFragment();\n  Array.isArray(e) || (e = [e]), e.forEach((o) => {\n    const i = o instanceof Node;\n    t.appendChild(i ? o : document.createTextNode(o));\n  }), this.insertBefore(t, this.firstChild);\n});\nElement.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function(n) {\n  n = arguments.length === 0 ? !0 : !!n;\n  const e = this.parentNode, t = window.getComputedStyle(e, null), o = parseInt(t.getPropertyValue(\"border-top-width\")), i = parseInt(t.getPropertyValue(\"border-left-width\")), s = this.offsetTop - e.offsetTop < e.scrollTop, r = this.offsetTop - e.offsetTop + this.clientHeight - o > e.scrollTop + e.clientHeight, l = this.offsetLeft - e.offsetLeft < e.scrollLeft, a = this.offsetLeft - e.offsetLeft + this.clientWidth - i > e.scrollLeft + e.clientWidth, c = s && !r;\n  (s || r) && n && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - o + this.clientHeight / 2), (l || a) && n && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - i + this.clientWidth / 2), (s || r || l || a) && !n && this.scrollIntoView(c);\n});\nwindow.requestIdleCallback = window.requestIdleCallback || function(n) {\n  const e = Date.now();\n  return setTimeout(function() {\n    n({\n      didTimeout: !1,\n      timeRemaining: function() {\n        return Math.max(0, 50 - (Date.now() - e));\n      }\n    });\n  }, 1);\n};\nwindow.cancelIdleCallback = window.cancelIdleCallback || function(n) {\n  clearTimeout(n);\n};\nlet vo = (n = 21) => crypto.getRandomValues(new Uint8Array(n)).reduce((e, t) => (t &= 63, t < 36 ? e += t.toString(36) : t < 62 ? e += (t - 26).toString(36).toUpperCase() : t > 62 ? e += \"-\" : e += \"_\", e), \"\");\nvar St = /* @__PURE__ */ ((n) => (n.VERBOSE = \"VERBOSE\", n.INFO = \"INFO\", n.WARN = \"WARN\", n.ERROR = \"ERROR\", n))(St || {});\nconst w = {\n  BACKSPACE: 8,\n  TAB: 9,\n  ENTER: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESC: 27,\n  SPACE: 32,\n  LEFT: 37,\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  DELETE: 46,\n  META: 91,\n  SLASH: 191\n}, wo = {\n  LEFT: 0,\n  WHEEL: 1,\n  RIGHT: 2,\n  BACKWARD: 3,\n  FORWARD: 4\n};\nfunction Be(n, e, t = \"log\", o, i = \"color: inherit\") {\n  if (!(\"console\" in window) || !window.console[t])\n    return;\n  const s = [\"info\", \"log\", \"warn\", \"error\"].includes(t), r = [];\n  switch (Be.logLevel) {\n    case \"ERROR\":\n      if (t !== \"error\")\n        return;\n      break;\n    case \"WARN\":\n      if (![\"error\", \"warn\"].includes(t))\n        return;\n      break;\n    case \"INFO\":\n      if (!s || n)\n        return;\n      break;\n  }\n  o && r.push(o);\n  const l = \"Editor.js 2.30.5\", a = `line-height: 1em;\n            color: #006FEA;\n            display: inline-block;\n            font-size: 11px;\n            line-height: 1em;\n            background-color: #fff;\n            padding: 4px 9px;\n            border-radius: 30px;\n            border: 1px solid rgba(56, 138, 229, 0.16);\n            margin: 4px 5px 4px 0;`;\n  n && (s ? (r.unshift(a, i), e = `%c${l}%c ${e}`) : e = `( ${l} )${e}`);\n  try {\n    s ? o ? console[t](`${e} %o`, ...r) : console[t](e, ...r) : console[t](e);\n  } catch {\n  }\n}\nBe.logLevel = \"VERBOSE\";\nfunction xo(n) {\n  Be.logLevel = n;\n}\nconst I = Be.bind(window, !1), X = Be.bind(window, !0);\nfunction re(n) {\n  return Object.prototype.toString.call(n).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\n}\nfunction O(n) {\n  return re(n) === \"function\" || re(n) === \"asyncfunction\";\n}\nfunction R(n) {\n  return re(n) === \"object\";\n}\nfunction Q(n) {\n  return re(n) === \"string\";\n}\nfunction yo(n) {\n  return re(n) === \"boolean\";\n}\nfunction mt(n) {\n  return re(n) === \"number\";\n}\nfunction bt(n) {\n  return re(n) === \"undefined\";\n}\nfunction V(n) {\n  return n ? Object.keys(n).length === 0 && n.constructor === Object : !0;\n}\nfunction It(n) {\n  return n > 47 && n < 58 || // number keys\n  n === 32 || n === 13 || // Space bar & return key(s)\n  n === 229 || // processing key input for certain languages — Chinese, Japanese, etc.\n  n > 64 && n < 91 || // letter keys\n  n > 95 && n < 112 || // Numpad keys\n  n > 185 && n < 193 || // ;=,-./` (in order)\n  n > 218 && n < 223;\n}\nasync function Eo(n, e = () => {\n}, t = () => {\n}) {\n  async function o(i, s, r) {\n    try {\n      await i.function(i.data), await s(bt(i.data) ? {} : i.data);\n    } catch {\n      r(bt(i.data) ? {} : i.data);\n    }\n  }\n  return n.reduce(async (i, s) => (await i, o(s, e, t)), Promise.resolve());\n}\nfunction Mt(n) {\n  return Array.prototype.slice.call(n);\n}\nfunction Oe(n, e) {\n  return function() {\n    const t = this, o = arguments;\n    window.setTimeout(() => n.apply(t, o), e);\n  };\n}\nfunction Bo(n) {\n  return n.name.split(\".\").pop();\n}\nfunction To(n) {\n  return /^[-\\w]+\\/([-+\\w]+|\\*)$/.test(n);\n}\nfunction kt(n, e, t) {\n  let o;\n  return (...i) => {\n    const s = this, r = () => {\n      o = null, t || n.apply(s, i);\n    }, l = t && !o;\n    window.clearTimeout(o), o = window.setTimeout(r, e), l && n.apply(s, i);\n  };\n}\nfunction Ve(n, e, t = void 0) {\n  let o, i, s, r = null, l = 0;\n  t || (t = {});\n  const a = function() {\n    l = t.leading === !1 ? 0 : Date.now(), r = null, s = n.apply(o, i), r || (o = i = null);\n  };\n  return function() {\n    const c = Date.now();\n    !l && t.leading === !1 && (l = c);\n    const u = e - (c - l);\n    return o = this, i = arguments, u <= 0 || u > e ? (r && (clearTimeout(r), r = null), l = c, s = n.apply(o, i), r || (o = i = null)) : !r && t.trailing !== !1 && (r = setTimeout(a, u)), s;\n  };\n}\nfunction Co() {\n  const n = {\n    win: !1,\n    mac: !1,\n    x11: !1,\n    linux: !1\n  }, e = Object.keys(n).find((t) => window.navigator.appVersion.toLowerCase().indexOf(t) !== -1);\n  return e && (n[e] = !0), n;\n}\nfunction Le(n) {\n  return n[0].toUpperCase() + n.slice(1);\n}\nfunction qe(n, ...e) {\n  if (!e.length)\n    return n;\n  const t = e.shift();\n  if (R(n) && R(t))\n    for (const o in t)\n      R(t[o]) ? (n[o] || Object.assign(n, { [o]: {} }), qe(n[o], t[o])) : Object.assign(n, { [o]: t[o] });\n  return qe(n, ...e);\n}\nfunction et(n) {\n  const e = Co();\n  return n = n.replace(/shift/gi, \"⇧\").replace(/backspace/gi, \"⌫\").replace(/enter/gi, \"⏎\").replace(/up/gi, \"↑\").replace(/left/gi, \"→\").replace(/down/gi, \"↓\").replace(/right/gi, \"←\").replace(/escape/gi, \"⎋\").replace(/insert/gi, \"Ins\").replace(/delete/gi, \"␡\").replace(/\\+/gi, \" + \"), e.mac ? n = n.replace(/ctrl|cmd/gi, \"⌘\").replace(/alt/gi, \"⌥\") : n = n.replace(/cmd/gi, \"Ctrl\").replace(/windows/gi, \"WIN\"), n;\n}\nfunction So(n) {\n  try {\n    return new URL(n).href;\n  } catch {\n  }\n  return n.substring(0, 2) === \"//\" ? window.location.protocol + n : window.location.origin + n;\n}\nfunction Io() {\n  return vo(10);\n}\nfunction Mo(n) {\n  window.open(n, \"_blank\");\n}\nfunction Ao(n = \"\") {\n  return `${n}${Math.floor(Math.random() * 1e8).toString(16)}`;\n}\nfunction Ze(n, e, t) {\n  const o = `«${e}» is deprecated and will be removed in the next major release. Please use the «${t}» instead.`;\n  n && X(o, \"warn\");\n}\nfunction ue(n, e, t) {\n  const o = t.value ? \"value\" : \"get\", i = t[o], s = `#${e}Cache`;\n  if (t[o] = function(...r) {\n    return this[s] === void 0 && (this[s] = i.apply(this, ...r)), this[s];\n  }, o === \"get\" && t.set) {\n    const r = t.set;\n    t.set = function(l) {\n      delete n[s], r.apply(this, l);\n    };\n  }\n  return t;\n}\nconst At = 650;\nfunction pe() {\n  return window.matchMedia(`(max-width: ${At}px)`).matches;\n}\nconst Ge = typeof window < \"u\" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === \"MacIntel\" && window.navigator.maxTouchPoints > 1);\nfunction Oo(n, e) {\n  const t = Array.isArray(n) || R(n), o = Array.isArray(e) || R(e);\n  return t || o ? JSON.stringify(n) === JSON.stringify(e) : n === e;\n}\nclass d {\n  /**\n   * Check if passed tag has no closed tag\n   *\n   * @param {HTMLElement} tag - element to check\n   * @returns {boolean}\n   */\n  static isSingleTag(e) {\n    return e.tagName && [\n      \"AREA\",\n      \"BASE\",\n      \"BR\",\n      \"COL\",\n      \"COMMAND\",\n      \"EMBED\",\n      \"HR\",\n      \"IMG\",\n      \"INPUT\",\n      \"KEYGEN\",\n      \"LINK\",\n      \"META\",\n      \"PARAM\",\n      \"SOURCE\",\n      \"TRACK\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Check if element is BR or WBR\n   *\n   * @param {HTMLElement} element - element to check\n   * @returns {boolean}\n   */\n  static isLineBreakTag(e) {\n    return e && e.tagName && [\n      \"BR\",\n      \"WBR\"\n    ].includes(e.tagName);\n  }\n  /**\n   * Helper for making Elements with class name and attributes\n   *\n   * @param  {string} tagName - new Element tag name\n   * @param  {string[]|string} [classNames] - list or name of CSS class name(s)\n   * @param  {object} [attributes] - any attributes\n   * @returns {HTMLElement}\n   */\n  static make(e, t = null, o = {}) {\n    const i = document.createElement(e);\n    if (Array.isArray(t)) {\n      const s = t.filter((r) => r !== void 0);\n      i.classList.add(...s);\n    } else\n      t && i.classList.add(t);\n    for (const s in o)\n      Object.prototype.hasOwnProperty.call(o, s) && (i[s] = o[s]);\n    return i;\n  }\n  /**\n   * Creates Text Node with the passed content\n   *\n   * @param {string} content - text content\n   * @returns {Text}\n   */\n  static text(e) {\n    return document.createTextNode(e);\n  }\n  /**\n   * Append one or several elements to the parent\n   *\n   * @param  {Element|DocumentFragment} parent - where to append\n   * @param  {Element|Element[]|DocumentFragment|Text|Text[]} elements - element or elements list\n   */\n  static append(e, t) {\n    Array.isArray(t) ? t.forEach((o) => e.appendChild(o)) : e.appendChild(t);\n  }\n  /**\n   * Append element or a couple to the beginning of the parent elements\n   *\n   * @param {Element} parent - where to append\n   * @param {Element|Element[]} elements - element or elements list\n   */\n  static prepend(e, t) {\n    Array.isArray(t) ? (t = t.reverse(), t.forEach((o) => e.prepend(o))) : e.prepend(t);\n  }\n  /**\n   * Swap two elements in parent\n   *\n   * @param {HTMLElement} el1 - from\n   * @param {HTMLElement} el2 - to\n   * @deprecated\n   */\n  static swap(e, t) {\n    const o = document.createElement(\"div\"), i = e.parentNode;\n    i.insertBefore(o, e), i.insertBefore(e, t), i.insertBefore(t, o), i.removeChild(o);\n  }\n  /**\n   * Selector Decorator\n   *\n   * Returns first match\n   *\n   * @param {Element} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {Element}\n   */\n  static find(e = document, t) {\n    return e.querySelector(t);\n  }\n  /**\n   * Get Element by Id\n   *\n   * @param {string} id - id to find\n   * @returns {HTMLElement | null}\n   */\n  static get(e) {\n    return document.getElementById(e);\n  }\n  /**\n   * Selector Decorator.\n   *\n   * Returns all matches\n   *\n   * @param {Element|Document} el - element we searching inside. Default - DOM Document\n   * @param {string} selector - searching string\n   * @returns {NodeList}\n   */\n  static findAll(e = document, t) {\n    return e.querySelectorAll(t);\n  }\n  /**\n   * Returns CSS selector for all text inputs\n   */\n  static get allInputsSelector() {\n    return \"[contenteditable=true], textarea, input:not([type]), \" + [\"text\", \"password\", \"email\", \"number\", \"search\", \"tel\", \"url\"].map((t) => `input[type=\"${t}\"]`).join(\", \");\n  }\n  /**\n   * Find all contenteditable, textarea and editable input elements passed holder contains\n   *\n   * @param holder - element where to find inputs\n   */\n  static findAllInputs(e) {\n    return Mt(e.querySelectorAll(d.allInputsSelector)).reduce((t, o) => d.isNativeInput(o) || d.containsOnlyInlineElements(o) ? [...t, o] : [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Search for deepest node which is Leaf.\n   * Leaf is the vertex that doesn't have any child nodes\n   *\n   * @description Method recursively goes throw the all Node until it finds the Leaf\n   * @param {Node} node - root Node. From this vertex we start Deep-first search\n   *                      {@link https://en.wikipedia.org/wiki/Depth-first_search}\n   * @param {boolean} [atLast] - find last text node\n   * @returns - it can be text Node or Element Node, so that caret will able to work with it\n   *            Can return null if node is Document or DocumentFragment, or node is not attached to the DOM\n   */\n  static getDeepestNode(e, t = !1) {\n    const o = t ? \"lastChild\" : \"firstChild\", i = t ? \"previousSibling\" : \"nextSibling\";\n    if (e && e.nodeType === Node.ELEMENT_NODE && e[o]) {\n      let s = e[o];\n      if (d.isSingleTag(s) && !d.isNativeInput(s) && !d.isLineBreakTag(s))\n        if (s[i])\n          s = s[i];\n        else if (s.parentNode[i])\n          s = s.parentNode[i];\n        else\n          return s.parentNode;\n      return this.getDeepestNode(s, t);\n    }\n    return e;\n  }\n  /**\n   * Check if object is DOM node\n   *\n   * @param {*} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isElement(e) {\n    return mt(e) ? !1 : e && e.nodeType && e.nodeType === Node.ELEMENT_NODE;\n  }\n  /**\n   * Check if object is DocumentFragment node\n   *\n   * @param {object} node - object to check\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isFragment(e) {\n    return mt(e) ? !1 : e && e.nodeType && e.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n  }\n  /**\n   * Check if passed element is contenteditable\n   *\n   * @param {HTMLElement} element - html element to check\n   * @returns {boolean}\n   */\n  static isContentEditable(e) {\n    return e.contentEditable === \"true\";\n  }\n  /**\n   * Checks target if it is native input\n   *\n   * @param {*} target - HTML element or string\n   * @returns {boolean}\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static isNativeInput(e) {\n    const t = [\n      \"INPUT\",\n      \"TEXTAREA\"\n    ];\n    return e && e.tagName ? t.includes(e.tagName) : !1;\n  }\n  /**\n   * Checks if we can set caret\n   *\n   * @param {HTMLElement} target - target to check\n   * @returns {boolean}\n   */\n  static canSetCaret(e) {\n    let t = !0;\n    if (d.isNativeInput(e))\n      switch (e.type) {\n        case \"file\":\n        case \"checkbox\":\n        case \"radio\":\n        case \"hidden\":\n        case \"submit\":\n        case \"button\":\n        case \"image\":\n        case \"reset\":\n          t = !1;\n          break;\n      }\n    else\n      t = d.isContentEditable(e);\n    return t;\n  }\n  /**\n   * Checks node if it is empty\n   *\n   * @description Method checks simple Node without any childs for emptiness\n   * If you have Node with 2 or more children id depth, you better use {@link Dom#isEmpty} method\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean} true if it is empty\n   */\n  static isNodeEmpty(e, t) {\n    let o;\n    return this.isSingleTag(e) && !this.isLineBreakTag(e) ? !1 : (this.isElement(e) && this.isNativeInput(e) ? o = e.value : o = e.textContent.replace(\"​\", \"\"), t && (o = o.replace(new RegExp(t, \"g\"), \"\")), o.trim().length === 0);\n  }\n  /**\n   * checks node if it is doesn't have any child nodes\n   *\n   * @param {Node} node - node to check\n   * @returns {boolean}\n   */\n  static isLeaf(e) {\n    return e ? e.childNodes.length === 0 : !1;\n  }\n  /**\n   * breadth-first search (BFS)\n   * {@link https://en.wikipedia.org/wiki/Breadth-first_search}\n   *\n   * @description Pushes to stack all DOM leafs and checks for emptiness\n   * @param {Node} node - node to check\n   * @param {string} [ignoreChars] - char or substring to treat as empty\n   * @returns {boolean}\n   */\n  static isEmpty(e, t) {\n    e.normalize();\n    const o = [e];\n    for (; o.length > 0; )\n      if (e = o.shift(), !!e) {\n        if (this.isLeaf(e) && !this.isNodeEmpty(e, t))\n          return !1;\n        e.childNodes && o.push(...Array.from(e.childNodes));\n      }\n    return !0;\n  }\n  /**\n   * Check if string contains html elements\n   *\n   * @param {string} str - string to check\n   * @returns {boolean}\n   */\n  static isHTMLString(e) {\n    const t = d.make(\"div\");\n    return t.innerHTML = e, t.childElementCount > 0;\n  }\n  /**\n   * Return length of node`s text content\n   *\n   * @param {Node} node - node with content\n   * @returns {number}\n   */\n  static getContentLength(e) {\n    return d.isNativeInput(e) ? e.value.length : e.nodeType === Node.TEXT_NODE ? e.length : e.textContent.length;\n  }\n  /**\n   * Return array of names of block html elements\n   *\n   * @returns {string[]}\n   */\n  static get blockElements() {\n    return [\n      \"address\",\n      \"article\",\n      \"aside\",\n      \"blockquote\",\n      \"canvas\",\n      \"div\",\n      \"dl\",\n      \"dt\",\n      \"fieldset\",\n      \"figcaption\",\n      \"figure\",\n      \"footer\",\n      \"form\",\n      \"h1\",\n      \"h2\",\n      \"h3\",\n      \"h4\",\n      \"h5\",\n      \"h6\",\n      \"header\",\n      \"hgroup\",\n      \"hr\",\n      \"li\",\n      \"main\",\n      \"nav\",\n      \"noscript\",\n      \"ol\",\n      \"output\",\n      \"p\",\n      \"pre\",\n      \"ruby\",\n      \"section\",\n      \"table\",\n      \"tbody\",\n      \"thead\",\n      \"tr\",\n      \"tfoot\",\n      \"ul\",\n      \"video\"\n    ];\n  }\n  /**\n   * Check if passed content includes only inline elements\n   *\n   * @param {string|HTMLElement} data - element or html string\n   * @returns {boolean}\n   */\n  static containsOnlyInlineElements(e) {\n    let t;\n    Q(e) ? (t = document.createElement(\"div\"), t.innerHTML = e) : t = e;\n    const o = (i) => !d.blockElements.includes(i.tagName.toLowerCase()) && Array.from(i.children).every(o);\n    return Array.from(t.children).every(o);\n  }\n  /**\n   * Find and return all block elements in the passed parent (including subtree)\n   *\n   * @param {HTMLElement} parent - root element\n   * @returns {HTMLElement[]}\n   */\n  static getDeepestBlockElements(e) {\n    return d.containsOnlyInlineElements(e) ? [e] : Array.from(e.children).reduce((t, o) => [...t, ...d.getDeepestBlockElements(o)], []);\n  }\n  /**\n   * Helper for get holder from {string} or return HTMLElement\n   *\n   * @param {string | HTMLElement} element - holder's id or holder's HTML Element\n   * @returns {HTMLElement}\n   */\n  static getHolder(e) {\n    return Q(e) ? document.getElementById(e) : e;\n  }\n  /**\n   * Returns true if element is anchor (is A tag)\n   *\n   * @param {Element} element - element to check\n   * @returns {boolean}\n   */\n  static isAnchor(e) {\n    return e.tagName.toLowerCase() === \"a\";\n  }\n  /**\n   * Return element's offset related to the document\n   *\n   * @todo handle case when editor initialized in scrollable popup\n   * @param el - element to compute offset\n   */\n  static offset(e) {\n    const t = e.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, i = window.pageYOffset || document.documentElement.scrollTop, s = t.top + i, r = t.left + o;\n    return {\n      top: s,\n      left: r,\n      bottom: s + t.height,\n      right: r + t.width\n    };\n  }\n}\nfunction Lo(n) {\n  return !/[^\\t\\n\\r ]/.test(n);\n}\nfunction _o(n) {\n  const e = window.getComputedStyle(n), t = parseFloat(e.fontSize), o = parseFloat(e.lineHeight) || t * 1.2, i = parseFloat(e.paddingTop), s = parseFloat(e.borderTopWidth), r = parseFloat(e.marginTop), l = t * 0.8, a = (o - t) / 2;\n  return r + s + i + a + l;\n}\nfunction Ot(n) {\n  n.dataset.empty = d.isEmpty(n) ? \"true\" : \"false\";\n}\nconst No = {\n  blockTunes: {\n    toggler: {\n      \"Click to tune\": \"\",\n      \"or drag to move\": \"\"\n    }\n  },\n  inlineToolbar: {\n    converter: {\n      \"Convert to\": \"\"\n    }\n  },\n  toolbar: {\n    toolbox: {\n      Add: \"\"\n    }\n  },\n  popover: {\n    Filter: \"\",\n    \"Nothing found\": \"\",\n    \"Convert to\": \"\"\n  }\n}, Po = {\n  Text: \"\",\n  Link: \"\",\n  Bold: \"\",\n  Italic: \"\"\n}, Do = {\n  link: {\n    \"Add a link\": \"\"\n  },\n  stub: {\n    \"The block can not be displayed correctly.\": \"\"\n  }\n}, Ro = {\n  delete: {\n    Delete: \"\",\n    \"Click to delete\": \"\"\n  },\n  moveUp: {\n    \"Move up\": \"\"\n  },\n  moveDown: {\n    \"Move down\": \"\"\n  }\n}, Lt = {\n  ui: No,\n  toolNames: Po,\n  tools: Do,\n  blockTunes: Ro\n}, _t = class ae {\n  /**\n   * Type-safe translation for internal UI texts:\n   * Perform translation of the string by namespace and a key\n   *\n   * @example I18n.ui(I18nInternalNS.ui.blockTunes.toggler, 'Click to tune')\n   * @param internalNamespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static ui(e, t) {\n    return ae._t(e, t);\n  }\n  /**\n   * Translate for external strings that is not presented in default dictionary.\n   * For example, for user-specified tool names\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static t(e, t) {\n    return ae._t(e, t);\n  }\n  /**\n   * Adjust module for using external dictionary\n   *\n   * @param dictionary - new messages list to override default\n   */\n  static setDictionary(e) {\n    ae.currentDictionary = e;\n  }\n  /**\n   * Perform translation both for internal and external namespaces\n   * If there is no translation found, returns passed key as a translated message\n   *\n   * @param namespace - path to translated string in dictionary\n   * @param dictKey - dictionary key. Better to use default locale original text\n   */\n  static _t(e, t) {\n    const o = ae.getNamespace(e);\n    return !o || !o[t] ? t : o[t];\n  }\n  /**\n   * Find messages section by namespace path\n   *\n   * @param namespace - path to section\n   */\n  static getNamespace(e) {\n    return e.split(\".\").reduce((o, i) => !o || !Object.keys(o).length ? {} : o[i], ae.currentDictionary);\n  }\n};\n_t.currentDictionary = Lt;\nlet z = _t;\nclass Nt extends Error {\n}\nclass Te {\n  constructor() {\n    this.subscribers = {};\n  }\n  /**\n   * Subscribe any event on callback\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  on(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []), this.subscribers[e].push(t);\n  }\n  /**\n   * Subscribe any event on callback. Callback will be called once and be removed from subscribers array after call.\n   *\n   * @param eventName - event name\n   * @param callback - subscriber\n   */\n  once(e, t) {\n    e in this.subscribers || (this.subscribers[e] = []);\n    const o = (i) => {\n      const s = t(i), r = this.subscribers[e].indexOf(o);\n      return r !== -1 && this.subscribers[e].splice(r, 1), s;\n    };\n    this.subscribers[e].push(o);\n  }\n  /**\n   * Emit callbacks with passed data\n   *\n   * @param eventName - event name\n   * @param data - subscribers get this data when they were fired\n   */\n  emit(e, t) {\n    V(this.subscribers) || !this.subscribers[e] || this.subscribers[e].reduce((o, i) => {\n      const s = i(o);\n      return s !== void 0 ? s : o;\n    }, t);\n  }\n  /**\n   * Unsubscribe callback from event\n   *\n   * @param eventName - event name\n   * @param callback - event handler\n   */\n  off(e, t) {\n    if (this.subscribers[e] === void 0) {\n      console.warn(`EventDispatcher .off(): there is no subscribers for event \"${e.toString()}\". Probably, .off() called before .on()`);\n      return;\n    }\n    for (let o = 0; o < this.subscribers[e].length; o++)\n      if (this.subscribers[e][o] === t) {\n        delete this.subscribers[e][o];\n        break;\n      }\n  }\n  /**\n   * Destroyer\n   * clears subscribers list\n   */\n  destroy() {\n    this.subscribers = {};\n  }\n}\nfunction G(n) {\n  Object.setPrototypeOf(this, {\n    /**\n     * Block id\n     *\n     * @returns {string}\n     */\n    get id() {\n      return n.id;\n    },\n    /**\n     * Tool name\n     *\n     * @returns {string}\n     */\n    get name() {\n      return n.name;\n    },\n    /**\n     * Tool config passed on Editor's initialization\n     *\n     * @returns {ToolConfig}\n     */\n    get config() {\n      return n.config;\n    },\n    /**\n     * .ce-block element, that wraps plugin contents\n     *\n     * @returns {HTMLElement}\n     */\n    get holder() {\n      return n.holder;\n    },\n    /**\n     * True if Block content is empty\n     *\n     * @returns {boolean}\n     */\n    get isEmpty() {\n      return n.isEmpty;\n    },\n    /**\n     * True if Block is selected with Cross-Block selection\n     *\n     * @returns {boolean}\n     */\n    get selected() {\n      return n.selected;\n    },\n    /**\n     * Set Block's stretch state\n     *\n     * @param {boolean} state — state to set\n     */\n    set stretched(t) {\n      n.stretched = t;\n    },\n    /**\n     * True if Block is stretched\n     *\n     * @returns {boolean}\n     */\n    get stretched() {\n      return n.stretched;\n    },\n    /**\n     * True if Block has inputs to be focused\n     */\n    get focusable() {\n      return n.focusable;\n    },\n    /**\n     * Call Tool method with errors handler under-the-hood\n     *\n     * @param {string} methodName - method to call\n     * @param {object} param - object with parameters\n     * @returns {unknown}\n     */\n    call(t, o) {\n      return n.call(t, o);\n    },\n    /**\n     * Save Block content\n     *\n     * @returns {Promise<void|SavedData>}\n     */\n    save() {\n      return n.save();\n    },\n    /**\n     * Validate Block data\n     *\n     * @param {BlockToolData} data - data to validate\n     * @returns {Promise<boolean>}\n     */\n    validate(t) {\n      return n.validate(t);\n    },\n    /**\n     * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n     * Can be useful for block changes invisible for editor core.\n     */\n    dispatchChange() {\n      n.dispatchChange();\n    },\n    /**\n     * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n     * This method returns the entry that is related to the Block (depended on the Block data)\n     */\n    getActiveToolboxEntry() {\n      return n.getActiveToolboxEntry();\n    }\n  });\n}\nclass Ce {\n  constructor() {\n    this.allListeners = [];\n  }\n  /**\n   * Assigns event listener on element and returns unique identifier\n   *\n   * @param {EventTarget} element - DOM element that needs to be listened\n   * @param {string} eventType - event type\n   * @param {Function} handler - method that will be fired on event\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  on(e, t, o, i = !1) {\n    const s = Ao(\"l\"), r = {\n      id: s,\n      element: e,\n      eventType: t,\n      handler: o,\n      options: i\n    };\n    if (!this.findOne(e, t, o))\n      return this.allListeners.push(r), e.addEventListener(t, o, i), s;\n  }\n  /**\n   * Removes event listener from element\n   *\n   * @param {EventTarget} element - DOM element that we removing listener\n   * @param {string} eventType - event type\n   * @param {Function} handler - remove handler, if element listens several handlers on the same event type\n   * @param {boolean|AddEventListenerOptions} options - useCapture or {capture, passive, once}\n   */\n  off(e, t, o, i) {\n    const s = this.findAll(e, t, o);\n    s.forEach((r, l) => {\n      const a = this.allListeners.indexOf(s[l]);\n      a > -1 && (this.allListeners.splice(a, 1), r.element.removeEventListener(r.eventType, r.handler, r.options));\n    });\n  }\n  /**\n   * Removes listener by id\n   *\n   * @param {string} id - listener identifier\n   */\n  offById(e) {\n    const t = this.findById(e);\n    t && t.element.removeEventListener(t.eventType, t.handler, t.options);\n  }\n  /**\n   * Finds and returns first listener by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} [eventType] - event type\n   * @param {Function} [handler] - event handler\n   * @returns {ListenerData|null}\n   */\n  findOne(e, t, o) {\n    const i = this.findAll(e, t, o);\n    return i.length > 0 ? i[0] : null;\n  }\n  /**\n   * Return all stored listeners by passed params\n   *\n   * @param {EventTarget} element - event target\n   * @param {string} eventType - event type\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]}\n   */\n  findAll(e, t, o) {\n    let i;\n    const s = e ? this.findByEventTarget(e) : [];\n    return e && t && o ? i = s.filter((r) => r.eventType === t && r.handler === o) : e && t ? i = s.filter((r) => r.eventType === t) : i = s, i;\n  }\n  /**\n   * Removes all listeners\n   */\n  removeAll() {\n    this.allListeners.map((e) => {\n      e.element.removeEventListener(e.eventType, e.handler, e.options);\n    }), this.allListeners = [];\n  }\n  /**\n   * Module cleanup on destruction\n   */\n  destroy() {\n    this.removeAll();\n  }\n  /**\n   * Search method: looks for listener by passed element\n   *\n   * @param {EventTarget} element - searching element\n   * @returns {Array} listeners that found on element\n   */\n  findByEventTarget(e) {\n    return this.allListeners.filter((t) => {\n      if (t.element === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed event type\n   *\n   * @param {string} eventType - event type\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByType(e) {\n    return this.allListeners.filter((t) => {\n      if (t.eventType === e)\n        return t;\n    });\n  }\n  /**\n   * Search method: looks for listener by passed handler\n   *\n   * @param {Function} handler - event handler\n   * @returns {ListenerData[]} listeners that found on element\n   */\n  findByHandler(e) {\n    return this.allListeners.filter((t) => {\n      if (t.handler === e)\n        return t;\n    });\n  }\n  /**\n   * Returns listener data found by id\n   *\n   * @param {string} id - listener identifier\n   * @returns {ListenerData}\n   */\n  findById(e) {\n    return this.allListeners.find((t) => t.id === e);\n  }\n}\nclass y {\n  /**\n   * @class\n   * @param options - Module options\n   * @param options.config - Module config\n   * @param options.eventsDispatcher - Common event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    if (this.nodes = {}, this.listeners = new Ce(), this.readOnlyMutableListeners = {\n      /**\n       * Assigns event listener on DOM element and pushes into special array that might be removed\n       *\n       * @param {EventTarget} element - DOM Element\n       * @param {string} eventType - Event name\n       * @param {Function} handler - Event handler\n       * @param {boolean|AddEventListenerOptions} options - Listening options\n       */\n      on: (o, i, s, r = !1) => {\n        this.mutableListenerIds.push(\n          this.listeners.on(o, i, s, r)\n        );\n      },\n      /**\n       * Clears all mutable listeners\n       */\n      clearAll: () => {\n        for (const o of this.mutableListenerIds)\n          this.listeners.offById(o);\n        this.mutableListenerIds = [];\n      }\n    }, this.mutableListenerIds = [], new.target === y)\n      throw new TypeError(\"Constructors for abstract class Module are not allowed.\");\n    this.config = e, this.eventsDispatcher = t;\n  }\n  /**\n   * Editor modules setter\n   *\n   * @param {EditorModules} Editor - Editor's Modules\n   */\n  set state(e) {\n    this.Editor = e;\n  }\n  /**\n   * Remove memorized nodes\n   */\n  removeAllNodes() {\n    for (const e in this.nodes) {\n      const t = this.nodes[e];\n      t instanceof HTMLElement && t.remove();\n    }\n  }\n  /**\n   * Returns true if current direction is RTL (Right-To-Left)\n   */\n  get isRtl() {\n    return this.config.i18n.direction === \"rtl\";\n  }\n}\nclass b {\n  constructor() {\n    this.instance = null, this.selection = null, this.savedSelectionRange = null, this.isFakeBackgroundEnabled = !1, this.commandBackground = \"backColor\", this.commandRemoveFormat = \"removeFormat\";\n  }\n  /**\n   * Editor styles\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  static get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorZone: \"codex-editor__redactor\"\n    };\n  }\n  /**\n   * Returns selected anchor\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorNode}\n   *\n   * @returns {Node|null}\n   */\n  static get anchorNode() {\n    const e = window.getSelection();\n    return e ? e.anchorNode : null;\n  }\n  /**\n   * Returns selected anchor element\n   *\n   * @returns {Element|null}\n   */\n  static get anchorElement() {\n    const e = window.getSelection();\n    if (!e)\n      return null;\n    const t = e.anchorNode;\n    return t ? d.isElement(t) ? t : t.parentElement : null;\n  }\n  /**\n   * Returns selection offset according to the anchor node\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Selection/anchorOffset}\n   *\n   * @returns {number|null}\n   */\n  static get anchorOffset() {\n    const e = window.getSelection();\n    return e ? e.anchorOffset : null;\n  }\n  /**\n   * Is current selection range collapsed\n   *\n   * @returns {boolean|null}\n   */\n  static get isCollapsed() {\n    const e = window.getSelection();\n    return e ? e.isCollapsed : null;\n  }\n  /**\n   * Check current selection if it is at Editor's zone\n   *\n   * @returns {boolean}\n   */\n  static get isAtEditor() {\n    return this.isSelectionAtEditor(b.get());\n  }\n  /**\n   * Check if passed selection is at Editor's zone\n   *\n   * @param selection - Selection object to check\n   */\n  static isSelectionAtEditor(e) {\n    if (!e)\n      return !1;\n    let t = e.anchorNode || e.focusNode;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Check if passed range at Editor zone\n   *\n   * @param range - range to check\n   */\n  static isRangeAtEditor(e) {\n    if (!e)\n      return;\n    let t = e.startContainer;\n    t && t.nodeType === Node.TEXT_NODE && (t = t.parentNode);\n    let o = null;\n    return t && t instanceof Element && (o = t.closest(`.${b.CSS.editorZone}`)), o ? o.nodeType === Node.ELEMENT_NODE : !1;\n  }\n  /**\n   * Methods return boolean that true if selection exists on the page\n   */\n  static get isSelectionExists() {\n    return !!b.get().anchorNode;\n  }\n  /**\n   * Return first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    return this.getRangeFromSelection(this.get());\n  }\n  /**\n   * Returns range from passed Selection object\n   *\n   * @param selection - Selection object to get Range from\n   */\n  static getRangeFromSelection(e) {\n    return e && e.rangeCount ? e.getRangeAt(0) : null;\n  }\n  /**\n   * Calculates position and size of selected text\n   *\n   * @returns {DOMRect | ClientRect}\n   */\n  static get rect() {\n    let e = document.selection, t, o = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n    if (e && e.type !== \"Control\")\n      return e = e, t = e.createRange(), o.x = t.boundingLeft, o.y = t.boundingTop, o.width = t.boundingWidth, o.height = t.boundingHeight, o;\n    if (!window.getSelection)\n      return I(\"Method window.getSelection is not supported\", \"warn\"), o;\n    if (e = window.getSelection(), e.rangeCount === null || isNaN(e.rangeCount))\n      return I(\"Method SelectionUtils.rangeCount is not supported\", \"warn\"), o;\n    if (e.rangeCount === 0)\n      return o;\n    if (t = e.getRangeAt(0).cloneRange(), t.getBoundingClientRect && (o = t.getBoundingClientRect()), o.x === 0 && o.y === 0) {\n      const i = document.createElement(\"span\");\n      if (i.getBoundingClientRect) {\n        i.appendChild(document.createTextNode(\"​\")), t.insertNode(i), o = i.getBoundingClientRect();\n        const s = i.parentNode;\n        s.removeChild(i), s.normalize();\n      }\n    }\n    return o;\n  }\n  /**\n   * Returns selected text as String\n   *\n   * @returns {string}\n   */\n  static get text() {\n    return window.getSelection ? window.getSelection().toString() : \"\";\n  }\n  /**\n   * Returns window SelectionUtils\n   * {@link https://developer.mozilla.org/ru/docs/Web/API/Window/getSelection}\n   *\n   * @returns {Selection}\n   */\n  static get() {\n    return window.getSelection();\n  }\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param element - element where to set focus\n   * @param offset - offset of cursor\n   */\n  static setCursor(e, t = 0) {\n    const o = document.createRange(), i = window.getSelection();\n    return d.isNativeInput(e) ? d.canSetCaret(e) ? (e.focus(), e.selectionStart = e.selectionEnd = t, e.getBoundingClientRect()) : void 0 : (o.setStart(e, t), o.setEnd(e, t), i.removeAllRanges(), i.addRange(o), o.getBoundingClientRect());\n  }\n  /**\n   * Check if current range exists and belongs to container\n   *\n   * @param container - where range should be\n   */\n  static isRangeInsideContainer(e) {\n    const t = b.range;\n    return t === null ? !1 : e.contains(t.startContainer);\n  }\n  /**\n   * Adds fake cursor to the current range\n   */\n  static addFakeCursor() {\n    const e = b.range;\n    if (e === null)\n      return;\n    const t = d.make(\"span\", \"codex-editor__fake-cursor\");\n    t.dataset.mutationFree = \"true\", e.collapse(), e.insertNode(t);\n  }\n  /**\n   * Check if passed element contains a fake cursor\n   *\n   * @param el - where to check\n   */\n  static isFakeCursorInsideContainer(e) {\n    return d.find(e, \".codex-editor__fake-cursor\") !== null;\n  }\n  /**\n   * Removes fake cursor from a container\n   *\n   * @param container - container to look for\n   */\n  static removeFakeCursor(e = document.body) {\n    const t = d.find(e, \".codex-editor__fake-cursor\");\n    t && t.remove();\n  }\n  /**\n   * Removes fake background\n   */\n  removeFakeBackground() {\n    this.isFakeBackgroundEnabled && (this.isFakeBackgroundEnabled = !1, document.execCommand(this.commandRemoveFormat));\n  }\n  /**\n   * Sets fake background\n   */\n  setFakeBackground() {\n    document.execCommand(this.commandBackground, !1, \"#a8d6ff\"), this.isFakeBackgroundEnabled = !0;\n  }\n  /**\n   * Save SelectionUtils's range\n   */\n  save() {\n    this.savedSelectionRange = b.range;\n  }\n  /**\n   * Restore saved SelectionUtils's range\n   */\n  restore() {\n    if (!this.savedSelectionRange)\n      return;\n    const e = window.getSelection();\n    e.removeAllRanges(), e.addRange(this.savedSelectionRange);\n  }\n  /**\n   * Clears saved selection\n   */\n  clearSaved() {\n    this.savedSelectionRange = null;\n  }\n  /**\n   * Collapse current selection\n   */\n  collapseToEnd() {\n    const e = window.getSelection(), t = document.createRange();\n    t.selectNodeContents(e.focusNode), t.collapse(!1), e.removeAllRanges(), e.addRange(t);\n  }\n  /**\n   * Looks ahead to find passed tag from current selection\n   *\n   * @param  {string} tagName       - tag to found\n   * @param  {string} [className]   - tag's class name\n   * @param  {number} [searchDepth] - count of tags that can be included. For better performance.\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t, o = 10) {\n    const i = window.getSelection();\n    let s = null;\n    return !i || !i.anchorNode || !i.focusNode ? null : ([\n      /** the Node in which the selection begins */\n      i.anchorNode,\n      /** the Node in which the selection ends */\n      i.focusNode\n    ].forEach((l) => {\n      let a = o;\n      for (; a > 0 && l.parentNode && !(l.tagName === e && (s = l, t && l.classList && !l.classList.contains(t) && (s = null), s)); )\n        l = l.parentNode, a--;\n    }), s);\n  }\n  /**\n   * Expands selection range to the passed parent node\n   *\n   * @param {HTMLElement} element - element which contents should be selected\n   */\n  expandToTag(e) {\n    const t = window.getSelection();\n    t.removeAllRanges();\n    const o = document.createRange();\n    o.selectNodeContents(e), t.addRange(o);\n  }\n}\nfunction Fo(n, e) {\n  const { type: t, target: o, addedNodes: i, removedNodes: s } = n;\n  return n.type === \"attributes\" && n.attributeName === \"data-empty\" ? !1 : !!(e.contains(o) || t === \"childList\" && (Array.from(i).some((a) => a === e) || Array.from(s).some((a) => a === e)));\n}\nconst Je = \"redactor dom changed\", Pt = \"block changed\", Dt = \"fake cursor is about to be toggled\", Rt = \"fake cursor have been set\", ye = \"editor mobile layout toggled\";\nfunction Ft(n, e) {\n  if (!n.conversionConfig)\n    return !1;\n  const t = n.conversionConfig[e];\n  return O(t) || Q(t);\n}\nfunction _e(n, e) {\n  return Ft(n.tool, e);\n}\nfunction Ht(n, e) {\n  return Object.entries(n).some(([t, o]) => e[t] && Oo(e[t], o));\n}\nasync function zt(n, e) {\n  const o = (await n.save()).data;\n  return e.reduce((i, s) => {\n    if (!Ft(s, \"import\"))\n      return i;\n    const r = s.toolbox.filter((l) => {\n      if (V(l) || !l.icon)\n        return !1;\n      if (l.data !== void 0) {\n        if (Ht(l.data, o))\n          return !1;\n      } else if (s.name === n.name)\n        return !1;\n      return !0;\n    });\n    return i.push({\n      ...s,\n      toolbox: r\n    }), i;\n  }, []);\n}\nfunction vt(n, e) {\n  return n.mergeable ? n.name === e.name ? !0 : _e(e, \"export\") && _e(n, \"import\") : !1;\n}\nfunction Ho(n, e) {\n  const t = e == null ? void 0 : e.export;\n  return O(t) ? t(n) : Q(t) ? n[t] : (t !== void 0 && I(\"Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export.\"), \"\");\n}\nfunction wt(n, e) {\n  const t = e == null ? void 0 : e.import;\n  return O(t) ? t(n) : Q(t) ? {\n    [t]: n\n  } : (t !== void 0 && I(\"Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data.\"), {});\n}\nvar A = /* @__PURE__ */ ((n) => (n.Default = \"default\", n.Separator = \"separator\", n.Html = \"html\", n))(A || {}), J = /* @__PURE__ */ ((n) => (n.APPEND_CALLBACK = \"appendCallback\", n.RENDERED = \"rendered\", n.MOVED = \"moved\", n.UPDATED = \"updated\", n.REMOVED = \"removed\", n.ON_PASTE = \"onPaste\", n))(J || {});\nclass D extends Te {\n  /**\n   * @param options - block constructor options\n   * @param [options.id] - block's id. Will be generated if omitted.\n   * @param options.data - Tool's initial data\n   * @param options.tool — block's tool\n   * @param options.api - Editor API module for pass it to the Block Tunes\n   * @param options.readOnly - Read-Only flag\n   * @param [eventBus] - Editor common event bus. Allows to subscribe on some Editor events. Could be omitted when \"virtual\" Block is created. See BlocksAPI@composeBlockData.\n   */\n  constructor({\n    id: e = Io(),\n    data: t,\n    tool: o,\n    readOnly: i,\n    tunesData: s\n  }, r) {\n    super(), this.cachedInputs = [], this.toolRenderedElement = null, this.tunesInstances = /* @__PURE__ */ new Map(), this.defaultTunesInstances = /* @__PURE__ */ new Map(), this.unavailableTunesData = {}, this.inputIndex = 0, this.editorEventBus = null, this.handleFocus = () => {\n      this.dropInputsCache(), this.updateCurrentInput();\n    }, this.didMutated = (l = void 0) => {\n      const a = l === void 0, c = l instanceof InputEvent;\n      !a && !c && this.detectToolRootChange(l);\n      let u;\n      a || c ? u = !0 : u = !(l.length > 0 && l.every((p) => {\n        const { addedNodes: g, removedNodes: f, target: k } = p;\n        return [\n          ...Array.from(g),\n          ...Array.from(f),\n          k\n        ].some((S) => (d.isElement(S) || (S = S.parentElement), S && S.closest('[data-mutation-free=\"true\"]') !== null));\n      })), u && (this.dropInputsCache(), this.updateCurrentInput(), this.toggleInputsEmptyMark(), this.call(\n        \"updated\"\n        /* UPDATED */\n      ), this.emit(\"didMutated\", this));\n    }, this.name = o.name, this.id = e, this.settings = o.settings, this.config = o.settings.config || {}, this.editorEventBus = r || null, this.blockAPI = new G(this), this.tool = o, this.toolInstance = o.create(t, this.blockAPI, i), this.tunes = o.tunes, this.composeTunes(s), this.holder = this.compose(), window.requestIdleCallback(() => {\n      this.watchBlockMutations(), this.addInputEvents(), this.toggleInputsEmptyMark();\n    });\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      wrapper: \"ce-block\",\n      wrapperStretched: \"ce-block--stretched\",\n      content: \"ce-block__content\",\n      selected: \"ce-block--selected\",\n      dropTarget: \"ce-block--drop-target\"\n    };\n  }\n  /**\n   * Find and return all editable elements (contenteditable and native inputs) in the Tool HTML\n   */\n  get inputs() {\n    if (this.cachedInputs.length !== 0)\n      return this.cachedInputs;\n    const e = d.findAllInputs(this.holder);\n    return this.inputIndex > e.length - 1 && (this.inputIndex = e.length - 1), this.cachedInputs = e, e;\n  }\n  /**\n   * Return current Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get currentInput() {\n    return this.inputs[this.inputIndex];\n  }\n  /**\n   * Set input index to the passed element\n   *\n   * @param element - HTML Element to set as current input\n   */\n  set currentInput(e) {\n    const t = this.inputs.findIndex((o) => o === e || o.contains(e));\n    t !== -1 && (this.inputIndex = t);\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get firstInput() {\n    return this.inputs[0];\n  }\n  /**\n   * Return first Tool`s input\n   * If Block doesn't contain inputs, return undefined\n   */\n  get lastInput() {\n    const e = this.inputs;\n    return e[e.length - 1];\n  }\n  /**\n   * Return next Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get nextInput() {\n    return this.inputs[this.inputIndex + 1];\n  }\n  /**\n   * Return previous Tool`s input or undefined if it doesn't exist\n   * If Block doesn't contain inputs, return undefined\n   */\n  get previousInput() {\n    return this.inputs[this.inputIndex - 1];\n  }\n  /**\n   * Get Block's JSON data\n   *\n   * @returns {object}\n   */\n  get data() {\n    return this.save().then((e) => e && !V(e.data) ? e.data : {});\n  }\n  /**\n   * Returns tool's sanitizer config\n   *\n   * @returns {object}\n   */\n  get sanitize() {\n    return this.tool.sanitizeConfig;\n  }\n  /**\n   * is block mergeable\n   * We plugin have merge function then we call it mergeable\n   *\n   * @returns {boolean}\n   */\n  get mergeable() {\n    return O(this.toolInstance.merge);\n  }\n  /**\n   * If Block contains inputs, it is focusable\n   */\n  get focusable() {\n    return this.inputs.length !== 0;\n  }\n  /**\n   * Check block for emptiness\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    const e = d.isEmpty(this.pluginsContent, \"/\"), t = !this.hasMedia;\n    return e && t;\n  }\n  /**\n   * Check if block has a media content such as images, iframe and other\n   *\n   * @returns {boolean}\n   */\n  get hasMedia() {\n    const e = [\n      \"img\",\n      \"iframe\",\n      \"video\",\n      \"audio\",\n      \"source\",\n      \"input\",\n      \"textarea\",\n      \"twitterwidget\"\n    ];\n    return !!this.holder.querySelector(e.join(\",\"));\n  }\n  /**\n   * Set selected state\n   * We don't need to mark Block as Selected when it is empty\n   *\n   * @param {boolean} state - 'true' to select, 'false' to remove selection\n   */\n  set selected(e) {\n    var i, s;\n    this.holder.classList.toggle(D.CSS.selected, e);\n    const t = e === !0 && b.isRangeInsideContainer(this.holder), o = e === !1 && b.isFakeCursorInsideContainer(this.holder);\n    (t || o) && ((i = this.editorEventBus) == null || i.emit(Dt, { state: e }), t ? b.addFakeCursor() : b.removeFakeCursor(this.holder), (s = this.editorEventBus) == null || s.emit(Rt, { state: e }));\n  }\n  /**\n   * Returns True if it is Selected\n   *\n   * @returns {boolean}\n   */\n  get selected() {\n    return this.holder.classList.contains(D.CSS.selected);\n  }\n  /**\n   * Set stretched state\n   *\n   * @param {boolean} state - 'true' to enable, 'false' to disable stretched state\n   */\n  set stretched(e) {\n    this.holder.classList.toggle(D.CSS.wrapperStretched, e);\n  }\n  /**\n   * Return Block's stretched state\n   *\n   * @returns {boolean}\n   */\n  get stretched() {\n    return this.holder.classList.contains(D.CSS.wrapperStretched);\n  }\n  /**\n   * Toggle drop target state\n   *\n   * @param {boolean} state - 'true' if block is drop target, false otherwise\n   */\n  set dropTarget(e) {\n    this.holder.classList.toggle(D.CSS.dropTarget, e);\n  }\n  /**\n   * Returns Plugins content\n   *\n   * @returns {HTMLElement}\n   */\n  get pluginsContent() {\n    return this.toolRenderedElement;\n  }\n  /**\n   * Calls Tool's method\n   *\n   * Method checks tool property {MethodName}. Fires method with passes params If it is instance of Function\n   *\n   * @param {string} methodName - method to call\n   * @param {object} params - method argument\n   */\n  call(e, t) {\n    if (O(this.toolInstance[e])) {\n      e === \"appendCallback\" && I(\n        \"`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead\",\n        \"warn\"\n      );\n      try {\n        this.toolInstance[e].call(this.toolInstance, t);\n      } catch (o) {\n        I(`Error during '${e}' call: ${o.message}`, \"error\");\n      }\n    }\n  }\n  /**\n   * Call plugins merge method\n   *\n   * @param {BlockToolData} data - data to merge\n   */\n  async mergeWith(e) {\n    await this.toolInstance.merge(e);\n  }\n  /**\n   * Extracts data from Block\n   * Groups Tool's save processing time\n   *\n   * @returns {object}\n   */\n  async save() {\n    const e = await this.toolInstance.save(this.pluginsContent), t = this.unavailableTunesData;\n    [\n      ...this.tunesInstances.entries(),\n      ...this.defaultTunesInstances.entries()\n    ].forEach(([s, r]) => {\n      if (O(r.save))\n        try {\n          t[s] = r.save();\n        } catch (l) {\n          I(`Tune ${r.constructor.name} save method throws an Error %o`, \"warn\", l);\n        }\n    });\n    const o = window.performance.now();\n    let i;\n    return Promise.resolve(e).then((s) => (i = window.performance.now(), {\n      id: this.id,\n      tool: this.name,\n      data: s,\n      tunes: t,\n      time: i - o\n    })).catch((s) => {\n      I(`Saving process for ${this.name} tool failed due to the ${s}`, \"log\", \"red\");\n    });\n  }\n  /**\n   * Uses Tool's validation method to check the correctness of output data\n   * Tool's validation method is optional\n   *\n   * @description Method returns true|false whether data passed the validation or not\n   * @param {BlockToolData} data - data to validate\n   * @returns {Promise<boolean>} valid\n   */\n  async validate(e) {\n    let t = !0;\n    return this.toolInstance.validate instanceof Function && (t = await this.toolInstance.validate(e)), t;\n  }\n  /**\n   * Returns data to render in Block Tunes menu.\n   * Splits block tunes into 2 groups: block specific tunes and common tunes\n   */\n  getTunes() {\n    const e = [], t = [], o = typeof this.toolInstance.renderSettings == \"function\" ? this.toolInstance.renderSettings() : [];\n    return d.isElement(o) ? e.push({\n      type: A.Html,\n      element: o\n    }) : Array.isArray(o) ? e.push(...o) : e.push(o), [\n      ...this.tunesInstances.values(),\n      ...this.defaultTunesInstances.values()\n    ].map((s) => s.render()).forEach((s) => {\n      d.isElement(s) ? t.push({\n        type: A.Html,\n        element: s\n      }) : Array.isArray(s) ? t.push(...s) : t.push(s);\n    }), {\n      toolTunes: e,\n      commonTunes: t\n    };\n  }\n  /**\n   * Update current input index with selection anchor node\n   */\n  updateCurrentInput() {\n    this.currentInput = d.isNativeInput(document.activeElement) || !b.anchorNode ? document.activeElement : b.anchorNode;\n  }\n  /**\n   * Allows to say Editor that Block was changed. Used to manually trigger Editor's 'onChange' callback\n   * Can be useful for block changes invisible for editor core.\n   */\n  dispatchChange() {\n    this.didMutated();\n  }\n  /**\n   * Call Tool instance destroy method\n   */\n  destroy() {\n    this.unwatchBlockMutations(), this.removeInputEvents(), super.destroy(), O(this.toolInstance.destroy) && this.toolInstance.destroy();\n  }\n  /**\n   * Tool could specify several entries to be displayed at the Toolbox (for example, \"Heading 1\", \"Heading 2\", \"Heading 3\")\n   * This method returns the entry that is related to the Block (depended on the Block data)\n   */\n  async getActiveToolboxEntry() {\n    const e = this.tool.toolbox;\n    if (e.length === 1)\n      return Promise.resolve(this.tool.toolbox[0]);\n    const t = await this.data, o = e;\n    return o == null ? void 0 : o.find((i) => Ht(i.data, t));\n  }\n  /**\n   * Exports Block data as string using conversion config\n   */\n  async exportDataAsString() {\n    const e = await this.data;\n    return Ho(e, this.tool.conversionConfig);\n  }\n  /**\n   * Make default Block wrappers and put Tool`s content there\n   *\n   * @returns {HTMLDivElement}\n   */\n  compose() {\n    const e = d.make(\"div\", D.CSS.wrapper), t = d.make(\"div\", D.CSS.content), o = this.toolInstance.render();\n    e.dataset.id = this.id, this.toolRenderedElement = o, t.appendChild(this.toolRenderedElement);\n    let i = t;\n    return [...this.tunesInstances.values(), ...this.defaultTunesInstances.values()].forEach((s) => {\n      if (O(s.wrap))\n        try {\n          i = s.wrap(i);\n        } catch (r) {\n          I(`Tune ${s.constructor.name} wrap method throws an Error %o`, \"warn\", r);\n        }\n    }), e.appendChild(i), e;\n  }\n  /**\n   * Instantiate Block Tunes\n   *\n   * @param tunesData - current Block tunes data\n   * @private\n   */\n  composeTunes(e) {\n    Array.from(this.tunes.values()).forEach((t) => {\n      (t.isInternal ? this.defaultTunesInstances : this.tunesInstances).set(t.name, t.create(e[t.name], this.blockAPI));\n    }), Object.entries(e).forEach(([t, o]) => {\n      this.tunesInstances.has(t) || (this.unavailableTunesData[t] = o);\n    });\n  }\n  /**\n   * Adds focus event listeners to all inputs and contenteditable\n   */\n  addInputEvents() {\n    this.inputs.forEach((e) => {\n      e.addEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.addEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * removes focus event listeners from all inputs and contenteditable\n   */\n  removeInputEvents() {\n    this.inputs.forEach((e) => {\n      e.removeEventListener(\"focus\", this.handleFocus), d.isNativeInput(e) && e.removeEventListener(\"input\", this.didMutated);\n    });\n  }\n  /**\n   * Listen common editor Dom Changed event and detect mutations related to the  Block\n   */\n  watchBlockMutations() {\n    var e;\n    this.redactorDomChangedCallback = (t) => {\n      const { mutations: o } = t;\n      o.some((s) => Fo(s, this.toolRenderedElement)) && this.didMutated(o);\n    }, (e = this.editorEventBus) == null || e.on(Je, this.redactorDomChangedCallback);\n  }\n  /**\n   * Remove redactor dom change event listener\n   */\n  unwatchBlockMutations() {\n    var e;\n    (e = this.editorEventBus) == null || e.off(Je, this.redactorDomChangedCallback);\n  }\n  /**\n   * Sometimes Tool can replace own main element, for example H2 -> H4 or UL -> OL\n   * We need to detect such changes and update a link to tools main element with the new one\n   *\n   * @param mutations - records of block content mutations\n   */\n  detectToolRootChange(e) {\n    e.forEach((t) => {\n      if (Array.from(t.removedNodes).includes(this.toolRenderedElement)) {\n        const i = t.addedNodes[t.addedNodes.length - 1];\n        this.toolRenderedElement = i;\n      }\n    });\n  }\n  /**\n   * Clears inputs cached value\n   */\n  dropInputsCache() {\n    this.cachedInputs = [];\n  }\n  /**\n   * Mark inputs with 'data-empty' attribute with the empty state\n   */\n  toggleInputsEmptyMark() {\n    this.inputs.forEach(Ot);\n  }\n}\nclass zo extends y {\n  constructor() {\n    super(...arguments), this.insert = (e = this.config.defaultBlock, t = {}, o = {}, i, s, r, l) => {\n      const a = this.Editor.BlockManager.insert({\n        id: l,\n        tool: e,\n        data: t,\n        index: i,\n        needToFocus: s,\n        replace: r\n      });\n      return new G(a);\n    }, this.composeBlockData = async (e) => {\n      const t = this.Editor.Tools.blockTools.get(e);\n      return new D({\n        tool: t,\n        api: this.Editor.API,\n        readOnly: !0,\n        data: {},\n        tunesData: {}\n      }).data;\n    }, this.update = async (e, t, o) => {\n      const { BlockManager: i } = this.Editor, s = i.getBlockById(e);\n      if (s === void 0)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const r = await i.update(s, t, o);\n      return new G(r);\n    }, this.convert = async (e, t, o) => {\n      var h, p;\n      const { BlockManager: i, Tools: s } = this.Editor, r = i.getBlockById(e);\n      if (!r)\n        throw new Error(`Block with id \"${e}\" not found`);\n      const l = s.blockTools.get(r.name), a = s.blockTools.get(t);\n      if (!a)\n        throw new Error(`Block Tool with type \"${t}\" not found`);\n      const c = ((h = l == null ? void 0 : l.conversionConfig) == null ? void 0 : h.export) !== void 0, u = ((p = a.conversionConfig) == null ? void 0 : p.import) !== void 0;\n      if (c && u) {\n        const g = await i.convert(r, t, o);\n        return new G(g);\n      } else {\n        const g = [\n          c ? !1 : Le(r.name),\n          u ? !1 : Le(t)\n        ].filter(Boolean).join(\" and \");\n        throw new Error(`Conversion from \"${r.name}\" to \"${t}\" is not possible. ${g} tool(s) should provide a \"conversionConfig\"`);\n      }\n    }, this.insertMany = (e, t = this.Editor.BlockManager.blocks.length - 1) => {\n      this.validateIndex(t);\n      const o = e.map(({ id: i, type: s, data: r }) => this.Editor.BlockManager.composeBlock({\n        id: i,\n        tool: s || this.config.defaultBlock,\n        data: r\n      }));\n      return this.Editor.BlockManager.insertMany(o, t), o.map((i) => new G(i));\n    };\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Blocks}\n   */\n  get methods() {\n    return {\n      clear: () => this.clear(),\n      render: (e) => this.render(e),\n      renderFromHTML: (e) => this.renderFromHTML(e),\n      delete: (e) => this.delete(e),\n      swap: (e, t) => this.swap(e, t),\n      move: (e, t) => this.move(e, t),\n      getBlockByIndex: (e) => this.getBlockByIndex(e),\n      getById: (e) => this.getById(e),\n      getCurrentBlockIndex: () => this.getCurrentBlockIndex(),\n      getBlockIndex: (e) => this.getBlockIndex(e),\n      getBlocksCount: () => this.getBlocksCount(),\n      getBlockByElement: (e) => this.getBlockByElement(e),\n      stretchBlock: (e, t = !0) => this.stretchBlock(e, t),\n      insertNewBlock: () => this.insertNewBlock(),\n      insert: this.insert,\n      insertMany: this.insertMany,\n      update: this.update,\n      composeBlockData: this.composeBlockData,\n      convert: this.convert\n    };\n  }\n  /**\n   * Returns Blocks count\n   *\n   * @returns {number}\n   */\n  getBlocksCount() {\n    return this.Editor.BlockManager.blocks.length;\n  }\n  /**\n   * Returns current block index\n   *\n   * @returns {number}\n   */\n  getCurrentBlockIndex() {\n    return this.Editor.BlockManager.currentBlockIndex;\n  }\n  /**\n   * Returns the index of Block by id;\n   *\n   * @param id - block id\n   */\n  getBlockIndex(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    if (!t) {\n      X(\"There is no block with id `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return this.Editor.BlockManager.getBlockIndex(t);\n  }\n  /**\n   * Returns BlockAPI object by Block index\n   *\n   * @param {number} index - index to get\n   */\n  getBlockByIndex(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(e);\n    if (t === void 0) {\n      X(\"There is no block at index `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new G(t);\n  }\n  /**\n   * Returns BlockAPI object by Block id\n   *\n   * @param id - id of block to get\n   */\n  getById(e) {\n    const t = this.Editor.BlockManager.getBlockById(e);\n    return t === void 0 ? (X(\"There is no block with id `\" + e + \"`\", \"warn\"), null) : new G(t);\n  }\n  /**\n   * Get Block API object by any child html element\n   *\n   * @param element - html element to get Block by\n   */\n  getBlockByElement(e) {\n    const t = this.Editor.BlockManager.getBlock(e);\n    if (t === void 0) {\n      X(\"There is no block corresponding to element `\" + e + \"`\", \"warn\");\n      return;\n    }\n    return new G(t);\n  }\n  /**\n   * Call Block Manager method that swap Blocks\n   *\n   * @param {number} fromIndex - position of first Block\n   * @param {number} toIndex - position of second Block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    I(\n      \"`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead\",\n      \"info\"\n    ), this.Editor.BlockManager.swap(e, t);\n  }\n  /**\n   * Move block from one index to another\n   *\n   * @param {number} toIndex - index to move to\n   * @param {number} fromIndex - index to move from\n   */\n  move(e, t) {\n    this.Editor.BlockManager.move(e, t);\n  }\n  /**\n   * Deletes Block\n   *\n   * @param {number} blockIndex - index of Block to delete\n   */\n  delete(e = this.Editor.BlockManager.currentBlockIndex) {\n    try {\n      const t = this.Editor.BlockManager.getBlockByIndex(e);\n      this.Editor.BlockManager.removeBlock(t);\n    } catch (t) {\n      X(t, \"warn\");\n      return;\n    }\n    this.Editor.BlockManager.blocks.length === 0 && this.Editor.BlockManager.insert(), this.Editor.BlockManager.currentBlock && this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END), this.Editor.Toolbar.close();\n  }\n  /**\n   * Clear Editor's area\n   */\n  async clear() {\n    await this.Editor.BlockManager.clear(!0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Fills Editor with Blocks data\n   *\n   * @param {OutputData} data — Saved Editor data\n   */\n  async render(e) {\n    if (e === void 0 || e.blocks === void 0)\n      throw new Error(\"Incorrect data passed to the render() method\");\n    this.Editor.ModificationsObserver.disable(), await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(e.blocks), this.Editor.ModificationsObserver.enable();\n  }\n  /**\n   * Render passed HTML string\n   *\n   * @param {string} data - HTML string to render\n   * @returns {Promise<void>}\n   */\n  renderFromHTML(e) {\n    return this.Editor.BlockManager.clear(), this.Editor.Paste.processText(e, !0);\n  }\n  /**\n   * Stretch Block's content\n   *\n   * @param {number} index - index of Block to stretch\n   * @param {boolean} status - true to enable, false to disable\n   * @deprecated Use BlockAPI interface to stretch Blocks\n   */\n  stretchBlock(e, t = !0) {\n    Ze(\n      !0,\n      \"blocks.stretchBlock()\",\n      \"BlockAPI\"\n    );\n    const o = this.Editor.BlockManager.getBlockByIndex(e);\n    o && (o.stretched = t);\n  }\n  /**\n   * Insert new Block\n   * After set caret to this Block\n   *\n   * @todo remove in 3.0.0\n   * @deprecated with insert() method\n   */\n  insertNewBlock() {\n    I(\"Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.\", \"warn\"), this.insert();\n  }\n  /**\n   * Validated block index and throws an error if it's invalid\n   *\n   * @param index - index to validate\n   */\n  validateIndex(e) {\n    if (typeof e != \"number\")\n      throw new Error(\"Index should be a number\");\n    if (e < 0)\n      throw new Error(\"Index should be greater than or equal to 0\");\n    if (e === null)\n      throw new Error(\"Index should be greater than or equal to 0\");\n  }\n}\nfunction Uo(n, e) {\n  return typeof n == \"number\" ? e.BlockManager.getBlockByIndex(n) : typeof n == \"string\" ? e.BlockManager.getBlockById(n) : e.BlockManager.getBlockById(n.id);\n}\nclass jo extends y {\n  constructor() {\n    super(...arguments), this.setToFirstBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.firstBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock, e, t), !0) : !1, this.setToLastBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.lastBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock, e, t), !0) : !1, this.setToPreviousBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.previousBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock, e, t), !0) : !1, this.setToNextBlock = (e = this.Editor.Caret.positions.DEFAULT, t = 0) => this.Editor.BlockManager.nextBlock ? (this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock, e, t), !0) : !1, this.setToBlock = (e, t = this.Editor.Caret.positions.DEFAULT, o = 0) => {\n      const i = Uo(e, this.Editor);\n      return i === void 0 ? !1 : (this.Editor.Caret.setToBlock(i, t, o), !0);\n    }, this.focus = (e = !1) => e ? this.setToLastBlock(this.Editor.Caret.positions.END) : this.setToFirstBlock(this.Editor.Caret.positions.START);\n  }\n  /**\n   * Available methods\n   *\n   * @returns {Caret}\n   */\n  get methods() {\n    return {\n      setToFirstBlock: this.setToFirstBlock,\n      setToLastBlock: this.setToLastBlock,\n      setToPreviousBlock: this.setToPreviousBlock,\n      setToNextBlock: this.setToNextBlock,\n      setToBlock: this.setToBlock,\n      focus: this.focus\n    };\n  }\n}\nclass $o extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Events}\n   */\n  get methods() {\n    return {\n      emit: (e, t) => this.emit(e, t),\n      off: (e, t) => this.off(e, t),\n      on: (e, t) => this.on(e, t)\n    };\n  }\n  /**\n   * Subscribe on Events\n   *\n   * @param {string} eventName - event name to subscribe\n   * @param {Function} callback - event handler\n   */\n  on(e, t) {\n    this.eventsDispatcher.on(e, t);\n  }\n  /**\n   * Emit event with data\n   *\n   * @param {string} eventName - event to emit\n   * @param {object} data - event's data\n   */\n  emit(e, t) {\n    this.eventsDispatcher.emit(e, t);\n  }\n  /**\n   * Unsubscribe from Event\n   *\n   * @param {string} eventName - event to unsubscribe\n   * @param {Function} callback - event handler\n   */\n  off(e, t) {\n    this.eventsDispatcher.off(e, t);\n  }\n}\nclass tt extends y {\n  /**\n   * Return namespace section for tool or block tune\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  static getNamespace(e, t) {\n    return t ? `blockTunes.${e}` : `tools.${e}`;\n  }\n  /**\n   * Return I18n API methods with global dictionary access\n   */\n  get methods() {\n    return {\n      t: () => {\n        X(\"I18n.t() method can be accessed only from Tools\", \"warn\");\n      }\n    };\n  }\n  /**\n   * Return I18n API methods with tool namespaced dictionary\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        t: (o) => z.t(tt.getNamespace(e, t), o)\n      }\n    );\n  }\n}\nclass Yo extends y {\n  /**\n   * Editor.js Core API modules\n   */\n  get methods() {\n    return {\n      blocks: this.Editor.BlocksAPI.methods,\n      caret: this.Editor.CaretAPI.methods,\n      tools: this.Editor.ToolsAPI.methods,\n      events: this.Editor.EventsAPI.methods,\n      listeners: this.Editor.ListenersAPI.methods,\n      notifier: this.Editor.NotifierAPI.methods,\n      sanitizer: this.Editor.SanitizerAPI.methods,\n      saver: this.Editor.SaverAPI.methods,\n      selection: this.Editor.SelectionAPI.methods,\n      styles: this.Editor.StylesAPI.classes,\n      toolbar: this.Editor.ToolbarAPI.methods,\n      inlineToolbar: this.Editor.InlineToolbarAPI.methods,\n      tooltip: this.Editor.TooltipAPI.methods,\n      i18n: this.Editor.I18nAPI.methods,\n      readOnly: this.Editor.ReadOnlyAPI.methods,\n      ui: this.Editor.UiAPI.methods\n    };\n  }\n  /**\n   * Returns Editor.js Core API methods for passed tool\n   *\n   * @param toolName - tool name\n   * @param isTune - is tool a block tune\n   */\n  getMethodsForTool(e, t) {\n    return Object.assign(\n      this.methods,\n      {\n        i18n: this.Editor.I18nAPI.getMethodsForTool(e, t)\n      }\n    );\n  }\n}\nclass Wo extends y {\n  /**\n   * Available methods\n   *\n   * @returns {InlineToolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open()\n    };\n  }\n  /**\n   * Open Inline Toolbar\n   */\n  open() {\n    this.Editor.InlineToolbar.tryToShow();\n  }\n  /**\n   * Close Inline Toolbar\n   */\n  close() {\n    this.Editor.InlineToolbar.close();\n  }\n}\nclass Ko extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Listeners}\n   */\n  get methods() {\n    return {\n      on: (e, t, o, i) => this.on(e, t, o, i),\n      off: (e, t, o, i) => this.off(e, t, o, i),\n      offById: (e) => this.offById(e)\n    };\n  }\n  /**\n   * Ads a DOM event listener. Return it's id.\n   *\n   * @param {HTMLElement} element - Element to set handler to\n   * @param {string} eventType - event type\n   * @param {() => void} handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  on(e, t, o, i) {\n    return this.listeners.on(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener from element\n   *\n   * @param {Element} element - Element to remove handler from\n   * @param eventType - event type\n   * @param handler - event handler\n   * @param {boolean} useCapture - capture event or not\n   */\n  off(e, t, o, i) {\n    this.listeners.off(e, t, o, i);\n  }\n  /**\n   * Removes DOM listener by the listener id\n   *\n   * @param id - id of the listener to remove\n   */\n  offById(e) {\n    this.listeners.offById(e);\n  }\n}\nvar Ut = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"/\", i(i.s = 0);\n    }([function(t, o, i) {\n      i(1), /*!\n       * Codex JavaScript Notification module\n       * https://github.com/codex-team/js-notifier\n       */\n      t.exports = function() {\n        var s = i(6), r = \"cdx-notify--bounce-in\", l = null;\n        return { show: function(a) {\n          if (a.message) {\n            (function() {\n              if (l)\n                return !0;\n              l = s.getWrapper(), document.body.appendChild(l);\n            })();\n            var c = null, u = a.time || 8e3;\n            switch (a.type) {\n              case \"confirm\":\n                c = s.confirm(a);\n                break;\n              case \"prompt\":\n                c = s.prompt(a);\n                break;\n              default:\n                c = s.alert(a), window.setTimeout(function() {\n                  c.remove();\n                }, u);\n            }\n            l.appendChild(c), c.classList.add(r);\n          }\n        } };\n      }();\n    }, function(t, o, i) {\n      var s = i(2);\n      typeof s == \"string\" && (s = [[t.i, s, \"\"]]);\n      var r = { hmr: !0, transform: void 0, insertInto: void 0 };\n      i(4)(s, r), s.locals && (t.exports = s.locals);\n    }, function(t, o, i) {\n      (t.exports = i(3)(!1)).push([t.i, `.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:'';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen,Ubuntu,Cantarell,\"Fira Sans\",\"Droid Sans\",\"Helvetica Neue\",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:'';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}`, \"\"]);\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = [];\n        return s.toString = function() {\n          return this.map(function(r) {\n            var l = function(a, c) {\n              var u = a[1] || \"\", h = a[3];\n              if (!h)\n                return u;\n              if (c && typeof btoa == \"function\") {\n                var p = (f = h, \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(f)))) + \" */\"), g = h.sources.map(function(k) {\n                  return \"/*# sourceURL=\" + h.sourceRoot + k + \" */\";\n                });\n                return [u].concat(g).concat([p]).join(`\n`);\n              }\n              var f;\n              return [u].join(`\n`);\n            }(r, i);\n            return r[2] ? \"@media \" + r[2] + \"{\" + l + \"}\" : l;\n          }).join(\"\");\n        }, s.i = function(r, l) {\n          typeof r == \"string\" && (r = [[null, r, \"\"]]);\n          for (var a = {}, c = 0; c < this.length; c++) {\n            var u = this[c][0];\n            typeof u == \"number\" && (a[u] = !0);\n          }\n          for (c = 0; c < r.length; c++) {\n            var h = r[c];\n            typeof h[0] == \"number\" && a[h[0]] || (l && !h[2] ? h[2] = l : l && (h[2] = \"(\" + h[2] + \") and (\" + l + \")\"), s.push(h));\n          }\n        }, s;\n      };\n    }, function(t, o, i) {\n      var s, r, l = {}, a = (s = function() {\n        return window && document && document.all && !window.atob;\n      }, function() {\n        return r === void 0 && (r = s.apply(this, arguments)), r;\n      }), c = function(v) {\n        var m = {};\n        return function(x) {\n          if (typeof x == \"function\")\n            return x();\n          if (m[x] === void 0) {\n            var E = (function(M) {\n              return document.querySelector(M);\n            }).call(this, x);\n            if (window.HTMLIFrameElement && E instanceof window.HTMLIFrameElement)\n              try {\n                E = E.contentDocument.head;\n              } catch {\n                E = null;\n              }\n            m[x] = E;\n          }\n          return m[x];\n        };\n      }(), u = null, h = 0, p = [], g = i(5);\n      function f(v, m) {\n        for (var x = 0; x < v.length; x++) {\n          var E = v[x], M = l[E.id];\n          if (M) {\n            M.refs++;\n            for (var T = 0; T < M.parts.length; T++)\n              M.parts[T](E.parts[T]);\n            for (; T < E.parts.length; T++)\n              M.parts.push(j(E.parts[T], m));\n          } else {\n            var P = [];\n            for (T = 0; T < E.parts.length; T++)\n              P.push(j(E.parts[T], m));\n            l[E.id] = { id: E.id, refs: 1, parts: P };\n          }\n        }\n      }\n      function k(v, m) {\n        for (var x = [], E = {}, M = 0; M < v.length; M++) {\n          var T = v[M], P = m.base ? T[0] + m.base : T[0], B = { css: T[1], media: T[2], sourceMap: T[3] };\n          E[P] ? E[P].parts.push(B) : x.push(E[P] = { id: P, parts: [B] });\n        }\n        return x;\n      }\n      function C(v, m) {\n        var x = c(v.insertInto);\n        if (!x)\n          throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n        var E = p[p.length - 1];\n        if (v.insertAt === \"top\")\n          E ? E.nextSibling ? x.insertBefore(m, E.nextSibling) : x.appendChild(m) : x.insertBefore(m, x.firstChild), p.push(m);\n        else if (v.insertAt === \"bottom\")\n          x.appendChild(m);\n        else {\n          if (typeof v.insertAt != \"object\" || !v.insertAt.before)\n            throw new Error(`[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n`);\n          var M = c(v.insertInto + \" \" + v.insertAt.before);\n          x.insertBefore(m, M);\n        }\n      }\n      function S(v) {\n        if (v.parentNode === null)\n          return !1;\n        v.parentNode.removeChild(v);\n        var m = p.indexOf(v);\n        m >= 0 && p.splice(m, 1);\n      }\n      function _(v) {\n        var m = document.createElement(\"style\");\n        return v.attrs.type === void 0 && (v.attrs.type = \"text/css\"), ee(m, v.attrs), C(v, m), m;\n      }\n      function ee(v, m) {\n        Object.keys(m).forEach(function(x) {\n          v.setAttribute(x, m[x]);\n        });\n      }\n      function j(v, m) {\n        var x, E, M, T;\n        if (m.transform && v.css) {\n          if (!(T = m.transform(v.css)))\n            return function() {\n            };\n          v.css = T;\n        }\n        if (m.singleton) {\n          var P = h++;\n          x = u || (u = _(m)), E = fe.bind(null, x, P, !1), M = fe.bind(null, x, P, !0);\n        } else\n          v.sourceMap && typeof URL == \"function\" && typeof URL.createObjectURL == \"function\" && typeof URL.revokeObjectURL == \"function\" && typeof Blob == \"function\" && typeof btoa == \"function\" ? (x = function(B) {\n            var Y = document.createElement(\"link\");\n            return B.attrs.type === void 0 && (B.attrs.type = \"text/css\"), B.attrs.rel = \"stylesheet\", ee(Y, B.attrs), C(B, Y), Y;\n          }(m), E = (function(B, Y, ge) {\n            var ie = ge.css, He = ge.sourceMap, mo = Y.convertToAbsoluteUrls === void 0 && He;\n            (Y.convertToAbsoluteUrls || mo) && (ie = g(ie)), He && (ie += `\n/*# sourceMappingURL=data:application/json;base64,` + btoa(unescape(encodeURIComponent(JSON.stringify(He)))) + \" */\");\n            var bo = new Blob([ie], { type: \"text/css\" }), gt = B.href;\n            B.href = URL.createObjectURL(bo), gt && URL.revokeObjectURL(gt);\n          }).bind(null, x, m), M = function() {\n            S(x), x.href && URL.revokeObjectURL(x.href);\n          }) : (x = _(m), E = (function(B, Y) {\n            var ge = Y.css, ie = Y.media;\n            if (ie && B.setAttribute(\"media\", ie), B.styleSheet)\n              B.styleSheet.cssText = ge;\n            else {\n              for (; B.firstChild; )\n                B.removeChild(B.firstChild);\n              B.appendChild(document.createTextNode(ge));\n            }\n          }).bind(null, x), M = function() {\n            S(x);\n          });\n        return E(v), function(B) {\n          if (B) {\n            if (B.css === v.css && B.media === v.media && B.sourceMap === v.sourceMap)\n              return;\n            E(v = B);\n          } else\n            M();\n        };\n      }\n      t.exports = function(v, m) {\n        if (typeof DEBUG < \"u\" && DEBUG && typeof document != \"object\")\n          throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n        (m = m || {}).attrs = typeof m.attrs == \"object\" ? m.attrs : {}, m.singleton || typeof m.singleton == \"boolean\" || (m.singleton = a()), m.insertInto || (m.insertInto = \"head\"), m.insertAt || (m.insertAt = \"bottom\");\n        var x = k(v, m);\n        return f(x, m), function(E) {\n          for (var M = [], T = 0; T < x.length; T++) {\n            var P = x[T];\n            (B = l[P.id]).refs--, M.push(B);\n          }\n          for (E && f(k(E, m), m), T = 0; T < M.length; T++) {\n            var B;\n            if ((B = M[T]).refs === 0) {\n              for (var Y = 0; Y < B.parts.length; Y++)\n                B.parts[Y]();\n              delete l[B.id];\n            }\n          }\n        };\n      };\n      var $, oe = ($ = [], function(v, m) {\n        return $[v] = m, $.filter(Boolean).join(`\n`);\n      });\n      function fe(v, m, x, E) {\n        var M = x ? \"\" : E.css;\n        if (v.styleSheet)\n          v.styleSheet.cssText = oe(m, M);\n        else {\n          var T = document.createTextNode(M), P = v.childNodes;\n          P[m] && v.removeChild(P[m]), P.length ? v.insertBefore(T, P[m]) : v.appendChild(T);\n        }\n      }\n    }, function(t, o) {\n      t.exports = function(i) {\n        var s = typeof window < \"u\" && window.location;\n        if (!s)\n          throw new Error(\"fixUrls requires window.location\");\n        if (!i || typeof i != \"string\")\n          return i;\n        var r = s.protocol + \"//\" + s.host, l = r + s.pathname.replace(/\\/[^\\/]*$/, \"/\");\n        return i.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(a, c) {\n          var u, h = c.trim().replace(/^\"(.*)\"$/, function(p, g) {\n            return g;\n          }).replace(/^'(.*)'$/, function(p, g) {\n            return g;\n          });\n          return /^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(h) ? a : (u = h.indexOf(\"//\") === 0 ? h : h.indexOf(\"/\") === 0 ? r + h : l + h.replace(/^\\.\\//, \"\"), \"url(\" + JSON.stringify(u) + \")\");\n        });\n      };\n    }, function(t, o, i) {\n      var s, r, l, a, c, u, h, p, g;\n      t.exports = (s = \"cdx-notifies\", r = \"cdx-notify\", l = \"cdx-notify__cross\", a = \"cdx-notify__button--confirm\", c = \"cdx-notify__button--cancel\", u = \"cdx-notify__input\", h = \"cdx-notify__button\", p = \"cdx-notify__btns-wrapper\", { alert: g = function(f) {\n        var k = document.createElement(\"DIV\"), C = document.createElement(\"DIV\"), S = f.message, _ = f.style;\n        return k.classList.add(r), _ && k.classList.add(r + \"--\" + _), k.innerHTML = S, C.classList.add(l), C.addEventListener(\"click\", k.remove.bind(k)), k.appendChild(C), k;\n      }, confirm: function(f) {\n        var k = g(f), C = document.createElement(\"div\"), S = document.createElement(\"button\"), _ = document.createElement(\"button\"), ee = k.querySelector(\".\" + l), j = f.cancelHandler, $ = f.okHandler;\n        return C.classList.add(p), S.innerHTML = f.okText || \"Confirm\", _.innerHTML = f.cancelText || \"Cancel\", S.classList.add(h), _.classList.add(h), S.classList.add(a), _.classList.add(c), j && typeof j == \"function\" && (_.addEventListener(\"click\", j), ee.addEventListener(\"click\", j)), $ && typeof $ == \"function\" && S.addEventListener(\"click\", $), S.addEventListener(\"click\", k.remove.bind(k)), _.addEventListener(\"click\", k.remove.bind(k)), C.appendChild(S), C.appendChild(_), k.appendChild(C), k;\n      }, prompt: function(f) {\n        var k = g(f), C = document.createElement(\"div\"), S = document.createElement(\"button\"), _ = document.createElement(\"input\"), ee = k.querySelector(\".\" + l), j = f.cancelHandler, $ = f.okHandler;\n        return C.classList.add(p), S.innerHTML = f.okText || \"Ok\", S.classList.add(h), S.classList.add(a), _.classList.add(u), f.placeholder && _.setAttribute(\"placeholder\", f.placeholder), f.default && (_.value = f.default), f.inputType && (_.type = f.inputType), j && typeof j == \"function\" && ee.addEventListener(\"click\", j), $ && typeof $ == \"function\" && S.addEventListener(\"click\", function() {\n          $(_.value);\n        }), S.addEventListener(\"click\", k.remove.bind(k)), C.appendChild(_), C.appendChild(S), k.appendChild(C), k;\n      }, getWrapper: function() {\n        var f = document.createElement(\"DIV\");\n        return f.classList.add(s), f;\n      } });\n    }]);\n  });\n})(Ut);\nvar Xo = Ut.exports;\nconst Vo = /* @__PURE__ */ Fe(Xo);\nclass qo {\n  /**\n   * Show web notification\n   *\n   * @param {NotifierOptions | ConfirmNotifierOptions | PromptNotifierOptions} options - notification options\n   */\n  show(e) {\n    Vo.show(e);\n  }\n}\nclass Zo extends y {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.notifier = new qo();\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e) => this.show(e)\n    };\n  }\n  /**\n   * Show notification\n   *\n   * @param {NotifierOptions} options - message option\n   */\n  show(e) {\n    return this.notifier.show(e);\n  }\n}\nclass Go extends y {\n  /**\n   * Available methods\n   */\n  get methods() {\n    const e = () => this.isEnabled;\n    return {\n      toggle: (t) => this.toggle(t),\n      get isEnabled() {\n        return e();\n      }\n    };\n  }\n  /**\n   * Set or toggle read-only state\n   *\n   * @param {boolean|undefined} state - set or toggle state\n   * @returns {boolean} current value\n   */\n  toggle(e) {\n    return this.Editor.ReadOnly.toggle(e);\n  }\n  /**\n   * Returns current read-only state\n   */\n  get isEnabled() {\n    return this.Editor.ReadOnly.isEnabled;\n  }\n}\nvar jt = { exports: {} };\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(ko, function() {\n    function t(h) {\n      var p = h.tags, g = Object.keys(p), f = g.map(function(k) {\n        return typeof p[k];\n      }).every(function(k) {\n        return k === \"object\" || k === \"boolean\" || k === \"function\";\n      });\n      if (!f)\n        throw new Error(\"The configuration was invalid\");\n      this.config = h;\n    }\n    var o = [\"P\", \"LI\", \"TD\", \"TH\", \"DIV\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\", \"PRE\"];\n    function i(h) {\n      return o.indexOf(h.nodeName) !== -1;\n    }\n    var s = [\"A\", \"B\", \"STRONG\", \"I\", \"EM\", \"SUB\", \"SUP\", \"U\", \"STRIKE\"];\n    function r(h) {\n      return s.indexOf(h.nodeName) !== -1;\n    }\n    t.prototype.clean = function(h) {\n      const p = document.implementation.createHTMLDocument(), g = p.createElement(\"div\");\n      return g.innerHTML = h, this._sanitize(p, g), g.innerHTML;\n    }, t.prototype._sanitize = function(h, p) {\n      var g = l(h, p), f = g.firstChild();\n      if (f)\n        do {\n          if (f.nodeType === Node.TEXT_NODE)\n            if (f.data.trim() === \"\" && (f.previousElementSibling && i(f.previousElementSibling) || f.nextElementSibling && i(f.nextElementSibling))) {\n              p.removeChild(f), this._sanitize(h, p);\n              break;\n            } else\n              continue;\n          if (f.nodeType === Node.COMMENT_NODE) {\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          var k = r(f), C;\n          k && (C = Array.prototype.some.call(f.childNodes, i));\n          var S = !!p.parentNode, _ = i(p) && i(f) && S, ee = f.nodeName.toLowerCase(), j = a(this.config, ee, f), $ = k && C;\n          if ($ || c(f, j) || !this.config.keepNestedBlockElements && _) {\n            if (!(f.nodeName === \"SCRIPT\" || f.nodeName === \"STYLE\"))\n              for (; f.childNodes.length > 0; )\n                p.insertBefore(f.childNodes[0], f);\n            p.removeChild(f), this._sanitize(h, p);\n            break;\n          }\n          for (var oe = 0; oe < f.attributes.length; oe += 1) {\n            var fe = f.attributes[oe];\n            u(fe, j, f) && (f.removeAttribute(fe.name), oe = oe - 1);\n          }\n          this._sanitize(h, f);\n        } while (f = g.nextSibling());\n    };\n    function l(h, p) {\n      return h.createTreeWalker(\n        p,\n        NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT,\n        null,\n        !1\n      );\n    }\n    function a(h, p, g) {\n      return typeof h.tags[p] == \"function\" ? h.tags[p](g) : h.tags[p];\n    }\n    function c(h, p) {\n      return typeof p > \"u\" ? !0 : typeof p == \"boolean\" ? !p : !1;\n    }\n    function u(h, p, g) {\n      var f = h.name.toLowerCase();\n      return p === !0 ? !1 : typeof p[f] == \"function\" ? !p[f](h.value, g) : typeof p[f] > \"u\" || p[f] === !1 ? !0 : typeof p[f] == \"string\" ? p[f] !== h.value : !1;\n    }\n    return t;\n  });\n})(jt);\nvar Jo = jt.exports;\nconst Qo = /* @__PURE__ */ Fe(Jo);\nfunction ot(n, e) {\n  return n.map((t) => {\n    const o = O(e) ? e(t.tool) : e;\n    return V(o) || (t.data = it(t.data, o)), t;\n  });\n}\nfunction q(n, e = {}) {\n  const t = {\n    tags: e\n  };\n  return new Qo(t).clean(n);\n}\nfunction it(n, e) {\n  return Array.isArray(n) ? ei(n, e) : R(n) ? ti(n, e) : Q(n) ? oi(n, e) : n;\n}\nfunction ei(n, e) {\n  return n.map((t) => it(t, e));\n}\nfunction ti(n, e) {\n  const t = {};\n  for (const o in n) {\n    if (!Object.prototype.hasOwnProperty.call(n, o))\n      continue;\n    const i = n[o], s = ii(e[o]) ? e[o] : e;\n    t[o] = it(i, s);\n  }\n  return t;\n}\nfunction oi(n, e) {\n  return R(e) ? q(n, e) : e === !1 ? q(n, {}) : n;\n}\nfunction ii(n) {\n  return R(n) || yo(n) || O(n);\n}\nclass si extends y {\n  /**\n   * Available methods\n   *\n   * @returns {SanitizerConfig}\n   */\n  get methods() {\n    return {\n      clean: (e, t) => this.clean(e, t)\n    };\n  }\n  /**\n   * Perform sanitizing of a string\n   *\n   * @param {string} taintString - what to sanitize\n   * @param {SanitizerConfig} config - sanitizer config\n   * @returns {string}\n   */\n  clean(e, t) {\n    return q(e, t);\n  }\n}\nclass ni extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Saver}\n   */\n  get methods() {\n    return {\n      save: () => this.save()\n    };\n  }\n  /**\n   * Return Editor's data\n   *\n   * @returns {OutputData}\n   */\n  save() {\n    const e = \"Editor's content can not be saved in read-only mode\";\n    return this.Editor.ReadOnly.isEnabled ? (X(e, \"warn\"), Promise.reject(new Error(e))) : this.Editor.Saver.save();\n  }\n}\nclass ri extends y {\n  constructor() {\n    super(...arguments), this.selectionUtils = new b();\n  }\n  /**\n   * Available methods\n   *\n   * @returns {SelectionAPIInterface}\n   */\n  get methods() {\n    return {\n      findParentTag: (e, t) => this.findParentTag(e, t),\n      expandToTag: (e) => this.expandToTag(e),\n      save: () => this.selectionUtils.save(),\n      restore: () => this.selectionUtils.restore(),\n      setFakeBackground: () => this.selectionUtils.setFakeBackground(),\n      removeFakeBackground: () => this.selectionUtils.removeFakeBackground()\n    };\n  }\n  /**\n   * Looks ahead from selection and find passed tag with class name\n   *\n   * @param {string} tagName - tag to find\n   * @param {string} className - tag's class name\n   * @returns {HTMLElement|null}\n   */\n  findParentTag(e, t) {\n    return this.selectionUtils.findParentTag(e, t);\n  }\n  /**\n   * Expand selection to passed tag\n   *\n   * @param {HTMLElement} node - tag that should contain selection\n   */\n  expandToTag(e) {\n    this.selectionUtils.expandToTag(e);\n  }\n}\nclass li extends y {\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      getBlockTools: () => Array.from(this.Editor.Tools.blockTools.values())\n    };\n  }\n}\nclass ai extends y {\n  /**\n   * Exported classes\n   */\n  get classes() {\n    return {\n      /**\n       * Base Block styles\n       */\n      block: \"cdx-block\",\n      /**\n       * Inline Tools styles\n       */\n      inlineToolButton: \"ce-inline-tool\",\n      inlineToolButtonActive: \"ce-inline-tool--active\",\n      /**\n       * UI elements\n       */\n      input: \"cdx-input\",\n      loader: \"cdx-loader\",\n      button: \"cdx-button\",\n      /**\n       * Settings styles\n       */\n      settingsButton: \"cdx-settings-button\",\n      settingsButtonActive: \"cdx-settings-button--active\"\n    };\n  }\n}\nclass ci extends y {\n  /**\n   * Available methods\n   *\n   * @returns {Toolbar}\n   */\n  get methods() {\n    return {\n      close: () => this.close(),\n      open: () => this.open(),\n      toggleBlockSettings: (e) => this.toggleBlockSettings(e),\n      toggleToolbox: (e) => this.toggleToolbox(e)\n    };\n  }\n  /**\n   * Open toolbar\n   */\n  open() {\n    this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * Close toolbar and all included elements\n   */\n  close() {\n    this.Editor.Toolbar.close();\n  }\n  /**\n   * Toggles Block Setting of the current block\n   *\n   * @param {boolean} openingState —  opening state of Block Setting\n   */\n  toggleBlockSettings(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbar because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.BlockSettings.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.open()) : this.Editor.BlockSettings.close();\n  }\n  /**\n   * Open toolbox\n   *\n   * @param {boolean} openingState - Opening state of toolbox\n   */\n  toggleToolbox(e) {\n    if (this.Editor.BlockManager.currentBlockIndex === -1) {\n      X(\"Could't toggle the Toolbox because there is no block selected \", \"warn\");\n      return;\n    }\n    e ?? !this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open()) : this.Editor.Toolbar.toolbox.close();\n  }\n}\nvar $t = { exports: {} };\n/*!\n * CodeX.Tooltips\n * \n * @version 1.0.5\n * \n * @licence MIT\n * @author CodeX <https://codex.so>\n * \n * \n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      t.exports = i(1);\n    }, function(t, o, i) {\n      i.r(o), i.d(o, \"default\", function() {\n        return s;\n      });\n      class s {\n        constructor() {\n          this.nodes = { wrapper: null, content: null }, this.showed = !1, this.offsetTop = 10, this.offsetLeft = 10, this.offsetRight = 10, this.hidingDelay = 0, this.handleWindowScroll = () => {\n            this.showed && this.hide(!0);\n          }, this.loadStyles(), this.prepare(), window.addEventListener(\"scroll\", this.handleWindowScroll, { passive: !0 });\n        }\n        get CSS() {\n          return { tooltip: \"ct\", tooltipContent: \"ct__content\", tooltipShown: \"ct--shown\", placement: { left: \"ct--left\", bottom: \"ct--bottom\", right: \"ct--right\", top: \"ct--top\" } };\n        }\n        show(l, a, c) {\n          this.nodes.wrapper || this.prepare(), this.hidingTimeout && clearTimeout(this.hidingTimeout);\n          const u = Object.assign({ placement: \"bottom\", marginTop: 0, marginLeft: 0, marginRight: 0, marginBottom: 0, delay: 70, hidingDelay: 0 }, c);\n          if (u.hidingDelay && (this.hidingDelay = u.hidingDelay), this.nodes.content.innerHTML = \"\", typeof a == \"string\")\n            this.nodes.content.appendChild(document.createTextNode(a));\n          else {\n            if (!(a instanceof Node))\n              throw Error(\"[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But \" + typeof a + \" given.\");\n            this.nodes.content.appendChild(a);\n          }\n          switch (this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)), u.placement) {\n            case \"top\":\n              this.placeTop(l, u);\n              break;\n            case \"left\":\n              this.placeLeft(l, u);\n              break;\n            case \"right\":\n              this.placeRight(l, u);\n              break;\n            case \"bottom\":\n            default:\n              this.placeBottom(l, u);\n          }\n          u && u.delay ? this.showingTimeout = setTimeout(() => {\n            this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0;\n          }, u.delay) : (this.nodes.wrapper.classList.add(this.CSS.tooltipShown), this.showed = !0);\n        }\n        hide(l = !1) {\n          if (this.hidingDelay && !l)\n            return this.hidingTimeout && clearTimeout(this.hidingTimeout), void (this.hidingTimeout = setTimeout(() => {\n              this.hide(!0);\n            }, this.hidingDelay));\n          this.nodes.wrapper.classList.remove(this.CSS.tooltipShown), this.showed = !1, this.showingTimeout && clearTimeout(this.showingTimeout);\n        }\n        onHover(l, a, c) {\n          l.addEventListener(\"mouseenter\", () => {\n            this.show(l, a, c);\n          }), l.addEventListener(\"mouseleave\", () => {\n            this.hide();\n          });\n        }\n        destroy() {\n          this.nodes.wrapper.remove(), window.removeEventListener(\"scroll\", this.handleWindowScroll);\n        }\n        prepare() {\n          this.nodes.wrapper = this.make(\"div\", this.CSS.tooltip), this.nodes.content = this.make(\"div\", this.CSS.tooltipContent), this.append(this.nodes.wrapper, this.nodes.content), this.append(document.body, this.nodes.wrapper);\n        }\n        loadStyles() {\n          const l = \"codex-tooltips-style\";\n          if (document.getElementById(l))\n            return;\n          const a = i(2), c = this.make(\"style\", null, { textContent: a.toString(), id: l });\n          this.prepend(document.head, c);\n        }\n        placeBottom(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left + l.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.bottom + window.pageYOffset + this.offsetTop + a.marginTop;\n          this.applyPlacement(\"bottom\", u, h);\n        }\n        placeTop(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left + l.clientWidth / 2 - this.nodes.wrapper.offsetWidth / 2, h = c.top + window.pageYOffset - this.nodes.wrapper.clientHeight - this.offsetTop;\n          this.applyPlacement(\"top\", u, h);\n        }\n        placeLeft(l, a) {\n          const c = l.getBoundingClientRect(), u = c.left - this.nodes.wrapper.offsetWidth - this.offsetLeft - a.marginLeft, h = c.top + window.pageYOffset + l.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"left\", u, h);\n        }\n        placeRight(l, a) {\n          const c = l.getBoundingClientRect(), u = c.right + this.offsetRight + a.marginRight, h = c.top + window.pageYOffset + l.clientHeight / 2 - this.nodes.wrapper.offsetHeight / 2;\n          this.applyPlacement(\"right\", u, h);\n        }\n        applyPlacement(l, a, c) {\n          this.nodes.wrapper.classList.add(this.CSS.placement[l]), this.nodes.wrapper.style.left = a + \"px\", this.nodes.wrapper.style.top = c + \"px\";\n        }\n        make(l, a = null, c = {}) {\n          const u = document.createElement(l);\n          Array.isArray(a) ? u.classList.add(...a) : a && u.classList.add(a);\n          for (const h in c)\n            c.hasOwnProperty(h) && (u[h] = c[h]);\n          return u;\n        }\n        append(l, a) {\n          Array.isArray(a) ? a.forEach((c) => l.appendChild(c)) : l.appendChild(a);\n        }\n        prepend(l, a) {\n          Array.isArray(a) ? (a = a.reverse()).forEach((c) => l.prepend(c)) : l.prepend(a);\n        }\n      }\n    }, function(t, o) {\n      t.exports = `.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:\"\";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url(\"\")){.ct:before{border-radius:0;-webkit-mask-box-image:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\"><path d=\"M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z\"/></svg>') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:\"\";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}`;\n    }]).default;\n  });\n})($t);\nvar di = $t.exports;\nconst hi = /* @__PURE__ */ Fe(di);\nlet U = null;\nfunction st() {\n  U || (U = new hi());\n}\nfunction ui(n, e, t) {\n  st(), U == null || U.show(n, e, t);\n}\nfunction Ne(n = !1) {\n  st(), U == null || U.hide(n);\n}\nfunction Pe(n, e, t) {\n  st(), U == null || U.onHover(n, e, t);\n}\nfunction pi() {\n  U == null || U.destroy(), U = null;\n}\nclass fi extends y {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    });\n  }\n  /**\n   * Available methods\n   */\n  get methods() {\n    return {\n      show: (e, t, o) => this.show(e, t, o),\n      hide: () => this.hide(),\n      onHover: (e, t, o) => this.onHover(e, t, o)\n    };\n  }\n  /**\n   * Method show tooltip on element with passed HTML content\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  show(e, t, o) {\n    ui(e, t, o);\n  }\n  /**\n   * Method hides tooltip on HTML page\n   */\n  hide() {\n    Ne();\n  }\n  /**\n   * Decorator for showing Tooltip by mouseenter/mouseleave\n   *\n   * @param {HTMLElement} element - element on which tooltip should be shown\n   * @param {TooltipContent} content - tooltip content\n   * @param {TooltipOptions} options - tooltip options\n   */\n  onHover(e, t, o) {\n    Pe(e, t, o);\n  }\n}\nclass gi extends y {\n  /**\n   * Available methods / getters\n   */\n  get methods() {\n    return {\n      nodes: this.editorNodes\n      /**\n       * There can be added some UI methods, like toggleThinMode() etc\n       */\n    };\n  }\n  /**\n   * Exported classes\n   */\n  get editorNodes() {\n    return {\n      /**\n       * Top-level editor instance wrapper\n       */\n      wrapper: this.Editor.UI.nodes.wrapper,\n      /**\n       * Element that holds all the Blocks\n       */\n      redactor: this.Editor.UI.nodes.redactor\n    };\n  }\n}\nfunction Yt(n, e) {\n  const t = {};\n  return Object.entries(n).forEach(([o, i]) => {\n    if (R(i)) {\n      const s = e ? `${e}.${o}` : o;\n      Object.values(i).every((l) => Q(l)) ? t[o] = s : t[o] = Yt(i, s);\n      return;\n    }\n    t[o] = i;\n  }), t;\n}\nconst K = Yt(Lt);\nfunction mi(n, e) {\n  const t = {};\n  return Object.keys(n).forEach((o) => {\n    const i = e[o];\n    i !== void 0 ? t[i] = n[o] : t[o] = n[o];\n  }), t;\n}\nconst Wt = class ve {\n  /**\n   * @param {HTMLElement[]} nodeList — the list of iterable HTML-items\n   * @param {string} focusedCssClass - user-provided CSS-class that will be set in flipping process\n   */\n  constructor(e, t) {\n    this.cursor = -1, this.items = [], this.items = e || [], this.focusedCssClass = t;\n  }\n  /**\n   * Returns Focused button Node\n   *\n   * @returns {HTMLElement}\n   */\n  get currentItem() {\n    return this.cursor === -1 ? null : this.items[this.cursor];\n  }\n  /**\n   * Sets cursor to specified position\n   *\n   * @param cursorPosition - new cursor position\n   */\n  setCursor(e) {\n    e < this.items.length && e >= -1 && (this.dropCursor(), this.cursor = e, this.items[this.cursor].classList.add(this.focusedCssClass));\n  }\n  /**\n   * Sets items. Can be used when iterable items changed dynamically\n   *\n   * @param {HTMLElement[]} nodeList - nodes to iterate\n   */\n  setItems(e) {\n    this.items = e;\n  }\n  /**\n   * Sets cursor next to the current\n   */\n  next() {\n    this.cursor = this.leafNodesAndReturnIndex(ve.directions.RIGHT);\n  }\n  /**\n   * Sets cursor before current\n   */\n  previous() {\n    this.cursor = this.leafNodesAndReturnIndex(ve.directions.LEFT);\n  }\n  /**\n   * Sets cursor to the default position and removes CSS-class from previously focused item\n   */\n  dropCursor() {\n    this.cursor !== -1 && (this.items[this.cursor].classList.remove(this.focusedCssClass), this.cursor = -1);\n  }\n  /**\n   * Leafs nodes inside the target list from active element\n   *\n   * @param {string} direction - leaf direction. Can be 'left' or 'right'\n   * @returns {number} index of focused node\n   */\n  leafNodesAndReturnIndex(e) {\n    if (this.items.length === 0)\n      return this.cursor;\n    let t = this.cursor;\n    return t === -1 ? t = e === ve.directions.RIGHT ? -1 : 0 : this.items[t].classList.remove(this.focusedCssClass), e === ve.directions.RIGHT ? t = (t + 1) % this.items.length : t = (this.items.length + t - 1) % this.items.length, d.canSetCaret(this.items[t]) && Oe(() => b.setCursor(this.items[t]), 50)(), this.items[t].classList.add(this.focusedCssClass), t;\n  }\n};\nWt.directions = {\n  RIGHT: \"right\",\n  LEFT: \"left\"\n};\nlet me = Wt;\nclass le {\n  /**\n   * @param options - different constructing settings\n   */\n  constructor(e) {\n    this.iterator = null, this.activated = !1, this.flipCallbacks = [], this.onKeyDown = (t) => {\n      if (this.isEventReadyForHandling(t))\n        switch (le.usedKeys.includes(t.keyCode) && t.preventDefault(), t.keyCode) {\n          case w.TAB:\n            this.handleTabPress(t);\n            break;\n          case w.LEFT:\n          case w.UP:\n            this.flipLeft();\n            break;\n          case w.RIGHT:\n          case w.DOWN:\n            this.flipRight();\n            break;\n          case w.ENTER:\n            this.handleEnterPress(t);\n            break;\n        }\n    }, this.iterator = new me(e.items, e.focusedItemClass), this.activateCallback = e.activateCallback, this.allowedKeys = e.allowedKeys || le.usedKeys;\n  }\n  /**\n   * True if flipper is currently activated\n   */\n  get isActivated() {\n    return this.activated;\n  }\n  /**\n   * Array of keys (codes) that is handled by Flipper\n   * Used to:\n   *  - preventDefault only for this keys, not all keydowns (@see constructor)\n   *  - to skip external behaviours only for these keys, when filler is activated (@see BlockEvents@arrowRightAndDown)\n   */\n  static get usedKeys() {\n    return [\n      w.TAB,\n      w.LEFT,\n      w.RIGHT,\n      w.ENTER,\n      w.UP,\n      w.DOWN\n    ];\n  }\n  /**\n   * Active tab/arrows handling by flipper\n   *\n   * @param items - Some modules (like, InlineToolbar, BlockSettings) might refresh buttons dynamically\n   * @param cursorPosition - index of the item that should be focused once flipper is activated\n   */\n  activate(e, t) {\n    this.activated = !0, e && this.iterator.setItems(e), t !== void 0 && this.iterator.setCursor(t), document.addEventListener(\"keydown\", this.onKeyDown, !0);\n  }\n  /**\n   * Disable tab/arrows handling by flipper\n   */\n  deactivate() {\n    this.activated = !1, this.dropCursor(), document.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n  /**\n   * Focus first item\n   */\n  focusFirst() {\n    this.dropCursor(), this.flipRight();\n  }\n  /**\n   * Focuses previous flipper iterator item\n   */\n  flipLeft() {\n    this.iterator.previous(), this.flipCallback();\n  }\n  /**\n   * Focuses next flipper iterator item\n   */\n  flipRight() {\n    this.iterator.next(), this.flipCallback();\n  }\n  /**\n   * Return true if some button is focused\n   */\n  hasFocus() {\n    return !!this.iterator.currentItem;\n  }\n  /**\n   * Registeres function that should be executed on each navigation action\n   *\n   * @param cb - function to execute\n   */\n  onFlip(e) {\n    this.flipCallbacks.push(e);\n  }\n  /**\n   * Unregisteres function that is executed on each navigation action\n   *\n   * @param cb - function to stop executing\n   */\n  removeOnFlip(e) {\n    this.flipCallbacks = this.flipCallbacks.filter((t) => t !== e);\n  }\n  /**\n   * Drops flipper's iterator cursor\n   *\n   * @see DomIterator#dropCursor\n   */\n  dropCursor() {\n    this.iterator.dropCursor();\n  }\n  /**\n   * This function is fired before handling flipper keycodes\n   * The result of this function defines if it is need to be handled or not\n   *\n   * @param {KeyboardEvent} event - keydown keyboard event\n   * @returns {boolean}\n   */\n  isEventReadyForHandling(e) {\n    return this.activated && this.allowedKeys.includes(e.keyCode);\n  }\n  /**\n   * When flipper is activated tab press will leaf the items\n   *\n   * @param {KeyboardEvent} event - tab keydown event\n   */\n  handleTabPress(e) {\n    switch (e.shiftKey ? me.directions.LEFT : me.directions.RIGHT) {\n      case me.directions.RIGHT:\n        this.flipRight();\n        break;\n      case me.directions.LEFT:\n        this.flipLeft();\n        break;\n    }\n  }\n  /**\n   * Enter press will click current item if flipper is activated\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  handleEnterPress(e) {\n    this.activated && (this.iterator.currentItem && (e.stopPropagation(), e.preventDefault(), this.iterator.currentItem.click()), O(this.activateCallback) && this.activateCallback(this.iterator.currentItem));\n  }\n  /**\n   * Fired after flipping in any direction\n   */\n  flipCallback() {\n    this.iterator.currentItem && this.iterator.currentItem.scrollIntoViewIfNeeded(), this.flipCallbacks.forEach((e) => e());\n  }\n}\nconst bi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11\"/></svg>', ki = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10\"/></svg>', vi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.5 17.5L9.64142 12.6414C9.56331 12.5633 9.56331 12.4367 9.64142 12.3586L14.5 7.5\"/></svg>', wi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9.58284 17.5L14.4414 12.6414C14.5195 12.5633 14.5195 12.4367 14.4414 12.3586L9.58284 7.5\"/></svg>', xi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15\"/></svg>', yi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', Ei = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"12\" cy=\"12\" r=\"4\" stroke=\"currentColor\" stroke-width=\"2\"/></svg>', Bi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13.34 10C12.4223 12.7337 11 17 11 17\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.21 7H14.2\"/></svg>', xt = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72\"/></svg>', Ti = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 7.29999H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 7.29999H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.30999 12H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 12H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.40999 16.7H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 16.7H14.59\"/></svg>', Ci = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', Kt = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M11.5 17.5L5 11M5 11V15.5M5 11H9.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12.5 6.5L19 13M19 13V8.5M19 13H14.5\"/></svg>', Si = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><circle cx=\"10.5\" cy=\"10.5\" r=\"5.5\" stroke=\"currentColor\" stroke-width=\"2\"/><line x1=\"15.4142\" x2=\"19\" y1=\"15\" y2=\"18.5858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', Ii = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397\"/><line x1=\"12.1142\" x2=\"11.7\" y1=\"12.2\" y2=\"11.7858\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>', Mi = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 15.02V15.01\"/></svg>', Ai = \"__\", Oi = \"--\";\nfunction te(n) {\n  return (e, t) => [[n, e].filter((i) => !!i).join(Ai), t].filter((i) => !!i).join(Oi);\n}\nconst be = te(\"ce-hint\"), ke = {\n  root: be(),\n  alignedStart: be(null, \"align-left\"),\n  alignedCenter: be(null, \"align-center\"),\n  title: be(\"title\"),\n  description: be(\"description\")\n};\nclass Li {\n  /**\n   * Constructs the hint content instance\n   *\n   * @param params - hint content parameters\n   */\n  constructor(e) {\n    this.nodes = {\n      root: d.make(\"div\", [ke.root, e.alignment === \"center\" ? ke.alignedCenter : ke.alignedStart]),\n      title: d.make(\"div\", ke.title, { textContent: e.title })\n    }, this.nodes.root.appendChild(this.nodes.title), e.description !== void 0 && (this.nodes.description = d.make(\"div\", ke.description, { textContent: e.description }), this.nodes.root.appendChild(this.nodes.description));\n  }\n  /**\n   * Returns the root element of the hint content\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n}\nclass nt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    this.params = e;\n  }\n  /**\n   * Item name if exists\n   */\n  get name() {\n    if (this.params !== void 0 && \"name\" in this.params)\n      return this.params.name;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    Ne();\n  }\n  /**\n   * Called when children popover is opened (if exists)\n   */\n  onChildrenOpen() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onOpen) == \"function\" && this.params.children.onOpen();\n  }\n  /**\n   * Called when children popover is closed (if exists)\n   */\n  onChildrenClose() {\n    var e;\n    this.params !== void 0 && \"children\" in this.params && typeof ((e = this.params.children) == null ? void 0 : e.onClose) == \"function\" && this.params.children.onClose();\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    var e, t;\n    this.params !== void 0 && \"onActivate\" in this.params && ((t = (e = this.params).onActivate) == null || t.call(e, this.params));\n  }\n  /**\n   * Adds hint to the item element if hint data is provided\n   *\n   * @param itemElement - popover item root element to add hint to\n   * @param hintData - hint data\n   */\n  addHint(e, t) {\n    const o = new Li(t);\n    Pe(e, o.getElement(), {\n      placement: t.position,\n      hidingDelay: 100\n    });\n  }\n  /**\n   * Returns item children that are represented as popover items\n   */\n  get children() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.items) !== void 0 ? this.params.children.items : [];\n  }\n  /**\n   * Returns true if item has any type of children\n   */\n  get hasChildren() {\n    return this.children.length > 0;\n  }\n  /**\n   * Returns true if item children should be open instantly after popover is opened and not on item click/hover\n   */\n  get isChildrenOpen() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.isOpen) === !0;\n  }\n  /**\n   * True if item children items should be navigatable via keyboard\n   */\n  get isChildrenFlippable() {\n    var e;\n    return !(this.params === void 0 || !(\"children\" in this.params) || ((e = this.params.children) == null ? void 0 : e.isFlippable) === !1);\n  }\n  /**\n   * Returns true if item has children that should be searchable\n   */\n  get isChildrenSearchable() {\n    var e;\n    return this.params !== void 0 && \"children\" in this.params && ((e = this.params.children) == null ? void 0 : e.searchable) === !0;\n  }\n  /**\n   * True if popover should close once item is activated\n   */\n  get closeOnActivate() {\n    return this.params !== void 0 && \"closeOnActivate\" in this.params && this.params.closeOnActivate;\n  }\n  /**\n   * True if item is active\n   */\n  get isActive() {\n    return this.params === void 0 || !(\"isActive\" in this.params) ? !1 : typeof this.params.isActive == \"function\" ? this.params.isActive() : this.params.isActive === !0;\n  }\n}\nconst W = te(\"ce-popover-item\"), L = {\n  container: W(),\n  active: W(null, \"active\"),\n  disabled: W(null, \"disabled\"),\n  focused: W(null, \"focused\"),\n  hidden: W(null, \"hidden\"),\n  confirmationState: W(null, \"confirmation\"),\n  noHover: W(null, \"no-hover\"),\n  noFocus: W(null, \"no-focus\"),\n  title: W(\"title\"),\n  secondaryTitle: W(\"secondary-title\"),\n  icon: W(\"icon\"),\n  iconTool: W(\"icon\", \"tool\"),\n  iconChevronRight: W(\"icon\", \"chevron-right\"),\n  wobbleAnimation: te(\"wobble\")()\n};\nclass se extends nt {\n  /**\n   * Constructs popover item instance\n   *\n   * @param params - popover item construction params\n   * @param renderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e), this.params = e, this.nodes = {\n      root: null,\n      icon: null\n    }, this.confirmationState = null, this.removeSpecialFocusBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noFocus);\n    }, this.removeSpecialHoverBehavior = () => {\n      var o;\n      (o = this.nodes.root) == null || o.classList.remove(L.noHover);\n    }, this.onErrorAnimationEnd = () => {\n      var o, i;\n      (o = this.nodes.icon) == null || o.classList.remove(L.wobbleAnimation), (i = this.nodes.icon) == null || i.removeEventListener(\"animationend\", this.onErrorAnimationEnd);\n    }, this.nodes.root = this.make(e, t);\n  }\n  /**\n   * True if item is disabled and hence not clickable\n   */\n  get isDisabled() {\n    return this.params.isDisabled === !0;\n  }\n  /**\n   * Exposes popover item toggle parameter\n   */\n  get toggle() {\n    return this.params.toggle;\n  }\n  /**\n   * Item title\n   */\n  get title() {\n    return this.params.title;\n  }\n  /**\n   * True if confirmation state is enabled for popover item\n   */\n  get isConfirmationStateEnabled() {\n    return this.confirmationState !== null;\n  }\n  /**\n   * True if item is focused in keyboard navigation process\n   */\n  get isFocused() {\n    return this.nodes.root === null ? !1 : this.nodes.root.classList.contains(L.focused);\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Called on popover item click\n   */\n  handleClick() {\n    if (this.isConfirmationStateEnabled && this.confirmationState !== null) {\n      this.activateOrEnableConfirmationMode(this.confirmationState);\n      return;\n    }\n    this.activateOrEnableConfirmationMode(this.params);\n  }\n  /**\n   * Toggles item active state\n   *\n   * @param isActive - true if item should strictly should become active\n   */\n  toggleActive(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.active, e);\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(L.hidden, e);\n  }\n  /**\n   * Resets popover item to its original state\n   */\n  reset() {\n    this.isConfirmationStateEnabled && this.disableConfirmationMode();\n  }\n  /**\n   * Method called once item becomes focused during keyboard navigation\n   */\n  onFocus() {\n    this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Constructs HTML element corresponding to popover item params\n   *\n   * @param params - item construction params\n   * @param renderParams - popover item render params\n   */\n  make(e, t) {\n    var s, r;\n    const o = (t == null ? void 0 : t.wrapperTag) || \"div\", i = d.make(o, L.container, {\n      type: o === \"button\" ? \"button\" : void 0\n    });\n    return e.name && (i.dataset.itemName = e.name), this.nodes.icon = d.make(\"div\", [L.icon, L.iconTool], {\n      innerHTML: e.icon || Ei\n    }), i.appendChild(this.nodes.icon), e.title !== void 0 && i.appendChild(d.make(\"div\", L.title, {\n      innerHTML: e.title || \"\"\n    })), e.secondaryLabel && i.appendChild(d.make(\"div\", L.secondaryTitle, {\n      textContent: e.secondaryLabel\n    })), this.hasChildren && i.appendChild(d.make(\"div\", [L.icon, L.iconChevronRight], {\n      innerHTML: wi\n    })), this.isActive && i.classList.add(L.active), e.isDisabled && i.classList.add(L.disabled), e.hint !== void 0 && ((s = t == null ? void 0 : t.hint) == null ? void 0 : s.enabled) !== !1 && this.addHint(i, {\n      ...e.hint,\n      position: ((r = t == null ? void 0 : t.hint) == null ? void 0 : r.position) || \"right\"\n    }), i;\n  }\n  /**\n   * Activates confirmation mode for the item.\n   *\n   * @param newState - new popover item params that should be applied\n   */\n  enableConfirmationMode(e) {\n    if (this.nodes.root === null)\n      return;\n    const t = {\n      ...this.params,\n      ...e,\n      confirmation: \"confirmation\" in e ? e.confirmation : void 0\n    }, o = this.make(t);\n    this.nodes.root.innerHTML = o.innerHTML, this.nodes.root.classList.add(L.confirmationState), this.confirmationState = e, this.enableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Returns item to its original state\n   */\n  disableConfirmationMode() {\n    if (this.nodes.root === null)\n      return;\n    const e = this.make(this.params);\n    this.nodes.root.innerHTML = e.innerHTML, this.nodes.root.classList.remove(L.confirmationState), this.confirmationState = null, this.disableSpecialHoverAndFocusBehavior();\n  }\n  /**\n   * Enables special focus and hover behavior for item in confirmation state.\n   * This is needed to prevent item from being highlighted as hovered/focused just after click.\n   */\n  enableSpecialHoverAndFocusBehavior() {\n    var e, t, o;\n    (e = this.nodes.root) == null || e.classList.add(L.noHover), (t = this.nodes.root) == null || t.classList.add(L.noFocus), (o = this.nodes.root) == null || o.addEventListener(\"mouseleave\", this.removeSpecialHoverBehavior, { once: !0 });\n  }\n  /**\n   * Disables special focus and hover behavior\n   */\n  disableSpecialHoverAndFocusBehavior() {\n    var e;\n    this.removeSpecialFocusBehavior(), this.removeSpecialHoverBehavior(), (e = this.nodes.root) == null || e.removeEventListener(\"mouseleave\", this.removeSpecialHoverBehavior);\n  }\n  /**\n   * Executes item's onActivate callback if the item has no confirmation configured\n   *\n   * @param item - item to activate or bring to confirmation mode\n   */\n  activateOrEnableConfirmationMode(e) {\n    var t;\n    if (!(\"confirmation\" in e) || e.confirmation === void 0)\n      try {\n        (t = e.onActivate) == null || t.call(e, e), this.disableConfirmationMode();\n      } catch {\n        this.animateError();\n      }\n    else\n      this.enableConfirmationMode(e.confirmation);\n  }\n  /**\n   * Animates item which symbolizes that error occured while executing 'onActivate()' callback\n   */\n  animateError() {\n    var e, t, o;\n    (e = this.nodes.icon) != null && e.classList.contains(L.wobbleAnimation) || ((t = this.nodes.icon) == null || t.classList.add(L.wobbleAnimation), (o = this.nodes.icon) == null || o.addEventListener(\"animationend\", this.onErrorAnimationEnd));\n  }\n}\nconst Ue = te(\"ce-popover-item-separator\"), je = {\n  container: Ue(),\n  line: Ue(\"line\"),\n  hidden: Ue(null, \"hidden\")\n};\nclass Xt extends nt {\n  /**\n   * Constructs the instance\n   */\n  constructor() {\n    super(), this.nodes = {\n      root: d.make(\"div\", je.container),\n      line: d.make(\"div\", je.line)\n    }, this.nodes.root.appendChild(this.nodes.line);\n  }\n  /**\n   * Returns popover separator root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(je.hidden, e);\n  }\n}\nvar Z = /* @__PURE__ */ ((n) => (n.Closed = \"closed\", n.ClosedOnActivate = \"closed-on-activate\", n))(Z || {});\nconst H = te(\"ce-popover\"), N = {\n  popover: H(),\n  popoverContainer: H(\"container\"),\n  popoverOpenTop: H(null, \"open-top\"),\n  popoverOpenLeft: H(null, \"open-left\"),\n  popoverOpened: H(null, \"opened\"),\n  search: H(\"search\"),\n  nothingFoundMessage: H(\"nothing-found-message\"),\n  nothingFoundMessageDisplayed: H(\"nothing-found-message\", \"displayed\"),\n  items: H(\"items\"),\n  overlay: H(\"overlay\"),\n  overlayHidden: H(\"overlay\", \"hidden\"),\n  popoverNested: H(null, \"nested\"),\n  getPopoverNestedClass: (n) => H(null, `nested-level-${n.toString()}`),\n  popoverInline: H(null, \"inline\"),\n  popoverHeader: H(\"header\")\n};\nvar de = /* @__PURE__ */ ((n) => (n.NestingLevel = \"--nesting-level\", n.PopoverHeight = \"--popover-height\", n.InlinePopoverWidth = \"--inline-popover-width\", n.TriggerItemLeft = \"--trigger-item-left\", n.TriggerItemTop = \"--trigger-item-top\", n))(de || {});\nconst yt = te(\"ce-popover-item-html\"), Et = {\n  root: yt(),\n  hidden: yt(null, \"hidden\")\n};\nclass Ee extends nt {\n  /**\n   * Constructs the instance\n   *\n   * @param params – instance parameters\n   * @param renderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    var o, i;\n    super(e), this.nodes = {\n      root: d.make(\"div\", Et.root)\n    }, this.nodes.root.appendChild(e.element), e.name && (this.nodes.root.dataset.itemName = e.name), e.hint !== void 0 && ((o = t == null ? void 0 : t.hint) == null ? void 0 : o.enabled) !== !1 && this.addHint(this.nodes.root, {\n      ...e.hint,\n      position: ((i = t == null ? void 0 : t.hint) == null ? void 0 : i.position) || \"right\"\n    });\n  }\n  /**\n   * Returns popover item root element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Toggles item hidden state\n   *\n   * @param isHidden - true if item should be hidden\n   */\n  toggleHidden(e) {\n    var t;\n    (t = this.nodes.root) == null || t.classList.toggle(Et.hidden, e);\n  }\n  /**\n   * Returns list of buttons and inputs inside custom content\n   */\n  getControls() {\n    const e = this.nodes.root.querySelectorAll(\n      `button, ${d.allInputsSelector}`\n    );\n    return Array.from(e);\n  }\n}\nclass Vt extends Te {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover construction params\n   * @param itemsRenderParams - popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t = {}) {\n    super(), this.params = e, this.itemsRenderParams = t, this.listeners = new Ce(), this.messages = {\n      nothingFound: \"Nothing found\",\n      search: \"Search\"\n    }, this.items = this.buildItems(e.items), e.messages && (this.messages = {\n      ...this.messages,\n      ...e.messages\n    }), this.nodes = {}, this.nodes.popoverContainer = d.make(\"div\", [N.popoverContainer]), this.nodes.nothingFoundMessage = d.make(\"div\", [N.nothingFoundMessage], {\n      textContent: this.messages.nothingFound\n    }), this.nodes.popoverContainer.appendChild(this.nodes.nothingFoundMessage), this.nodes.items = d.make(\"div\", [N.items]), this.items.forEach((o) => {\n      const i = o.getElement();\n      i !== null && this.nodes.items.appendChild(i);\n    }), this.nodes.popoverContainer.appendChild(this.nodes.items), this.listeners.on(this.nodes.popoverContainer, \"click\", (o) => this.handleClick(o)), this.nodes.popover = d.make(\"div\", [\n      N.popover,\n      this.params.class\n    ]), this.nodes.popover.appendChild(this.nodes.popoverContainer);\n  }\n  /**\n   * List of default popover items that are searchable and may have confirmation state\n   */\n  get itemsDefault() {\n    return this.items.filter((e) => e instanceof se);\n  }\n  /**\n   * Returns HTML element corresponding to the popover\n   */\n  getElement() {\n    return this.nodes.popover;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.popover.classList.add(N.popoverOpened), this.search !== void 0 && this.search.focus();\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.nodes.popover.classList.remove(N.popoverOpened), this.nodes.popover.classList.remove(N.popoverOpenTop), this.itemsDefault.forEach((e) => e.reset()), this.search !== void 0 && this.search.clear(), this.emit(Z.Closed);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    var e;\n    this.items.forEach((t) => t.destroy()), this.nodes.popover.remove(), this.listeners.removeAll(), (e = this.search) == null || e.destroy();\n  }\n  /**\n   * Looks for the item by name and imitates click on it\n   *\n   * @param name - name of the item to activate\n   */\n  activateItemByName(e) {\n    const t = this.items.find((o) => o.name === e);\n    this.handleItemClick(t);\n  }\n  /**\n   * Factory method for creating popover items\n   *\n   * @param items - list of items params\n   */\n  buildItems(e) {\n    return e.map((t) => {\n      switch (t.type) {\n        case A.Separator:\n          return new Xt();\n        case A.Html:\n          return new Ee(t, this.itemsRenderParams[A.Html]);\n        default:\n          return new se(t, this.itemsRenderParams[A.Default]);\n      }\n    });\n  }\n  /**\n   * Retrieves popover item that is the target of the specified event\n   *\n   * @param event - event to retrieve popover item from\n   */\n  getTargetItem(e) {\n    return this.items.filter((t) => t instanceof se || t instanceof Ee).find((t) => {\n      const o = t.getElement();\n      return o === null ? !1 : e.composedPath().includes(o);\n    });\n  }\n  /**\n   * Handles popover item click\n   *\n   * @param item - item to handle click of\n   */\n  handleItemClick(e) {\n    if (!(\"isDisabled\" in e && e.isDisabled)) {\n      if (e.hasChildren) {\n        this.showNestedItems(e), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick();\n        return;\n      }\n      this.itemsDefault.filter((t) => t !== e).forEach((t) => t.reset()), \"handleClick\" in e && typeof e.handleClick == \"function\" && e.handleClick(), this.toggleItemActivenessIfNeeded(e), e.closeOnActivate && (this.hide(), this.emit(Z.ClosedOnActivate));\n    }\n  }\n  /**\n   * Handles clicks inside popover\n   *\n   * @param event - item to handle click of\n   */\n  handleClick(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.handleItemClick(t);\n  }\n  /**\n   * - Toggles item active state, if clicked popover item has property 'toggle' set to true.\n   *\n   * - Performs radiobutton-like behavior if the item has property 'toggle' set to string key.\n   * (All the other items with the same key get inactive, and the item gets active)\n   *\n   * @param clickedItem - popover item that was clicked\n   */\n  toggleItemActivenessIfNeeded(e) {\n    if (e instanceof se && (e.toggle === !0 && e.toggleActive(), typeof e.toggle == \"string\")) {\n      const t = this.itemsDefault.filter((o) => o.toggle === e.toggle);\n      if (t.length === 1) {\n        e.toggleActive();\n        return;\n      }\n      t.forEach((o) => {\n        o.toggleActive(o === e);\n      });\n    }\n  }\n}\nvar De = /* @__PURE__ */ ((n) => (n.Search = \"search\", n))(De || {});\nconst $e = te(\"cdx-search-field\"), Ye = {\n  wrapper: $e(),\n  icon: $e(\"icon\"),\n  input: $e(\"input\")\n};\nclass _i extends Te {\n  /**\n   * @param options - available config\n   * @param options.items - searchable items list\n   * @param options.placeholder - input placeholder\n   */\n  constructor({ items: e, placeholder: t }) {\n    super(), this.listeners = new Ce(), this.items = e, this.wrapper = d.make(\"div\", Ye.wrapper);\n    const o = d.make(\"div\", Ye.icon, {\n      innerHTML: Si\n    });\n    this.input = d.make(\"input\", Ye.input, {\n      placeholder: t,\n      /**\n       * Used to prevent focusing on the input by Tab key\n       * (Popover in the Toolbar lays below the blocks,\n       * so Tab in the last block will focus this hidden input if this property is not set)\n       */\n      tabIndex: -1\n    }), this.wrapper.appendChild(o), this.wrapper.appendChild(this.input), this.listeners.on(this.input, \"input\", () => {\n      this.searchQuery = this.input.value, this.emit(De.Search, {\n        query: this.searchQuery,\n        items: this.foundItems\n      });\n    });\n  }\n  /**\n   * Returns search field element\n   */\n  getElement() {\n    return this.wrapper;\n  }\n  /**\n   * Sets focus to the input\n   */\n  focus() {\n    this.input.focus();\n  }\n  /**\n   * Clears search query and results\n   */\n  clear() {\n    this.input.value = \"\", this.searchQuery = \"\", this.emit(De.Search, {\n      query: \"\",\n      items: this.foundItems\n    });\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.listeners.removeAll();\n  }\n  /**\n   * Returns list of found items for the current search query\n   */\n  get foundItems() {\n    return this.items.filter((e) => this.checkItem(e));\n  }\n  /**\n   * Contains logic for checking whether passed item conforms the search query\n   *\n   * @param item - item to be checked\n   */\n  checkItem(e) {\n    var i, s;\n    const t = ((i = e.title) == null ? void 0 : i.toLowerCase()) || \"\", o = (s = this.searchQuery) == null ? void 0 : s.toLowerCase();\n    return o !== void 0 ? t.includes(o) : !1;\n  }\n}\nvar Ni = Object.defineProperty, Pi = Object.getOwnPropertyDescriptor, Di = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Pi(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && Ni(e, t, i), i;\n};\nconst qt = class Zt extends Vt {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   * @param itemsRenderParams – popover item render params.\n   * The parameters that are not set by user via popover api but rather depend on technical implementation\n   */\n  constructor(e, t) {\n    super(e, t), this.nestingLevel = 0, this.nestedPopoverTriggerItem = null, this.previouslyHoveredItem = null, this.scopeElement = document.body, this.hide = () => {\n      var o;\n      super.hide(), this.destroyNestedPopoverIfExists(), (o = this.flipper) == null || o.deactivate(), this.previouslyHoveredItem = null;\n    }, this.onFlip = () => {\n      const o = this.itemsDefault.find((i) => i.isFocused);\n      o == null || o.onFocus();\n    }, this.onSearch = (o) => {\n      var l;\n      const i = o.query === \"\", s = o.items.length === 0;\n      this.items.forEach((a) => {\n        let c = !1;\n        a instanceof se ? c = !o.items.includes(a) : (a instanceof Xt || a instanceof Ee) && (c = s || !i), a.toggleHidden(c);\n      }), this.toggleNothingFoundMessage(s);\n      const r = o.query === \"\" ? this.flippableElements : o.items.map((a) => a.getElement());\n      (l = this.flipper) != null && l.isActivated && (this.flipper.deactivate(), this.flipper.activate(r));\n    }, e.nestingLevel !== void 0 && (this.nestingLevel = e.nestingLevel), this.nestingLevel > 0 && this.nodes.popover.classList.add(N.popoverNested), e.scopeElement !== void 0 && (this.scopeElement = e.scopeElement), this.nodes.popoverContainer !== null && this.listeners.on(this.nodes.popoverContainer, \"mouseover\", (o) => this.handleHover(o)), e.searchable && this.addSearch(), e.flippable !== !1 && (this.flipper = new le({\n      items: this.flippableElements,\n      focusedItemClass: L.focused,\n      allowedKeys: [\n        w.TAB,\n        w.UP,\n        w.DOWN,\n        w.ENTER\n      ]\n    }), this.flipper.onFlip(this.onFlip));\n  }\n  /**\n   * Returns true if some item inside popover is focused\n   */\n  hasFocus() {\n    return this.flipper === void 0 ? !1 : this.flipper.hasFocus();\n  }\n  /**\n   * Scroll position inside items container of the popover\n   */\n  get scrollTop() {\n    return this.nodes.items === null ? 0 : this.nodes.items.scrollTop;\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetTop() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetTop;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    var e;\n    this.nodes.popover.style.setProperty(de.PopoverHeight, this.size.height + \"px\"), this.shouldOpenBottom || this.nodes.popover.classList.add(N.popoverOpenTop), this.shouldOpenRight || this.nodes.popover.classList.add(N.popoverOpenLeft), super.show(), (e = this.flipper) == null || e.activate(this.flippableElements);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    this.hide(), super.destroy();\n  }\n  /**\n   * Handles displaying nested items for the item.\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.nestedPopover !== null && this.nestedPopover !== void 0 || (this.nestedPopoverTriggerItem = e, this.showNestedPopoverForItem(e));\n  }\n  /**\n   * Handles hover events inside popover items container\n   *\n   * @param event - hover event data\n   */\n  handleHover(e) {\n    const t = this.getTargetItem(e);\n    t !== void 0 && this.previouslyHoveredItem !== t && (this.destroyNestedPopoverIfExists(), this.previouslyHoveredItem = t, t.hasChildren && this.showNestedPopoverForItem(t));\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used for correct positioning of the nested popover\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = (o ? o.offsetTop : 0) - this.scrollTop, s = this.offsetTop + i;\n    e.style.setProperty(de.TriggerItemTop, s + \"px\");\n  }\n  /**\n   * Destroys existing nested popover\n   */\n  destroyNestedPopoverIfExists() {\n    var e, t;\n    this.nestedPopover === void 0 || this.nestedPopover === null || (this.nestedPopover.off(Z.ClosedOnActivate, this.hide), this.nestedPopover.hide(), this.nestedPopover.destroy(), this.nestedPopover.getElement().remove(), this.nestedPopover = null, (e = this.flipper) == null || e.activate(this.flippableElements), (t = this.nestedPopoverTriggerItem) == null || t.onChildrenClose());\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    var o;\n    this.nestedPopover = new Zt({\n      searchable: e.isChildrenSearchable,\n      items: e.children,\n      nestingLevel: this.nestingLevel + 1,\n      flippable: e.isChildrenFlippable,\n      messages: this.messages\n    }), e.onChildrenOpen(), this.nestedPopover.on(Z.ClosedOnActivate, this.hide);\n    const t = this.nestedPopover.getElement();\n    return this.nodes.popover.appendChild(t), this.setTriggerItemPosition(t, e), t.style.setProperty(de.NestingLevel, this.nestedPopover.nestingLevel.toString()), this.nestedPopover.show(), (o = this.flipper) == null || o.deactivate(), this.nestedPopover;\n  }\n  /**\n   * Checks if popover should be opened bottom.\n   * It should happen when there is enough space below or not enough space above\n   */\n  get shouldOpenBottom() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popoverContainer.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.height, i = e.top + o, s = e.top - o, r = Math.min(window.innerHeight, t.bottom);\n    return s < t.top || i <= r;\n  }\n  /**\n   * Checks if popover should be opened left.\n   * It should happen when there is enough space in the right or not enough space in the left\n   */\n  get shouldOpenRight() {\n    if (this.nodes.popover === void 0 || this.nodes.popover === null)\n      return !1;\n    const e = this.nodes.popover.getBoundingClientRect(), t = this.scopeElement.getBoundingClientRect(), o = this.size.width, i = e.right + o, s = e.left - o, r = Math.min(window.innerWidth, t.right);\n    return s < t.left || i <= r;\n  }\n  get size() {\n    var i;\n    const e = {\n      height: 0,\n      width: 0\n    };\n    if (this.nodes.popover === null)\n      return e;\n    const t = this.nodes.popover.cloneNode(!0);\n    t.style.visibility = \"hidden\", t.style.position = \"absolute\", t.style.top = \"-1000px\", t.classList.add(N.popoverOpened), (i = t.querySelector(\".\" + N.popoverNested)) == null || i.remove(), document.body.appendChild(t);\n    const o = t.querySelector(\".\" + N.popoverContainer);\n    return e.height = o.offsetHeight, e.width = o.offsetWidth, t.remove(), e;\n  }\n  /**\n   * Returns list of elements available for keyboard navigation.\n   */\n  get flippableElements() {\n    return this.items.map((t) => {\n      if (t instanceof se)\n        return t.getElement();\n      if (t instanceof Ee)\n        return t.getControls();\n    }).flat().filter((t) => t != null);\n  }\n  /**\n   * Adds search to the popover\n   */\n  addSearch() {\n    this.search = new _i({\n      items: this.itemsDefault,\n      placeholder: this.messages.search\n    }), this.search.on(De.Search, this.onSearch);\n    const e = this.search.getElement();\n    e.classList.add(N.search), this.nodes.popoverContainer.insertBefore(e, this.nodes.popoverContainer.firstChild);\n  }\n  /**\n   * Toggles nothing found message visibility\n   *\n   * @param isDisplayed - true if the message should be displayed\n   */\n  toggleNothingFoundMessage(e) {\n    this.nodes.nothingFoundMessage.classList.toggle(N.nothingFoundMessageDisplayed, e);\n  }\n};\nDi([\n  ue\n], qt.prototype, \"size\", 1);\nlet rt = qt;\nclass Ri extends rt {\n  /**\n   * Constructs the instance\n   *\n   * @param params - instance parameters\n   */\n  constructor(e) {\n    const t = !pe();\n    super(\n      {\n        ...e,\n        class: N.popoverInline\n      },\n      {\n        [A.Default]: {\n          /**\n           * We use button instead of div here to fix bug associated with focus loss (which leads to selection change) on click in safari\n           *\n           * @todo figure out better way to solve the issue\n           */\n          wrapperTag: \"button\",\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        },\n        [A.Html]: {\n          hint: {\n            position: \"top\",\n            alignment: \"center\",\n            enabled: t\n          }\n        }\n      }\n    ), this.items.forEach((o) => {\n      !(o instanceof se) && !(o instanceof Ee) || o.hasChildren && o.isChildrenOpen && this.showNestedItems(o);\n    });\n  }\n  /**\n   * Returns visible element offset top\n   */\n  get offsetLeft() {\n    return this.nodes.popoverContainer === null ? 0 : this.nodes.popoverContainer.offsetLeft;\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nestingLevel === 0 && this.nodes.popover.style.setProperty(\n      de.InlinePopoverWidth,\n      this.size.width + \"px\"\n    ), super.show();\n  }\n  /**\n   * Disable hover event handling.\n   * Overrides parent's class behavior\n   */\n  handleHover() {\n  }\n  /**\n   * Sets CSS variable with position of item near which nested popover should be displayed.\n   * Is used to position nested popover right below clicked item\n   *\n   * @param nestedPopoverEl - nested popover element\n   * @param item – item near which nested popover should be displayed\n   */\n  setTriggerItemPosition(e, t) {\n    const o = t.getElement(), i = o ? o.offsetLeft : 0, s = this.offsetLeft + i;\n    e.style.setProperty(\n      de.TriggerItemLeft,\n      s + \"px\"\n    );\n  }\n  /**\n   * Handles displaying nested items for the item.\n   * Overriding in order to add toggling behaviour\n   *\n   * @param item – item to toggle nested popover for\n   */\n  showNestedItems(e) {\n    if (this.nestedPopoverTriggerItem === e) {\n      this.destroyNestedPopoverIfExists(), this.nestedPopoverTriggerItem = null;\n      return;\n    }\n    super.showNestedItems(e);\n  }\n  /**\n   * Creates and displays nested popover for specified item.\n   * Is used only on desktop\n   *\n   * @param item - item to display nested popover by\n   */\n  showNestedPopoverForItem(e) {\n    const t = super.showNestedPopoverForItem(e);\n    return t.getElement().classList.add(N.getPopoverNestedClass(t.nestingLevel)), t;\n  }\n  /**\n   * Overrides default item click handling.\n   * Helps to close nested popover once other item is clicked.\n   *\n   * @param item - clicked item\n   */\n  handleItemClick(e) {\n    var t;\n    e !== this.nestedPopoverTriggerItem && ((t = this.nestedPopoverTriggerItem) == null || t.handleClick(), super.destroyNestedPopoverIfExists()), super.handleItemClick(e);\n  }\n}\nconst Gt = class we {\n  constructor() {\n    this.scrollPosition = null;\n  }\n  /**\n   * Locks body element scroll\n   */\n  lock() {\n    Ge ? this.lockHard() : document.body.classList.add(we.CSS.scrollLocked);\n  }\n  /**\n   * Unlocks body element scroll\n   */\n  unlock() {\n    Ge ? this.unlockHard() : document.body.classList.remove(we.CSS.scrollLocked);\n  }\n  /**\n   * Locks scroll in a hard way (via setting fixed position to body element)\n   */\n  lockHard() {\n    this.scrollPosition = window.pageYOffset, document.documentElement.style.setProperty(\n      \"--window-scroll-offset\",\n      `${this.scrollPosition}px`\n    ), document.body.classList.add(we.CSS.scrollLockedHard);\n  }\n  /**\n   * Unlocks hard scroll lock\n   */\n  unlockHard() {\n    document.body.classList.remove(we.CSS.scrollLockedHard), this.scrollPosition !== null && window.scrollTo(0, this.scrollPosition), this.scrollPosition = null;\n  }\n};\nGt.CSS = {\n  scrollLocked: \"ce-scroll-locked\",\n  scrollLockedHard: \"ce-scroll-locked--hard\"\n};\nlet Fi = Gt;\nconst We = te(\"ce-popover-header\"), Ke = {\n  root: We(),\n  text: We(\"text\"),\n  backButton: We(\"back-button\")\n};\nclass Hi {\n  /**\n   * Constructs the instance\n   *\n   * @param params - popover header params\n   */\n  constructor({ text: e, onBackButtonClick: t }) {\n    this.listeners = new Ce(), this.text = e, this.onBackButtonClick = t, this.nodes = {\n      root: d.make(\"div\", [Ke.root]),\n      backButton: d.make(\"button\", [Ke.backButton]),\n      text: d.make(\"div\", [Ke.text])\n    }, this.nodes.backButton.innerHTML = vi, this.nodes.root.appendChild(this.nodes.backButton), this.listeners.on(this.nodes.backButton, \"click\", this.onBackButtonClick), this.nodes.text.innerText = this.text, this.nodes.root.appendChild(this.nodes.text);\n  }\n  /**\n   * Returns popover header root html element\n   */\n  getElement() {\n    return this.nodes.root;\n  }\n  /**\n   * Destroys the instance\n   */\n  destroy() {\n    this.nodes.root.remove(), this.listeners.destroy();\n  }\n}\nclass zi {\n  constructor() {\n    this.history = [];\n  }\n  /**\n   * Push new popover state\n   *\n   * @param state - new state\n   */\n  push(e) {\n    this.history.push(e);\n  }\n  /**\n   * Pop last popover state\n   */\n  pop() {\n    return this.history.pop();\n  }\n  /**\n   * Title retrieved from the current state\n   */\n  get currentTitle() {\n    return this.history.length === 0 ? \"\" : this.history[this.history.length - 1].title;\n  }\n  /**\n   * Items list retrieved from the current state\n   */\n  get currentItems() {\n    return this.history.length === 0 ? [] : this.history[this.history.length - 1].items;\n  }\n  /**\n   * Returns history to initial popover state\n   */\n  reset() {\n    for (; this.history.length > 1; )\n      this.pop();\n  }\n}\nclass Jt extends Vt {\n  /**\n   * Construct the instance\n   *\n   * @param params - popover params\n   */\n  constructor(e) {\n    super(e, {\n      [A.Default]: {\n        hint: {\n          enabled: !1\n        }\n      },\n      [A.Html]: {\n        hint: {\n          enabled: !1\n        }\n      }\n    }), this.scrollLocker = new Fi(), this.history = new zi(), this.isHidden = !0, this.nodes.overlay = d.make(\"div\", [N.overlay, N.overlayHidden]), this.nodes.popover.insertBefore(this.nodes.overlay, this.nodes.popover.firstChild), this.listeners.on(this.nodes.overlay, \"click\", () => {\n      this.hide();\n    }), this.history.push({ items: e.items });\n  }\n  /**\n   * Open popover\n   */\n  show() {\n    this.nodes.overlay.classList.remove(N.overlayHidden), super.show(), this.scrollLocker.lock(), this.isHidden = !1;\n  }\n  /**\n   * Closes popover\n   */\n  hide() {\n    this.isHidden || (super.hide(), this.nodes.overlay.classList.add(N.overlayHidden), this.scrollLocker.unlock(), this.history.reset(), this.isHidden = !0);\n  }\n  /**\n   * Clears memory\n   */\n  destroy() {\n    super.destroy(), this.scrollLocker.unlock();\n  }\n  /**\n   * Handles displaying nested items for the item\n   *\n   * @param item – item to show nested popover for\n   */\n  showNestedItems(e) {\n    this.updateItemsAndHeader(e.children, e.title), this.history.push({\n      title: e.title,\n      items: e.children\n    });\n  }\n  /**\n   * Removes rendered popover items and header and displays new ones\n   *\n   * @param items - new popover items\n   * @param title - new popover header text\n   */\n  updateItemsAndHeader(e, t) {\n    if (this.header !== null && this.header !== void 0 && (this.header.destroy(), this.header = null), t !== void 0) {\n      this.header = new Hi({\n        text: t,\n        onBackButtonClick: () => {\n          this.history.pop(), this.updateItemsAndHeader(this.history.currentItems, this.history.currentTitle);\n        }\n      });\n      const o = this.header.getElement();\n      o !== null && this.nodes.popoverContainer.insertBefore(o, this.nodes.popoverContainer.firstChild);\n    }\n    this.items.forEach((o) => {\n      var i;\n      return (i = o.getElement()) == null ? void 0 : i.remove();\n    }), this.items = this.buildItems(e), this.items.forEach((o) => {\n      var s;\n      const i = o.getElement();\n      i !== null && ((s = this.nodes.items) == null || s.appendChild(i));\n    });\n  }\n}\nclass Ui extends y {\n  constructor() {\n    super(...arguments), this.opened = !1, this.selection = new b(), this.popover = null, this.close = () => {\n      this.opened && (this.opened = !1, b.isAtEditor || this.selection.restore(), this.selection.clearSaved(), !this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted && this.Editor.BlockManager.currentBlock && this.Editor.BlockSelection.unselectBlock(this.Editor.BlockManager.currentBlock), this.eventsDispatcher.emit(this.events.closed), this.popover && (this.popover.off(Z.Closed, this.onPopoverClose), this.popover.destroy(), this.popover.getElement().remove(), this.popover = null));\n    }, this.onPopoverClose = () => {\n      this.close();\n    };\n  }\n  /**\n   * Module Events\n   */\n  get events() {\n    return {\n      opened: \"block-settings-opened\",\n      closed: \"block-settings-closed\"\n    };\n  }\n  /**\n   * Block Settings CSS\n   */\n  get CSS() {\n    return {\n      settings: \"ce-settings\"\n    };\n  }\n  /**\n   * Getter for inner popover's flipper instance\n   *\n   * @todo remove once BlockSettings becomes standalone non-module class\n   */\n  get flipper() {\n    var e;\n    if (this.popover !== null)\n      return \"flipper\" in this.popover ? (e = this.popover) == null ? void 0 : e.flipper : void 0;\n  }\n  /**\n   * Panel with block settings with 2 sections:\n   *  - Tool's Settings\n   *  - Default Settings [Move, Remove, etc]\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [this.CSS.settings]), this.eventsDispatcher.on(ye, this.close);\n  }\n  /**\n   * Destroys module\n   */\n  destroy() {\n    this.removeAllNodes(), this.listeners.destroy(), this.eventsDispatcher.off(ye, this.close);\n  }\n  /**\n   * Open Block Settings pane\n   *\n   * @param targetBlock - near which Block we should open BlockSettings\n   */\n  async open(e = this.Editor.BlockManager.currentBlock) {\n    var s;\n    this.opened = !0, this.selection.save(), this.Editor.BlockSelection.selectBlock(e), this.Editor.BlockSelection.clearCache();\n    const { toolTunes: t, commonTunes: o } = e.getTunes();\n    this.eventsDispatcher.emit(this.events.opened);\n    const i = pe() ? Jt : rt;\n    this.popover = new i({\n      searchable: !0,\n      items: await this.getTunesItems(e, o, t),\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.popover.on(Z.Closed, this.onPopoverClose), (s = this.nodes.wrapper) == null || s.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.wrapper;\n  }\n  /**\n   * Returns list of items to be displayed in block tunes menu.\n   * Merges tool specific tunes, conversion menu and common tunes in one list in predefined order\n   *\n   * @param currentBlock –  block we are about to open block tunes for\n   * @param commonTunes – common tunes\n   * @param toolTunes - tool specific tunes\n   */\n  async getTunesItems(e, t, o) {\n    const i = [];\n    o !== void 0 && o.length > 0 && (i.push(...o), i.push({\n      type: A.Separator\n    }));\n    const s = Array.from(this.Editor.Tools.blockTools.values()), l = (await zt(e, s)).reduce((a, c) => (c.toolbox.forEach((u) => {\n      a.push({\n        icon: u.icon,\n        title: z.t(K.toolNames, u.title),\n        name: c.name,\n        closeOnActivate: !0,\n        onActivate: async () => {\n          const { BlockManager: h, Caret: p, Toolbar: g } = this.Editor, f = await h.convert(e, c.name, u.data);\n          g.close(), p.setToBlock(f, p.positions.END);\n        }\n      });\n    }), a), []);\n    return l.length > 0 && (i.push({\n      icon: Kt,\n      name: \"convert-to\",\n      title: z.ui(K.ui.popover, \"Convert to\"),\n      children: {\n        searchable: !0,\n        items: l\n      }\n    }), i.push({\n      type: A.Separator\n    })), i.push(...t), i.map((a) => this.resolveTuneAliases(a));\n  }\n  /**\n   * Resolves aliases in tunes menu items\n   *\n   * @param item - item with resolved aliases\n   */\n  resolveTuneAliases(e) {\n    if (e.type === A.Separator || e.type === A.Html)\n      return e;\n    const t = mi(e, { label: \"title\" });\n    return e.confirmation && (t.confirmation = this.resolveTuneAliases(e.confirmation)), t;\n  }\n}\nvar Qt = { exports: {} };\n/*!\n * Library for handling keyboard shortcuts\n * @copyright CodeX (https://codex.so)\n * @license MIT\n * @author CodeX (https://codex.so)\n * @version 1.2.0\n */\n(function(n, e) {\n  (function(t, o) {\n    n.exports = o();\n  })(window, function() {\n    return function(t) {\n      var o = {};\n      function i(s) {\n        if (o[s])\n          return o[s].exports;\n        var r = o[s] = { i: s, l: !1, exports: {} };\n        return t[s].call(r.exports, r, r.exports, i), r.l = !0, r.exports;\n      }\n      return i.m = t, i.c = o, i.d = function(s, r, l) {\n        i.o(s, r) || Object.defineProperty(s, r, { enumerable: !0, get: l });\n      }, i.r = function(s) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(s, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(s, \"__esModule\", { value: !0 });\n      }, i.t = function(s, r) {\n        if (1 & r && (s = i(s)), 8 & r || 4 & r && typeof s == \"object\" && s && s.__esModule)\n          return s;\n        var l = /* @__PURE__ */ Object.create(null);\n        if (i.r(l), Object.defineProperty(l, \"default\", { enumerable: !0, value: s }), 2 & r && typeof s != \"string\")\n          for (var a in s)\n            i.d(l, a, (function(c) {\n              return s[c];\n            }).bind(null, a));\n        return l;\n      }, i.n = function(s) {\n        var r = s && s.__esModule ? function() {\n          return s.default;\n        } : function() {\n          return s;\n        };\n        return i.d(r, \"a\", r), r;\n      }, i.o = function(s, r) {\n        return Object.prototype.hasOwnProperty.call(s, r);\n      }, i.p = \"\", i(i.s = 0);\n    }([function(t, o, i) {\n      function s(a, c) {\n        for (var u = 0; u < c.length; u++) {\n          var h = c[u];\n          h.enumerable = h.enumerable || !1, h.configurable = !0, \"value\" in h && (h.writable = !0), Object.defineProperty(a, h.key, h);\n        }\n      }\n      function r(a, c, u) {\n        return c && s(a.prototype, c), u && s(a, u), a;\n      }\n      i.r(o);\n      var l = function() {\n        function a(c) {\n          var u = this;\n          (function(h, p) {\n            if (!(h instanceof p))\n              throw new TypeError(\"Cannot call a class as a function\");\n          })(this, a), this.commands = {}, this.keys = {}, this.name = c.name, this.parseShortcutName(c.name), this.element = c.on, this.callback = c.callback, this.executeShortcut = function(h) {\n            u.execute(h);\n          }, this.element.addEventListener(\"keydown\", this.executeShortcut, !1);\n        }\n        return r(a, null, [{ key: \"supportedCommands\", get: function() {\n          return { SHIFT: [\"SHIFT\"], CMD: [\"CMD\", \"CONTROL\", \"COMMAND\", \"WINDOWS\", \"CTRL\"], ALT: [\"ALT\", \"OPTION\"] };\n        } }, { key: \"keyCodes\", get: function() {\n          return { 0: 48, 1: 49, 2: 50, 3: 51, 4: 52, 5: 53, 6: 54, 7: 55, 8: 56, 9: 57, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, BACKSPACE: 8, ENTER: 13, ESCAPE: 27, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, INSERT: 45, DELETE: 46, \".\": 190 };\n        } }]), r(a, [{ key: \"parseShortcutName\", value: function(c) {\n          c = c.split(\"+\");\n          for (var u = 0; u < c.length; u++) {\n            c[u] = c[u].toUpperCase();\n            var h = !1;\n            for (var p in a.supportedCommands)\n              if (a.supportedCommands[p].includes(c[u])) {\n                h = this.commands[p] = !0;\n                break;\n              }\n            h || (this.keys[c[u]] = !0);\n          }\n          for (var g in a.supportedCommands)\n            this.commands[g] || (this.commands[g] = !1);\n        } }, { key: \"execute\", value: function(c) {\n          var u, h = { CMD: c.ctrlKey || c.metaKey, SHIFT: c.shiftKey, ALT: c.altKey }, p = !0;\n          for (u in this.commands)\n            this.commands[u] !== h[u] && (p = !1);\n          var g, f = !0;\n          for (g in this.keys)\n            f = f && c.keyCode === a.keyCodes[g];\n          p && f && this.callback(c);\n        } }, { key: \"remove\", value: function() {\n          this.element.removeEventListener(\"keydown\", this.executeShortcut);\n        } }]), a;\n      }();\n      o.default = l;\n    }]).default;\n  });\n})(Qt);\nvar ji = Qt.exports;\nconst $i = /* @__PURE__ */ Fe(ji);\nclass Yi {\n  constructor() {\n    this.registeredShortcuts = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Register shortcut\n   *\n   * @param shortcut - shortcut options\n   */\n  add(e) {\n    if (this.findShortcut(e.on, e.name))\n      throw Error(\n        `Shortcut ${e.name} is already registered for ${e.on}. Please remove it before add a new handler.`\n      );\n    const o = new $i({\n      name: e.name,\n      on: e.on,\n      callback: e.handler\n    }), i = this.registeredShortcuts.get(e.on) || [];\n    this.registeredShortcuts.set(e.on, [...i, o]);\n  }\n  /**\n   * Remove shortcut\n   *\n   * @param element - Element shortcut is set for\n   * @param name - shortcut name\n   */\n  remove(e, t) {\n    const o = this.findShortcut(e, t);\n    if (!o)\n      return;\n    o.remove();\n    const i = this.registeredShortcuts.get(e);\n    this.registeredShortcuts.set(e, i.filter((s) => s !== o));\n  }\n  /**\n   * Get Shortcut instance if exist\n   *\n   * @param element - Element shorcut is set for\n   * @param shortcut - shortcut name\n   * @returns {number} index - shortcut index if exist\n   */\n  findShortcut(e, t) {\n    return (this.registeredShortcuts.get(e) || []).find(({ name: i }) => i === t);\n  }\n}\nconst he = new Yi();\nvar Wi = Object.defineProperty, Ki = Object.getOwnPropertyDescriptor, eo = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? Ki(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && Wi(e, t, i), i;\n}, Se = /* @__PURE__ */ ((n) => (n.Opened = \"toolbox-opened\", n.Closed = \"toolbox-closed\", n.BlockAdded = \"toolbox-block-added\", n))(Se || {});\nconst lt = class to extends Te {\n  /**\n   * Toolbox constructor\n   *\n   * @param options - available parameters\n   * @param options.api - Editor API methods\n   * @param options.tools - Tools available to check whether some of them should be displayed at the Toolbox or not\n   */\n  constructor({ api: e, tools: t, i18nLabels: o }) {\n    super(), this.opened = !1, this.listeners = new Ce(), this.popover = null, this.handleMobileLayoutToggle = () => {\n      this.destroyPopover(), this.initPopover();\n    }, this.onPopoverClose = () => {\n      this.opened = !1, this.emit(\n        \"toolbox-closed\"\n        /* Closed */\n      );\n    }, this.api = e, this.tools = t, this.i18nLabels = o, this.enableShortcuts(), this.nodes = {\n      toolbox: d.make(\"div\", to.CSS.toolbox)\n    }, this.initPopover(), this.api.events.on(ye, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Returns True if Toolbox is Empty and nothing to show\n   *\n   * @returns {boolean}\n   */\n  get isEmpty() {\n    return this.toolsToBeDisplayed.length === 0;\n  }\n  /**\n   * CSS styles\n   */\n  static get CSS() {\n    return {\n      toolbox: \"ce-toolbox\"\n    };\n  }\n  /**\n   * Returns root block settings element\n   */\n  getElement() {\n    return this.nodes.toolbox;\n  }\n  /**\n   * Returns true if the Toolbox has the Flipper activated and the Flipper has selected button\n   */\n  hasFocus() {\n    if (this.popover !== null)\n      return \"hasFocus\" in this.popover ? this.popover.hasFocus() : void 0;\n  }\n  /**\n   * Destroy Module\n   */\n  destroy() {\n    var e;\n    super.destroy(), this.nodes && this.nodes.toolbox && this.nodes.toolbox.remove(), this.removeAllShortcuts(), (e = this.popover) == null || e.off(Z.Closed, this.onPopoverClose), this.listeners.destroy(), this.api.events.off(ye, this.handleMobileLayoutToggle);\n  }\n  /**\n   * Toolbox Tool's button click handler\n   *\n   * @param toolName - tool type to be activated\n   * @param blockDataOverrides - Block data predefined by the activated Toolbox item\n   */\n  toolButtonActivated(e, t) {\n    this.insertNewBlock(e, t);\n  }\n  /**\n   * Open Toolbox with Tools\n   */\n  open() {\n    var e;\n    this.isEmpty || ((e = this.popover) == null || e.show(), this.opened = !0, this.emit(\n      \"toolbox-opened\"\n      /* Opened */\n    ));\n  }\n  /**\n   * Close Toolbox\n   */\n  close() {\n    var e;\n    (e = this.popover) == null || e.hide(), this.opened = !1, this.emit(\n      \"toolbox-closed\"\n      /* Closed */\n    );\n  }\n  /**\n   * Close Toolbox\n   */\n  toggle() {\n    this.opened ? this.close() : this.open();\n  }\n  /**\n   * Creates toolbox popover and appends it inside wrapper element\n   */\n  initPopover() {\n    var t;\n    const e = pe() ? Jt : rt;\n    this.popover = new e({\n      scopeElement: this.api.ui.nodes.redactor,\n      searchable: !0,\n      messages: {\n        nothingFound: this.i18nLabels.nothingFound,\n        search: this.i18nLabels.filter\n      },\n      items: this.toolboxItemsToBeDisplayed\n    }), this.popover.on(Z.Closed, this.onPopoverClose), (t = this.nodes.toolbox) == null || t.append(this.popover.getElement());\n  }\n  /**\n   * Destroys popover instance and removes it from DOM\n   */\n  destroyPopover() {\n    this.popover !== null && (this.popover.hide(), this.popover.off(Z.Closed, this.onPopoverClose), this.popover.destroy(), this.popover = null), this.nodes.toolbox !== null && (this.nodes.toolbox.innerHTML = \"\");\n  }\n  get toolsToBeDisplayed() {\n    const e = [];\n    return this.tools.forEach((t) => {\n      t.toolbox && e.push(t);\n    }), e;\n  }\n  get toolboxItemsToBeDisplayed() {\n    const e = (t, o) => ({\n      icon: t.icon,\n      title: z.t(K.toolNames, t.title || Le(o.name)),\n      name: o.name,\n      onActivate: () => {\n        this.toolButtonActivated(o.name, t.data);\n      },\n      secondaryLabel: o.shortcut ? et(o.shortcut) : \"\"\n    });\n    return this.toolsToBeDisplayed.reduce((t, o) => (Array.isArray(o.toolbox) ? o.toolbox.forEach((i) => {\n      t.push(e(i, o));\n    }) : o.toolbox !== void 0 && t.push(e(o.toolbox, o)), t), []);\n  }\n  /**\n   * Iterate all tools and enable theirs shortcuts if specified\n   */\n  enableShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && this.enableShortcutForTool(e.name, t);\n    });\n  }\n  /**\n   * Enable shortcut Block Tool implemented shortcut\n   *\n   * @param {string} toolName - Tool name\n   * @param {string} shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcutForTool(e, t) {\n    he.add({\n      name: t,\n      on: this.api.ui.nodes.redactor,\n      handler: async (o) => {\n        o.preventDefault();\n        const i = this.api.blocks.getCurrentBlockIndex(), s = this.api.blocks.getBlockByIndex(i);\n        if (s)\n          try {\n            const r = await this.api.blocks.convert(s.id, e);\n            this.api.caret.setToBlock(r, \"end\");\n            return;\n          } catch {\n          }\n        this.insertNewBlock(e);\n      }\n    });\n  }\n  /**\n   * Removes all added shortcuts\n   * Fired when the Read-Only mode is activated\n   */\n  removeAllShortcuts() {\n    this.toolsToBeDisplayed.forEach((e) => {\n      const t = e.shortcut;\n      t && he.remove(this.api.ui.nodes.redactor, t);\n    });\n  }\n  /**\n   * Inserts new block\n   * Can be called when button clicked on Toolbox or by ShortcutData\n   *\n   * @param {string} toolName - Tool name\n   * @param blockDataOverrides - predefined Block data\n   */\n  async insertNewBlock(e, t) {\n    const o = this.api.blocks.getCurrentBlockIndex(), i = this.api.blocks.getBlockByIndex(o);\n    if (!i)\n      return;\n    const s = i.isEmpty ? o : o + 1;\n    let r;\n    if (t) {\n      const a = await this.api.blocks.composeBlockData(e);\n      r = Object.assign(a, t);\n    }\n    const l = this.api.blocks.insert(\n      e,\n      r,\n      void 0,\n      s,\n      void 0,\n      i.isEmpty\n    );\n    l.call(J.APPEND_CALLBACK), this.api.caret.setToBlock(s), this.emit(\"toolbox-block-added\", {\n      block: l\n    }), this.api.toolbar.close();\n  }\n};\neo([\n  ue\n], lt.prototype, \"toolsToBeDisplayed\", 1);\neo([\n  ue\n], lt.prototype, \"toolboxItemsToBeDisplayed\", 1);\nlet Xi = lt;\nconst oo = \"block hovered\";\nasync function Vi(n, e) {\n  const t = navigator.keyboard;\n  return t && (await t.getLayoutMap()).get(n) || e;\n}\nclass qi extends y {\n  /**\n   * @class\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.toolboxInstance = null;\n  }\n  /**\n   * CSS styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      toolbar: \"ce-toolbar\",\n      content: \"ce-toolbar__content\",\n      actions: \"ce-toolbar__actions\",\n      actionsOpened: \"ce-toolbar__actions--opened\",\n      toolbarOpened: \"ce-toolbar--opened\",\n      openedToolboxHolderModifier: \"codex-editor--toolbox-opened\",\n      plusButton: \"ce-toolbar__plus\",\n      plusButtonShortcut: \"ce-toolbar__plus-shortcut\",\n      settingsToggler: \"ce-toolbar__settings-btn\",\n      settingsTogglerHidden: \"ce-toolbar__settings-btn--hidden\"\n    };\n  }\n  /**\n   * Returns the Toolbar opening state\n   *\n   * @returns {boolean}\n   */\n  get opened() {\n    return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened);\n  }\n  /**\n   * Public interface for accessing the Toolbox\n   */\n  get toolbox() {\n    var e;\n    return {\n      opened: (e = this.toolboxInstance) == null ? void 0 : e.opened,\n      close: () => {\n        var t;\n        (t = this.toolboxInstance) == null || t.close();\n      },\n      open: () => {\n        if (this.toolboxInstance === null) {\n          I(\"toolbox.open() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.toolboxInstance.open();\n      },\n      toggle: () => {\n        if (this.toolboxInstance === null) {\n          I(\"toolbox.toggle() called before initialization is finished\", \"warn\");\n          return;\n        }\n        this.toolboxInstance.toggle();\n      },\n      hasFocus: () => {\n        var t;\n        return (t = this.toolboxInstance) == null ? void 0 : t.hasFocus();\n      }\n    };\n  }\n  /**\n   * Block actions appearance manipulations\n   */\n  get blockActions() {\n    return {\n      hide: () => {\n        this.nodes.actions.classList.remove(this.CSS.actionsOpened);\n      },\n      show: () => {\n        this.nodes.actions.classList.add(this.CSS.actionsOpened);\n      }\n    };\n  }\n  /**\n   * Methods for working with Block Tunes toggler\n   */\n  get blockTunesToggler() {\n    return {\n      hide: () => this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),\n      show: () => this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)\n    };\n  }\n  /**\n   * Toggles read-only mode\n   *\n   * @param {boolean} readOnlyEnabled - read-only mode\n   */\n  toggleReadOnly(e) {\n    e ? (this.destroy(), this.Editor.BlockSettings.destroy(), this.disableModuleBindings()) : window.requestIdleCallback(() => {\n      this.drawUI(), this.enableModuleBindings();\n    }, { timeout: 2e3 });\n  }\n  /**\n   * Move Toolbar to the passed (or current) Block\n   *\n   * @param block - block to move Toolbar near it\n   */\n  moveAndOpen(e = this.Editor.BlockManager.currentBlock) {\n    if (this.toolboxInstance === null) {\n      I(\"Can't open Toolbar since Editor initialization is not finished yet\", \"warn\");\n      return;\n    }\n    if (this.toolboxInstance.opened && this.toolboxInstance.close(), this.Editor.BlockSettings.opened && this.Editor.BlockSettings.close(), !e)\n      return;\n    this.hoveredBlock = e;\n    const t = e.holder, { isMobile: o } = this.Editor.UI;\n    let i;\n    const s = 20, r = e.firstInput, l = t.getBoundingClientRect(), a = r !== void 0 ? r.getBoundingClientRect() : null, c = a !== null ? a.top - l.top : null, u = c !== null ? c > s : void 0;\n    if (o)\n      i = t.offsetTop + t.offsetHeight;\n    else if (r === void 0 || u) {\n      const h = parseInt(window.getComputedStyle(e.pluginsContent).paddingTop);\n      i = t.offsetTop + h;\n    } else {\n      const h = _o(r), p = parseInt(window.getComputedStyle(this.nodes.plusButton).height, 10), g = 8;\n      i = t.offsetTop + h - p + g + c;\n    }\n    this.nodes.wrapper.style.top = `${Math.floor(i)}px`, this.Editor.BlockManager.blocks.length === 1 && e.isEmpty ? this.blockTunesToggler.hide() : this.blockTunesToggler.show(), this.open();\n  }\n  /**\n   * Close the Toolbar\n   */\n  close() {\n    var e, t;\n    this.Editor.ReadOnly.isEnabled || ((e = this.nodes.wrapper) == null || e.classList.remove(this.CSS.toolbarOpened), this.blockActions.hide(), (t = this.toolboxInstance) == null || t.close(), this.Editor.BlockSettings.close(), this.reset());\n  }\n  /**\n   * Reset the Toolbar position to prevent DOM height growth, for example after blocks deletion\n   */\n  reset() {\n    this.nodes.wrapper.style.top = \"unset\";\n  }\n  /**\n   * Open Toolbar with Plus Button and Actions\n   *\n   * @param {boolean} withBlockActions - by default, Toolbar opens with Block Actions.\n   *                                     This flag allows to open Toolbar without Actions.\n   */\n  open(e = !0) {\n    this.nodes.wrapper.classList.add(this.CSS.toolbarOpened), e ? this.blockActions.show() : this.blockActions.hide();\n  }\n  /**\n   * Draws Toolbar elements\n   */\n  async make() {\n    this.nodes.wrapper = d.make(\"div\", this.CSS.toolbar), [\"content\", \"actions\"].forEach((s) => {\n      this.nodes[s] = d.make(\"div\", this.CSS[s]);\n    }), d.append(this.nodes.wrapper, this.nodes.content), d.append(this.nodes.content, this.nodes.actions), this.nodes.plusButton = d.make(\"div\", this.CSS.plusButton, {\n      innerHTML: Ci\n    }), d.append(this.nodes.actions, this.nodes.plusButton), this.readOnlyMutableListeners.on(this.nodes.plusButton, \"click\", () => {\n      Ne(!0), this.plusButtonClicked();\n    }, !1);\n    const e = d.make(\"div\");\n    e.appendChild(document.createTextNode(z.ui(K.ui.toolbar.toolbox, \"Add\"))), e.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: \"/\"\n    })), Pe(this.nodes.plusButton, e, {\n      hidingDelay: 400\n    }), this.nodes.settingsToggler = d.make(\"span\", this.CSS.settingsToggler, {\n      innerHTML: Ti\n    }), d.append(this.nodes.actions, this.nodes.settingsToggler);\n    const t = d.make(\"div\"), o = d.text(z.ui(K.ui.blockTunes.toggler, \"Click to tune\")), i = await Vi(\"Slash\", \"/\");\n    t.appendChild(o), t.appendChild(d.make(\"div\", this.CSS.plusButtonShortcut, {\n      textContent: et(`CMD + ${i}`)\n    })), Pe(this.nodes.settingsToggler, t, {\n      hidingDelay: 400\n    }), d.append(this.nodes.actions, this.makeToolbox()), d.append(this.nodes.actions, this.Editor.BlockSettings.getElement()), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Creates the Toolbox instance and return it's rendered element\n   */\n  makeToolbox() {\n    return this.toolboxInstance = new Xi({\n      api: this.Editor.API.methods,\n      tools: this.Editor.Tools.blockTools,\n      i18nLabels: {\n        filter: z.ui(K.ui.popover, \"Filter\"),\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\")\n      }\n    }), this.toolboxInstance.on(Se.Opened, () => {\n      this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Se.Closed, () => {\n      this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier);\n    }), this.toolboxInstance.on(Se.BlockAdded, ({ block: e }) => {\n      const { BlockManager: t, Caret: o } = this.Editor, i = t.getBlockById(e.id);\n      i.inputs.length === 0 && (i === t.lastBlock ? (t.insertAtEnd(), o.setToBlock(t.lastBlock)) : o.setToBlock(t.nextBlock));\n    }), this.toolboxInstance.getElement();\n  }\n  /**\n   * Handler for Plus Button\n   */\n  plusButtonClicked() {\n    var e;\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, (e = this.toolboxInstance) == null || e.toggle();\n  }\n  /**\n   * Enable bindings\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(this.nodes.settingsToggler, \"mousedown\", (e) => {\n      var t;\n      e.stopPropagation(), this.settingsTogglerClicked(), (t = this.toolboxInstance) != null && t.opened && this.toolboxInstance.close(), Ne(!0);\n    }, !0), pe() || this.eventsDispatcher.on(oo, (e) => {\n      var t;\n      this.Editor.BlockSettings.opened || (t = this.toolboxInstance) != null && t.opened || this.moveAndOpen(e.block);\n    });\n  }\n  /**\n   * Disable bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Clicks on the Block Settings toggler\n   */\n  settingsTogglerClicked() {\n    this.Editor.BlockManager.currentBlock = this.hoveredBlock, this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.BlockSettings.open(this.hoveredBlock);\n  }\n  /**\n   * Draws Toolbar UI\n   *\n   * Toolbar contains BlockSettings and Toolbox.\n   * That's why at first we draw its components and then Toolbar itself\n   *\n   * Steps:\n   *  - Make Toolbar dependent components like BlockSettings, Toolbox and so on\n   *  - Make itself and append dependent nodes to itself\n   *\n   */\n  drawUI() {\n    this.Editor.BlockSettings.make(), this.make();\n  }\n  /**\n   * Removes all created and saved HTMLElements\n   * It is used in Read-Only mode\n   */\n  destroy() {\n    this.removeAllNodes(), this.toolboxInstance && this.toolboxInstance.destroy();\n  }\n}\nvar ne = /* @__PURE__ */ ((n) => (n[n.Block = 0] = \"Block\", n[n.Inline = 1] = \"Inline\", n[n.Tune = 2] = \"Tune\", n))(ne || {}), Ie = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.Toolbox = \"toolbox\", n.EnabledInlineTools = \"inlineToolbar\", n.EnabledBlockTunes = \"tunes\", n.Config = \"config\", n))(Ie || {}), io = /* @__PURE__ */ ((n) => (n.Shortcut = \"shortcut\", n.SanitizeConfig = \"sanitize\", n))(io || {}), ce = /* @__PURE__ */ ((n) => (n.IsEnabledLineBreaks = \"enableLineBreaks\", n.Toolbox = \"toolbox\", n.ConversionConfig = \"conversionConfig\", n.IsReadOnlySupported = \"isReadOnlySupported\", n.PasteConfig = \"pasteConfig\", n))(ce || {}), at = /* @__PURE__ */ ((n) => (n.IsInline = \"isInline\", n.Title = \"title\", n))(at || {}), Qe = /* @__PURE__ */ ((n) => (n.IsTune = \"isTune\", n))(Qe || {});\nclass ct {\n  /**\n   * @class\n   * @param {ConstructorOptions} options - Constructor options\n   */\n  constructor({\n    name: e,\n    constructable: t,\n    config: o,\n    api: i,\n    isDefault: s,\n    isInternal: r = !1,\n    defaultPlaceholder: l\n  }) {\n    this.api = i, this.name = e, this.constructable = t, this.config = o, this.isDefault = s, this.isInternal = r, this.defaultPlaceholder = l;\n  }\n  /**\n   * Returns Tool user configuration\n   */\n  get settings() {\n    const e = this.config.config || {};\n    return this.isDefault && !(\"placeholder\" in e) && this.defaultPlaceholder && (e.placeholder = this.defaultPlaceholder), e;\n  }\n  /**\n   * Calls Tool's reset method\n   */\n  reset() {\n    if (O(this.constructable.reset))\n      return this.constructable.reset();\n  }\n  /**\n   * Calls Tool's prepare method\n   */\n  prepare() {\n    if (O(this.constructable.prepare))\n      return this.constructable.prepare({\n        toolName: this.name,\n        config: this.settings\n      });\n  }\n  /**\n   * Returns shortcut for Tool (internal or specified by user)\n   */\n  get shortcut() {\n    const e = this.constructable.shortcut;\n    return this.config.shortcut || e;\n  }\n  /**\n   * Returns Tool's sanitizer configuration\n   */\n  get sanitizeConfig() {\n    return this.constructable.sanitize || {};\n  }\n  /**\n   * Returns true if Tools is inline\n   */\n  isInline() {\n    return this.type === ne.Inline;\n  }\n  /**\n   * Returns true if Tools is block\n   */\n  isBlock() {\n    return this.type === ne.Block;\n  }\n  /**\n   * Returns true if Tools is tune\n   */\n  isTune() {\n    return this.type === ne.Tune;\n  }\n}\nclass Zi extends y {\n  /**\n   * @param moduleConfiguration - Module Configuration\n   * @param moduleConfiguration.config - Editor's config\n   * @param moduleConfiguration.eventsDispatcher - Editor's event dispatcher\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.CSS = {\n      inlineToolbar: \"ce-inline-toolbar\"\n    }, this.opened = !1, this.popover = null, this.toolbarVerticalMargin = pe() ? 20 : 6, this.toolsInstances = /* @__PURE__ */ new Map();\n  }\n  /**\n   * Toggles read-only mode\n   *\n   * @param {boolean} readOnlyEnabled - read-only mode\n   */\n  toggleReadOnly(e) {\n    e ? this.destroy() : window.requestIdleCallback(() => {\n      this.make();\n    }, { timeout: 2e3 });\n  }\n  /**\n   *  Moving / appearance\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Shows Inline Toolbar if something is selected\n   *\n   * @param [needToClose] - pass true to close toolbar if it is not allowed.\n   *                                  Avoid to use it just for closing IT, better call .close() clearly.\n   */\n  async tryToShow(e = !1) {\n    e && this.close(), this.allowedToShow() && (await this.open(), this.Editor.Toolbar.close());\n  }\n  /**\n   * Hides Inline Toolbar\n   */\n  close() {\n    var e, t;\n    this.opened && (this.Editor.ReadOnly.isEnabled || (Array.from(this.toolsInstances.entries()).forEach(([o, i]) => {\n      const s = this.getToolShortcut(o);\n      s && he.remove(this.Editor.UI.nodes.redactor, s), O(i.clear) && i.clear();\n    }), this.toolsInstances = null, this.reset(), this.opened = !1, (e = this.popover) == null || e.hide(), (t = this.popover) == null || t.destroy(), this.popover = null));\n  }\n  /**\n   * Check if node is contained by Inline Toolbar\n   *\n   * @param {Node} node — node to check\n   */\n  containsNode(e) {\n    return this.nodes.wrapper === void 0 ? !1 : this.nodes.wrapper.contains(e);\n  }\n  /**\n   * Removes UI and its components\n   */\n  destroy() {\n    var e;\n    this.removeAllNodes(), (e = this.popover) == null || e.destroy(), this.popover = null;\n  }\n  /**\n   * Making DOM\n   */\n  make() {\n    this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.inlineToolbar,\n      ...this.isRtl ? [this.Editor.UI.CSS.editorRtlFix] : []\n    ]), d.append(this.Editor.UI.nodes.wrapper, this.nodes.wrapper);\n  }\n  /**\n   * Shows Inline Toolbar\n   */\n  async open() {\n    var t;\n    if (this.opened)\n      return;\n    this.opened = !0, this.popover !== null && this.popover.destroy();\n    const e = await this.getInlineTools();\n    this.popover = new Ri({\n      items: e,\n      scopeElement: this.Editor.API.methods.ui.nodes.redactor,\n      messages: {\n        nothingFound: z.ui(K.ui.popover, \"Nothing found\"),\n        search: z.ui(K.ui.popover, \"Filter\")\n      }\n    }), this.move(this.popover.size.width), (t = this.nodes.wrapper) == null || t.append(this.popover.getElement()), this.popover.show();\n  }\n  /**\n   * Move Toolbar to the selected text\n   *\n   * @param popoverWidth - width of the toolbar popover\n   */\n  move(e) {\n    const t = b.rect, o = this.Editor.UI.nodes.wrapper.getBoundingClientRect(), i = {\n      x: t.x - o.x,\n      y: t.y + t.height - // + window.scrollY\n      o.top + this.toolbarVerticalMargin\n    };\n    i.x + e + o.x > this.Editor.UI.contentRect.right && (i.x = this.Editor.UI.contentRect.right - e - o.x), this.nodes.wrapper.style.left = Math.floor(i.x) + \"px\", this.nodes.wrapper.style.top = Math.floor(i.y) + \"px\";\n  }\n  /**\n   * Clear orientation classes and reset position\n   */\n  reset() {\n    this.nodes.wrapper.style.left = \"0\", this.nodes.wrapper.style.top = \"0\";\n  }\n  /**\n   * Need to show Inline Toolbar or not\n   */\n  allowedToShow() {\n    const e = [\"IMG\", \"INPUT\"], t = b.get(), o = b.text;\n    if (!t || !t.anchorNode || t.isCollapsed || o.length < 1)\n      return !1;\n    const i = d.isElement(t.anchorNode) ? t.anchorNode : t.anchorNode.parentElement;\n    if (i === null || t && e.includes(i.tagName) || i.closest('[contenteditable=\"true\"]') === null)\n      return !1;\n    const r = this.Editor.BlockManager.getBlock(t.anchorNode);\n    return r ? r.tool.inlineTools.size !== 0 : !1;\n  }\n  /**\n   *  Working with Tools\n   *  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   */\n  /**\n   * Returns Inline Tools segregated by their appearance type: popover items and custom html elements.\n   * Sets this.toolsInstances map\n   */\n  async getInlineTools() {\n    const e = b.get(), t = this.Editor.BlockManager.getBlock(e.anchorNode), o = Array.from(t.tool.inlineTools.values()), i = [];\n    this.toolsInstances === null && (this.toolsInstances = /* @__PURE__ */ new Map());\n    for (let s = 0; s < o.length; s++) {\n      const r = o[s], l = r.create(), a = await l.render();\n      this.toolsInstances.set(r.name, l);\n      const c = this.getToolShortcut(r.name);\n      if (c)\n        try {\n          this.enableShortcuts(r.name, c);\n        } catch {\n        }\n      const u = c !== void 0 ? et(c) : void 0, h = z.t(\n        K.toolNames,\n        r.title || Le(r.name)\n      );\n      [a].flat().forEach((p) => {\n        var f, k;\n        const g = {\n          name: r.name,\n          onActivate: () => {\n            this.toolClicked(l);\n          },\n          hint: {\n            title: h,\n            description: u\n          }\n        };\n        if (d.isElement(p)) {\n          const C = {\n            ...g,\n            element: p,\n            type: A.Html\n          };\n          if (O(l.renderActions)) {\n            const S = l.renderActions();\n            C.children = {\n              isOpen: (f = l.checkState) == null ? void 0 : f.call(l, b.get()),\n              /** Disable keyboard navigation in actions, as it might conflict with enter press handling */\n              isFlippable: !1,\n              items: [\n                {\n                  type: A.Html,\n                  element: S\n                }\n              ]\n            };\n          } else\n            (k = l.checkState) == null || k.call(l, b.get());\n          i.push(C);\n        } else if (p.type === A.Html)\n          i.push({\n            ...g,\n            ...p,\n            type: A.Html\n          });\n        else if (p.type === A.Separator)\n          i.push({\n            type: A.Separator\n          });\n        else {\n          const C = {\n            ...g,\n            ...p,\n            type: A.Default\n          };\n          \"children\" in C && s !== 0 && i.push({\n            type: A.Separator\n          }), i.push(C), \"children\" in C && s < o.length - 1 && i.push({\n            type: A.Separator\n          });\n        }\n      });\n    }\n    return i;\n  }\n  /**\n   * Get shortcut name for tool\n   *\n   * @param toolName — Tool name\n   */\n  getToolShortcut(e) {\n    const { Tools: t } = this.Editor, o = t.inlineTools.get(e), i = t.internal.inlineTools;\n    return Array.from(i.keys()).includes(e) ? this.inlineTools[e][io.Shortcut] : o == null ? void 0 : o.shortcut;\n  }\n  /**\n   * Enable Tool shortcut with Editor Shortcuts Module\n   *\n   * @param toolName - tool name\n   * @param shortcut - shortcut according to the ShortcutData Module format\n   */\n  enableShortcuts(e, t) {\n    he.add({\n      name: t,\n      handler: (o) => {\n        var s;\n        const { currentBlock: i } = this.Editor.BlockManager;\n        i && i.tool.enabledInlineTools && (o.preventDefault(), (s = this.popover) == null || s.activateItemByName(e));\n      },\n      on: this.Editor.UI.nodes.redactor\n    });\n  }\n  /**\n   * Inline Tool button clicks\n   *\n   * @param tool - Tool's instance\n   */\n  toolClicked(e) {\n    var o;\n    const t = b.range;\n    (o = e.surround) == null || o.call(e, t), this.checkToolsState();\n  }\n  /**\n   * Check Tools` state by selection\n   */\n  checkToolsState() {\n    var e;\n    (e = this.toolsInstances) == null || e.forEach((t) => {\n      var o;\n      (o = t.checkState) == null || o.call(t, b.get());\n    });\n  }\n  /**\n   * Get inline tools tools\n   * Tools that has isInline is true\n   */\n  get inlineTools() {\n    const e = {};\n    return Array.from(this.Editor.Tools.inlineTools.entries()).forEach(([t, o]) => {\n      e[t] = o.create();\n    }), e;\n  }\n}\nfunction so() {\n  const n = window.getSelection();\n  if (n === null)\n    return [null, 0];\n  let e = n.focusNode, t = n.focusOffset;\n  return e === null ? [null, 0] : (e.nodeType !== Node.TEXT_NODE && e.childNodes.length > 0 && (e.childNodes[t] ? (e = e.childNodes[t], t = 0) : (e = e.childNodes[t - 1], t = e.textContent.length)), [e, t]);\n}\nfunction no(n, e, t, o) {\n  const i = document.createRange();\n  o === \"left\" ? (i.setStart(n, 0), i.setEnd(e, t)) : (i.setStart(e, t), i.setEnd(n, n.childNodes.length));\n  const s = i.cloneContents(), r = document.createElement(\"div\");\n  r.appendChild(s);\n  const l = r.textContent || \"\";\n  return Lo(l);\n}\nfunction Me(n) {\n  const e = d.getDeepestNode(n);\n  if (e === null || d.isEmpty(n))\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === 0;\n  if (d.isEmpty(n))\n    return !0;\n  const [t, o] = so();\n  return t === null ? !1 : no(n, t, o, \"left\");\n}\nfunction Ae(n) {\n  const e = d.getDeepestNode(n, !0);\n  if (e === null)\n    return !0;\n  if (d.isNativeInput(e))\n    return e.selectionEnd === e.value.length;\n  const [t, o] = so();\n  return t === null ? !1 : no(n, t, o, \"right\");\n}\nclass Gi extends y {\n  /**\n   * All keydowns on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  keydown(e) {\n    switch (this.beforeKeydownProcessing(e), e.keyCode) {\n      case w.BACKSPACE:\n        this.backspace(e);\n        break;\n      case w.DELETE:\n        this.delete(e);\n        break;\n      case w.ENTER:\n        this.enter(e);\n        break;\n      case w.DOWN:\n      case w.RIGHT:\n        this.arrowRightAndDown(e);\n        break;\n      case w.UP:\n      case w.LEFT:\n        this.arrowLeftAndUp(e);\n        break;\n      case w.TAB:\n        this.tabPressed(e);\n        break;\n    }\n    e.key === \"/\" && !e.ctrlKey && !e.metaKey && this.slashPressed(e), e.code === \"Slash\" && (e.ctrlKey || e.metaKey) && (e.preventDefault(), this.commandSlashPressed());\n  }\n  /**\n   * Fires on keydown before event processing\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  beforeKeydownProcessing(e) {\n    this.needToolbarClosing(e) && It(e.keyCode) && (this.Editor.Toolbar.close(), e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || this.Editor.BlockSelection.clearSelection(e));\n  }\n  /**\n   * Key up on Block:\n   * - shows Inline Toolbar if something selected\n   * - shows conversion toolbar with 85% of block selection\n   *\n   * @param {KeyboardEvent} event - keyup event\n   */\n  keyup(e) {\n    e.shiftKey || this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Add drop target styles\n   *\n   * @param {DragEvent} event - drag over event\n   */\n  dragOver(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !0;\n  }\n  /**\n   * Remove drop target style\n   *\n   * @param {DragEvent} event - drag leave event\n   */\n  dragLeave(e) {\n    const t = this.Editor.BlockManager.getBlockByChildNode(e.target);\n    t.dropTarget = !1;\n  }\n  /**\n   * Copying selected blocks\n   * Before putting to the clipboard we sanitize all blocks and then copy to the clipboard\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandC(e) {\n    const { BlockSelection: t } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e);\n  }\n  /**\n   * Copy and Delete selected Blocks\n   *\n   * @param {ClipboardEvent} event - clipboard event\n   */\n  handleCommandX(e) {\n    const { BlockSelection: t, BlockManager: o, Caret: i } = this.Editor;\n    t.anyBlockSelected && t.copySelectedBlocks(e).then(() => {\n      const s = o.removeSelectedBlocks(), r = o.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), t.clearSelection(e);\n    });\n  }\n  /**\n   * Tab pressed inside a Block.\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  tabPressed(e) {\n    const { InlineToolbar: t, Caret: o } = this.Editor;\n    if (t.opened)\n      return;\n    (e.shiftKey ? o.navigatePrevious(!0) : o.navigateNext(!0)) && e.preventDefault();\n  }\n  /**\n   * '/' + 'command' keydown inside a Block\n   */\n  commandSlashPressed() {\n    this.Editor.BlockSelection.selectedBlocks.length > 1 || this.activateBlockSettings();\n  }\n  /**\n   * '/' keydown inside a Block\n   *\n   * @param event - keydown\n   */\n  slashPressed(e) {\n    this.Editor.BlockManager.currentBlock.isEmpty && (e.preventDefault(), this.Editor.Caret.insertContentAtCaretPosition(\"/\"), this.activateToolbox());\n  }\n  /**\n   * ENTER pressed on block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  enter(e) {\n    const { BlockManager: t, UI: o } = this.Editor, i = t.currentBlock;\n    if (i === void 0 || i.tool.isLineBreaksEnabled || o.someToolbarOpened && o.someFlipperButtonFocused || e.shiftKey && !Ge)\n      return;\n    let s = i;\n    i.currentInput !== void 0 && Me(i.currentInput) && !i.hasMedia ? this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex) : i.currentInput && Ae(i.currentInput) ? s = this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex + 1) : s = this.Editor.BlockManager.split(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s), e.preventDefault();\n  }\n  /**\n   * Handle backspace keydown on Block\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  backspace(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, previousBlock: s } = t;\n    if (i === void 0 || !b.isCollapsed || !i.currentInput || !Me(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.firstInput)) {\n      o.navigatePrevious();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i);\n      const a = t.currentBlock;\n      o.setToBlock(a, o.positions.END);\n      return;\n    }\n    vt(s, i) ? this.mergeBlocks(s, i) : o.setToBlock(s, o.positions.END);\n  }\n  /**\n   * Handles delete keydown on Block\n   * Removes char after the caret.\n   * If caret is at the end of the block, merge next block with current\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  delete(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { currentBlock: i, nextBlock: s } = t;\n    if (!b.isCollapsed || !Ae(i.currentInput))\n      return;\n    if (e.preventDefault(), this.Editor.Toolbar.close(), !(i.currentInput === i.lastInput)) {\n      o.navigateNext();\n      return;\n    }\n    if (s === null)\n      return;\n    if (s.isEmpty) {\n      t.removeBlock(s);\n      return;\n    }\n    if (i.isEmpty) {\n      t.removeBlock(i), o.setToBlock(s, o.positions.START);\n      return;\n    }\n    vt(i, s) ? this.mergeBlocks(i, s) : o.setToBlock(s, o.positions.START);\n  }\n  /**\n   * Merge passed Blocks\n   *\n   * @param targetBlock - to which Block we want to merge\n   * @param blockToMerge - what Block we want to merge\n   */\n  mergeBlocks(e, t) {\n    const { BlockManager: o, Caret: i, Toolbar: s } = this.Editor;\n    i.createShadow(e.lastInput), o.mergeBlocks(e, t).then(() => {\n      i.restoreCaret(e.pluginsContent), s.close();\n    });\n  }\n  /**\n   * Handle right and down keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowRightAndDown(e) {\n    const t = le.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === w.TAB);\n    if (this.Editor.UI.someToolbarOpened && t)\n      return;\n    this.Editor.Toolbar.close();\n    const { currentBlock: o } = this.Editor.BlockManager, s = ((o == null ? void 0 : o.currentInput) !== void 0 ? Ae(o.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === w.DOWN && s) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState();\n      return;\n    }\n    if (e.keyCode === w.DOWN || e.keyCode === w.RIGHT && !this.isRtl ? this.Editor.Caret.navigateNext() : this.Editor.Caret.navigatePrevious()) {\n      e.preventDefault();\n      return;\n    }\n    Oe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Handle left and up keyboard keys\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  arrowLeftAndUp(e) {\n    if (this.Editor.UI.someToolbarOpened) {\n      if (le.usedKeys.includes(e.keyCode) && (!e.shiftKey || e.keyCode === w.TAB))\n        return;\n      this.Editor.UI.closeAllToolbars();\n    }\n    this.Editor.Toolbar.close();\n    const { currentBlock: t } = this.Editor.BlockManager, i = ((t == null ? void 0 : t.currentInput) !== void 0 ? Me(t.currentInput) : void 0) || this.Editor.BlockSelection.anyBlockSelected;\n    if (e.shiftKey && e.keyCode === w.UP && i) {\n      this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1);\n      return;\n    }\n    if (e.keyCode === w.UP || e.keyCode === w.LEFT && !this.isRtl ? this.Editor.Caret.navigatePrevious() : this.Editor.Caret.navigateNext()) {\n      e.preventDefault();\n      return;\n    }\n    Oe(() => {\n      this.Editor.BlockManager.currentBlock && this.Editor.BlockManager.currentBlock.updateCurrentInput();\n    }, 20)(), this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Cases when we need to close Toolbar\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  needToolbarClosing(e) {\n    const t = e.keyCode === w.ENTER && this.Editor.Toolbar.toolbox.opened, o = e.keyCode === w.ENTER && this.Editor.BlockSettings.opened, i = e.keyCode === w.ENTER && this.Editor.InlineToolbar.opened, s = e.keyCode === w.TAB;\n    return !(e.shiftKey || s || t || o || i);\n  }\n  /**\n   * If Toolbox is not open, then just open it and show plus button\n   */\n  activateToolbox() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.Toolbar.toolbox.open();\n  }\n  /**\n   * Open Toolbar and show BlockSettings before flipping Tools\n   */\n  activateBlockSettings() {\n    this.Editor.Toolbar.opened || this.Editor.Toolbar.moveAndOpen(), this.Editor.BlockSettings.opened || this.Editor.BlockSettings.open();\n  }\n}\nclass Xe {\n  /**\n   * @class\n   * @param {HTMLElement} workingArea — editor`s working node\n   */\n  constructor(e) {\n    this.blocks = [], this.workingArea = e;\n  }\n  /**\n   * Get length of Block instances array\n   *\n   * @returns {number}\n   */\n  get length() {\n    return this.blocks.length;\n  }\n  /**\n   * Get Block instances array\n   *\n   * @returns {Block[]}\n   */\n  get array() {\n    return this.blocks;\n  }\n  /**\n   * Get blocks html elements array\n   *\n   * @returns {HTMLElement[]}\n   */\n  get nodes() {\n    return Mt(this.workingArea.children);\n  }\n  /**\n   * Proxy trap to implement array-like setter\n   *\n   * @example\n   * blocks[0] = new Block(...)\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — block index or any Blocks class property key to set\n   * @param {Block} value — value to set\n   * @returns {boolean}\n   */\n  static set(e, t, o) {\n    return isNaN(Number(t)) ? (Reflect.set(e, t, o), !0) : (e.insert(+t, o), !0);\n  }\n  /**\n   * Proxy trap to implement array-like getter\n   *\n   * @param {Blocks} instance — Blocks instance\n   * @param {PropertyKey} property — Blocks class property key\n   * @returns {Block|*}\n   */\n  static get(e, t) {\n    return isNaN(Number(t)) ? Reflect.get(e, t) : e.get(+t);\n  }\n  /**\n   * Push new Block to the blocks array and append it to working area\n   *\n   * @param {Block} block - Block to add\n   */\n  push(e) {\n    this.blocks.push(e), this.insertToDOM(e);\n  }\n  /**\n   * Swaps blocks with indexes first and second\n   *\n   * @param {number} first - first block index\n   * @param {number} second - second block index\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    const o = this.blocks[t];\n    d.swap(this.blocks[e].holder, o.holder), this.blocks[t] = this.blocks[e], this.blocks[e] = o;\n  }\n  /**\n   * Move a block from one to another index\n   *\n   * @param {number} toIndex - new index of the block\n   * @param {number} fromIndex - block to move\n   */\n  move(e, t) {\n    const o = this.blocks.splice(t, 1)[0], i = e - 1, s = Math.max(0, i), r = this.blocks[s];\n    e > 0 ? this.insertToDOM(o, \"afterend\", r) : this.insertToDOM(o, \"beforebegin\", r), this.blocks.splice(e, 0, o);\n    const l = this.composeBlockEvent(\"move\", {\n      fromIndex: t,\n      toIndex: e\n    });\n    o.call(J.MOVED, l);\n  }\n  /**\n   * Insert new Block at passed index\n   *\n   * @param {number} index — index to insert Block\n   * @param {Block} block — Block to insert\n   * @param {boolean} replace — it true, replace block on given index\n   */\n  insert(e, t, o = !1) {\n    if (!this.length) {\n      this.push(t);\n      return;\n    }\n    e > this.length && (e = this.length), o && (this.blocks[e].holder.remove(), this.blocks[e].call(J.REMOVED));\n    const i = o ? 1 : 0;\n    if (this.blocks.splice(e, i, t), e > 0) {\n      const s = this.blocks[e - 1];\n      this.insertToDOM(t, \"afterend\", s);\n    } else {\n      const s = this.blocks[e + 1];\n      s ? this.insertToDOM(t, \"beforebegin\", s) : this.insertToDOM(t);\n    }\n  }\n  /**\n   * Replaces block under passed index with passed block\n   *\n   * @param index - index of existed block\n   * @param block - new block\n   */\n  replace(e, t) {\n    if (this.blocks[e] === void 0)\n      throw Error(\"Incorrect index\");\n    this.blocks[e].holder.replaceWith(t.holder), this.blocks[e] = t;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index to insert blocks at\n   */\n  insertMany(e, t) {\n    const o = new DocumentFragment();\n    for (const i of e)\n      o.appendChild(i.holder);\n    if (this.length > 0) {\n      if (t > 0) {\n        const i = Math.min(t - 1, this.length - 1);\n        this.blocks[i].holder.after(o);\n      } else\n        t === 0 && this.workingArea.prepend(o);\n      this.blocks.splice(t, 0, ...e);\n    } else\n      this.blocks.push(...e), this.workingArea.appendChild(o);\n    e.forEach((i) => i.call(J.RENDERED));\n  }\n  /**\n   * Remove block\n   *\n   * @param {number} index - index of Block to remove\n   */\n  remove(e) {\n    isNaN(e) && (e = this.length - 1), this.blocks[e].holder.remove(), this.blocks[e].call(J.REMOVED), this.blocks.splice(e, 1);\n  }\n  /**\n   * Remove all blocks\n   */\n  removeAll() {\n    this.workingArea.innerHTML = \"\", this.blocks.forEach((e) => e.call(J.REMOVED)), this.blocks.length = 0;\n  }\n  /**\n   * Insert Block after passed target\n   *\n   * @todo decide if this method is necessary\n   * @param {Block} targetBlock — target after which Block should be inserted\n   * @param {Block} newBlock — Block to insert\n   */\n  insertAfter(e, t) {\n    const o = this.blocks.indexOf(e);\n    this.insert(o + 1, t);\n  }\n  /**\n   * Get Block by index\n   *\n   * @param {number} index — Block index\n   * @returns {Block}\n   */\n  get(e) {\n    return this.blocks[e];\n  }\n  /**\n   * Return index of passed Block\n   *\n   * @param {Block} block - Block to find\n   * @returns {number}\n   */\n  indexOf(e) {\n    return this.blocks.indexOf(e);\n  }\n  /**\n   * Insert new Block into DOM\n   *\n   * @param {Block} block - Block to insert\n   * @param {InsertPosition} position — insert position (if set, will use insertAdjacentElement)\n   * @param {Block} target — Block related to position\n   */\n  insertToDOM(e, t, o) {\n    t ? o.holder.insertAdjacentElement(t, e.holder) : this.workingArea.appendChild(e.holder), e.call(J.RENDERED);\n  }\n  /**\n   * Composes Block event with passed type and details\n   *\n   * @param {string} type - event type\n   * @param {object} detail - event detail\n   */\n  composeBlockEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n}\nconst Bt = \"block-removed\", Tt = \"block-added\", Ji = \"block-moved\", Ct = \"block-changed\";\nclass Qi {\n  constructor() {\n    this.completed = Promise.resolve();\n  }\n  /**\n   * Add new promise to queue\n   *\n   * @param operation - promise should be added to queue\n   */\n  add(e) {\n    return new Promise((t, o) => {\n      this.completed = this.completed.then(e).then(t).catch(o);\n    });\n  }\n}\nclass es extends y {\n  constructor() {\n    super(...arguments), this._currentBlockIndex = -1, this._blocks = null;\n  }\n  /**\n   * Returns current Block index\n   *\n   * @returns {number}\n   */\n  get currentBlockIndex() {\n    return this._currentBlockIndex;\n  }\n  /**\n   * Set current Block index and fire Block lifecycle callbacks\n   *\n   * @param {number} newIndex - index of Block to set as current\n   */\n  set currentBlockIndex(e) {\n    this._currentBlockIndex = e;\n  }\n  /**\n   * returns first Block\n   *\n   * @returns {Block}\n   */\n  get firstBlock() {\n    return this._blocks[0];\n  }\n  /**\n   * returns last Block\n   *\n   * @returns {Block}\n   */\n  get lastBlock() {\n    return this._blocks[this._blocks.length - 1];\n  }\n  /**\n   * Get current Block instance\n   *\n   * @returns {Block}\n   */\n  get currentBlock() {\n    return this._blocks[this.currentBlockIndex];\n  }\n  /**\n   * Set passed Block as a current\n   *\n   * @param block - block to set as a current\n   */\n  set currentBlock(e) {\n    this.currentBlockIndex = this.getBlockIndex(e);\n  }\n  /**\n   * Returns next Block instance\n   *\n   * @returns {Block|null}\n   */\n  get nextBlock() {\n    return this.currentBlockIndex === this._blocks.length - 1 ? null : this._blocks[this.currentBlockIndex + 1];\n  }\n  /**\n   * Return first Block with inputs after current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get nextContentfulBlock() {\n    return this.blocks.slice(this.currentBlockIndex + 1).find((t) => !!t.inputs.length);\n  }\n  /**\n   * Return first Block with inputs before current Block\n   *\n   * @returns {Block | undefined}\n   */\n  get previousContentfulBlock() {\n    return this.blocks.slice(0, this.currentBlockIndex).reverse().find((t) => !!t.inputs.length);\n  }\n  /**\n   * Returns previous Block instance\n   *\n   * @returns {Block|null}\n   */\n  get previousBlock() {\n    return this.currentBlockIndex === 0 ? null : this._blocks[this.currentBlockIndex - 1];\n  }\n  /**\n   * Get array of Block instances\n   *\n   * @returns {Block[]} {@link Blocks#array}\n   */\n  get blocks() {\n    return this._blocks.array;\n  }\n  /**\n   * Check if each Block is empty\n   *\n   * @returns {boolean}\n   */\n  get isEditorEmpty() {\n    return this.blocks.every((e) => e.isEmpty);\n  }\n  /**\n   * Should be called after Editor.UI preparation\n   * Define this._blocks property\n   */\n  prepare() {\n    const e = new Xe(this.Editor.UI.nodes.redactor);\n    this._blocks = new Proxy(e, {\n      set: Xe.set,\n      get: Xe.get\n    }), this.listeners.on(\n      document,\n      \"copy\",\n      (t) => this.Editor.BlockEvents.handleCommandC(t)\n    );\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - Unbind event handlers from created Blocks\n   *\n   * if readOnly is false:\n   *  - Bind event handlers to all existing Blocks\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Creates Block instance by tool name\n   *\n   * @param {object} options - block creation options\n   * @param {string} options.tool - tools passed in editor config {@link EditorConfig#tools}\n   * @param {string} [options.id] - unique id for this block\n   * @param {BlockToolData} [options.data] - constructor params\n   * @returns {Block}\n   */\n  composeBlock({\n    tool: e,\n    data: t = {},\n    id: o = void 0,\n    tunes: i = {}\n  }) {\n    const s = this.Editor.ReadOnly.isEnabled, r = this.Editor.Tools.blockTools.get(e), l = new D({\n      id: o,\n      data: t,\n      tool: r,\n      api: this.Editor.API,\n      readOnly: s,\n      tunesData: i\n    }, this.eventsDispatcher);\n    return s || window.requestIdleCallback(() => {\n      this.bindBlockEvents(l);\n    }, { timeout: 2e3 }), l;\n  }\n  /**\n   * Insert new block into _blocks\n   *\n   * @param {object} options - insert options\n   * @param {string} [options.id] - block's unique id\n   * @param {string} [options.tool] - plugin name, by default method inserts the default block type\n   * @param {object} [options.data] - plugin data\n   * @param {number} [options.index] - index where to insert new Block\n   * @param {boolean} [options.needToFocus] - flag shows if needed to update current Block index\n   * @param {boolean} [options.replace] - flag shows if block by passed index should be replaced with inserted one\n   * @returns {Block}\n   */\n  insert({\n    id: e = void 0,\n    tool: t = this.config.defaultBlock,\n    data: o = {},\n    index: i,\n    needToFocus: s = !0,\n    replace: r = !1,\n    tunes: l = {}\n  } = {}) {\n    let a = i;\n    a === void 0 && (a = this.currentBlockIndex + (r ? 0 : 1));\n    const c = this.composeBlock({\n      id: e,\n      tool: t,\n      data: o,\n      tunes: l\n    });\n    return r && this.blockDidMutated(Bt, this.getBlockByIndex(a), {\n      index: a\n    }), this._blocks.insert(a, c, r), this.blockDidMutated(Tt, c, {\n      index: a\n    }), s ? this.currentBlockIndex = a : a <= this.currentBlockIndex && this.currentBlockIndex++, c;\n  }\n  /**\n   * Inserts several blocks at once\n   *\n   * @param blocks - blocks to insert\n   * @param index - index where to insert\n   */\n  insertMany(e, t = 0) {\n    this._blocks.insertMany(e, t);\n  }\n  /**\n   * Update Block data.\n   *\n   * Currently we don't have an 'update' method in the Tools API, so we just create a new block with the same id and type\n   * Should not trigger 'block-removed' or 'block-added' events.\n   *\n   * If neither data nor tunes is provided, return the provided block instead.\n   *\n   * @param block - block to update\n   * @param data - (optional) new data\n   * @param tunes - (optional) tune data\n   */\n  async update(e, t, o) {\n    if (!t && !o)\n      return e;\n    const i = await e.data, s = this.composeBlock({\n      id: e.id,\n      tool: e.name,\n      data: Object.assign({}, i, t ?? {}),\n      tunes: o ?? e.tunes\n    }), r = this.getBlockIndex(e);\n    return this._blocks.replace(r, s), this.blockDidMutated(Ct, s, {\n      index: r\n    }), s;\n  }\n  /**\n   * Replace passed Block with the new one with specified Tool and data\n   *\n   * @param block - block to replace\n   * @param newTool - new Tool name\n   * @param data - new Tool data\n   */\n  replace(e, t, o) {\n    const i = this.getBlockIndex(e);\n    return this.insert({\n      tool: t,\n      data: o,\n      index: i,\n      replace: !0\n    });\n  }\n  /**\n   * Insert pasted content. Call onPaste callback after insert.\n   *\n   * @param {string} toolName - name of Tool to insert\n   * @param {PasteEvent} pasteEvent - pasted data\n   * @param {boolean} replace - should replace current block\n   */\n  paste(e, t, o = !1) {\n    const i = this.insert({\n      tool: e,\n      replace: o\n    });\n    try {\n      window.requestIdleCallback(() => {\n        i.call(J.ON_PASTE, t);\n      });\n    } catch (s) {\n      I(`${e}: onPaste callback call is failed`, \"error\", s);\n    }\n    return i;\n  }\n  /**\n   * Insert new default block at passed index\n   *\n   * @param {number} index - index where Block should be inserted\n   * @param {boolean} needToFocus - if true, updates current Block index\n   *\n   * TODO: Remove method and use insert() with index instead (?)\n   * @returns {Block} inserted Block\n   */\n  insertDefaultBlockAtIndex(e, t = !1) {\n    const o = this.composeBlock({ tool: this.config.defaultBlock });\n    return this._blocks[e] = o, this.blockDidMutated(Tt, o, {\n      index: e\n    }), t ? this.currentBlockIndex = e : e <= this.currentBlockIndex && this.currentBlockIndex++, o;\n  }\n  /**\n   * Always inserts at the end\n   *\n   * @returns {Block}\n   */\n  insertAtEnd() {\n    return this.currentBlockIndex = this.blocks.length - 1, this.insert();\n  }\n  /**\n   * Merge two blocks\n   *\n   * @param {Block} targetBlock - previous block will be append to this block\n   * @param {Block} blockToMerge - block that will be merged with target block\n   * @returns {Promise} - the sequence that can be continued\n   */\n  async mergeBlocks(e, t) {\n    let o;\n    if (e.name === t.name && e.mergeable) {\n      const i = await t.data;\n      if (V(i)) {\n        console.error(\"Could not merge Block. Failed to extract original Block data.\");\n        return;\n      }\n      const [s] = ot([i], e.tool.sanitizeConfig);\n      o = s;\n    } else if (e.mergeable && _e(t, \"export\") && _e(e, \"import\")) {\n      const i = await t.exportDataAsString(), s = q(i, e.tool.sanitizeConfig);\n      o = wt(s, e.tool.conversionConfig);\n    }\n    o !== void 0 && (await e.mergeWith(o), this.removeBlock(t), this.currentBlockIndex = this._blocks.indexOf(e));\n  }\n  /**\n   * Remove passed Block\n   *\n   * @param block - Block to remove\n   * @param addLastBlock - if true, adds new default block at the end. @todo remove this logic and use event-bus instead\n   */\n  removeBlock(e, t = !0) {\n    return new Promise((o) => {\n      const i = this._blocks.indexOf(e);\n      if (!this.validateIndex(i))\n        throw new Error(\"Can't find a Block to remove\");\n      e.destroy(), this._blocks.remove(i), this.blockDidMutated(Bt, e, {\n        index: i\n      }), this.currentBlockIndex >= i && this.currentBlockIndex--, this.blocks.length ? i === 0 && (this.currentBlockIndex = 0) : (this.unsetCurrentBlock(), t && this.insert()), o();\n    });\n  }\n  /**\n   * Remove only selected Blocks\n   * and returns first Block index where started removing...\n   *\n   * @returns {number|undefined}\n   */\n  removeSelectedBlocks() {\n    let e;\n    for (let t = this.blocks.length - 1; t >= 0; t--)\n      this.blocks[t].selected && (this.removeBlock(this.blocks[t]), e = t);\n    return e;\n  }\n  /**\n   * Attention!\n   * After removing insert the new default typed Block and focus on it\n   * Removes all blocks\n   */\n  removeAllBlocks() {\n    for (let e = this.blocks.length - 1; e >= 0; e--)\n      this._blocks.remove(e);\n    this.unsetCurrentBlock(), this.insert(), this.currentBlock.firstInput.focus();\n  }\n  /**\n   * Split current Block\n   * 1. Extract content from Caret position to the Block`s end\n   * 2. Insert a new Block below current one with extracted content\n   *\n   * @returns {Block}\n   */\n  split() {\n    const e = this.Editor.Caret.extractFragmentFromCaretPosition(), t = d.make(\"div\");\n    t.appendChild(e);\n    const o = {\n      text: d.isEmpty(t) ? \"\" : t.innerHTML\n    };\n    return this.insert({ data: o });\n  }\n  /**\n   * Returns Block by passed index\n   *\n   * @param {number} index - index to get. -1 to get last\n   * @returns {Block}\n   */\n  getBlockByIndex(e) {\n    return e === -1 && (e = this._blocks.length - 1), this._blocks[e];\n  }\n  /**\n   * Returns an index for passed Block\n   *\n   * @param block - block to find index\n   */\n  getBlockIndex(e) {\n    return this._blocks.indexOf(e);\n  }\n  /**\n   * Returns the Block by passed id\n   *\n   * @param id - id of block to get\n   * @returns {Block}\n   */\n  getBlockById(e) {\n    return this._blocks.array.find((t) => t.id === e);\n  }\n  /**\n   * Get Block instance by html element\n   *\n   * @param {Node} element - html element to get Block by\n   */\n  getBlock(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = this._blocks.nodes, o = e.closest(`.${D.CSS.wrapper}`), i = t.indexOf(o);\n    if (i >= 0)\n      return this._blocks[i];\n  }\n  /**\n   * 1) Find first-level Block from passed child Node\n   * 2) Mark it as current\n   *\n   * @param {Node} childNode - look ahead from this node.\n   * @returns {Block | undefined} can return undefined in case when the passed child note is not a part of the current editor instance\n   */\n  setCurrentBlockByChildNode(e) {\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${D.CSS.wrapper}`);\n    if (!t)\n      return;\n    const o = t.closest(`.${this.Editor.UI.CSS.editorWrapper}`);\n    if (o != null && o.isEqualNode(this.Editor.UI.nodes.wrapper))\n      return this.currentBlockIndex = this._blocks.nodes.indexOf(t), this.currentBlock.updateCurrentInput(), this.currentBlock;\n  }\n  /**\n   * Return block which contents passed node\n   *\n   * @param {Node} childNode - node to get Block by\n   * @returns {Block}\n   */\n  getBlockByChildNode(e) {\n    if (!e || !(e instanceof Node))\n      return;\n    d.isElement(e) || (e = e.parentNode);\n    const t = e.closest(`.${D.CSS.wrapper}`);\n    return this.blocks.find((o) => o.holder === t);\n  }\n  /**\n   * Swap Blocks Position\n   *\n   * @param {number} fromIndex - index of first block\n   * @param {number} toIndex - index of second block\n   * @deprecated — use 'move' instead\n   */\n  swap(e, t) {\n    this._blocks.swap(e, t), this.currentBlockIndex = t;\n  }\n  /**\n   * Move a block to a new index\n   *\n   * @param {number} toIndex - index where to move Block\n   * @param {number} fromIndex - index of Block to move\n   */\n  move(e, t = this.currentBlockIndex) {\n    if (isNaN(e) || isNaN(t)) {\n      I(\"Warning during 'move' call: incorrect indices provided.\", \"warn\");\n      return;\n    }\n    if (!this.validateIndex(e) || !this.validateIndex(t)) {\n      I(\"Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.\", \"warn\");\n      return;\n    }\n    this._blocks.move(e, t), this.currentBlockIndex = e, this.blockDidMutated(Ji, this.currentBlock, {\n      fromIndex: t,\n      toIndex: e\n    });\n  }\n  /**\n   * Converts passed Block to the new Tool\n   * Uses Conversion Config\n   *\n   * @param blockToConvert - Block that should be converted\n   * @param targetToolName - name of the Tool to convert to\n   * @param blockDataOverrides - optional new Block data overrides\n   */\n  async convert(e, t, o) {\n    if (!await e.save())\n      throw new Error(\"Could not convert Block. Failed to extract original Block data.\");\n    const s = this.Editor.Tools.blockTools.get(t);\n    if (!s)\n      throw new Error(`Could not convert Block. Tool «${t}» not found.`);\n    const r = await e.exportDataAsString(), l = q(\n      r,\n      s.sanitizeConfig\n    );\n    let a = wt(l, s.conversionConfig);\n    return o && (a = Object.assign(a, o)), this.replace(e, s.name, a);\n  }\n  /**\n   * Sets current Block Index -1 which means unknown\n   * and clear highlights\n   */\n  unsetCurrentBlock() {\n    this.currentBlockIndex = -1;\n  }\n  /**\n   * Clears Editor\n   *\n   * @param {boolean} needToAddDefaultBlock - 1) in internal calls (for example, in api.blocks.render)\n   *                                             we don't need to add an empty default block\n   *                                        2) in api.blocks.clear we should add empty block\n   */\n  async clear(e = !1) {\n    const t = new Qi();\n    this.blocks.forEach((o) => {\n      t.add(async () => {\n        await this.removeBlock(o, !1);\n      });\n    }), await t.completed, this.unsetCurrentBlock(), e && this.insert(), this.Editor.UI.checkEmptiness();\n  }\n  /**\n   * Cleans up all the block tools' resources\n   * This is called when editor is destroyed\n   */\n  async destroy() {\n    await Promise.all(this.blocks.map((e) => e.destroy()));\n  }\n  /**\n   * Bind Block events\n   *\n   * @param {Block} block - Block to which event should be bound\n   */\n  bindBlockEvents(e) {\n    const { BlockEvents: t } = this.Editor;\n    this.readOnlyMutableListeners.on(e.holder, \"keydown\", (o) => {\n      t.keydown(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"keyup\", (o) => {\n      t.keyup(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragover\", (o) => {\n      t.dragOver(o);\n    }), this.readOnlyMutableListeners.on(e.holder, \"dragleave\", (o) => {\n      t.dragLeave(o);\n    }), e.on(\"didMutated\", (o) => this.blockDidMutated(Ct, o, {\n      index: this.getBlockIndex(o)\n    }));\n  }\n  /**\n   * Disable mutable handlers and bindings\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Enables all module handlers and bindings for all Blocks\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(\n      document,\n      \"cut\",\n      (e) => this.Editor.BlockEvents.handleCommandX(e)\n    ), this.blocks.forEach((e) => {\n      this.bindBlockEvents(e);\n    });\n  }\n  /**\n   * Validates that the given index is not lower than 0 or higher than the amount of blocks\n   *\n   * @param {number} index - index of blocks array to validate\n   * @returns {boolean}\n   */\n  validateIndex(e) {\n    return !(e < 0 || e >= this._blocks.length);\n  }\n  /**\n   * Block mutation callback\n   *\n   * @param mutationType - what happened with block\n   * @param block - mutated block\n   * @param detailData - additional data to pass with change event\n   */\n  blockDidMutated(e, t, o) {\n    const i = new CustomEvent(e, {\n      detail: {\n        target: new G(t),\n        ...o\n      }\n    });\n    return this.eventsDispatcher.emit(Pt, {\n      event: i\n    }), t;\n  }\n}\nclass ts extends y {\n  constructor() {\n    super(...arguments), this.anyBlockSelectedCache = null, this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n  }\n  /**\n   * Sanitizer Config\n   *\n   * @returns {SanitizerConfig}\n   */\n  get sanitizerConfig() {\n    return {\n      p: {},\n      h1: {},\n      h2: {},\n      h3: {},\n      h4: {},\n      h5: {},\n      h6: {},\n      ol: {},\n      ul: {},\n      li: {},\n      br: !0,\n      img: {\n        src: !0,\n        width: !0,\n        height: !0\n      },\n      a: {\n        href: !0\n      },\n      b: {},\n      i: {},\n      u: {}\n    };\n  }\n  /**\n   * Flag that identifies all Blocks selection\n   *\n   * @returns {boolean}\n   */\n  get allBlocksSelected() {\n    const { BlockManager: e } = this.Editor;\n    return e.blocks.every((t) => t.selected === !0);\n  }\n  /**\n   * Set selected all blocks\n   *\n   * @param {boolean} state - state to set\n   */\n  set allBlocksSelected(e) {\n    const { BlockManager: t } = this.Editor;\n    t.blocks.forEach((o) => {\n      o.selected = e;\n    }), this.clearCache();\n  }\n  /**\n   * Flag that identifies any Block selection\n   *\n   * @returns {boolean}\n   */\n  get anyBlockSelected() {\n    const { BlockManager: e } = this.Editor;\n    return this.anyBlockSelectedCache === null && (this.anyBlockSelectedCache = e.blocks.some((t) => t.selected === !0)), this.anyBlockSelectedCache;\n  }\n  /**\n   * Return selected Blocks array\n   *\n   * @returns {Block[]}\n   */\n  get selectedBlocks() {\n    return this.Editor.BlockManager.blocks.filter((e) => e.selected);\n  }\n  /**\n   * Module Preparation\n   * Registers Shortcuts CMD+A and CMD+C\n   * to select all and copy them\n   */\n  prepare() {\n    this.selection = new b(), he.add({\n      name: \"CMD+A\",\n      handler: (e) => {\n        const { BlockManager: t, ReadOnly: o } = this.Editor;\n        if (o.isEnabled) {\n          e.preventDefault(), this.selectAllBlocks();\n          return;\n        }\n        t.currentBlock && this.handleCommandA(e);\n      },\n      on: this.Editor.UI.nodes.redactor\n    });\n  }\n  /**\n   * Toggle read-only state\n   *\n   *  - Remove all ranges\n   *  - Unselect all Blocks\n   */\n  toggleReadOnly() {\n    b.get().removeAllRanges(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Remove selection of Block\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  unSelectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    isNaN(e) ? o = t.currentBlock : o = t.getBlockByIndex(e), o.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear selection from Blocks\n   *\n   * @param {Event} reason - event caused clear of selection\n   * @param {boolean} restoreSelection - if true, restore saved selection\n   */\n  clearSelection(e, t = !1) {\n    const { BlockManager: o, Caret: i, RectangleSelection: s } = this.Editor;\n    this.needToSelectAll = !1, this.nativeInputSelected = !1, this.readyToBlockSelection = !1;\n    const r = e && e instanceof KeyboardEvent, l = r && It(e.keyCode);\n    if (this.anyBlockSelected && r && l && !b.isSelectionExists) {\n      const a = o.removeSelectedBlocks();\n      o.insertDefaultBlockAtIndex(a, !0), i.setToBlock(o.currentBlock), Oe(() => {\n        const c = e.key;\n        i.insertContentAtCaretPosition(c.length > 1 ? \"\" : c);\n      }, 20)();\n    }\n    if (this.Editor.CrossBlockSelection.clear(e), !this.anyBlockSelected || s.isRectActivated()) {\n      this.Editor.RectangleSelection.clearSelection();\n      return;\n    }\n    t && this.selection.restore(), this.allBlocksSelected = !1;\n  }\n  /**\n   * Reduce each Block and copy its content\n   *\n   * @param {ClipboardEvent} e - copy/cut event\n   * @returns {Promise<void>}\n   */\n  copySelectedBlocks(e) {\n    e.preventDefault();\n    const t = d.make(\"div\");\n    this.selectedBlocks.forEach((s) => {\n      const r = q(s.holder.innerHTML, this.sanitizerConfig), l = d.make(\"p\");\n      l.innerHTML = r, t.appendChild(l);\n    });\n    const o = Array.from(t.childNodes).map((s) => s.textContent).join(`\n\n`), i = t.innerHTML;\n    return e.clipboardData.setData(\"text/plain\", o), e.clipboardData.setData(\"text/html\", i), Promise.all(this.selectedBlocks.map((s) => s.save())).then((s) => {\n      try {\n        e.clipboardData.setData(this.Editor.Paste.MIME_TYPE, JSON.stringify(s));\n      } catch {\n      }\n    });\n  }\n  /**\n   * Select Block by its index\n   *\n   * @param {number?} index - Block index according to the BlockManager's indexes\n   */\n  selectBlockByIndex(e) {\n    const { BlockManager: t } = this.Editor, o = t.getBlockByIndex(e);\n    o !== void 0 && this.selectBlock(o);\n  }\n  /**\n   * Select passed Block\n   *\n   * @param {Block} block - Block to select\n   */\n  selectBlock(e) {\n    this.selection.save(), b.get().removeAllRanges(), e.selected = !0, this.clearCache(), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * Remove selection from passed Block\n   *\n   * @param {Block} block - Block to unselect\n   */\n  unselectBlock(e) {\n    e.selected = !1, this.clearCache();\n  }\n  /**\n   * Clear anyBlockSelected cache\n   */\n  clearCache() {\n    this.anyBlockSelectedCache = null;\n  }\n  /**\n   * Module destruction\n   * De-registers Shortcut CMD+A\n   */\n  destroy() {\n    he.remove(this.Editor.UI.nodes.redactor, \"CMD+A\");\n  }\n  /**\n   * First CMD+A selects all input content by native behaviour,\n   * next CMD+A keypress selects all blocks\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  handleCommandA(e) {\n    if (this.Editor.RectangleSelection.clearSelection(), d.isNativeInput(e.target) && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    const t = this.Editor.BlockManager.getBlock(e.target), o = t.inputs;\n    if (o.length > 1 && !this.readyToBlockSelection) {\n      this.readyToBlockSelection = !0;\n      return;\n    }\n    if (o.length === 1 && !this.needToSelectAll) {\n      this.needToSelectAll = !0;\n      return;\n    }\n    this.needToSelectAll ? (e.preventDefault(), this.selectAllBlocks(), this.needToSelectAll = !1, this.readyToBlockSelection = !1) : this.readyToBlockSelection && (e.preventDefault(), this.selectBlock(t), this.needToSelectAll = !0);\n  }\n  /**\n   * Select All Blocks\n   * Each Block has selected setter that makes Block copyable\n   */\n  selectAllBlocks() {\n    this.selection.save(), b.get().removeAllRanges(), this.allBlocksSelected = !0, this.Editor.InlineToolbar.close();\n  }\n}\nclass Re extends y {\n  /**\n   * Allowed caret positions in input\n   *\n   * @static\n   * @returns {{START: string, END: string, DEFAULT: string}}\n   */\n  get positions() {\n    return {\n      START: \"start\",\n      END: \"end\",\n      DEFAULT: \"default\"\n    };\n  }\n  /**\n   * Elements styles that can be useful for Caret Module\n   */\n  static get CSS() {\n    return {\n      shadowCaret: \"cdx-shadow-caret\"\n    };\n  }\n  /**\n   * Method gets Block instance and puts caret to the text node with offset\n   * There two ways that method applies caret position:\n   *   - first found text node: sets at the beginning, but you can pass an offset\n   *   - last found text node: sets at the end of the node. Also, you can customize the behaviour\n   *\n   * @param {Block} block - Block class\n   * @param {string} position - position where to set caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToBlock(e, t = this.positions.DEFAULT, o = 0) {\n    var c;\n    const { BlockManager: i, BlockSelection: s } = this.Editor;\n    if (s.clearSelection(), !e.focusable) {\n      (c = window.getSelection()) == null || c.removeAllRanges(), s.selectBlock(e), i.currentBlock = e;\n      return;\n    }\n    let r;\n    switch (t) {\n      case this.positions.START:\n        r = e.firstInput;\n        break;\n      case this.positions.END:\n        r = e.lastInput;\n        break;\n      default:\n        r = e.currentInput;\n    }\n    if (!r)\n      return;\n    const l = d.getDeepestNode(r, t === this.positions.END), a = d.getContentLength(l);\n    switch (!0) {\n      case t === this.positions.START:\n        o = 0;\n        break;\n      case t === this.positions.END:\n      case o > a:\n        o = a;\n        break;\n    }\n    this.set(l, o), i.setCurrentBlockByChildNode(e.holder), i.currentBlock.currentInput = r;\n  }\n  /**\n   * Set caret to the current input of current Block.\n   *\n   * @param {HTMLElement} input - input where caret should be set\n   * @param {string} position - position of the caret.\n   *                            If default - leave default behaviour and apply offset if it's passed\n   * @param {number} offset - caret offset regarding to the text node\n   */\n  setToInput(e, t = this.positions.DEFAULT, o = 0) {\n    const { currentBlock: i } = this.Editor.BlockManager, s = d.getDeepestNode(e);\n    switch (t) {\n      case this.positions.START:\n        this.set(s, 0);\n        break;\n      case this.positions.END:\n        this.set(s, d.getContentLength(s));\n        break;\n      default:\n        o && this.set(s, o);\n    }\n    i.currentInput = e;\n  }\n  /**\n   * Creates Document Range and sets caret to the element with offset\n   *\n   * @param {HTMLElement} element - target node.\n   * @param {number} offset - offset\n   */\n  set(e, t = 0) {\n    const { top: i, bottom: s } = b.setCursor(e, t), { innerHeight: r } = window;\n    i < 0 ? window.scrollBy(0, i - 30) : s > r && window.scrollBy(0, s - r + 30);\n  }\n  /**\n   * Set Caret to the last Block\n   * If last block is not empty, append another empty block\n   */\n  setToTheLastBlock() {\n    const e = this.Editor.BlockManager.lastBlock;\n    if (e)\n      if (e.tool.isDefault && e.isEmpty)\n        this.setToBlock(e);\n      else {\n        const t = this.Editor.BlockManager.insertAtEnd();\n        this.setToBlock(t);\n      }\n  }\n  /**\n   * Extract content fragment of current Block from Caret position to the end of the Block\n   */\n  extractFragmentFromCaretPosition() {\n    const e = b.get();\n    if (e.rangeCount) {\n      const t = e.getRangeAt(0), o = this.Editor.BlockManager.currentBlock.currentInput;\n      if (t.deleteContents(), o)\n        if (d.isNativeInput(o)) {\n          const i = o, s = document.createDocumentFragment(), r = i.value.substring(0, i.selectionStart), l = i.value.substring(i.selectionStart);\n          return s.textContent = l, i.value = r, s;\n        } else {\n          const i = t.cloneRange();\n          return i.selectNodeContents(o), i.setStart(t.endContainer, t.endOffset), i.extractContents();\n        }\n    }\n  }\n  /**\n   * Set's caret to the next Block or Tool`s input\n   * Before moving caret, we should check if caret position is at the end of Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigateNext(e = !1) {\n    const { BlockManager: t } = this.Editor, { currentBlock: o, nextBlock: i } = t;\n    if (o === void 0)\n      return !1;\n    const { nextInput: s, currentInput: r } = o, l = r !== void 0 ? Ae(r) : void 0;\n    let a = i;\n    const c = e || l || !o.focusable;\n    if (s && c)\n      return this.setToInput(s, this.positions.START), !0;\n    if (a === null) {\n      if (o.tool.isDefault || !c)\n        return !1;\n      a = t.insertAtEnd();\n    }\n    return c ? (this.setToBlock(a, this.positions.START), !0) : !1;\n  }\n  /**\n   * Set's caret to the previous Tool`s input or Block\n   * Before moving caret, we should check if caret position is start of the Plugins node\n   * Using {@link Dom#getDeepestNode} to get a last node and match with current selection\n   *\n   * @param {boolean} force - pass true to skip check for caret position\n   */\n  navigatePrevious(e = !1) {\n    const { currentBlock: t, previousBlock: o } = this.Editor.BlockManager;\n    if (!t)\n      return !1;\n    const { previousInput: i, currentInput: s } = t, r = s !== void 0 ? Me(s) : void 0, l = e || r || !t.focusable;\n    return i && l ? (this.setToInput(i, this.positions.END), !0) : o !== null && l ? (this.setToBlock(o, this.positions.END), !0) : !1;\n  }\n  /**\n   * Inserts shadow element after passed element where caret can be placed\n   *\n   * @param {Element} element - element after which shadow caret should be inserted\n   */\n  createShadow(e) {\n    const t = document.createElement(\"span\");\n    t.classList.add(Re.CSS.shadowCaret), e.insertAdjacentElement(\"beforeend\", t);\n  }\n  /**\n   * Restores caret position\n   *\n   * @param {HTMLElement} element - element where caret should be restored\n   */\n  restoreCaret(e) {\n    const t = e.querySelector(`.${Re.CSS.shadowCaret}`);\n    if (!t)\n      return;\n    new b().expandToTag(t);\n    const i = document.createRange();\n    i.selectNode(t), i.extractContents();\n  }\n  /**\n   * Inserts passed content at caret position\n   *\n   * @param {string} content - content to insert\n   */\n  insertContentAtCaretPosition(e) {\n    const t = document.createDocumentFragment(), o = document.createElement(\"div\"), i = b.get(), s = b.range;\n    o.innerHTML = e, Array.from(o.childNodes).forEach((c) => t.appendChild(c)), t.childNodes.length === 0 && t.appendChild(new Text());\n    const r = t.lastChild;\n    s.deleteContents(), s.insertNode(t);\n    const l = document.createRange(), a = r.nodeType === Node.TEXT_NODE ? r : r.firstChild;\n    a !== null && a.textContent !== null && l.setStart(a, a.textContent.length), i.removeAllRanges(), i.addRange(l);\n  }\n}\nclass os extends y {\n  constructor() {\n    super(...arguments), this.onMouseUp = () => {\n      this.listeners.off(document, \"mouseover\", this.onMouseOver), this.listeners.off(document, \"mouseup\", this.onMouseUp);\n    }, this.onMouseOver = (e) => {\n      const { BlockManager: t, BlockSelection: o } = this.Editor;\n      if (e.relatedTarget === null && e.target === null)\n        return;\n      const i = t.getBlockByChildNode(e.relatedTarget) || this.lastSelectedBlock, s = t.getBlockByChildNode(e.target);\n      if (!(!i || !s) && s !== i) {\n        if (i === this.firstSelectedBlock) {\n          b.get().removeAllRanges(), i.selected = !0, s.selected = !0, o.clearCache();\n          return;\n        }\n        if (s === this.firstSelectedBlock) {\n          i.selected = !1, s.selected = !1, o.clearCache();\n          return;\n        }\n        this.Editor.InlineToolbar.close(), this.toggleBlocksSelectedState(i, s), this.lastSelectedBlock = s;\n      }\n    };\n  }\n  /**\n   * Module preparation\n   *\n   * @returns {Promise}\n   */\n  async prepare() {\n    this.listeners.on(document, \"mousedown\", (e) => {\n      this.enableCrossBlockSelection(e);\n    });\n  }\n  /**\n   * Sets up listeners\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  watchSelection(e) {\n    if (e.button !== wo.LEFT)\n      return;\n    const { BlockManager: t } = this.Editor;\n    this.firstSelectedBlock = t.getBlock(e.target), this.lastSelectedBlock = this.firstSelectedBlock, this.listeners.on(document, \"mouseover\", this.onMouseOver), this.listeners.on(document, \"mouseup\", this.onMouseUp);\n  }\n  /**\n   * Return boolean is cross block selection started:\n   * there should be at least 2 selected blocks\n   */\n  get isCrossBlockSelectionStarted() {\n    return !!this.firstSelectedBlock && !!this.lastSelectedBlock && this.firstSelectedBlock !== this.lastSelectedBlock;\n  }\n  /**\n   * Change selection state of the next Block\n   * Used for CBS via Shift + arrow keys\n   *\n   * @param {boolean} next - if true, toggle next block. Previous otherwise\n   */\n  toggleBlockSelectedState(e = !0) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    this.lastSelectedBlock || (this.lastSelectedBlock = this.firstSelectedBlock = t.currentBlock), this.firstSelectedBlock === this.lastSelectedBlock && (this.firstSelectedBlock.selected = !0, o.clearCache(), b.get().removeAllRanges());\n    const i = t.blocks.indexOf(this.lastSelectedBlock) + (e ? 1 : -1), s = t.blocks[i];\n    s && (this.lastSelectedBlock.selected !== s.selected ? (s.selected = !0, o.clearCache()) : (this.lastSelectedBlock.selected = !1, o.clearCache()), this.lastSelectedBlock = s, this.Editor.InlineToolbar.close(), s.holder.scrollIntoView({\n      block: \"nearest\"\n    }));\n  }\n  /**\n   * Clear saved state\n   *\n   * @param {Event} reason - event caused clear of selection\n   */\n  clear(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor, s = t.blocks.indexOf(this.firstSelectedBlock), r = t.blocks.indexOf(this.lastSelectedBlock);\n    if (o.anyBlockSelected && s > -1 && r > -1 && e && e instanceof KeyboardEvent)\n      switch (e.keyCode) {\n        case w.DOWN:\n        case w.RIGHT:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n          break;\n        case w.UP:\n        case w.LEFT:\n          i.setToBlock(t.blocks[Math.min(s, r)], i.positions.START);\n          break;\n        default:\n          i.setToBlock(t.blocks[Math.max(s, r)], i.positions.END);\n      }\n    this.firstSelectedBlock = this.lastSelectedBlock = null;\n  }\n  /**\n   * Enables Cross Block Selection\n   *\n   * @param {MouseEvent} event - mouse down event\n   */\n  enableCrossBlockSelection(e) {\n    const { UI: t } = this.Editor;\n    b.isCollapsed || this.Editor.BlockSelection.clearSelection(e), t.nodes.redactor.contains(e.target) ? this.watchSelection(e) : this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * Change blocks selection state between passed two blocks.\n   *\n   * @param {Block} firstBlock - first block in range\n   * @param {Block} lastBlock - last block in range\n   */\n  toggleBlocksSelectedState(e, t) {\n    const { BlockManager: o, BlockSelection: i } = this.Editor, s = o.blocks.indexOf(e), r = o.blocks.indexOf(t), l = e.selected !== t.selected;\n    for (let a = Math.min(s, r); a <= Math.max(s, r); a++) {\n      const c = o.blocks[a];\n      c !== this.firstSelectedBlock && c !== (l ? e : t) && (o.blocks[a].selected = !o.blocks[a].selected, i.clearCache());\n    }\n  }\n}\nclass is extends y {\n  constructor() {\n    super(...arguments), this.isStartedAtEditor = !1;\n  }\n  /**\n   * Toggle read-only state\n   *\n   * if state is true:\n   *  - disable all drag-n-drop event handlers\n   *\n   * if state is false:\n   *  - restore drag-n-drop event handlers\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : this.enableModuleBindings();\n  }\n  /**\n   * Add drag events listeners to editor zone\n   */\n  enableModuleBindings() {\n    const { UI: e } = this.Editor;\n    this.readOnlyMutableListeners.on(e.nodes.holder, \"drop\", async (t) => {\n      await this.processDrop(t);\n    }, !0), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragstart\", () => {\n      this.processDragStart();\n    }), this.readOnlyMutableListeners.on(e.nodes.holder, \"dragover\", (t) => {\n      this.processDragOver(t);\n    }, !0);\n  }\n  /**\n   * Unbind drag-n-drop event handlers\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Handle drop event\n   *\n   * @param {DragEvent} dropEvent - drop event\n   */\n  async processDrop(e) {\n    const {\n      BlockManager: t,\n      Paste: o,\n      Caret: i\n    } = this.Editor;\n    e.preventDefault(), t.blocks.forEach((r) => {\n      r.dropTarget = !1;\n    }), b.isAtEditor && !b.isCollapsed && this.isStartedAtEditor && document.execCommand(\"delete\"), this.isStartedAtEditor = !1;\n    const s = t.setCurrentBlockByChildNode(e.target);\n    if (s)\n      this.Editor.Caret.setToBlock(s, i.positions.END);\n    else {\n      const r = t.setCurrentBlockByChildNode(t.lastBlock.holder);\n      this.Editor.Caret.setToBlock(r, i.positions.END);\n    }\n    await o.processDataTransfer(e.dataTransfer, !0);\n  }\n  /**\n   * Handle drag start event\n   */\n  processDragStart() {\n    b.isAtEditor && !b.isCollapsed && (this.isStartedAtEditor = !0), this.Editor.InlineToolbar.close();\n  }\n  /**\n   * @param {DragEvent} dragEvent - drag event\n   */\n  processDragOver(e) {\n    e.preventDefault();\n  }\n}\nconst ss = 180, ns = 400;\nclass rs extends y {\n  /**\n   * Prepare the module\n   *\n   * @param options - options used by the modification observer module\n   * @param options.config - Editor configuration object\n   * @param options.eventsDispatcher - common Editor event bus\n   */\n  constructor({ config: e, eventsDispatcher: t }) {\n    super({\n      config: e,\n      eventsDispatcher: t\n    }), this.disabled = !1, this.batchingTimeout = null, this.batchingOnChangeQueue = /* @__PURE__ */ new Map(), this.batchTime = ns, this.mutationObserver = new MutationObserver((o) => {\n      this.redactorChanged(o);\n    }), this.eventsDispatcher.on(Pt, (o) => {\n      this.particularBlockChanged(o.event);\n    }), this.eventsDispatcher.on(Dt, () => {\n      this.disable();\n    }), this.eventsDispatcher.on(Rt, () => {\n      this.enable();\n    });\n  }\n  /**\n   * Enables onChange event\n   */\n  enable() {\n    this.mutationObserver.observe(\n      this.Editor.UI.nodes.redactor,\n      {\n        childList: !0,\n        subtree: !0,\n        characterData: !0,\n        attributes: !0\n      }\n    ), this.disabled = !1;\n  }\n  /**\n   * Disables onChange event\n   */\n  disable() {\n    this.mutationObserver.disconnect(), this.disabled = !0;\n  }\n  /**\n   * Call onChange event passed to Editor.js configuration\n   *\n   * @param event - some of our custom change events\n   */\n  particularBlockChanged(e) {\n    this.disabled || !O(this.config.onChange) || (this.batchingOnChangeQueue.set(`block:${e.detail.target.id}:event:${e.type}`, e), this.batchingTimeout && clearTimeout(this.batchingTimeout), this.batchingTimeout = setTimeout(() => {\n      let t;\n      this.batchingOnChangeQueue.size === 1 ? t = this.batchingOnChangeQueue.values().next().value : t = Array.from(this.batchingOnChangeQueue.values()), this.config.onChange && this.config.onChange(this.Editor.API.methods, t), this.batchingOnChangeQueue.clear();\n    }, this.batchTime));\n  }\n  /**\n   * Fired on every blocks wrapper dom change\n   *\n   * @param mutations - mutations happened\n   */\n  redactorChanged(e) {\n    this.eventsDispatcher.emit(Je, {\n      mutations: e\n    });\n  }\n}\nconst ro = class lo extends y {\n  constructor() {\n    super(...arguments), this.MIME_TYPE = \"application/x-editor-js\", this.toolsTags = {}, this.tagsByTool = {}, this.toolsPatterns = [], this.toolsFiles = {}, this.exceptionList = [], this.processTool = (e) => {\n      try {\n        const t = e.create({}, {}, !1);\n        if (e.pasteConfig === !1) {\n          this.exceptionList.push(e.name);\n          return;\n        }\n        if (!O(t.onPaste))\n          return;\n        this.getTagsConfig(e), this.getFilesConfig(e), this.getPatternsConfig(e);\n      } catch (t) {\n        I(\n          `Paste handling for «${e.name}» Tool hasn't been set up because of the error`,\n          \"warn\",\n          t\n        );\n      }\n    }, this.handlePasteEvent = async (e) => {\n      const { BlockManager: t, Toolbar: o } = this.Editor, i = t.setCurrentBlockByChildNode(e.target);\n      !i || this.isNativeBehaviour(e.target) && !e.clipboardData.types.includes(\"Files\") || i && this.exceptionList.includes(i.name) || (e.preventDefault(), this.processDataTransfer(e.clipboardData), o.close());\n    };\n  }\n  /**\n   * Set onPaste callback and collect tools` paste configurations\n   */\n  async prepare() {\n    this.processTools();\n  }\n  /**\n   * Set read-only state\n   *\n   * @param {boolean} readOnlyEnabled - read only flag value\n   */\n  toggleReadOnly(e) {\n    e ? this.unsetCallback() : this.setCallback();\n  }\n  /**\n   * Handle pasted or dropped data transfer object\n   *\n   * @param {DataTransfer} dataTransfer - pasted or dropped data transfer object\n   * @param {boolean} isDragNDrop - true if data transfer comes from drag'n'drop events\n   */\n  async processDataTransfer(e, t = !1) {\n    const { Tools: o } = this.Editor, i = e.types;\n    if ((i.includes ? i.includes(\"Files\") : i.contains(\"Files\")) && !V(this.toolsFiles)) {\n      await this.processFiles(e.files);\n      return;\n    }\n    const r = e.getData(this.MIME_TYPE), l = e.getData(\"text/plain\");\n    let a = e.getData(\"text/html\");\n    if (r)\n      try {\n        this.insertEditorJSData(JSON.parse(r));\n        return;\n      } catch {\n      }\n    t && l.trim() && a.trim() && (a = \"<p>\" + (a.trim() ? a : l) + \"</p>\");\n    const c = Object.keys(this.toolsTags).reduce((p, g) => (p[g.toLowerCase()] = this.toolsTags[g].sanitizationConfig ?? {}, p), {}), u = Object.assign({}, c, o.getAllInlineToolsSanitizeConfig(), { br: {} }), h = q(a, u);\n    !h.trim() || h.trim() === l || !d.isHTMLString(h) ? await this.processText(l) : await this.processText(h, !0);\n  }\n  /**\n   * Process pasted text and divide them into Blocks\n   *\n   * @param {string} data - text to process. Can be HTML or plain.\n   * @param {boolean} isHTML - if passed string is HTML, this parameter should be true\n   */\n  async processText(e, t = !1) {\n    const { Caret: o, BlockManager: i } = this.Editor, s = t ? this.processHTML(e) : this.processPlain(e);\n    if (!s.length)\n      return;\n    if (s.length === 1) {\n      s[0].isBlock ? this.processSingleBlock(s.pop()) : this.processInlinePaste(s.pop());\n      return;\n    }\n    const l = i.currentBlock && i.currentBlock.tool.isDefault && i.currentBlock.isEmpty;\n    s.map(\n      async (a, c) => this.insertBlock(a, c === 0 && l)\n    ), i.currentBlock && o.setToBlock(i.currentBlock, o.positions.END);\n  }\n  /**\n   * Set onPaste callback handler\n   */\n  setCallback() {\n    this.listeners.on(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Unset onPaste callback handler\n   */\n  unsetCallback() {\n    this.listeners.off(this.Editor.UI.nodes.holder, \"paste\", this.handlePasteEvent);\n  }\n  /**\n   * Get and process tool`s paste configs\n   */\n  processTools() {\n    const e = this.Editor.Tools.blockTools;\n    Array.from(e.values()).forEach(this.processTool);\n  }\n  /**\n   * Get tags name list from either tag name or sanitization config.\n   *\n   * @param {string | object} tagOrSanitizeConfig - tag name or sanitize config object.\n   * @returns {string[]} array of tags.\n   */\n  collectTagNames(e) {\n    return Q(e) ? [e] : R(e) ? Object.keys(e) : [];\n  }\n  /**\n   * Get tags to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getTagsConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const t = e.pasteConfig.tags || [], o = [];\n    t.forEach((i) => {\n      const s = this.collectTagNames(i);\n      o.push(...s), s.forEach((r) => {\n        if (Object.prototype.hasOwnProperty.call(this.toolsTags, r)) {\n          I(\n            `Paste handler for «${e.name}» Tool on «${r}» tag is skipped because it is already used by «${this.toolsTags[r].tool.name}» Tool.`,\n            \"warn\"\n          );\n          return;\n        }\n        const l = R(i) ? i[r] : null;\n        this.toolsTags[r.toUpperCase()] = {\n          tool: e,\n          sanitizationConfig: l\n        };\n      });\n    }), this.tagsByTool[e.name] = o.map((i) => i.toUpperCase());\n  }\n  /**\n   * Get files` types and extensions to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getFilesConfig(e) {\n    if (e.pasteConfig === !1)\n      return;\n    const { files: t = {} } = e.pasteConfig;\n    let { extensions: o, mimeTypes: i } = t;\n    !o && !i || (o && !Array.isArray(o) && (I(`«extensions» property of the onDrop config for «${e.name}» Tool should be an array`), o = []), i && !Array.isArray(i) && (I(`«mimeTypes» property of the onDrop config for «${e.name}» Tool should be an array`), i = []), i && (i = i.filter((s) => To(s) ? !0 : (I(`MIME type value «${s}» for the «${e.name}» Tool is not a valid MIME type`, \"warn\"), !1))), this.toolsFiles[e.name] = {\n      extensions: o || [],\n      mimeTypes: i || []\n    });\n  }\n  /**\n   * Get RegExp patterns to substitute by Tool\n   *\n   * @param tool - BlockTool object\n   */\n  getPatternsConfig(e) {\n    e.pasteConfig === !1 || !e.pasteConfig.patterns || V(e.pasteConfig.patterns) || Object.entries(e.pasteConfig.patterns).forEach(([t, o]) => {\n      o instanceof RegExp || I(\n        `Pattern ${o} for «${e.name}» Tool is skipped because it should be a Regexp instance.`,\n        \"warn\"\n      ), this.toolsPatterns.push({\n        key: t,\n        pattern: o,\n        tool: e\n      });\n    });\n  }\n  /**\n   * Check if browser behavior suits better\n   *\n   * @param {EventTarget} element - element where content has been pasted\n   * @returns {boolean}\n   */\n  isNativeBehaviour(e) {\n    return d.isNativeInput(e);\n  }\n  /**\n   * Get files from data transfer object and insert related Tools\n   *\n   * @param {FileList} items - pasted or dropped items\n   */\n  async processFiles(e) {\n    const { BlockManager: t } = this.Editor;\n    let o;\n    o = await Promise.all(\n      Array.from(e).map((r) => this.processFile(r))\n    ), o = o.filter((r) => !!r);\n    const s = t.currentBlock.tool.isDefault && t.currentBlock.isEmpty;\n    o.forEach(\n      (r, l) => {\n        t.paste(r.type, r.event, l === 0 && s);\n      }\n    );\n  }\n  /**\n   * Get information about file and find Tool to handle it\n   *\n   * @param {File} file - file to process\n   */\n  async processFile(e) {\n    const t = Bo(e), o = Object.entries(this.toolsFiles).find(([r, { mimeTypes: l, extensions: a }]) => {\n      const [c, u] = e.type.split(\"/\"), h = a.find((g) => g.toLowerCase() === t.toLowerCase()), p = l.find((g) => {\n        const [f, k] = g.split(\"/\");\n        return f === c && (k === u || k === \"*\");\n      });\n      return !!h || !!p;\n    });\n    if (!o)\n      return;\n    const [i] = o;\n    return {\n      event: this.composePasteEvent(\"file\", {\n        file: e\n      }),\n      type: i\n    };\n  }\n  /**\n   * Split HTML string to blocks and return it as array of Block data\n   *\n   * @param {string} innerHTML - html string to process\n   * @returns {PasteData[]}\n   */\n  processHTML(e) {\n    const { Tools: t } = this.Editor, o = d.make(\"DIV\");\n    return o.innerHTML = e, this.getNodes(o).map((s) => {\n      let r, l = t.defaultTool, a = !1;\n      switch (s.nodeType) {\n        case Node.DOCUMENT_FRAGMENT_NODE:\n          r = d.make(\"div\"), r.appendChild(s);\n          break;\n        case Node.ELEMENT_NODE:\n          r = s, a = !0, this.toolsTags[r.tagName] && (l = this.toolsTags[r.tagName].tool);\n          break;\n      }\n      const { tags: c } = l.pasteConfig || { tags: [] }, u = c.reduce((g, f) => (this.collectTagNames(f).forEach((C) => {\n        const S = R(f) ? f[C] : null;\n        g[C.toLowerCase()] = S || {};\n      }), g), {}), h = Object.assign({}, u, l.baseSanitizeConfig);\n      if (r.tagName.toLowerCase() === \"table\") {\n        const g = q(r.outerHTML, h);\n        r = d.make(\"div\", void 0, {\n          innerHTML: g\n        }).firstChild;\n      } else\n        r.innerHTML = q(r.innerHTML, h);\n      const p = this.composePasteEvent(\"tag\", {\n        data: r\n      });\n      return {\n        content: r,\n        isBlock: a,\n        tool: l.name,\n        event: p\n      };\n    }).filter((s) => {\n      const r = d.isEmpty(s.content), l = d.isSingleTag(s.content);\n      return !r || l;\n    });\n  }\n  /**\n   * Split plain text by new line symbols and return it as array of Block data\n   *\n   * @param {string} plain - string to process\n   * @returns {PasteData[]}\n   */\n  processPlain(e) {\n    const { defaultBlock: t } = this.config;\n    if (!e)\n      return [];\n    const o = t;\n    return e.split(/\\r?\\n/).filter((i) => i.trim()).map((i) => {\n      const s = d.make(\"div\");\n      s.textContent = i;\n      const r = this.composePasteEvent(\"tag\", {\n        data: s\n      });\n      return {\n        content: s,\n        tool: o,\n        isBlock: !1,\n        event: r\n      };\n    });\n  }\n  /**\n   * Process paste of single Block tool content\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processSingleBlock(e) {\n    const { Caret: t, BlockManager: o } = this.Editor, { currentBlock: i } = o;\n    if (!i || e.tool !== i.name || !d.containsOnlyInlineElements(e.content.innerHTML)) {\n      this.insertBlock(e, (i == null ? void 0 : i.tool.isDefault) && i.isEmpty);\n      return;\n    }\n    t.insertContentAtCaretPosition(e.content.innerHTML);\n  }\n  /**\n   * Process paste to single Block:\n   * 1. Find patterns` matches\n   * 2. Insert new block if it is not the same type as current one\n   * 3. Just insert text if there is no substitutions\n   *\n   * @param {PasteData} dataToInsert - data of Block to insert\n   */\n  async processInlinePaste(e) {\n    const { BlockManager: t, Caret: o } = this.Editor, { content: i } = e;\n    if (t.currentBlock && t.currentBlock.tool.isDefault && i.textContent.length < lo.PATTERN_PROCESSING_MAX_LENGTH) {\n      const r = await this.processPattern(i.textContent);\n      if (r) {\n        const l = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty, a = t.paste(r.tool, r.event, l);\n        o.setToBlock(a, o.positions.END);\n        return;\n      }\n    }\n    if (t.currentBlock && t.currentBlock.currentInput) {\n      const r = t.currentBlock.tool.baseSanitizeConfig;\n      document.execCommand(\n        \"insertHTML\",\n        !1,\n        q(i.innerHTML, r)\n      );\n    } else\n      this.insertBlock(e);\n  }\n  /**\n   * Get patterns` matches\n   *\n   * @param {string} text - text to process\n   * @returns {Promise<{event: PasteEvent, tool: string}>}\n   */\n  async processPattern(e) {\n    const t = this.toolsPatterns.find((i) => {\n      const s = i.pattern.exec(e);\n      return s ? e === s.shift() : !1;\n    });\n    return t ? {\n      event: this.composePasteEvent(\"pattern\", {\n        key: t.key,\n        data: e\n      }),\n      tool: t.tool.name\n    } : void 0;\n  }\n  /**\n   * Insert pasted Block content to Editor\n   *\n   * @param {PasteData} data - data to insert\n   * @param {boolean} canReplaceCurrentBlock - if true and is current Block is empty, will replace current Block\n   * @returns {void}\n   */\n  insertBlock(e, t = !1) {\n    const { BlockManager: o, Caret: i } = this.Editor, { currentBlock: s } = o;\n    let r;\n    if (t && s && s.isEmpty) {\n      r = o.paste(e.tool, e.event, !0), i.setToBlock(r, i.positions.END);\n      return;\n    }\n    r = o.paste(e.tool, e.event), i.setToBlock(r, i.positions.END);\n  }\n  /**\n   * Insert data passed as application/x-editor-js JSON\n   *\n   * @param {Array} blocks — Blocks' data to insert\n   * @returns {void}\n   */\n  insertEditorJSData(e) {\n    const { BlockManager: t, Caret: o, Tools: i } = this.Editor;\n    ot(\n      e,\n      (r) => i.blockTools.get(r).sanitizeConfig\n    ).forEach(({ tool: r, data: l }, a) => {\n      let c = !1;\n      a === 0 && (c = t.currentBlock && t.currentBlock.tool.isDefault && t.currentBlock.isEmpty);\n      const u = t.insert({\n        tool: r,\n        data: l,\n        replace: c\n      });\n      o.setToBlock(u, o.positions.END);\n    });\n  }\n  /**\n   * Fetch nodes from Element node\n   *\n   * @param {Node} node - current node\n   * @param {Node[]} nodes - processed nodes\n   * @param {Node} destNode - destination node\n   */\n  processElementNode(e, t, o) {\n    const i = Object.keys(this.toolsTags), s = e, { tool: r } = this.toolsTags[s.tagName] || {}, l = this.tagsByTool[r == null ? void 0 : r.name] || [], a = i.includes(s.tagName), c = d.blockElements.includes(s.tagName.toLowerCase()), u = Array.from(s.children).some(\n      ({ tagName: p }) => i.includes(p) && !l.includes(p)\n    ), h = Array.from(s.children).some(\n      ({ tagName: p }) => d.blockElements.includes(p.toLowerCase())\n    );\n    if (!c && !a && !u)\n      return o.appendChild(s), [...t, o];\n    if (a && !u || c && !h && !u)\n      return [...t, o, s];\n  }\n  /**\n   * Recursively divide HTML string to two types of nodes:\n   * 1. Block element\n   * 2. Document Fragments contained text and markup tags like a, b, i etc.\n   *\n   * @param {Node} wrapper - wrapper of paster HTML content\n   * @returns {Node[]}\n   */\n  getNodes(e) {\n    const t = Array.from(e.childNodes);\n    let o;\n    const i = (s, r) => {\n      if (d.isEmpty(r) && !d.isSingleTag(r))\n        return s;\n      const l = s[s.length - 1];\n      let a = new DocumentFragment();\n      switch (l && d.isFragment(l) && (a = s.pop()), r.nodeType) {\n        case Node.ELEMENT_NODE:\n          if (o = this.processElementNode(r, s, a), o)\n            return o;\n          break;\n        case Node.TEXT_NODE:\n          return a.appendChild(r), [...s, a];\n        default:\n          return [...s, a];\n      }\n      return [...s, ...Array.from(r.childNodes).reduce(i, [])];\n    };\n    return t.reduce(i, []);\n  }\n  /**\n   * Compose paste event with passed type and detail\n   *\n   * @param {string} type - event type\n   * @param {PasteEventDetail} detail - event detail\n   */\n  composePasteEvent(e, t) {\n    return new CustomEvent(e, {\n      detail: t\n    });\n  }\n};\nro.PATTERN_PROCESSING_MAX_LENGTH = 450;\nlet ls = ro;\nclass as extends y {\n  constructor() {\n    super(...arguments), this.toolsDontSupportReadOnly = [], this.readOnlyEnabled = !1;\n  }\n  /**\n   * Returns state of read only mode\n   */\n  get isEnabled() {\n    return this.readOnlyEnabled;\n  }\n  /**\n   * Set initial state\n   */\n  async prepare() {\n    const { Tools: e } = this.Editor, { blockTools: t } = e, o = [];\n    Array.from(t.entries()).forEach(([i, s]) => {\n      s.isReadOnlySupported || o.push(i);\n    }), this.toolsDontSupportReadOnly = o, this.config.readOnly && o.length > 0 && this.throwCriticalError(), this.toggle(this.config.readOnly, !0);\n  }\n  /**\n   * Set read-only mode or toggle current state\n   * Call all Modules `toggleReadOnly` method and re-render Editor\n   *\n   * @param state - (optional) read-only state or toggle\n   * @param isInitial - (optional) true when editor is initializing\n   */\n  async toggle(e = !this.readOnlyEnabled, t = !1) {\n    e && this.toolsDontSupportReadOnly.length > 0 && this.throwCriticalError();\n    const o = this.readOnlyEnabled;\n    this.readOnlyEnabled = e;\n    for (const s in this.Editor)\n      this.Editor[s].toggleReadOnly && this.Editor[s].toggleReadOnly(e);\n    if (o === e)\n      return this.readOnlyEnabled;\n    if (t)\n      return this.readOnlyEnabled;\n    this.Editor.ModificationsObserver.disable();\n    const i = await this.Editor.Saver.save();\n    return await this.Editor.BlockManager.clear(), await this.Editor.Renderer.render(i.blocks), this.Editor.ModificationsObserver.enable(), this.readOnlyEnabled;\n  }\n  /**\n   * Throws an error about tools which don't support read-only mode\n   */\n  throwCriticalError() {\n    throw new Nt(\n      `To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(\", \")} don't support read-only mode.`\n    );\n  }\n}\nclass xe extends y {\n  constructor() {\n    super(...arguments), this.isRectSelectionActivated = !1, this.SCROLL_SPEED = 3, this.HEIGHT_OF_SCROLL_ZONE = 40, this.BOTTOM_SCROLL_ZONE = 1, this.TOP_SCROLL_ZONE = 2, this.MAIN_MOUSE_BUTTON = 0, this.mousedown = !1, this.isScrolling = !1, this.inScrollZone = null, this.startX = 0, this.startY = 0, this.mouseX = 0, this.mouseY = 0, this.stackOfSelected = [], this.listenerIds = [];\n  }\n  /**\n   * CSS classes for the Block\n   *\n   * @returns {{wrapper: string, content: string}}\n   */\n  static get CSS() {\n    return {\n      overlay: \"codex-editor-overlay\",\n      overlayContainer: \"codex-editor-overlay__container\",\n      rect: \"codex-editor-overlay__rectangle\",\n      topScrollZone: \"codex-editor-overlay__scroll-zone--top\",\n      bottomScrollZone: \"codex-editor-overlay__scroll-zone--bottom\"\n    };\n  }\n  /**\n   * Module Preparation\n   * Creating rect and hang handlers\n   */\n  prepare() {\n    this.enableModuleBindings();\n  }\n  /**\n   * Init rect params\n   *\n   * @param {number} pageX - X coord of mouse\n   * @param {number} pageY - Y coord of mouse\n   */\n  startSelection(e, t) {\n    const o = document.elementFromPoint(e - window.pageXOffset, t - window.pageYOffset);\n    o.closest(`.${this.Editor.Toolbar.CSS.toolbar}`) || (this.Editor.BlockSelection.allBlocksSelected = !1, this.clearSelection(), this.stackOfSelected = []);\n    const s = [\n      `.${D.CSS.content}`,\n      `.${this.Editor.Toolbar.CSS.toolbar}`,\n      `.${this.Editor.InlineToolbar.CSS.inlineToolbar}`\n    ], r = o.closest(\".\" + this.Editor.UI.CSS.editorWrapper), l = s.some((a) => !!o.closest(a));\n    !r || l || (this.mousedown = !0, this.startX = e, this.startY = t);\n  }\n  /**\n   * Clear all params to end selection\n   */\n  endSelection() {\n    this.mousedown = !1, this.startX = 0, this.startY = 0, this.overlayRectangle.style.display = \"none\";\n  }\n  /**\n   * is RectSelection Activated\n   */\n  isRectActivated() {\n    return this.isRectSelectionActivated;\n  }\n  /**\n   * Mark that selection is end\n   */\n  clearSelection() {\n    this.isRectSelectionActivated = !1;\n  }\n  /**\n   * Sets Module necessary event handlers\n   */\n  enableModuleBindings() {\n    const { container: e } = this.genHTML();\n    this.listeners.on(e, \"mousedown\", (t) => {\n      this.processMouseDown(t);\n    }, !1), this.listeners.on(document.body, \"mousemove\", Ve((t) => {\n      this.processMouseMove(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseleave\", () => {\n      this.processMouseLeave();\n    }), this.listeners.on(window, \"scroll\", Ve((t) => {\n      this.processScroll(t);\n    }, 10), {\n      passive: !0\n    }), this.listeners.on(document.body, \"mouseup\", () => {\n      this.processMouseUp();\n    }, !1);\n  }\n  /**\n   * Handle mouse down events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseDown(e) {\n    if (e.button !== this.MAIN_MOUSE_BUTTON)\n      return;\n    e.target.closest(d.allInputsSelector) !== null || this.startSelection(e.pageX, e.pageY);\n  }\n  /**\n   * Handle mouse move events\n   *\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processMouseMove(e) {\n    this.changingRectangle(e), this.scrollByZones(e.clientY);\n  }\n  /**\n   * Handle mouse leave\n   */\n  processMouseLeave() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * @param {MouseEvent} mouseEvent - mouse event payload\n   */\n  processScroll(e) {\n    this.changingRectangle(e);\n  }\n  /**\n   * Handle mouse up\n   */\n  processMouseUp() {\n    this.clearSelection(), this.endSelection();\n  }\n  /**\n   * Scroll If mouse in scroll zone\n   *\n   * @param {number} clientY - Y coord of mouse\n   */\n  scrollByZones(e) {\n    if (this.inScrollZone = null, e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.TOP_SCROLL_ZONE), document.documentElement.clientHeight - e <= this.HEIGHT_OF_SCROLL_ZONE && (this.inScrollZone = this.BOTTOM_SCROLL_ZONE), !this.inScrollZone) {\n      this.isScrolling = !1;\n      return;\n    }\n    this.isScrolling || (this.scrollVertical(this.inScrollZone === this.TOP_SCROLL_ZONE ? -this.SCROLL_SPEED : this.SCROLL_SPEED), this.isScrolling = !0);\n  }\n  /**\n   * Generates required HTML elements\n   *\n   * @returns {Object<string, Element>}\n   */\n  genHTML() {\n    const { UI: e } = this.Editor, t = e.nodes.holder.querySelector(\".\" + e.CSS.editorWrapper), o = d.make(\"div\", xe.CSS.overlay, {}), i = d.make(\"div\", xe.CSS.overlayContainer, {}), s = d.make(\"div\", xe.CSS.rect, {});\n    return i.appendChild(s), o.appendChild(i), t.appendChild(o), this.overlayRectangle = s, {\n      container: t,\n      overlay: o\n    };\n  }\n  /**\n   * Activates scrolling if blockSelection is active and mouse is in scroll zone\n   *\n   * @param {number} speed - speed of scrolling\n   */\n  scrollVertical(e) {\n    if (!(this.inScrollZone && this.mousedown))\n      return;\n    const t = window.pageYOffset;\n    window.scrollBy(0, e), this.mouseY += window.pageYOffset - t, setTimeout(() => {\n      this.scrollVertical(e);\n    }, 0);\n  }\n  /**\n   * Handles the change in the rectangle and its effect\n   *\n   * @param {MouseEvent} event - mouse event\n   */\n  changingRectangle(e) {\n    if (!this.mousedown)\n      return;\n    e.pageY !== void 0 && (this.mouseX = e.pageX, this.mouseY = e.pageY);\n    const { rightPos: t, leftPos: o, index: i } = this.genInfoForMouseSelection(), s = this.startX > t && this.mouseX > t, r = this.startX < o && this.mouseX < o;\n    this.rectCrossesBlocks = !(s || r), this.isRectSelectionActivated || (this.rectCrossesBlocks = !1, this.isRectSelectionActivated = !0, this.shrinkRectangleToPoint(), this.overlayRectangle.style.display = \"block\"), this.updateRectangleSize(), this.Editor.Toolbar.close(), i !== void 0 && (this.trySelectNextBlock(i), this.inverseSelection(), b.get().removeAllRanges());\n  }\n  /**\n   * Shrink rect to singular point\n   */\n  shrinkRectangleToPoint() {\n    this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`;\n  }\n  /**\n   * Select or unselect all of blocks in array if rect is out or in selectable area\n   */\n  inverseSelection() {\n    const t = this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;\n    if (this.rectCrossesBlocks && !t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.selectBlockByIndex(o);\n    if (!this.rectCrossesBlocks && t)\n      for (const o of this.stackOfSelected)\n        this.Editor.BlockSelection.unSelectBlockByIndex(o);\n  }\n  /**\n   * Updates size of rectangle\n   */\n  updateRectangleSize() {\n    this.mouseY >= this.startY ? (this.overlayRectangle.style.top = `${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.bottom = `calc(100% - ${this.mouseY - window.pageYOffset}px`) : (this.overlayRectangle.style.bottom = `calc(100% - ${this.startY - window.pageYOffset}px`, this.overlayRectangle.style.top = `${this.mouseY - window.pageYOffset}px`), this.mouseX >= this.startX ? (this.overlayRectangle.style.left = `${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.right = `calc(100% - ${this.mouseX - window.pageXOffset}px`) : (this.overlayRectangle.style.right = `calc(100% - ${this.startX - window.pageXOffset}px`, this.overlayRectangle.style.left = `${this.mouseX - window.pageXOffset}px`);\n  }\n  /**\n   * Collects information needed to determine the behavior of the rectangle\n   *\n   * @returns {object} index - index next Block, leftPos - start of left border of Block, rightPos - right border\n   */\n  genInfoForMouseSelection() {\n    const t = document.body.offsetWidth / 2, o = this.mouseY - window.pageYOffset, i = document.elementFromPoint(t, o), s = this.Editor.BlockManager.getBlockByChildNode(i);\n    let r;\n    s !== void 0 && (r = this.Editor.BlockManager.blocks.findIndex((h) => h.holder === s.holder));\n    const l = this.Editor.BlockManager.lastBlock.holder.querySelector(\".\" + D.CSS.content), a = Number.parseInt(window.getComputedStyle(l).width, 10) / 2, c = t - a, u = t + a;\n    return {\n      index: r,\n      leftPos: c,\n      rightPos: u\n    };\n  }\n  /**\n   * Select block with index index\n   *\n   * @param index - index of block in redactor\n   */\n  addBlockInSelection(e) {\n    this.rectCrossesBlocks && this.Editor.BlockSelection.selectBlockByIndex(e), this.stackOfSelected.push(e);\n  }\n  /**\n   * Adds a block to the selection and determines which blocks should be selected\n   *\n   * @param {object} index - index of new block in the reactor\n   */\n  trySelectNextBlock(e) {\n    const t = this.stackOfSelected[this.stackOfSelected.length - 1] === e, o = this.stackOfSelected.length, i = 1, s = -1, r = 0;\n    if (t)\n      return;\n    const l = this.stackOfSelected[o - 1] - this.stackOfSelected[o - 2] > 0;\n    let a = r;\n    o > 1 && (a = l ? i : s);\n    const c = e > this.stackOfSelected[o - 1] && a === i, u = e < this.stackOfSelected[o - 1] && a === s, p = !(c || u || a === r);\n    if (!p && (e > this.stackOfSelected[o - 1] || this.stackOfSelected[o - 1] === void 0)) {\n      let k = this.stackOfSelected[o - 1] + 1 || e;\n      for (k; k <= e; k++)\n        this.addBlockInSelection(k);\n      return;\n    }\n    if (!p && e < this.stackOfSelected[o - 1]) {\n      for (let k = this.stackOfSelected[o - 1] - 1; k >= e; k--)\n        this.addBlockInSelection(k);\n      return;\n    }\n    if (!p)\n      return;\n    let g = o - 1, f;\n    for (e > this.stackOfSelected[o - 1] ? f = () => e > this.stackOfSelected[g] : f = () => e < this.stackOfSelected[g]; f(); )\n      this.rectCrossesBlocks && this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[g]), this.stackOfSelected.pop(), g--;\n  }\n}\nclass cs extends y {\n  /**\n   * Renders passed blocks as one batch\n   *\n   * @param blocksData - blocks to render\n   */\n  async render(e) {\n    return new Promise((t) => {\n      const { Tools: o, BlockManager: i } = this.Editor;\n      if (e.length === 0)\n        i.insert();\n      else {\n        const s = e.map(({ type: r, data: l, tunes: a, id: c }) => {\n          o.available.has(r) === !1 && (X(`Tool «${r}» is not found. Check 'tools' property at the Editor.js config.`, \"warn\"), l = this.composeStubDataForTool(r, l, c), r = o.stubTool);\n          let u;\n          try {\n            u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: l,\n              tunes: a\n            });\n          } catch (h) {\n            I(`Block «${r}» skipped because of plugins error`, \"error\", {\n              data: l,\n              error: h\n            }), l = this.composeStubDataForTool(r, l, c), r = o.stubTool, u = i.composeBlock({\n              id: c,\n              tool: r,\n              data: l,\n              tunes: a\n            });\n          }\n          return u;\n        });\n        i.insertMany(s);\n      }\n      window.requestIdleCallback(() => {\n        t();\n      }, { timeout: 2e3 });\n    });\n  }\n  /**\n   * Create data for the Stub Tool that will be used instead of unavailable tool\n   *\n   * @param tool - unavailable tool name to stub\n   * @param data - data of unavailable block\n   * @param [id] - id of unavailable block\n   */\n  composeStubDataForTool(e, t, o) {\n    const { Tools: i } = this.Editor;\n    let s = e;\n    if (i.unavailable.has(e)) {\n      const r = i.unavailable.get(e).toolbox;\n      r !== void 0 && r[0].title !== void 0 && (s = r[0].title);\n    }\n    return {\n      savedData: {\n        id: o,\n        type: e,\n        data: t\n      },\n      title: s\n    };\n  }\n}\nclass ds extends y {\n  /**\n   * Composes new chain of Promises to fire them alternatelly\n   *\n   * @returns {OutputData}\n   */\n  async save() {\n    const { BlockManager: e, Tools: t } = this.Editor, o = e.blocks, i = [];\n    try {\n      o.forEach((l) => {\n        i.push(this.getSavedData(l));\n      });\n      const s = await Promise.all(i), r = await ot(s, (l) => t.blockTools.get(l).sanitizeConfig);\n      return this.makeOutput(r);\n    } catch (s) {\n      X(\"Saving failed due to the Error %o\", \"error\", s);\n    }\n  }\n  /**\n   * Saves and validates\n   *\n   * @param {Block} block - Editor's Tool\n   * @returns {ValidatedData} - Tool's validated data\n   */\n  async getSavedData(e) {\n    const t = await e.save(), o = t && await e.validate(t.data);\n    return {\n      ...t,\n      isValid: o\n    };\n  }\n  /**\n   * Creates output object with saved data, time and version of editor\n   *\n   * @param {ValidatedData} allExtractedData - data extracted from Blocks\n   * @returns {OutputData}\n   */\n  makeOutput(e) {\n    const t = [];\n    return e.forEach(({ id: o, tool: i, data: s, tunes: r, isValid: l }) => {\n      if (!l) {\n        I(`Block «${i}» skipped because saved data is invalid`);\n        return;\n      }\n      if (i === this.Editor.Tools.stubTool) {\n        t.push(s);\n        return;\n      }\n      const a = {\n        id: o,\n        type: i,\n        data: s,\n        ...!V(r) && {\n          tunes: r\n        }\n      };\n      t.push(a);\n    }), {\n      time: +/* @__PURE__ */ new Date(),\n      blocks: t,\n      version: \"2.30.5\"\n    };\n  }\n}\n(function() {\n  try {\n    if (typeof document < \"u\") {\n      var n = document.createElement(\"style\");\n      n.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-block:only-of-type .ce-paragraph[data-placeholder-active]:empty:before,.ce-block:only-of-type .ce-paragraph[data-placeholder-active][data-empty=true]:before{content:attr(data-placeholder-active)}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")), document.head.appendChild(n);\n    }\n  } catch (e) {\n    console.error(\"vite-plugin-css-injected-by-js\", e);\n  }\n})();\nconst hs = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\nfunction us(n) {\n  const e = document.createElement(\"div\");\n  e.innerHTML = n.trim();\n  const t = document.createDocumentFragment();\n  return t.append(...Array.from(e.childNodes)), t;\n}\n/**\n * Base Paragraph Block for the Editor.js.\n * Represents a regular text block\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass dt {\n  /**\n   * Default placeholder for Paragraph Tool\n   *\n   * @returns {string}\n   * @class\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"\";\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {ParagraphData} params.data - previously saved data\n   * @param {ParagraphConfig} params.config - user config for Tool\n   * @param {object} params.api - editor.js api\n   * @param {boolean} readOnly - read only mode flag\n   */\n  constructor({ data: e, config: t, api: o, readOnly: i }) {\n    this.api = o, this.readOnly = i, this._CSS = {\n      block: this.api.styles.block,\n      wrapper: \"ce-paragraph\"\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = t.placeholder ? t.placeholder : dt.DEFAULT_PLACEHOLDER, this._data = e ?? {}, this._element = null, this._preserveBlank = t.preserveBlank ?? !1;\n  }\n  /**\n   * Check if text content is empty and set empty string to inner html.\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\n   *\n   * @param {KeyboardEvent} e - key up event\n   */\n  onKeyUp(e) {\n    if (e.code !== \"Backspace\" && e.code !== \"Delete\" || !this._element)\n      return;\n    const { textContent: t } = this._element;\n    t === \"\" && (this._element.innerHTML = \"\");\n  }\n  /**\n   * Create Tool's view\n   *\n   * @returns {HTMLDivElement}\n   * @private\n   */\n  drawView() {\n    const e = document.createElement(\"DIV\");\n    return e.classList.add(this._CSS.wrapper, this._CSS.block), e.contentEditable = \"false\", e.dataset.placeholderActive = this.api.i18n.t(this._placeholder), this._data.text && (e.innerHTML = this._data.text), this.readOnly || (e.contentEditable = \"true\", e.addEventListener(\"keyup\", this.onKeyUp)), e;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this._element = this.drawView(), this._element;\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {ParagraphData} data\n   * @public\n   */\n  merge(e) {\n    if (!this._element)\n      return;\n    this._data.text += e.text;\n    const t = us(e.text);\n    this._element.appendChild(t), this._element.normalize();\n  }\n  /**\n   * Validate Paragraph block data:\n   * - check for emptiness\n   *\n   * @param {ParagraphData} savedData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return !(e.text.trim() === \"\" && !this._preserveBlank);\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\n   * @returns {ParagraphData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML\n    };\n  }\n  /**\n   * On paste callback fired from Editor.\n   *\n   * @param {HTMLPasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = {\n      text: e.detail.data.innerHTML\n    };\n    this._data = t, window.requestAnimationFrame(() => {\n      this._element && (this._element.innerHTML = this._data.text || \"\");\n    });\n  }\n  /**\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\n   * @returns {ConversionConfig}\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // to convert Paragraph to other block, use 'text' property of saved data\n      import: \"text\"\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\n    };\n  }\n  /**\n   * Sanitizer rules\n   * @returns {SanitizerConfig} - Edtior.js sanitizer config\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Returns true to notify the core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Used by Editor paste handling API.\n   * Provides configuration to handle P tags.\n   *\n   * @returns {PasteConfig} - Paragraph Paste Setting\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"P\"]\n    };\n  }\n  /**\n   * Icon and title for displaying at the Toolbox\n   *\n   * @returns {ToolboxConfig} - Paragraph Toolbox Setting\n   */\n  static get toolbox() {\n    return {\n      icon: hs,\n      title: \"Text\"\n    };\n  }\n}\nclass ht {\n  constructor() {\n    this.commandName = \"bold\";\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <b> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      b: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return {\n      icon: bi,\n      name: \"bold\",\n      onActivate: () => {\n        document.execCommand(this.commandName);\n      },\n      isActive: () => document.queryCommandState(this.commandName)\n    };\n  }\n  /**\n   * Set a shortcut\n   *\n   * @returns {boolean}\n   */\n  get shortcut() {\n    return \"CMD+B\";\n  }\n}\nht.isInline = !0;\nht.title = \"Bold\";\nclass ut {\n  constructor() {\n    this.commandName = \"italic\", this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--italic\"\n    }, this.nodes = {\n      button: null\n    };\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <i> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      i: {}\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = Bi, this.nodes.button;\n  }\n  /**\n   * Wrap range with <i> tag\n   */\n  surround() {\n    document.execCommand(this.commandName);\n  }\n  /**\n   * Check selection and set activated state to button if there are <i> tag\n   */\n  checkState() {\n    const e = document.queryCommandState(this.commandName);\n    return this.nodes.button.classList.toggle(this.CSS.buttonActive, e), e;\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+I\";\n  }\n}\nut.isInline = !0;\nut.title = \"Italic\";\nclass pt {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.commandLink = \"createLink\", this.commandUnlink = \"unlink\", this.ENTER_KEY = 13, this.CSS = {\n      button: \"ce-inline-tool\",\n      buttonActive: \"ce-inline-tool--active\",\n      buttonModifier: \"ce-inline-tool--link\",\n      buttonUnlink: \"ce-inline-tool--unlink\",\n      input: \"ce-inline-tool-input\",\n      inputShowed: \"ce-inline-tool-input--showed\"\n    }, this.nodes = {\n      button: null,\n      input: null\n    }, this.inputOpened = !1, this.toolbar = e.toolbar, this.inlineToolbar = e.inlineToolbar, this.notifier = e.notifier, this.i18n = e.i18n, this.selection = new b();\n  }\n  /**\n   * Sanitizer Rule\n   * Leave <a> tags\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      a: {\n        href: !0,\n        target: \"_blank\",\n        rel: \"nofollow\"\n      }\n    };\n  }\n  /**\n   * Create button for Inline Toolbar\n   */\n  render() {\n    return this.nodes.button = document.createElement(\"button\"), this.nodes.button.type = \"button\", this.nodes.button.classList.add(this.CSS.button, this.CSS.buttonModifier), this.nodes.button.innerHTML = xt, this.nodes.button;\n  }\n  /**\n   * Input for the link\n   */\n  renderActions() {\n    return this.nodes.input = document.createElement(\"input\"), this.nodes.input.placeholder = this.i18n.t(\"Add a link\"), this.nodes.input.enterKeyHint = \"done\", this.nodes.input.classList.add(this.CSS.input), this.nodes.input.addEventListener(\"keydown\", (e) => {\n      e.keyCode === this.ENTER_KEY && this.enterPressed(e);\n    }), this.nodes.input;\n  }\n  /**\n   * Handle clicks on the Inline Toolbar icon\n   *\n   * @param {Range} range - range to wrap with link\n   */\n  surround(e) {\n    if (e) {\n      this.inputOpened ? (this.selection.restore(), this.selection.removeFakeBackground()) : (this.selection.setFakeBackground(), this.selection.save());\n      const t = this.selection.findParentTag(\"A\");\n      if (t) {\n        this.selection.expandToTag(t), this.unlink(), this.closeActions(), this.checkState(), this.toolbar.close();\n        return;\n      }\n    }\n    this.toggleActions();\n  }\n  /**\n   * Check selection and set activated state to button if there are <a> tag\n   */\n  checkState() {\n    const e = this.selection.findParentTag(\"A\");\n    if (e) {\n      this.nodes.button.innerHTML = Ii, this.nodes.button.classList.add(this.CSS.buttonUnlink), this.nodes.button.classList.add(this.CSS.buttonActive), this.openActions();\n      const t = e.getAttribute(\"href\");\n      this.nodes.input.value = t !== \"null\" ? t : \"\", this.selection.save();\n    } else\n      this.nodes.button.innerHTML = xt, this.nodes.button.classList.remove(this.CSS.buttonUnlink), this.nodes.button.classList.remove(this.CSS.buttonActive);\n    return !!e;\n  }\n  /**\n   * Function called with Inline Toolbar closing\n   */\n  clear() {\n    this.closeActions();\n  }\n  /**\n   * Set a shortcut\n   */\n  get shortcut() {\n    return \"CMD+K\";\n  }\n  /**\n   * Show/close link input\n   */\n  toggleActions() {\n    this.inputOpened ? this.closeActions(!1) : this.openActions(!0);\n  }\n  /**\n   * @param {boolean} needFocus - on link creation we need to focus input. On editing - nope.\n   */\n  openActions(e = !1) {\n    this.nodes.input.classList.add(this.CSS.inputShowed), e && this.nodes.input.focus(), this.inputOpened = !0;\n  }\n  /**\n   * Close input\n   *\n   * @param {boolean} clearSavedSelection — we don't need to clear saved selection\n   *                                        on toggle-clicks on the icon of opened Toolbar\n   */\n  closeActions(e = !0) {\n    if (this.selection.isFakeBackgroundEnabled) {\n      const t = new b();\n      t.save(), this.selection.restore(), this.selection.removeFakeBackground(), t.restore();\n    }\n    this.nodes.input.classList.remove(this.CSS.inputShowed), this.nodes.input.value = \"\", e && this.selection.clearSaved(), this.inputOpened = !1;\n  }\n  /**\n   * Enter pressed on input\n   *\n   * @param {KeyboardEvent} event - enter keydown event\n   */\n  enterPressed(e) {\n    let t = this.nodes.input.value || \"\";\n    if (!t.trim()) {\n      this.selection.restore(), this.unlink(), e.preventDefault(), this.closeActions();\n      return;\n    }\n    if (!this.validateURL(t)) {\n      this.notifier.show({\n        message: \"Pasted link is not valid.\",\n        style: \"error\"\n      }), I(\"Incorrect Link pasted\", \"warn\", t);\n      return;\n    }\n    t = this.prepareLink(t), this.selection.restore(), this.selection.removeFakeBackground(), this.insertLink(t), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation(), this.selection.collapseToEnd(), this.inlineToolbar.close();\n  }\n  /**\n   * Detects if passed string is URL\n   *\n   * @param {string} str - string to validate\n   * @returns {boolean}\n   */\n  validateURL(e) {\n    return !/\\s/.test(e);\n  }\n  /**\n   * Process link before injection\n   * - sanitize\n   * - add protocol for links like 'google.com'\n   *\n   * @param {string} link - raw user input\n   */\n  prepareLink(e) {\n    return e = e.trim(), e = this.addProtocol(e), e;\n  }\n  /**\n   * Add 'http' protocol to the links like 'vc.ru', 'google.com'\n   *\n   * @param {string} link - string to process\n   */\n  addProtocol(e) {\n    if (/^(\\w+):(\\/\\/)?/.test(e))\n      return e;\n    const t = /^\\/[^/\\s]/.test(e), o = e.substring(0, 1) === \"#\", i = /^\\/\\/[^/\\s]/.test(e);\n    return !t && !o && !i && (e = \"http://\" + e), e;\n  }\n  /**\n   * Inserts <a> tag with \"href\"\n   *\n   * @param {string} link - \"href\" value\n   */\n  insertLink(e) {\n    const t = this.selection.findParentTag(\"A\");\n    t && this.selection.expandToTag(t), document.execCommand(this.commandLink, !1, e);\n  }\n  /**\n   * Removes <a> tag\n   */\n  unlink() {\n    document.execCommand(this.commandUnlink);\n  }\n}\npt.isInline = !0;\npt.title = \"Link\";\nclass ao {\n  /**\n   * @param api - Editor.js API\n   */\n  constructor({ api: e }) {\n    this.i18nAPI = e.i18n, this.blocksAPI = e.blocks, this.selectionAPI = e.selection, this.toolsAPI = e.tools, this.caretAPI = e.caret;\n  }\n  /**\n   * Returns tool's UI config\n   */\n  async render() {\n    const e = b.get(), t = this.blocksAPI.getBlockByElement(e.anchorNode);\n    if (t === void 0)\n      return [];\n    const o = this.toolsAPI.getBlockTools(), i = await zt(t, o);\n    if (i.length === 0)\n      return [];\n    const s = i.reduce((c, u) => {\n      var h;\n      return (h = u.toolbox) == null || h.forEach((p) => {\n        c.push({\n          icon: p.icon,\n          title: z.t(K.toolNames, p.title),\n          name: u.name,\n          closeOnActivate: !0,\n          onActivate: async () => {\n            const g = await this.blocksAPI.convert(t.id, u.name, p.data);\n            this.caretAPI.setToBlock(g, \"end\");\n          }\n        });\n      }), c;\n    }, []), r = await t.getActiveToolboxEntry(), l = r !== void 0 ? r.icon : Kt, a = !pe();\n    return {\n      icon: l,\n      name: \"convert-to\",\n      hint: {\n        title: this.i18nAPI.t(\"Convert to\")\n      },\n      children: {\n        searchable: a,\n        items: s,\n        onOpen: () => {\n          a && (this.selectionAPI.setFakeBackground(), this.selectionAPI.save());\n        },\n        onClose: () => {\n          a && (this.selectionAPI.restore(), this.selectionAPI.removeFakeBackground());\n        }\n      }\n    };\n  }\n}\nao.isInline = !0;\nclass co {\n  /**\n   * @param options - constructor options\n   * @param options.data - stub tool data\n   * @param options.api - Editor.js API\n   */\n  constructor({ data: e, api: t }) {\n    this.CSS = {\n      wrapper: \"ce-stub\",\n      info: \"ce-stub__info\",\n      title: \"ce-stub__title\",\n      subtitle: \"ce-stub__subtitle\"\n    }, this.api = t, this.title = e.title || this.api.i18n.t(\"Error\"), this.subtitle = this.api.i18n.t(\"The block can not be displayed correctly.\"), this.savedData = e.savedData, this.wrapper = this.make();\n  }\n  /**\n   * Returns stub holder\n   *\n   * @returns {HTMLElement}\n   */\n  render() {\n    return this.wrapper;\n  }\n  /**\n   * Return original Tool data\n   *\n   * @returns {BlockToolData}\n   */\n  save() {\n    return this.savedData;\n  }\n  /**\n   * Create Tool html markup\n   *\n   * @returns {HTMLElement}\n   */\n  make() {\n    const e = d.make(\"div\", this.CSS.wrapper), t = Mi, o = d.make(\"div\", this.CSS.info), i = d.make(\"div\", this.CSS.title, {\n      textContent: this.title\n    }), s = d.make(\"div\", this.CSS.subtitle, {\n      textContent: this.subtitle\n    });\n    return e.innerHTML = t, o.appendChild(i), o.appendChild(s), e.appendChild(o), e;\n  }\n}\nco.isReadOnlySupported = !0;\nclass ps extends ct {\n  constructor() {\n    super(...arguments), this.type = ne.Inline;\n  }\n  /**\n   * Returns title for Inline Tool if specified by user\n   */\n  get title() {\n    return this.constructable[at.Title];\n  }\n  /**\n   * Constructs new InlineTool instance from constructable\n   */\n  create() {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings\n    });\n  }\n}\nclass fs extends ct {\n  constructor() {\n    super(...arguments), this.type = ne.Tune;\n  }\n  /**\n   * Constructs new BlockTune instance from constructable\n   *\n   * @param data - Tune data\n   * @param block - Block API object\n   */\n  create(e, t) {\n    return new this.constructable({\n      api: this.api,\n      config: this.settings,\n      block: t,\n      data: e\n    });\n  }\n}\nclass F extends Map {\n  /**\n   * Returns Block Tools collection\n   */\n  get blockTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isBlock());\n    return new F(e);\n  }\n  /**\n   * Returns Inline Tools collection\n   */\n  get inlineTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInline());\n    return new F(e);\n  }\n  /**\n   * Returns Block Tunes collection\n   */\n  get blockTunes() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isTune());\n    return new F(e);\n  }\n  /**\n   * Returns internal Tools collection\n   */\n  get internalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => t.isInternal);\n    return new F(e);\n  }\n  /**\n   * Returns Tools collection provided by user\n   */\n  get externalTools() {\n    const e = Array.from(this.entries()).filter(([, t]) => !t.isInternal);\n    return new F(e);\n  }\n}\nvar gs = Object.defineProperty, ms = Object.getOwnPropertyDescriptor, ho = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? ms(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && gs(e, t, i), i;\n};\nclass ft extends ct {\n  constructor() {\n    super(...arguments), this.type = ne.Block, this.inlineTools = new F(), this.tunes = new F();\n  }\n  /**\n   * Creates new Tool instance\n   *\n   * @param data - Tool data\n   * @param block - BlockAPI for current Block\n   * @param readOnly - True if Editor is in read-only mode\n   */\n  create(e, t, o) {\n    return new this.constructable({\n      data: e,\n      block: t,\n      readOnly: o,\n      api: this.api,\n      config: this.settings\n    });\n  }\n  /**\n   * Returns true if read-only mode is supported by Tool\n   */\n  get isReadOnlySupported() {\n    return this.constructable[ce.IsReadOnlySupported] === !0;\n  }\n  /**\n   * Returns true if Tool supports linebreaks\n   */\n  get isLineBreaksEnabled() {\n    return this.constructable[ce.IsEnabledLineBreaks];\n  }\n  /**\n   * Returns Tool toolbox configuration (internal or user-specified).\n   *\n   * Merges internal and user-defined toolbox configs based on the following rules:\n   *\n   * - If both internal and user-defined toolbox configs are arrays their items are merged.\n   * Length of the second one is kept.\n   *\n   * - If both are objects their properties are merged.\n   *\n   * - If one is an object and another is an array than internal config is replaced with user-defined\n   * config. This is made to allow user to override default tool's toolbox representation (single/multiple entries)\n   */\n  get toolbox() {\n    const e = this.constructable[ce.Toolbox], t = this.config[Ie.Toolbox];\n    if (!V(e) && t !== !1)\n      return t ? Array.isArray(e) ? Array.isArray(t) ? t.map((o, i) => {\n        const s = e[i];\n        return s ? {\n          ...s,\n          ...o\n        } : o;\n      }) : [t] : Array.isArray(t) ? t : [\n        {\n          ...e,\n          ...t\n        }\n      ] : Array.isArray(e) ? e : [e];\n  }\n  /**\n   * Returns Tool conversion configuration\n   */\n  get conversionConfig() {\n    return this.constructable[ce.ConversionConfig];\n  }\n  /**\n   * Returns enabled inline tools for Tool\n   */\n  get enabledInlineTools() {\n    return this.config[Ie.EnabledInlineTools] || !1;\n  }\n  /**\n   * Returns enabled tunes for Tool\n   */\n  get enabledBlockTunes() {\n    return this.config[Ie.EnabledBlockTunes];\n  }\n  /**\n   * Returns Tool paste configuration\n   */\n  get pasteConfig() {\n    return this.constructable[ce.PasteConfig] ?? {};\n  }\n  get sanitizeConfig() {\n    const e = super.sanitizeConfig, t = this.baseSanitizeConfig;\n    if (V(e))\n      return t;\n    const o = {};\n    for (const i in e)\n      if (Object.prototype.hasOwnProperty.call(e, i)) {\n        const s = e[i];\n        R(s) ? o[i] = Object.assign({}, t, s) : o[i] = s;\n      }\n    return o;\n  }\n  get baseSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), Array.from(this.tunes.values()).forEach((t) => Object.assign(e, t.sanitizeConfig)), e;\n  }\n}\nho([\n  ue\n], ft.prototype, \"sanitizeConfig\", 1);\nho([\n  ue\n], ft.prototype, \"baseSanitizeConfig\", 1);\nclass bs {\n  /**\n   * @class\n   * @param config - tools config\n   * @param editorConfig - EditorJS config\n   * @param api - EditorJS API module\n   */\n  constructor(e, t, o) {\n    this.api = o, this.config = e, this.editorConfig = t;\n  }\n  /**\n   * Returns Tool object based on it's type\n   *\n   * @param name - tool name\n   */\n  get(e) {\n    const { class: t, isInternal: o = !1, ...i } = this.config[e], s = this.getConstructor(t), r = t[Qe.IsTune];\n    return new s({\n      name: e,\n      constructable: t,\n      config: i,\n      api: this.api.getMethodsForTool(e, r),\n      isDefault: e === this.editorConfig.defaultBlock,\n      defaultPlaceholder: this.editorConfig.placeholder,\n      isInternal: o\n    });\n  }\n  /**\n   * Find appropriate Tool object constructor for Tool constructable\n   *\n   * @param constructable - Tools constructable\n   */\n  getConstructor(e) {\n    switch (!0) {\n      case e[at.IsInline]:\n        return ps;\n      case e[Qe.IsTune]:\n        return fs;\n      default:\n        return ft;\n    }\n  }\n}\nclass uo {\n  /**\n   * MoveDownTune constructor\n   *\n   * @param {API} api — Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: ki,\n      title: this.api.i18n.t(\"Move down\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-down\"\n    };\n  }\n  /**\n   * Handle clicks on 'move down' button\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e + 1);\n    if (!t)\n      throw new Error(\"Unable to move Block down since it is already the last\");\n    const o = t.holder, i = o.getBoundingClientRect();\n    let s = Math.abs(window.innerHeight - o.offsetHeight);\n    i.top < window.innerHeight && (s = window.scrollY + o.offsetHeight), window.scrollTo(0, s), this.api.blocks.move(e + 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\nuo.isTune = !0;\nclass po {\n  /**\n   * DeleteTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: yi,\n      title: this.api.i18n.t(\"Delete\"),\n      name: \"delete\",\n      confirmation: {\n        title: this.api.i18n.t(\"Click to delete\"),\n        onActivate: () => this.handleClick()\n      }\n    };\n  }\n  /**\n   * Delete block conditions passed\n   */\n  handleClick() {\n    this.api.blocks.delete();\n  }\n}\npo.isTune = !0;\nclass fo {\n  /**\n   * MoveUpTune constructor\n   *\n   * @param {API} api - Editor's API\n   */\n  constructor({ api: e }) {\n    this.CSS = {\n      animation: \"wobble\"\n    }, this.api = e;\n  }\n  /**\n   * Tune's appearance in block settings menu\n   */\n  render() {\n    return {\n      icon: xi,\n      title: this.api.i18n.t(\"Move up\"),\n      onActivate: () => this.handleClick(),\n      name: \"move-up\"\n    };\n  }\n  /**\n   * Move current block up\n   */\n  handleClick() {\n    const e = this.api.blocks.getCurrentBlockIndex(), t = this.api.blocks.getBlockByIndex(e), o = this.api.blocks.getBlockByIndex(e - 1);\n    if (e === 0 || !t || !o)\n      throw new Error(\"Unable to move Block up since it is already the first\");\n    const i = t.holder, s = o.holder, r = i.getBoundingClientRect(), l = s.getBoundingClientRect();\n    let a;\n    l.top > 0 ? a = Math.abs(r.top) - Math.abs(l.top) : a = Math.abs(r.top) + l.height, window.scrollBy(0, -1 * a), this.api.blocks.move(e - 1), this.api.toolbar.toggleBlockSettings(!0);\n  }\n}\nfo.isTune = !0;\nvar ks = Object.defineProperty, vs = Object.getOwnPropertyDescriptor, ws = (n, e, t, o) => {\n  for (var i = o > 1 ? void 0 : o ? vs(e, t) : e, s = n.length - 1, r; s >= 0; s--)\n    (r = n[s]) && (i = (o ? r(e, t, i) : r(i)) || i);\n  return o && i && ks(e, t, i), i;\n};\nclass go extends y {\n  constructor() {\n    super(...arguments), this.stubTool = \"stub\", this.toolsAvailable = new F(), this.toolsUnavailable = new F();\n  }\n  /**\n   * Returns available Tools\n   */\n  get available() {\n    return this.toolsAvailable;\n  }\n  /**\n   * Returns unavailable Tools\n   */\n  get unavailable() {\n    return this.toolsUnavailable;\n  }\n  /**\n   * Return Tools for the Inline Toolbar\n   */\n  get inlineTools() {\n    return this.available.inlineTools;\n  }\n  /**\n   * Return editor block tools\n   */\n  get blockTools() {\n    return this.available.blockTools;\n  }\n  /**\n   * Return available Block Tunes\n   *\n   * @returns {object} - object of Inline Tool's classes\n   */\n  get blockTunes() {\n    return this.available.blockTunes;\n  }\n  /**\n   * Returns default Tool object\n   */\n  get defaultTool() {\n    return this.blockTools.get(this.config.defaultBlock);\n  }\n  /**\n   * Returns internal tools\n   */\n  get internal() {\n    return this.available.internalTools;\n  }\n  /**\n   * Creates instances via passed or default configuration\n   *\n   * @returns {Promise<void>}\n   */\n  async prepare() {\n    if (this.validateTools(), this.config.tools = qe({}, this.internalTools, this.config.tools), !Object.prototype.hasOwnProperty.call(this.config, \"tools\") || Object.keys(this.config.tools).length === 0)\n      throw Error(\"Can't start without tools\");\n    const e = this.prepareConfig();\n    this.factory = new bs(e, this.config, this.Editor.API);\n    const t = this.getListOfPrepareFunctions(e);\n    if (t.length === 0)\n      return Promise.resolve();\n    await Eo(t, (o) => {\n      this.toolPrepareMethodSuccess(o);\n    }, (o) => {\n      this.toolPrepareMethodFallback(o);\n    }), this.prepareBlockTools();\n  }\n  getAllInlineToolsSanitizeConfig() {\n    const e = {};\n    return Array.from(this.inlineTools.values()).forEach((t) => {\n      Object.assign(e, t.sanitizeConfig);\n    }), e;\n  }\n  /**\n   * Calls each Tool reset method to clean up anything set by Tool\n   */\n  destroy() {\n    Object.values(this.available).forEach(async (e) => {\n      O(e.reset) && await e.reset();\n    });\n  }\n  /**\n   * Returns internal tools\n   * Includes Bold, Italic, Link and Paragraph\n   */\n  get internalTools() {\n    return {\n      convertTo: {\n        class: ao,\n        isInternal: !0\n      },\n      link: {\n        class: pt,\n        isInternal: !0\n      },\n      bold: {\n        class: ht,\n        isInternal: !0\n      },\n      italic: {\n        class: ut,\n        isInternal: !0\n      },\n      paragraph: {\n        class: dt,\n        inlineToolbar: !0,\n        isInternal: !0\n      },\n      stub: {\n        class: co,\n        isInternal: !0\n      },\n      moveUp: {\n        class: fo,\n        isInternal: !0\n      },\n      delete: {\n        class: po,\n        isInternal: !0\n      },\n      moveDown: {\n        class: uo,\n        isInternal: !0\n      }\n    };\n  }\n  /**\n   * Tool prepare method success callback\n   *\n   * @param {object} data - append tool to available list\n   */\n  toolPrepareMethodSuccess(e) {\n    const t = this.factory.get(e.toolName);\n    if (t.isInline()) {\n      const i = [\"render\"].filter((s) => !t.create()[s]);\n      if (i.length) {\n        I(\n          `Incorrect Inline Tool: ${t.name}. Some of required methods is not implemented %o`,\n          \"warn\",\n          i\n        ), this.toolsUnavailable.set(t.name, t);\n        return;\n      }\n    }\n    this.toolsAvailable.set(t.name, t);\n  }\n  /**\n   * Tool prepare method fail callback\n   *\n   * @param {object} data - append tool to unavailable list\n   */\n  toolPrepareMethodFallback(e) {\n    this.toolsUnavailable.set(e.toolName, this.factory.get(e.toolName));\n  }\n  /**\n   * Binds prepare function of plugins with user or default config\n   *\n   * @returns {Array} list of functions that needs to be fired sequentially\n   * @param config - tools config\n   */\n  getListOfPrepareFunctions(e) {\n    const t = [];\n    return Object.entries(e).forEach(([o, i]) => {\n      t.push({\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        function: O(i.class.prepare) ? i.class.prepare : () => {\n        },\n        data: {\n          toolName: o,\n          config: i.config\n        }\n      });\n    }), t;\n  }\n  /**\n   * Assign enabled Inline Tools and Block Tunes for Block Tool\n   */\n  prepareBlockTools() {\n    Array.from(this.blockTools.values()).forEach((e) => {\n      this.assignInlineToolsToBlockTool(e), this.assignBlockTunesToBlockTool(e);\n    });\n  }\n  /**\n   * Assign enabled Inline Tools for Block Tool\n   *\n   * @param tool - Block Tool\n   */\n  assignInlineToolsToBlockTool(e) {\n    if (this.config.inlineToolbar !== !1) {\n      if (e.enabledInlineTools === !0) {\n        e.inlineTools = new F(\n          Array.isArray(this.config.inlineToolbar) ? this.config.inlineToolbar.map((t) => [t, this.inlineTools.get(t)]) : Array.from(this.inlineTools.entries())\n        );\n        return;\n      }\n      Array.isArray(e.enabledInlineTools) && (e.inlineTools = new F(\n        /** Prepend ConvertTo Inline Tool */\n        [\"convertTo\", ...e.enabledInlineTools].map((t) => [t, this.inlineTools.get(t)])\n      ));\n    }\n  }\n  /**\n   * Assign enabled Block Tunes for Block Tool\n   *\n   * @param tool — Block Tool\n   */\n  assignBlockTunesToBlockTool(e) {\n    if (e.enabledBlockTunes !== !1) {\n      if (Array.isArray(e.enabledBlockTunes)) {\n        const t = new F(\n          e.enabledBlockTunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new F([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      if (Array.isArray(this.config.tunes)) {\n        const t = new F(\n          this.config.tunes.map((o) => [o, this.blockTunes.get(o)])\n        );\n        e.tunes = new F([...t, ...this.blockTunes.internalTools]);\n        return;\n      }\n      e.tunes = this.blockTunes.internalTools;\n    }\n  }\n  /**\n   * Validate Tools configuration objects and throw Error for user if it is invalid\n   */\n  validateTools() {\n    for (const e in this.config.tools)\n      if (Object.prototype.hasOwnProperty.call(this.config.tools, e)) {\n        if (e in this.internalTools)\n          return;\n        const t = this.config.tools[e];\n        if (!O(t) && !O(t.class))\n          throw Error(\n            `Tool «${e}» must be a constructor function or an object with function in the «class» property`\n          );\n      }\n  }\n  /**\n   * Unify tools config\n   */\n  prepareConfig() {\n    const e = {};\n    for (const t in this.config.tools)\n      R(this.config.tools[t]) ? e[t] = this.config.tools[t] : e[t] = { class: this.config.tools[t] };\n    return e;\n  }\n}\nws([\n  ue\n], go.prototype, \"getAllInlineToolsSanitizeConfig\", 1);\nconst xs = `:root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:\"\\\\feff\"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0;left:0;right:0;bottom:0;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}.codex-editor ::-moz-selection{background-color:#d4ecff}.codex-editor ::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;--color-background-icon-active: rgba(56, 138, 229, .1);--color-text-icon-active: #388AE5;--color-text-primary: black;position:absolute;visibility:hidden;-webkit-transition:opacity .25s ease;transition:opacity .25s ease;will-change:opacity,left,top;top:0;left:0;z-index:3;opacity:1;visibility:visible}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{color:var(--color-text-primary);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:0;border-radius:4px;line-height:normal;height:100%;padding:0;width:28px;background-color:transparent;cursor:pointer}@media (max-width: 650px){.ce-inline-tool{width:36px;height:36px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#f8f8f8}}.ce-inline-tool svg{display:block;width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:4px 8px;font-size:14px;line-height:22px;outline:none;margin:0;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-inline-tool--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:\"\";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:\"\";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:\"\";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:12px 18px;margin:10px 0;border-radius:10px;background:#eff2f5;border:1px solid #EFF0F1;color:#707684;font-size:14px}.ce-stub svg{width:20px;height:20px}.ce-stub__info{margin-left:14px}.ce-stub__title{font-weight:500;text-transform:capitalize}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:#F8F8F8;border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #EFF0F1;--color-shadow: rgba(13, 20, 33, .1);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #F8F8F8;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;--popover-top: calc(100% + var(--offset-from-target));--popover-left: 0;--nested-popover-overlap: 4px;--icon-size: 20px;--item-padding: 3px;--item-height: calc(var(--icon-size) + 2 * var(--item-padding))}.ce-popover__container{min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0px 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:var(--popover-left);top:var(--popover-top);background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened>.ce-popover__container{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened>.ce-popover__container{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover--open-top .ce-popover__container{--popover-top: calc(-1 * (var(--offset-from-target) + var(--popover-height)))}.ce-popover--open-left .ce-popover__container{--popover-left: calc(-1 * var(--width) + 100%)}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}@media (max-width: 650px){.ce-popover .ce-popover__container{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}}.ce-popover__search{margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover--nested .ce-popover__container{--popover-left: calc(var(--nesting-level) * (var(--width) - var(--nested-popover-overlap)));top:calc(var(--trigger-item-top) - var(--nested-popover-overlap));position:absolute}.ce-popover--open-top.ce-popover--nested .ce-popover__container{top:calc(var(--trigger-item-top) - var(--popover-height) + var(--item-height) + var(--offset-from-target) + var(--nested-popover-overlap))}.ce-popover--open-left .ce-popover--nested .ce-popover__container{--popover-left: calc(-1 * (var(--nesting-level) + 1) * var(--width) + 100%)}.ce-popover-item-separator{padding:4px 3px}.ce-popover-item-separator--hidden{display:none}.ce-popover-item-separator__line{height:1px;background:var(--color-border);width:100%}.ce-popover-item-html--hidden{display:none}.ce-popover-item{--border-radius: 6px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:var(--item-padding);color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:none;background:transparent}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover-item__icon--tool{margin-right:4px}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin-right:auto}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title,.ce-popover-item--confirmation .ce-popover-item__icon{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}.ce-popover-header{margin-bottom:8px;margin-top:4px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover-header__text{font-size:18px;font-weight:600}.ce-popover-header__back-button{border:0;background:transparent;width:36px;height:36px;color:var(--color-text-primary)}.ce-popover-header__back-button svg{display:block;width:28px;height:28px}.ce-popover--inline{--height: 38px;--height-mobile: 46px;--container-padding: 4px;position:relative}.ce-popover--inline .ce-popover__custom-content{margin-bottom:0}.ce-popover--inline .ce-popover__items{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-popover--inline .ce-popover__container{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;padding:var(--container-padding);height:var(--height);top:0;min-width:-webkit-max-content;min-width:-moz-max-content;min-width:max-content;width:-webkit-max-content;width:-moz-max-content;width:max-content;-webkit-animation:none;animation:none}@media (max-width: 650px){.ce-popover--inline .ce-popover__container{height:var(--height-mobile);position:absolute}}.ce-popover--inline .ce-popover-item-separator{padding:0 4px}.ce-popover--inline .ce-popover-item-separator__line{height:100%;width:1px}.ce-popover--inline .ce-popover-item{border-radius:4px;padding:4px}.ce-popover--inline .ce-popover-item__icon--tool{-webkit-box-shadow:none;box-shadow:none;background:transparent;margin-right:0}.ce-popover--inline .ce-popover-item__icon{width:auto;width:initial;height:auto;height:initial}.ce-popover--inline .ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover--inline .ce-popover-item__icon svg{width:28px;height:28px}}.ce-popover--inline .ce-popover-item:not(:last-of-type){margin-bottom:0;margin-bottom:initial}.ce-popover--inline .ce-popover-item-html{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-popover--inline .ce-popover-item__icon--chevron-right{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{--offset: 3px;left:0;top:calc(var(--height) + var(--offset))}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested-level-1 .ce-popover__container{top:calc(var(--height-mobile) + var(--offset))}}.ce-popover--inline .ce-popover--nested .ce-popover__container{min-width:var(--width);width:var(--width);height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;padding:6px;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.ce-popover--inline .ce-popover--nested .ce-popover__items{display:block;width:100%}.ce-popover--inline .ce-popover--nested .ce-popover-item{border-radius:6px;padding:3px}@media (max-width: 650px){.ce-popover--inline .ce-popover--nested .ce-popover-item{padding:4px}}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon--tool{margin-right:4px}.ce-popover--inline .ce-popover--nested .ce-popover-item__icon{width:26px;height:26px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator{padding:4px 3px}.ce-popover--inline .ce-popover--nested .ce-popover-item-separator__line{width:100%;height:1px}.codex-editor [data-placeholder]:empty:before,.codex-editor [data-placeholder][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text;content:attr(data-placeholder)}.codex-editor [data-placeholder-active]:empty:before,.codex-editor [data-placeholder-active][data-empty=true]:before{pointer-events:none;color:#707684;cursor:text}.codex-editor [data-placeholder-active]:empty:focus:before,.codex-editor [data-placeholder-active][data-empty=true]:focus:before{content:attr(data-placeholder-active)}\n`;\nclass ys extends y {\n  constructor() {\n    super(...arguments), this.isMobile = !1, this.contentRectCache = void 0, this.resizeDebouncer = kt(() => {\n      this.windowResize();\n    }, 200);\n  }\n  /**\n   * Editor.js UI CSS class names\n   *\n   * @returns {{editorWrapper: string, editorZone: string}}\n   */\n  get CSS() {\n    return {\n      editorWrapper: \"codex-editor\",\n      editorWrapperNarrow: \"codex-editor--narrow\",\n      editorZone: \"codex-editor__redactor\",\n      editorZoneHidden: \"codex-editor__redactor--hidden\",\n      editorEmpty: \"codex-editor--empty\",\n      editorRtlFix: \"codex-editor--rtl\"\n    };\n  }\n  /**\n   * Return Width of center column of Editor\n   *\n   * @returns {DOMRect}\n   */\n  get contentRect() {\n    if (this.contentRectCache)\n      return this.contentRectCache;\n    const e = this.nodes.wrapper.querySelector(`.${D.CSS.content}`);\n    return e ? (this.contentRectCache = e.getBoundingClientRect(), this.contentRectCache) : {\n      width: 650,\n      left: 0,\n      right: 0\n    };\n  }\n  /**\n   * Making main interface\n   */\n  async prepare() {\n    this.setIsMobile(), this.make(), this.loadStyles();\n  }\n  /**\n   * Toggle read-only state\n   *\n   * If readOnly is true:\n   *  - removes all listeners from main UI module elements\n   *\n   * if readOnly is false:\n   *  - enables all listeners to UI module elements\n   *\n   * @param {boolean} readOnlyEnabled - \"read only\" state\n   */\n  toggleReadOnly(e) {\n    e ? this.disableModuleBindings() : window.requestIdleCallback(() => {\n      this.enableModuleBindings();\n    }, {\n      timeout: 2e3\n    });\n  }\n  /**\n   * Check if Editor is empty and set CSS class to wrapper\n   */\n  checkEmptiness() {\n    const { BlockManager: e } = this.Editor;\n    this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty, e.isEditorEmpty);\n  }\n  /**\n   * Check if one of Toolbar is opened\n   * Used to prevent global keydowns (for example, Enter) conflicts with Enter-on-toolbar\n   *\n   * @returns {boolean}\n   */\n  get someToolbarOpened() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    return !!(t.opened || o.opened || e.toolbox.opened);\n  }\n  /**\n   * Check for some Flipper-buttons is under focus\n   */\n  get someFlipperButtonFocused() {\n    return this.Editor.Toolbar.toolbox.hasFocus() ? !0 : Object.entries(this.Editor).filter(([e, t]) => t.flipper instanceof le).some(([e, t]) => t.flipper.hasFocus());\n  }\n  /**\n   * Clean editor`s UI\n   */\n  destroy() {\n    this.nodes.holder.innerHTML = \"\";\n  }\n  /**\n   * Close all Editor's toolbars\n   */\n  closeAllToolbars() {\n    const { Toolbar: e, BlockSettings: t, InlineToolbar: o } = this.Editor;\n    t.close(), o.close(), e.toolbox.close();\n  }\n  /**\n   * Check for mobile mode and save the result\n   */\n  setIsMobile() {\n    const e = window.innerWidth < At;\n    e !== this.isMobile && this.eventsDispatcher.emit(ye, {\n      isEnabled: this.isMobile\n    }), this.isMobile = e;\n  }\n  /**\n   * Makes Editor.js interface\n   */\n  make() {\n    this.nodes.holder = d.getHolder(this.config.holder), this.nodes.wrapper = d.make(\"div\", [\n      this.CSS.editorWrapper,\n      ...this.isRtl ? [this.CSS.editorRtlFix] : []\n    ]), this.nodes.redactor = d.make(\"div\", this.CSS.editorZone), this.nodes.holder.offsetWidth < this.contentRect.width && this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow), this.nodes.redactor.style.paddingBottom = this.config.minHeight + \"px\", this.nodes.wrapper.appendChild(this.nodes.redactor), this.nodes.holder.appendChild(this.nodes.wrapper);\n  }\n  /**\n   * Appends CSS\n   */\n  loadStyles() {\n    const e = \"editor-js-styles\";\n    if (d.get(e))\n      return;\n    const t = d.make(\"style\", null, {\n      id: e,\n      textContent: xs.toString()\n    });\n    this.config.style && !V(this.config.style) && this.config.style.nonce && t.setAttribute(\"nonce\", this.config.style.nonce), d.prepend(document.head, t);\n  }\n  /**\n   * Bind events on the Editor.js interface\n   */\n  enableModuleBindings() {\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"click\", (t) => {\n      this.redactorClicked(t);\n    }, !1), this.readOnlyMutableListeners.on(this.nodes.redactor, \"mousedown\", (t) => {\n      this.documentTouched(t);\n    }, {\n      capture: !0,\n      passive: !0\n    }), this.readOnlyMutableListeners.on(this.nodes.redactor, \"touchstart\", (t) => {\n      this.documentTouched(t);\n    }, {\n      capture: !0,\n      passive: !0\n    }), this.readOnlyMutableListeners.on(document, \"keydown\", (t) => {\n      this.documentKeydown(t);\n    }, !0), this.readOnlyMutableListeners.on(document, \"mousedown\", (t) => {\n      this.documentClicked(t);\n    }, !0);\n    const e = kt(() => {\n      this.selectionChanged();\n    }, ss);\n    this.readOnlyMutableListeners.on(document, \"selectionchange\", e, !0), this.readOnlyMutableListeners.on(window, \"resize\", () => {\n      this.resizeDebouncer();\n    }, {\n      passive: !0\n    }), this.watchBlockHoveredEvents(), this.enableInputsEmptyMark();\n  }\n  /**\n   * Listen redactor mousemove to emit 'block-hovered' event\n   */\n  watchBlockHoveredEvents() {\n    let e;\n    this.readOnlyMutableListeners.on(this.nodes.redactor, \"mousemove\", Ve((t) => {\n      const o = t.target.closest(\".ce-block\");\n      this.Editor.BlockSelection.anyBlockSelected || o && e !== o && (e = o, this.eventsDispatcher.emit(oo, {\n        block: this.Editor.BlockManager.getBlockByChildNode(o)\n      }));\n    }, 20), {\n      passive: !0\n    });\n  }\n  /**\n   * Unbind events on the Editor.js interface\n   */\n  disableModuleBindings() {\n    this.readOnlyMutableListeners.clearAll();\n  }\n  /**\n   * Resize window handler\n   */\n  windowResize() {\n    this.contentRectCache = null, this.setIsMobile();\n  }\n  /**\n   * All keydowns on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  documentKeydown(e) {\n    switch (e.keyCode) {\n      case w.ENTER:\n        this.enterPressed(e);\n        break;\n      case w.BACKSPACE:\n      case w.DELETE:\n        this.backspacePressed(e);\n        break;\n      case w.ESC:\n        this.escapePressed(e);\n        break;\n      default:\n        this.defaultBehaviour(e);\n        break;\n    }\n  }\n  /**\n   * Ignore all other document's keydown events\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  defaultBehaviour(e) {\n    const { currentBlock: t } = this.Editor.BlockManager, o = e.target.closest(`.${this.CSS.editorWrapper}`), i = e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n    if (t !== void 0 && o === null) {\n      this.Editor.BlockEvents.keydown(e);\n      return;\n    }\n    o || t && i || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n  }\n  /**\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  backspacePressed(e) {\n    const { BlockManager: t, BlockSelection: o, Caret: i } = this.Editor;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      const s = t.removeSelectedBlocks(), r = t.insertDefaultBlockAtIndex(s, !0);\n      i.setToBlock(r, i.positions.START), o.clearSelection(e), e.preventDefault(), e.stopPropagation(), e.stopImmediatePropagation();\n    }\n  }\n  /**\n   * Escape pressed\n   * If some of Toolbar components are opened, then close it otherwise close Toolbar\n   *\n   * @param {Event} event - escape keydown event\n   */\n  escapePressed(e) {\n    this.Editor.BlockSelection.clearSelection(e), this.Editor.Toolbar.toolbox.opened ? (this.Editor.Toolbar.toolbox.close(), this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock, this.Editor.Caret.positions.END)) : this.Editor.BlockSettings.opened ? this.Editor.BlockSettings.close() : this.Editor.InlineToolbar.opened ? this.Editor.InlineToolbar.close() : this.Editor.Toolbar.close();\n  }\n  /**\n   * Enter pressed on document\n   *\n   * @param {KeyboardEvent} event - keyboard event\n   */\n  enterPressed(e) {\n    const { BlockManager: t, BlockSelection: o } = this.Editor;\n    if (this.someToolbarOpened)\n      return;\n    const i = t.currentBlockIndex >= 0;\n    if (o.anyBlockSelected && !b.isSelectionExists) {\n      o.clearSelection(e), e.preventDefault(), e.stopImmediatePropagation(), e.stopPropagation();\n      return;\n    }\n    if (!this.someToolbarOpened && i && e.target.tagName === \"BODY\") {\n      const s = this.Editor.BlockManager.insert();\n      e.preventDefault(), this.Editor.Caret.setToBlock(s), this.Editor.Toolbar.moveAndOpen(s);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * All clicks on document\n   *\n   * @param {MouseEvent} event - Click event\n   */\n  documentClicked(e) {\n    var l, a;\n    if (!e.isTrusted)\n      return;\n    const t = e.target;\n    this.nodes.holder.contains(t) || b.isAtEditor || (this.Editor.BlockManager.unsetCurrentBlock(), this.Editor.Toolbar.close());\n    const i = (l = this.Editor.BlockSettings.nodes.wrapper) == null ? void 0 : l.contains(t), s = (a = this.Editor.Toolbar.nodes.settingsToggler) == null ? void 0 : a.contains(t), r = i || s;\n    if (this.Editor.BlockSettings.opened && !r) {\n      this.Editor.BlockSettings.close();\n      const c = this.Editor.BlockManager.getBlockByChildNode(t);\n      this.Editor.Toolbar.moveAndOpen(c);\n    }\n    this.Editor.BlockSelection.clearSelection(e);\n  }\n  /**\n   * First touch on editor\n   * Fired before click\n   *\n   * Used to change current block — we need to do it before 'selectionChange' event.\n   * Also:\n   * - Move and show the Toolbar\n   * - Set a Caret\n   *\n   * @param {MouseEvent | TouchEvent} event - touch or mouse event\n   */\n  documentTouched(e) {\n    let t = e.target;\n    if (t === this.nodes.redactor) {\n      const o = e instanceof MouseEvent ? e.clientX : e.touches[0].clientX, i = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;\n      t = document.elementFromPoint(o, i);\n    }\n    try {\n      this.Editor.BlockManager.setCurrentBlockByChildNode(t);\n    } catch {\n      this.Editor.RectangleSelection.isRectActivated() || this.Editor.Caret.setToTheLastBlock();\n    }\n    this.Editor.Toolbar.moveAndOpen();\n  }\n  /**\n   * All clicks on the redactor zone\n   *\n   * @param {MouseEvent} event - click event\n   * @description\n   * - By clicks on the Editor's bottom zone:\n   *      - if last Block is empty, set a Caret to this\n   *      - otherwise, add a new empty Block and set a Caret to that\n   */\n  redactorClicked(e) {\n    if (!b.isCollapsed)\n      return;\n    const t = e.target, o = e.metaKey || e.ctrlKey;\n    if (d.isAnchor(t) && o) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const i = t.getAttribute(\"href\"), s = So(i);\n      Mo(s);\n      return;\n    }\n    this.processBottomZoneClick(e);\n  }\n  /**\n   * Check if user clicks on the Editor's bottom zone:\n   *  - set caret to the last block\n   *  - or add new empty block\n   *\n   * @param event - click event\n   */\n  processBottomZoneClick(e) {\n    const t = this.Editor.BlockManager.getBlockByIndex(-1), o = d.offset(t.holder).bottom, i = e.pageY, { BlockSelection: s } = this.Editor;\n    if (e.target instanceof Element && e.target.isEqualNode(this.nodes.redactor) && /**\n    * If there is cross block selection started, target will be equal to redactor so we need additional check\n    */\n    !s.anyBlockSelected && /**\n    * Prevent caret jumping (to last block) when clicking between blocks\n    */\n    o < i) {\n      e.stopImmediatePropagation(), e.stopPropagation();\n      const { BlockManager: l, Caret: a, Toolbar: c } = this.Editor;\n      (!l.lastBlock.tool.isDefault || !l.lastBlock.isEmpty) && l.insertAtEnd(), a.setToTheLastBlock(), c.moveAndOpen(l.lastBlock);\n    }\n  }\n  /**\n   * Handle selection changes on mobile devices\n   * Uses for showing the Inline Toolbar\n   */\n  selectionChanged() {\n    const { CrossBlockSelection: e, BlockSelection: t } = this.Editor, o = b.anchorElement;\n    if (e.isCrossBlockSelectionStarted && t.anyBlockSelected && b.get().removeAllRanges(), !o) {\n      b.range || this.Editor.InlineToolbar.close();\n      return;\n    }\n    o.closest(`.${D.CSS.content}`) === null && (this.Editor.InlineToolbar.containsNode(o) || this.Editor.InlineToolbar.close(), !(o.dataset.inlineToolbar === \"true\")) || (this.Editor.BlockManager.currentBlock || this.Editor.BlockManager.setCurrentBlockByChildNode(o), this.Editor.InlineToolbar.tryToShow(!0));\n  }\n  /**\n   * Editor.js provides and ability to show placeholders for empty contenteditable elements\n   *\n   * This method watches for input and focus events and toggles 'data-empty' attribute\n   * to workaroud the case, when inputs contains only <br>s and has no visible content\n   * Then, CSS could rely on this attribute to show placeholders\n   */\n  enableInputsEmptyMark() {\n    function e(t) {\n      const o = t.target;\n      Ot(o);\n    }\n    this.readOnlyMutableListeners.on(this.nodes.wrapper, \"input\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusin\", e), this.readOnlyMutableListeners.on(this.nodes.wrapper, \"focusout\", e);\n  }\n}\nconst Es = {\n  // API Modules\n  BlocksAPI: zo,\n  CaretAPI: jo,\n  EventsAPI: $o,\n  I18nAPI: tt,\n  API: Yo,\n  InlineToolbarAPI: Wo,\n  ListenersAPI: Ko,\n  NotifierAPI: Zo,\n  ReadOnlyAPI: Go,\n  SanitizerAPI: si,\n  SaverAPI: ni,\n  SelectionAPI: ri,\n  ToolsAPI: li,\n  StylesAPI: ai,\n  ToolbarAPI: ci,\n  TooltipAPI: fi,\n  UiAPI: gi,\n  // Toolbar Modules\n  BlockSettings: Ui,\n  Toolbar: qi,\n  InlineToolbar: Zi,\n  // Modules\n  BlockEvents: Gi,\n  BlockManager: es,\n  BlockSelection: ts,\n  Caret: Re,\n  CrossBlockSelection: os,\n  DragNDrop: is,\n  ModificationsObserver: rs,\n  Paste: ls,\n  ReadOnly: as,\n  RectangleSelection: xe,\n  Renderer: cs,\n  Saver: ds,\n  Tools: go,\n  UI: ys\n};\nclass Bs {\n  /**\n   * @param {EditorConfig} config - user configuration\n   */\n  constructor(e) {\n    this.moduleInstances = {}, this.eventsDispatcher = new Te();\n    let t, o;\n    this.isReady = new Promise((i, s) => {\n      t = i, o = s;\n    }), Promise.resolve().then(async () => {\n      this.configuration = e, this.validate(), this.init(), await this.start(), await this.render();\n      const { BlockManager: i, Caret: s, UI: r, ModificationsObserver: l } = this.moduleInstances;\n      r.checkEmptiness(), l.enable(), this.configuration.autofocus && s.setToBlock(i.blocks[0], s.positions.START), t();\n    }).catch((i) => {\n      I(`Editor.js is not ready because of ${i}`, \"error\"), o(i);\n    });\n  }\n  /**\n   * Setting for configuration\n   *\n   * @param {EditorConfig|string} config - Editor's config to set\n   */\n  set configuration(e) {\n    var o, i;\n    R(e) ? this.config = {\n      ...e\n    } : this.config = {\n      holder: e\n    }, Ze(!!this.config.holderId, \"config.holderId\", \"config.holder\"), this.config.holderId && !this.config.holder && (this.config.holder = this.config.holderId, this.config.holderId = null), this.config.holder == null && (this.config.holder = \"editorjs\"), this.config.logLevel || (this.config.logLevel = St.VERBOSE), xo(this.config.logLevel), Ze(!!this.config.initialBlock, \"config.initialBlock\", \"config.defaultBlock\"), this.config.defaultBlock = this.config.defaultBlock || this.config.initialBlock || \"paragraph\", this.config.minHeight = this.config.minHeight !== void 0 ? this.config.minHeight : 300;\n    const t = {\n      type: this.config.defaultBlock,\n      data: {}\n    };\n    this.config.placeholder = this.config.placeholder || !1, this.config.sanitizer = this.config.sanitizer || {\n      p: !0,\n      b: !0,\n      a: !0\n    }, this.config.hideToolbar = this.config.hideToolbar ? this.config.hideToolbar : !1, this.config.tools = this.config.tools || {}, this.config.i18n = this.config.i18n || {}, this.config.data = this.config.data || { blocks: [] }, this.config.onReady = this.config.onReady || (() => {\n    }), this.config.onChange = this.config.onChange || (() => {\n    }), this.config.inlineToolbar = this.config.inlineToolbar !== void 0 ? this.config.inlineToolbar : !0, (V(this.config.data) || !this.config.data.blocks || this.config.data.blocks.length === 0) && (this.config.data = { blocks: [t] }), this.config.readOnly = this.config.readOnly || !1, (o = this.config.i18n) != null && o.messages && z.setDictionary(this.config.i18n.messages), this.config.i18n.direction = ((i = this.config.i18n) == null ? void 0 : i.direction) || \"ltr\";\n  }\n  /**\n   * Returns private property\n   *\n   * @returns {EditorConfig}\n   */\n  get configuration() {\n    return this.config;\n  }\n  /**\n   * Checks for required fields in Editor's config\n   */\n  validate() {\n    const { holderId: e, holder: t } = this.config;\n    if (e && t)\n      throw Error(\"«holderId» and «holder» param can't assign at the same time.\");\n    if (Q(t) && !d.get(t))\n      throw Error(`element with ID «${t}» is missing. Pass correct holder's ID.`);\n    if (t && R(t) && !d.isElement(t))\n      throw Error(\"«holder» value must be an Element node\");\n  }\n  /**\n   * Initializes modules:\n   *  - make and save instances\n   *  - configure\n   */\n  init() {\n    this.constructModules(), this.configureModules();\n  }\n  /**\n   * Start Editor!\n   *\n   * Get list of modules that needs to be prepared and return a sequence (Promise)\n   *\n   * @returns {Promise<void>}\n   */\n  async start() {\n    await [\n      \"Tools\",\n      \"UI\",\n      \"BlockManager\",\n      \"Paste\",\n      \"BlockSelection\",\n      \"RectangleSelection\",\n      \"CrossBlockSelection\",\n      \"ReadOnly\"\n    ].reduce(\n      (t, o) => t.then(async () => {\n        try {\n          await this.moduleInstances[o].prepare();\n        } catch (i) {\n          if (i instanceof Nt)\n            throw new Error(i.message);\n          I(`Module ${o} was skipped because of %o`, \"warn\", i);\n        }\n      }),\n      Promise.resolve()\n    );\n  }\n  /**\n   * Render initial data\n   */\n  render() {\n    return this.moduleInstances.Renderer.render(this.config.data.blocks);\n  }\n  /**\n   * Make modules instances and save it to the @property this.moduleInstances\n   */\n  constructModules() {\n    Object.entries(Es).forEach(([e, t]) => {\n      try {\n        this.moduleInstances[e] = new t({\n          config: this.configuration,\n          eventsDispatcher: this.eventsDispatcher\n        });\n      } catch (o) {\n        I(\"[constructModules]\", `Module ${e} skipped because`, \"error\", o);\n      }\n    });\n  }\n  /**\n   * Modules instances configuration:\n   *  - pass other modules to the 'state' property\n   *  - ...\n   */\n  configureModules() {\n    for (const e in this.moduleInstances)\n      Object.prototype.hasOwnProperty.call(this.moduleInstances, e) && (this.moduleInstances[e].state = this.getModulesDiff(e));\n  }\n  /**\n   * Return modules without passed name\n   *\n   * @param {string} name - module for witch modules difference should be calculated\n   */\n  getModulesDiff(e) {\n    const t = {};\n    for (const o in this.moduleInstances)\n      o !== e && (t[o] = this.moduleInstances[o]);\n    return t;\n  }\n}\n/**\n * Editor.js\n *\n * @license Apache-2.0\n * @see Editor.js <https://editorjs.io>\n * @author CodeX Team <https://codex.so>\n */\nclass Ts {\n  /** Editor version */\n  static get version() {\n    return \"2.30.5\";\n  }\n  /**\n   * @param {EditorConfig|string|undefined} [configuration] - user configuration\n   */\n  constructor(e) {\n    let t = () => {\n    };\n    R(e) && O(e.onReady) && (t = e.onReady);\n    const o = new Bs(e);\n    this.isReady = o.isReady.then(() => {\n      this.exportAPI(o), t();\n    });\n  }\n  /**\n   * Export external API methods\n   *\n   * @param {Core} editor — Editor's instance\n   */\n  exportAPI(e) {\n    const t = [\"configuration\"], o = () => {\n      Object.values(e.moduleInstances).forEach((s) => {\n        O(s.destroy) && s.destroy(), s.listeners.removeAll();\n      }), pi(), e = null;\n      for (const s in this)\n        Object.prototype.hasOwnProperty.call(this, s) && delete this[s];\n      Object.setPrototypeOf(this, null);\n    };\n    t.forEach((s) => {\n      this[s] = e[s];\n    }), this.destroy = o, Object.setPrototypeOf(this, e.moduleInstances.API.methods), delete this.exportAPI, Object.entries({\n      blocks: {\n        clear: \"clear\",\n        render: \"render\"\n      },\n      caret: {\n        focus: \"focus\"\n      },\n      events: {\n        on: \"on\",\n        off: \"off\",\n        emit: \"emit\"\n      },\n      saver: {\n        save: \"save\"\n      }\n    }).forEach(([s, r]) => {\n      Object.entries(r).forEach(([l, a]) => {\n        this[a] = e.moduleInstances.API.methods[s][l];\n      });\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2VkaXRvcmpzL2Rpc3QvZWRpdG9yanMubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxZQUFZLGFBQWEsSUFBSSx3QkFBd0Isc0NBQXNDLDZEQUE2RCxnQkFBZ0IsdUJBQXVCLGtCQUFrQixzQkFBc0IsV0FBVyxlQUFlLGtDQUFrQyxTQUFTLG1EQUFtRDtBQUMvVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdDQUFnQztBQUN6QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBIQUEwSDtBQUMxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQyx1Q0FBdUMsRUFBRSxLQUFLLEVBQUUsY0FBYyxHQUFHLEdBQUcsRUFBRTtBQUN0RTtBQUNBLDBCQUEwQixH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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkVBQTJFO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixhQUFhO0FBQzlGO0FBQ0E7QUFDQSxvQkFBb0IsZ0NBQWdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLEVBQUUsYUFBYSxFQUFFO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxzQkFBc0I7QUFDN0QsS0FBSyx1SUFBdUksNEJBQTRCO0FBQ3hLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbU9BQW1PLFVBQVU7QUFDN087QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RztBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCxhQUFhO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBLDZQQUE2UDtBQUM3UDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSyxrQkFBa0I7QUFDdkI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxvQkFBb0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUJBQXlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSyx1QkFBdUIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtCQUErQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3Q0FBd0M7QUFDMUQ7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0JBQWdCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx3QkFBd0I7QUFDM0UsT0FBTztBQUNQLG9HQUFvRyxpQkFBaUIsNENBQTRDLFdBQVc7QUFDNUssT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCwwQkFBMEI7QUFDcEY7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLHdCQUF3QixjQUFjO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhCQUE4QixnQkFBZ0I7QUFDekQ7QUFDQSxXQUFXO0FBQ1g7QUFDQSw2QkFBNkI7QUFDN0IsbUJBQW1CO0FBQ25CLFdBQVcsSUFBSTtBQUNmLG1CQUFtQjtBQUNuQixXQUFXLFlBQVk7QUFDdkI7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxJQUFJO0FBQ2YsdUJBQXVCLCtEQUErRDtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLElBQUk7QUFDZjtBQUNBLFdBQVc7QUFDWCxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVEsNEJBQTRCLEtBQUs7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBLDJEQUEyRCxTQUFTO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLFFBQVE7QUFDL0U7QUFDQTtBQUNBLENBQUMsNElBQTRJO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixnQ0FBZ0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssSUFBSSxjQUFjO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsY0FBYztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsY0FBYztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNB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QUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFDQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLFFBQVE7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0EsWUFBWSxpREFBaUQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpREFBaUQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLHNCQUFzQixHQUFHO0FBQ3pCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1IsMENBQTBDLEdBQUc7QUFDN0M7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwrQkFBK0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWRpdG9yanNfbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9lZGl0b3Jqcy9kaXN0L2VkaXRvcmpzLm1qcz8wODZjIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3RyeXtpZih0eXBlb2YgZG9jdW1lbnQ8XCJ1XCIpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLmNlLWhpbnQtLWFsaWduLXN0YXJ0e3RleHQtYWxpZ246bGVmdH0uY2UtaGludC0tYWxpZ24tY2VudGVye3RleHQtYWxpZ246Y2VudGVyfS5jZS1oaW50X19kZXNjcmlwdGlvbntvcGFjaXR5Oi42O21hcmdpbi10b3A6M3B4fVwiKSksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKX19Y2F0Y2godCl7Y29uc29sZS5lcnJvcihcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiLHQpfX0pKCk7XG52YXIga28gPSB0eXBlb2YgZ2xvYmFsVGhpcyA8IFwidVwiID8gZ2xvYmFsVGhpcyA6IHR5cGVvZiB3aW5kb3cgPCBcInVcIiA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgPCBcInVcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmIDwgXCJ1XCIgPyBzZWxmIDoge307XG5mdW5jdGlvbiBGZShuKSB7XG4gIHJldHVybiBuICYmIG4uX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgXCJkZWZhdWx0XCIpID8gbi5kZWZhdWx0IDogbjtcbn1cbmZ1bmN0aW9uIHplKCkge1xufVxuT2JqZWN0LmFzc2lnbih6ZSwge1xuICBkZWZhdWx0OiB6ZSxcbiAgcmVnaXN0ZXI6IHplLFxuICByZXZlcnQ6IGZ1bmN0aW9uKCkge1xuICB9LFxuICBfX2VzTW9kdWxlOiAhMFxufSk7XG5FbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8IChFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID0gRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5vTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbihuKSB7XG4gIGNvbnN0IGUgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwobik7XG4gIGxldCB0ID0gZS5sZW5ndGg7XG4gIGZvciAoOyAtLXQgPj0gMCAmJiBlLml0ZW0odCkgIT09IHRoaXM7IClcbiAgICA7XG4gIHJldHVybiB0ID4gLTE7XG59KTtcbkVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgfHwgKEVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbihuKSB7XG4gIGxldCBlID0gdGhpcztcbiAgaWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZSkpXG4gICAgcmV0dXJuIG51bGw7XG4gIGRvIHtcbiAgICBpZiAoZS5tYXRjaGVzKG4pKVxuICAgICAgcmV0dXJuIGU7XG4gICAgZSA9IGUucGFyZW50RWxlbWVudCB8fCBlLnBhcmVudE5vZGU7XG4gIH0gd2hpbGUgKGUgIT09IG51bGwpO1xuICByZXR1cm4gbnVsbDtcbn0pO1xuRWxlbWVudC5wcm90b3R5cGUucHJlcGVuZCB8fCAoRWxlbWVudC5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uKGUpIHtcbiAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgQXJyYXkuaXNBcnJheShlKSB8fCAoZSA9IFtlXSksIGUuZm9yRWFjaCgobykgPT4ge1xuICAgIGNvbnN0IGkgPSBvIGluc3RhbmNlb2YgTm9kZTtcbiAgICB0LmFwcGVuZENoaWxkKGkgPyBvIDogZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobykpO1xuICB9KSwgdGhpcy5pbnNlcnRCZWZvcmUodCwgdGhpcy5maXJzdENoaWxkKTtcbn0pO1xuRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCB8fCAoRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCA9IGZ1bmN0aW9uKG4pIHtcbiAgbiA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgPyAhMCA6ICEhbjtcbiAgY29uc3QgZSA9IHRoaXMucGFyZW50Tm9kZSwgdCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsIG51bGwpLCBvID0gcGFyc2VJbnQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLXRvcC13aWR0aFwiKSksIGkgPSBwYXJzZUludCh0LmdldFByb3BlcnR5VmFsdWUoXCJib3JkZXItbGVmdC13aWR0aFwiKSksIHMgPSB0aGlzLm9mZnNldFRvcCAtIGUub2Zmc2V0VG9wIDwgZS5zY3JvbGxUb3AsIHIgPSB0aGlzLm9mZnNldFRvcCAtIGUub2Zmc2V0VG9wICsgdGhpcy5jbGllbnRIZWlnaHQgLSBvID4gZS5zY3JvbGxUb3AgKyBlLmNsaWVudEhlaWdodCwgbCA9IHRoaXMub2Zmc2V0TGVmdCAtIGUub2Zmc2V0TGVmdCA8IGUuc2Nyb2xsTGVmdCwgYSA9IHRoaXMub2Zmc2V0TGVmdCAtIGUub2Zmc2V0TGVmdCArIHRoaXMuY2xpZW50V2lkdGggLSBpID4gZS5zY3JvbGxMZWZ0ICsgZS5jbGllbnRXaWR0aCwgYyA9IHMgJiYgIXI7XG4gIChzIHx8IHIpICYmIG4gJiYgKGUuc2Nyb2xsVG9wID0gdGhpcy5vZmZzZXRUb3AgLSBlLm9mZnNldFRvcCAtIGUuY2xpZW50SGVpZ2h0IC8gMiAtIG8gKyB0aGlzLmNsaWVudEhlaWdodCAvIDIpLCAobCB8fCBhKSAmJiBuICYmIChlLnNjcm9sbExlZnQgPSB0aGlzLm9mZnNldExlZnQgLSBlLm9mZnNldExlZnQgLSBlLmNsaWVudFdpZHRoIC8gMiAtIGkgKyB0aGlzLmNsaWVudFdpZHRoIC8gMiksIChzIHx8IHIgfHwgbCB8fCBhKSAmJiAhbiAmJiB0aGlzLnNjcm9sbEludG9WaWV3KGMpO1xufSk7XG53aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayA9IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrIHx8IGZ1bmN0aW9uKG4pIHtcbiAgY29uc3QgZSA9IERhdGUubm93KCk7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIG4oe1xuICAgICAgZGlkVGltZW91dDogITEsXG4gICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIDUwIC0gKERhdGUubm93KCkgLSBlKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIDEpO1xufTtcbndpbmRvdy5jYW5jZWxJZGxlQ2FsbGJhY2sgPSB3aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrIHx8IGZ1bmN0aW9uKG4pIHtcbiAgY2xlYXJUaW1lb3V0KG4pO1xufTtcbmxldCB2byA9IChuID0gMjEpID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkobikpLnJlZHVjZSgoZSwgdCkgPT4gKHQgJj0gNjMsIHQgPCAzNiA/IGUgKz0gdC50b1N0cmluZygzNikgOiB0IDwgNjIgPyBlICs9ICh0IC0gMjYpLnRvU3RyaW5nKDM2KS50b1VwcGVyQ2FzZSgpIDogdCA+IDYyID8gZSArPSBcIi1cIiA6IGUgKz0gXCJfXCIsIGUpLCBcIlwiKTtcbnZhciBTdCA9IC8qIEBfX1BVUkVfXyAqLyAoKG4pID0+IChuLlZFUkJPU0UgPSBcIlZFUkJPU0VcIiwgbi5JTkZPID0gXCJJTkZPXCIsIG4uV0FSTiA9IFwiV0FSTlwiLCBuLkVSUk9SID0gXCJFUlJPUlwiLCBuKSkoU3QgfHwge30pO1xuY29uc3QgdyA9IHtcbiAgQkFDS1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIEVOVEVSOiAxMyxcbiAgU0hJRlQ6IDE2LFxuICBDVFJMOiAxNyxcbiAgQUxUOiAxOCxcbiAgRVNDOiAyNyxcbiAgU1BBQ0U6IDMyLFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBET1dOOiA0MCxcbiAgUklHSFQ6IDM5LFxuICBERUxFVEU6IDQ2LFxuICBNRVRBOiA5MSxcbiAgU0xBU0g6IDE5MVxufSwgd28gPSB7XG4gIExFRlQ6IDAsXG4gIFdIRUVMOiAxLFxuICBSSUdIVDogMixcbiAgQkFDS1dBUkQ6IDMsXG4gIEZPUldBUkQ6IDRcbn07XG5mdW5jdGlvbiBCZShuLCBlLCB0ID0gXCJsb2dcIiwgbywgaSA9IFwiY29sb3I6IGluaGVyaXRcIikge1xuICBpZiAoIShcImNvbnNvbGVcIiBpbiB3aW5kb3cpIHx8ICF3aW5kb3cuY29uc29sZVt0XSlcbiAgICByZXR1cm47XG4gIGNvbnN0IHMgPSBbXCJpbmZvXCIsIFwibG9nXCIsIFwid2FyblwiLCBcImVycm9yXCJdLmluY2x1ZGVzKHQpLCByID0gW107XG4gIHN3aXRjaCAoQmUubG9nTGV2ZWwpIHtcbiAgICBjYXNlIFwiRVJST1JcIjpcbiAgICAgIGlmICh0ICE9PSBcImVycm9yXCIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJXQVJOXCI6XG4gICAgICBpZiAoIVtcImVycm9yXCIsIFwid2FyblwiXS5pbmNsdWRlcyh0KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIklORk9cIjpcbiAgICAgIGlmICghcyB8fCBuKVxuICAgICAgICByZXR1cm47XG4gICAgICBicmVhaztcbiAgfVxuICBvICYmIHIucHVzaChvKTtcbiAgY29uc3QgbCA9IFwiRWRpdG9yLmpzIDIuMzAuNVwiLCBhID0gYGxpbmUtaGVpZ2h0OiAxZW07XG4gICAgICAgICAgICBjb2xvcjogIzAwNkZFQTtcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTFweDtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxZW07XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgcGFkZGluZzogNHB4IDlweDtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XG4gICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDU2LCAxMzgsIDIyOSwgMC4xNik7XG4gICAgICAgICAgICBtYXJnaW46IDRweCA1cHggNHB4IDA7YDtcbiAgbiAmJiAocyA/IChyLnVuc2hpZnQoYSwgaSksIGUgPSBgJWMke2x9JWMgJHtlfWApIDogZSA9IGAoICR7bH0gKSR7ZX1gKTtcbiAgdHJ5IHtcbiAgICBzID8gbyA/IGNvbnNvbGVbdF0oYCR7ZX0gJW9gLCAuLi5yKSA6IGNvbnNvbGVbdF0oZSwgLi4ucikgOiBjb25zb2xlW3RdKGUpO1xuICB9IGNhdGNoIHtcbiAgfVxufVxuQmUubG9nTGV2ZWwgPSBcIlZFUkJPU0VcIjtcbmZ1bmN0aW9uIHhvKG4pIHtcbiAgQmUubG9nTGV2ZWwgPSBuO1xufVxuY29uc3QgSSA9IEJlLmJpbmQod2luZG93LCAhMSksIFggPSBCZS5iaW5kKHdpbmRvdywgITApO1xuZnVuY3Rpb24gcmUobikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pLm1hdGNoKC9cXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCk7XG59XG5mdW5jdGlvbiBPKG4pIHtcbiAgcmV0dXJuIHJlKG4pID09PSBcImZ1bmN0aW9uXCIgfHwgcmUobikgPT09IFwiYXN5bmNmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gUihuKSB7XG4gIHJldHVybiByZShuKSA9PT0gXCJvYmplY3RcIjtcbn1cbmZ1bmN0aW9uIFEobikge1xuICByZXR1cm4gcmUobikgPT09IFwic3RyaW5nXCI7XG59XG5mdW5jdGlvbiB5byhuKSB7XG4gIHJldHVybiByZShuKSA9PT0gXCJib29sZWFuXCI7XG59XG5mdW5jdGlvbiBtdChuKSB7XG4gIHJldHVybiByZShuKSA9PT0gXCJudW1iZXJcIjtcbn1cbmZ1bmN0aW9uIGJ0KG4pIHtcbiAgcmV0dXJuIHJlKG4pID09PSBcInVuZGVmaW5lZFwiO1xufVxuZnVuY3Rpb24gVihuKSB7XG4gIHJldHVybiBuID8gT2JqZWN0LmtleXMobikubGVuZ3RoID09PSAwICYmIG4uY29uc3RydWN0b3IgPT09IE9iamVjdCA6ICEwO1xufVxuZnVuY3Rpb24gSXQobikge1xuICByZXR1cm4gbiA+IDQ3ICYmIG4gPCA1OCB8fCAvLyBudW1iZXIga2V5c1xuICBuID09PSAzMiB8fCBuID09PSAxMyB8fCAvLyBTcGFjZSBiYXIgJiByZXR1cm4ga2V5KHMpXG4gIG4gPT09IDIyOSB8fCAvLyBwcm9jZXNzaW5nIGtleSBpbnB1dCBmb3IgY2VydGFpbiBsYW5ndWFnZXMg4oCUIENoaW5lc2UsIEphcGFuZXNlLCBldGMuXG4gIG4gPiA2NCAmJiBuIDwgOTEgfHwgLy8gbGV0dGVyIGtleXNcbiAgbiA+IDk1ICYmIG4gPCAxMTIgfHwgLy8gTnVtcGFkIGtleXNcbiAgbiA+IDE4NSAmJiBuIDwgMTkzIHx8IC8vIDs9LC0uL2AgKGluIG9yZGVyKVxuICBuID4gMjE4ICYmIG4gPCAyMjM7XG59XG5hc3luYyBmdW5jdGlvbiBFbyhuLCBlID0gKCkgPT4ge1xufSwgdCA9ICgpID0+IHtcbn0pIHtcbiAgYXN5bmMgZnVuY3Rpb24gbyhpLCBzLCByKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGkuZnVuY3Rpb24oaS5kYXRhKSwgYXdhaXQgcyhidChpLmRhdGEpID8ge30gOiBpLmRhdGEpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcihidChpLmRhdGEpID8ge30gOiBpLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbi5yZWR1Y2UoYXN5bmMgKGksIHMpID0+IChhd2FpdCBpLCBvKHMsIGUsIHQpKSwgUHJvbWlzZS5yZXNvbHZlKCkpO1xufVxuZnVuY3Rpb24gTXQobikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobik7XG59XG5mdW5jdGlvbiBPZShuLCBlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCB0ID0gdGhpcywgbyA9IGFyZ3VtZW50cztcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiBuLmFwcGx5KHQsIG8pLCBlKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIEJvKG4pIHtcbiAgcmV0dXJuIG4ubmFtZS5zcGxpdChcIi5cIikucG9wKCk7XG59XG5mdW5jdGlvbiBUbyhuKSB7XG4gIHJldHVybiAvXlstXFx3XStcXC8oWy0rXFx3XSt8XFwqKSQvLnRlc3Qobik7XG59XG5mdW5jdGlvbiBrdChuLCBlLCB0KSB7XG4gIGxldCBvO1xuICByZXR1cm4gKC4uLmkpID0+IHtcbiAgICBjb25zdCBzID0gdGhpcywgciA9ICgpID0+IHtcbiAgICAgIG8gPSBudWxsLCB0IHx8IG4uYXBwbHkocywgaSk7XG4gICAgfSwgbCA9IHQgJiYgIW87XG4gICAgd2luZG93LmNsZWFyVGltZW91dChvKSwgbyA9IHdpbmRvdy5zZXRUaW1lb3V0KHIsIGUpLCBsICYmIG4uYXBwbHkocywgaSk7XG4gIH07XG59XG5mdW5jdGlvbiBWZShuLCBlLCB0ID0gdm9pZCAwKSB7XG4gIGxldCBvLCBpLCBzLCByID0gbnVsbCwgbCA9IDA7XG4gIHQgfHwgKHQgPSB7fSk7XG4gIGNvbnN0IGEgPSBmdW5jdGlvbigpIHtcbiAgICBsID0gdC5sZWFkaW5nID09PSAhMSA/IDAgOiBEYXRlLm5vdygpLCByID0gbnVsbCwgcyA9IG4uYXBwbHkobywgaSksIHIgfHwgKG8gPSBpID0gbnVsbCk7XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBjID0gRGF0ZS5ub3coKTtcbiAgICAhbCAmJiB0LmxlYWRpbmcgPT09ICExICYmIChsID0gYyk7XG4gICAgY29uc3QgdSA9IGUgLSAoYyAtIGwpO1xuICAgIHJldHVybiBvID0gdGhpcywgaSA9IGFyZ3VtZW50cywgdSA8PSAwIHx8IHUgPiBlID8gKHIgJiYgKGNsZWFyVGltZW91dChyKSwgciA9IG51bGwpLCBsID0gYywgcyA9IG4uYXBwbHkobywgaSksIHIgfHwgKG8gPSBpID0gbnVsbCkpIDogIXIgJiYgdC50cmFpbGluZyAhPT0gITEgJiYgKHIgPSBzZXRUaW1lb3V0KGEsIHUpKSwgcztcbiAgfTtcbn1cbmZ1bmN0aW9uIENvKCkge1xuICBjb25zdCBuID0ge1xuICAgIHdpbjogITEsXG4gICAgbWFjOiAhMSxcbiAgICB4MTE6ICExLFxuICAgIGxpbnV4OiAhMVxuICB9LCBlID0gT2JqZWN0LmtleXMobikuZmluZCgodCkgPT4gd2luZG93Lm5hdmlnYXRvci5hcHBWZXJzaW9uLnRvTG93ZXJDYXNlKCkuaW5kZXhPZih0KSAhPT0gLTEpO1xuICByZXR1cm4gZSAmJiAobltlXSA9ICEwKSwgbjtcbn1cbmZ1bmN0aW9uIExlKG4pIHtcbiAgcmV0dXJuIG5bMF0udG9VcHBlckNhc2UoKSArIG4uc2xpY2UoMSk7XG59XG5mdW5jdGlvbiBxZShuLCAuLi5lKSB7XG4gIGlmICghZS5sZW5ndGgpXG4gICAgcmV0dXJuIG47XG4gIGNvbnN0IHQgPSBlLnNoaWZ0KCk7XG4gIGlmIChSKG4pICYmIFIodCkpXG4gICAgZm9yIChjb25zdCBvIGluIHQpXG4gICAgICBSKHRbb10pID8gKG5bb10gfHwgT2JqZWN0LmFzc2lnbihuLCB7IFtvXToge30gfSksIHFlKG5bb10sIHRbb10pKSA6IE9iamVjdC5hc3NpZ24obiwgeyBbb106IHRbb10gfSk7XG4gIHJldHVybiBxZShuLCAuLi5lKTtcbn1cbmZ1bmN0aW9uIGV0KG4pIHtcbiAgY29uc3QgZSA9IENvKCk7XG4gIHJldHVybiBuID0gbi5yZXBsYWNlKC9zaGlmdC9naSwgXCLih6dcIikucmVwbGFjZSgvYmFja3NwYWNlL2dpLCBcIuKMq1wiKS5yZXBsYWNlKC9lbnRlci9naSwgXCLij45cIikucmVwbGFjZSgvdXAvZ2ksIFwi4oaRXCIpLnJlcGxhY2UoL2xlZnQvZ2ksIFwi4oaSXCIpLnJlcGxhY2UoL2Rvd24vZ2ksIFwi4oaTXCIpLnJlcGxhY2UoL3JpZ2h0L2dpLCBcIuKGkFwiKS5yZXBsYWNlKC9lc2NhcGUvZ2ksIFwi4o6LXCIpLnJlcGxhY2UoL2luc2VydC9naSwgXCJJbnNcIikucmVwbGFjZSgvZGVsZXRlL2dpLCBcIuKQoVwiKS5yZXBsYWNlKC9cXCsvZ2ksIFwiICsgXCIpLCBlLm1hYyA/IG4gPSBuLnJlcGxhY2UoL2N0cmx8Y21kL2dpLCBcIuKMmFwiKS5yZXBsYWNlKC9hbHQvZ2ksIFwi4oylXCIpIDogbiA9IG4ucmVwbGFjZSgvY21kL2dpLCBcIkN0cmxcIikucmVwbGFjZSgvd2luZG93cy9naSwgXCJXSU5cIiksIG47XG59XG5mdW5jdGlvbiBTbyhuKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5ldyBVUkwobikuaHJlZjtcbiAgfSBjYXRjaCB7XG4gIH1cbiAgcmV0dXJuIG4uc3Vic3RyaW5nKDAsIDIpID09PSBcIi8vXCIgPyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBuIDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIG47XG59XG5mdW5jdGlvbiBJbygpIHtcbiAgcmV0dXJuIHZvKDEwKTtcbn1cbmZ1bmN0aW9uIE1vKG4pIHtcbiAgd2luZG93Lm9wZW4obiwgXCJfYmxhbmtcIik7XG59XG5mdW5jdGlvbiBBbyhuID0gXCJcIikge1xuICByZXR1cm4gYCR7bn0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDFlOCkudG9TdHJpbmcoMTYpfWA7XG59XG5mdW5jdGlvbiBaZShuLCBlLCB0KSB7XG4gIGNvbnN0IG8gPSBgwqske2V9wrsgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFBsZWFzZSB1c2UgdGhlIMKrJHt0fcK7IGluc3RlYWQuYDtcbiAgbiAmJiBYKG8sIFwid2FyblwiKTtcbn1cbmZ1bmN0aW9uIHVlKG4sIGUsIHQpIHtcbiAgY29uc3QgbyA9IHQudmFsdWUgPyBcInZhbHVlXCIgOiBcImdldFwiLCBpID0gdFtvXSwgcyA9IGAjJHtlfUNhY2hlYDtcbiAgaWYgKHRbb10gPSBmdW5jdGlvbiguLi5yKSB7XG4gICAgcmV0dXJuIHRoaXNbc10gPT09IHZvaWQgMCAmJiAodGhpc1tzXSA9IGkuYXBwbHkodGhpcywgLi4ucikpLCB0aGlzW3NdO1xuICB9LCBvID09PSBcImdldFwiICYmIHQuc2V0KSB7XG4gICAgY29uc3QgciA9IHQuc2V0O1xuICAgIHQuc2V0ID0gZnVuY3Rpb24obCkge1xuICAgICAgZGVsZXRlIG5bc10sIHIuYXBwbHkodGhpcywgbCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmNvbnN0IEF0ID0gNjUwO1xuZnVuY3Rpb24gcGUoKSB7XG4gIHJldHVybiB3aW5kb3cubWF0Y2hNZWRpYShgKG1heC13aWR0aDogJHtBdH1weClgKS5tYXRjaGVzO1xufVxuY29uc3QgR2UgPSB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgJiYgd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtICYmICgvaVAoYWR8aG9uZXxvZCkvLnRlc3Qod2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSkgfHwgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSA9PT0gXCJNYWNJbnRlbFwiICYmIHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAxKTtcbmZ1bmN0aW9uIE9vKG4sIGUpIHtcbiAgY29uc3QgdCA9IEFycmF5LmlzQXJyYXkobikgfHwgUihuKSwgbyA9IEFycmF5LmlzQXJyYXkoZSkgfHwgUihlKTtcbiAgcmV0dXJuIHQgfHwgbyA/IEpTT04uc3RyaW5naWZ5KG4pID09PSBKU09OLnN0cmluZ2lmeShlKSA6IG4gPT09IGU7XG59XG5jbGFzcyBkIHtcbiAgLyoqXG4gICAqIENoZWNrIGlmIHBhc3NlZCB0YWcgaGFzIG5vIGNsb3NlZCB0YWdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFnIC0gZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc1NpbmdsZVRhZyhlKSB7XG4gICAgcmV0dXJuIGUudGFnTmFtZSAmJiBbXG4gICAgICBcIkFSRUFcIixcbiAgICAgIFwiQkFTRVwiLFxuICAgICAgXCJCUlwiLFxuICAgICAgXCJDT0xcIixcbiAgICAgIFwiQ09NTUFORFwiLFxuICAgICAgXCJFTUJFRFwiLFxuICAgICAgXCJIUlwiLFxuICAgICAgXCJJTUdcIixcbiAgICAgIFwiSU5QVVRcIixcbiAgICAgIFwiS0VZR0VOXCIsXG4gICAgICBcIkxJTktcIixcbiAgICAgIFwiTUVUQVwiLFxuICAgICAgXCJQQVJBTVwiLFxuICAgICAgXCJTT1VSQ0VcIixcbiAgICAgIFwiVFJBQ0tcIixcbiAgICAgIFwiV0JSXCJcbiAgICBdLmluY2x1ZGVzKGUudGFnTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGVsZW1lbnQgaXMgQlIgb3IgV0JSXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzTGluZUJyZWFrVGFnKGUpIHtcbiAgICByZXR1cm4gZSAmJiBlLnRhZ05hbWUgJiYgW1xuICAgICAgXCJCUlwiLFxuICAgICAgXCJXQlJcIlxuICAgIF0uaW5jbHVkZXMoZS50YWdOYW1lKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZvciBtYWtpbmcgRWxlbWVudHMgd2l0aCBjbGFzcyBuYW1lIGFuZCBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFnTmFtZSAtIG5ldyBFbGVtZW50IHRhZyBuYW1lXG4gICAqIEBwYXJhbSAge3N0cmluZ1tdfHN0cmluZ30gW2NsYXNzTmFtZXNdIC0gbGlzdCBvciBuYW1lIG9mIENTUyBjbGFzcyBuYW1lKHMpXG4gICAqIEBwYXJhbSAge29iamVjdH0gW2F0dHJpYnV0ZXNdIC0gYW55IGF0dHJpYnV0ZXNcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgc3RhdGljIG1ha2UoZSwgdCA9IG51bGwsIG8gPSB7fSkge1xuICAgIGNvbnN0IGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHQpKSB7XG4gICAgICBjb25zdCBzID0gdC5maWx0ZXIoKHIpID0+IHIgIT09IHZvaWQgMCk7XG4gICAgICBpLmNsYXNzTGlzdC5hZGQoLi4ucyk7XG4gICAgfSBlbHNlXG4gICAgICB0ICYmIGkuY2xhc3NMaXN0LmFkZCh0KTtcbiAgICBmb3IgKGNvbnN0IHMgaW4gbylcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBzKSAmJiAoaVtzXSA9IG9bc10pO1xuICAgIHJldHVybiBpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIFRleHQgTm9kZSB3aXRoIHRoZSBwYXNzZWQgY29udGVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIHRleHQgY29udGVudFxuICAgKiBAcmV0dXJucyB7VGV4dH1cbiAgICovXG4gIHN0YXRpYyB0ZXh0KGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGVuZCBvbmUgb3Igc2V2ZXJhbCBlbGVtZW50cyB0byB0aGUgcGFyZW50XG4gICAqXG4gICAqIEBwYXJhbSAge0VsZW1lbnR8RG9jdW1lbnRGcmFnbWVudH0gcGFyZW50IC0gd2hlcmUgdG8gYXBwZW5kXG4gICAqIEBwYXJhbSAge0VsZW1lbnR8RWxlbWVudFtdfERvY3VtZW50RnJhZ21lbnR8VGV4dHxUZXh0W119IGVsZW1lbnRzIC0gZWxlbWVudCBvciBlbGVtZW50cyBsaXN0XG4gICAqL1xuICBzdGF0aWMgYXBwZW5kKGUsIHQpIHtcbiAgICBBcnJheS5pc0FycmF5KHQpID8gdC5mb3JFYWNoKChvKSA9PiBlLmFwcGVuZENoaWxkKG8pKSA6IGUuYXBwZW5kQ2hpbGQodCk7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGVuZCBlbGVtZW50IG9yIGEgY291cGxlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhcmVudCBlbGVtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudCAtIHdoZXJlIHRvIGFwcGVuZFxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RWxlbWVudFtdfSBlbGVtZW50cyAtIGVsZW1lbnQgb3IgZWxlbWVudHMgbGlzdFxuICAgKi9cbiAgc3RhdGljIHByZXBlbmQoZSwgdCkge1xuICAgIEFycmF5LmlzQXJyYXkodCkgPyAodCA9IHQucmV2ZXJzZSgpLCB0LmZvckVhY2goKG8pID0+IGUucHJlcGVuZChvKSkpIDogZS5wcmVwZW5kKHQpO1xuICB9XG4gIC8qKlxuICAgKiBTd2FwIHR3byBlbGVtZW50cyBpbiBwYXJlbnRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwxIC0gZnJvbVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbDIgLSB0b1xuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgc3RhdGljIHN3YXAoZSwgdCkge1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBpID0gZS5wYXJlbnROb2RlO1xuICAgIGkuaW5zZXJ0QmVmb3JlKG8sIGUpLCBpLmluc2VydEJlZm9yZShlLCB0KSwgaS5pbnNlcnRCZWZvcmUodCwgbyksIGkucmVtb3ZlQ2hpbGQobyk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdG9yIERlY29yYXRvclxuICAgKlxuICAgKiBSZXR1cm5zIGZpcnN0IG1hdGNoXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgLSBlbGVtZW50IHdlIHNlYXJjaGluZyBpbnNpZGUuIERlZmF1bHQgLSBET00gRG9jdW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gc2VhcmNoaW5nIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBmaW5kKGUgPSBkb2N1bWVudCwgdCkge1xuICAgIHJldHVybiBlLnF1ZXJ5U2VsZWN0b3IodCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBFbGVtZW50IGJ5IElkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGlkIHRvIGZpbmRcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50IHwgbnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQoZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0b3IgRGVjb3JhdG9yLlxuICAgKlxuICAgKiBSZXR1cm5zIGFsbCBtYXRjaGVzXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudH0gZWwgLSBlbGVtZW50IHdlIHNlYXJjaGluZyBpbnNpZGUuIERlZmF1bHQgLSBET00gRG9jdW1lbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gc2VhcmNoaW5nIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7Tm9kZUxpc3R9XG4gICAqL1xuICBzdGF0aWMgZmluZEFsbChlID0gZG9jdW1lbnQsIHQpIHtcbiAgICByZXR1cm4gZS5xdWVyeVNlbGVjdG9yQWxsKHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIENTUyBzZWxlY3RvciBmb3IgYWxsIHRleHQgaW5wdXRzXG4gICAqL1xuICBzdGF0aWMgZ2V0IGFsbElucHV0c1NlbGVjdG9yKCkge1xuICAgIHJldHVybiBcIltjb250ZW50ZWRpdGFibGU9dHJ1ZV0sIHRleHRhcmVhLCBpbnB1dDpub3QoW3R5cGVdKSwgXCIgKyBbXCJ0ZXh0XCIsIFwicGFzc3dvcmRcIiwgXCJlbWFpbFwiLCBcIm51bWJlclwiLCBcInNlYXJjaFwiLCBcInRlbFwiLCBcInVybFwiXS5tYXAoKHQpID0+IGBpbnB1dFt0eXBlPVwiJHt0fVwiXWApLmpvaW4oXCIsIFwiKTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhbGwgY29udGVudGVkaXRhYmxlLCB0ZXh0YXJlYSBhbmQgZWRpdGFibGUgaW5wdXQgZWxlbWVudHMgcGFzc2VkIGhvbGRlciBjb250YWluc1xuICAgKlxuICAgKiBAcGFyYW0gaG9sZGVyIC0gZWxlbWVudCB3aGVyZSB0byBmaW5kIGlucHV0c1xuICAgKi9cbiAgc3RhdGljIGZpbmRBbGxJbnB1dHMoZSkge1xuICAgIHJldHVybiBNdChlLnF1ZXJ5U2VsZWN0b3JBbGwoZC5hbGxJbnB1dHNTZWxlY3RvcikpLnJlZHVjZSgodCwgbykgPT4gZC5pc05hdGl2ZUlucHV0KG8pIHx8IGQuY29udGFpbnNPbmx5SW5saW5lRWxlbWVudHMobykgPyBbLi4udCwgb10gOiBbLi4udCwgLi4uZC5nZXREZWVwZXN0QmxvY2tFbGVtZW50cyhvKV0sIFtdKTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIGZvciBkZWVwZXN0IG5vZGUgd2hpY2ggaXMgTGVhZi5cbiAgICogTGVhZiBpcyB0aGUgdmVydGV4IHRoYXQgZG9lc24ndCBoYXZlIGFueSBjaGlsZCBub2Rlc1xuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHJlY3Vyc2l2ZWx5IGdvZXMgdGhyb3cgdGhlIGFsbCBOb2RlIHVudGlsIGl0IGZpbmRzIHRoZSBMZWFmXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIHJvb3QgTm9kZS4gRnJvbSB0aGlzIHZlcnRleCB3ZSBzdGFydCBEZWVwLWZpcnN0IHNlYXJjaFxuICAgKiAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRGVwdGgtZmlyc3Rfc2VhcmNofVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFthdExhc3RdIC0gZmluZCBsYXN0IHRleHQgbm9kZVxuICAgKiBAcmV0dXJucyAtIGl0IGNhbiBiZSB0ZXh0IE5vZGUgb3IgRWxlbWVudCBOb2RlLCBzbyB0aGF0IGNhcmV0IHdpbGwgYWJsZSB0byB3b3JrIHdpdGggaXRcbiAgICogICAgICAgICAgICBDYW4gcmV0dXJuIG51bGwgaWYgbm9kZSBpcyBEb2N1bWVudCBvciBEb2N1bWVudEZyYWdtZW50LCBvciBub2RlIGlzIG5vdCBhdHRhY2hlZCB0byB0aGUgRE9NXG4gICAqL1xuICBzdGF0aWMgZ2V0RGVlcGVzdE5vZGUoZSwgdCA9ICExKSB7XG4gICAgY29uc3QgbyA9IHQgPyBcImxhc3RDaGlsZFwiIDogXCJmaXJzdENoaWxkXCIsIGkgPSB0ID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIjtcbiAgICBpZiAoZSAmJiBlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlW29dKSB7XG4gICAgICBsZXQgcyA9IGVbb107XG4gICAgICBpZiAoZC5pc1NpbmdsZVRhZyhzKSAmJiAhZC5pc05hdGl2ZUlucHV0KHMpICYmICFkLmlzTGluZUJyZWFrVGFnKHMpKVxuICAgICAgICBpZiAoc1tpXSlcbiAgICAgICAgICBzID0gc1tpXTtcbiAgICAgICAgZWxzZSBpZiAocy5wYXJlbnROb2RlW2ldKVxuICAgICAgICAgIHMgPSBzLnBhcmVudE5vZGVbaV07XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gcy5wYXJlbnROb2RlO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVlcGVzdE5vZGUocywgdCk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBvYmplY3QgaXMgRE9NIG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHsqfSBub2RlIC0gb2JqZWN0IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgc3RhdGljIGlzRWxlbWVudChlKSB7XG4gICAgcmV0dXJuIG10KGUpID8gITEgOiBlICYmIGUubm9kZVR5cGUgJiYgZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREU7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIG9iamVjdCBpcyBEb2N1bWVudEZyYWdtZW50IG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5vZGUgLSBvYmplY3QgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBzdGF0aWMgaXNGcmFnbWVudChlKSB7XG4gICAgcmV0dXJuIG10KGUpID8gITEgOiBlICYmIGUubm9kZVR5cGUgJiYgZS5ub2RlVHlwZSA9PT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgZWxlbWVudCBpcyBjb250ZW50ZWRpdGFibGVcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGh0bWwgZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0NvbnRlbnRFZGl0YWJsZShlKSB7XG4gICAgcmV0dXJuIGUuY29udGVudEVkaXRhYmxlID09PSBcInRydWVcIjtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIHRhcmdldCBpZiBpdCBpcyBuYXRpdmUgaW5wdXRcbiAgICpcbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgLSBIVE1MIGVsZW1lbnQgb3Igc3RyaW5nXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgc3RhdGljIGlzTmF0aXZlSW5wdXQoZSkge1xuICAgIGNvbnN0IHQgPSBbXG4gICAgICBcIklOUFVUXCIsXG4gICAgICBcIlRFWFRBUkVBXCJcbiAgICBdO1xuICAgIHJldHVybiBlICYmIGUudGFnTmFtZSA/IHQuaW5jbHVkZXMoZS50YWdOYW1lKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgd2UgY2FuIHNldCBjYXJldFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSB0YXJnZXQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgY2FuU2V0Q2FyZXQoZSkge1xuICAgIGxldCB0ID0gITA7XG4gICAgaWYgKGQuaXNOYXRpdmVJbnB1dChlKSlcbiAgICAgIHN3aXRjaCAoZS50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJmaWxlXCI6XG4gICAgICAgIGNhc2UgXCJjaGVja2JveFwiOlxuICAgICAgICBjYXNlIFwicmFkaW9cIjpcbiAgICAgICAgY2FzZSBcImhpZGRlblwiOlxuICAgICAgICBjYXNlIFwic3VibWl0XCI6XG4gICAgICAgIGNhc2UgXCJidXR0b25cIjpcbiAgICAgICAgY2FzZSBcImltYWdlXCI6XG4gICAgICAgIGNhc2UgXCJyZXNldFwiOlxuICAgICAgICAgIHQgPSAhMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICB0ID0gZC5pc0NvbnRlbnRFZGl0YWJsZShlKTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIG5vZGUgaWYgaXQgaXMgZW1wdHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCBjaGVja3Mgc2ltcGxlIE5vZGUgd2l0aG91dCBhbnkgY2hpbGRzIGZvciBlbXB0aW5lc3NcbiAgICogSWYgeW91IGhhdmUgTm9kZSB3aXRoIDIgb3IgbW9yZSBjaGlsZHJlbiBpZCBkZXB0aCwgeW91IGJldHRlciB1c2Uge0BsaW5rIERvbSNpc0VtcHR5fSBtZXRob2RcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB0byBjaGVja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW2lnbm9yZUNoYXJzXSAtIGNoYXIgb3Igc3Vic3RyaW5nIHRvIHRyZWF0IGFzIGVtcHR5XG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIGl0IGlzIGVtcHR5XG4gICAqL1xuICBzdGF0aWMgaXNOb2RlRW1wdHkoZSwgdCkge1xuICAgIGxldCBvO1xuICAgIHJldHVybiB0aGlzLmlzU2luZ2xlVGFnKGUpICYmICF0aGlzLmlzTGluZUJyZWFrVGFnKGUpID8gITEgOiAodGhpcy5pc0VsZW1lbnQoZSkgJiYgdGhpcy5pc05hdGl2ZUlucHV0KGUpID8gbyA9IGUudmFsdWUgOiBvID0gZS50ZXh0Q29udGVudC5yZXBsYWNlKFwi4oCLXCIsIFwiXCIpLCB0ICYmIChvID0gby5yZXBsYWNlKG5ldyBSZWdFeHAodCwgXCJnXCIpLCBcIlwiKSksIG8udHJpbSgpLmxlbmd0aCA9PT0gMCk7XG4gIH1cbiAgLyoqXG4gICAqIGNoZWNrcyBub2RlIGlmIGl0IGlzIGRvZXNuJ3QgaGF2ZSBhbnkgY2hpbGQgbm9kZXNcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0xlYWYoZSkge1xuICAgIHJldHVybiBlID8gZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBicmVhZHRoLWZpcnN0IHNlYXJjaCAoQkZTKVxuICAgKiB7QGxpbmsgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJlYWR0aC1maXJzdF9zZWFyY2h9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBQdXNoZXMgdG8gc3RhY2sgYWxsIERPTSBsZWFmcyBhbmQgY2hlY2tzIGZvciBlbXB0aW5lc3NcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB0byBjaGVja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW2lnbm9yZUNoYXJzXSAtIGNoYXIgb3Igc3Vic3RyaW5nIHRvIHRyZWF0IGFzIGVtcHR5XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzRW1wdHkoZSwgdCkge1xuICAgIGUubm9ybWFsaXplKCk7XG4gICAgY29uc3QgbyA9IFtlXTtcbiAgICBmb3IgKDsgby5sZW5ndGggPiAwOyApXG4gICAgICBpZiAoZSA9IG8uc2hpZnQoKSwgISFlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzTGVhZihlKSAmJiAhdGhpcy5pc05vZGVFbXB0eShlLCB0KSlcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIGUuY2hpbGROb2RlcyAmJiBvLnB1c2goLi4uQXJyYXkuZnJvbShlLmNoaWxkTm9kZXMpKTtcbiAgICAgIH1cbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHN0cmluZyBjb250YWlucyBodG1sIGVsZW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBzdHJpbmcgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNIVE1MU3RyaW5nKGUpIHtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwiZGl2XCIpO1xuICAgIHJldHVybiB0LmlubmVySFRNTCA9IGUsIHQuY2hpbGRFbGVtZW50Q291bnQgPiAwO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gbGVuZ3RoIG9mIG5vZGVgcyB0ZXh0IGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gbm9kZSB3aXRoIGNvbnRlbnRcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXRDb250ZW50TGVuZ3RoKGUpIHtcbiAgICByZXR1cm4gZC5pc05hdGl2ZUlucHV0KGUpID8gZS52YWx1ZS5sZW5ndGggOiBlLm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSA/IGUubGVuZ3RoIDogZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhcnJheSBvZiBuYW1lcyBvZiBibG9jayBodG1sIGVsZW1lbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAgICovXG4gIHN0YXRpYyBnZXQgYmxvY2tFbGVtZW50cygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgXCJhZGRyZXNzXCIsXG4gICAgICBcImFydGljbGVcIixcbiAgICAgIFwiYXNpZGVcIixcbiAgICAgIFwiYmxvY2txdW90ZVwiLFxuICAgICAgXCJjYW52YXNcIixcbiAgICAgIFwiZGl2XCIsXG4gICAgICBcImRsXCIsXG4gICAgICBcImR0XCIsXG4gICAgICBcImZpZWxkc2V0XCIsXG4gICAgICBcImZpZ2NhcHRpb25cIixcbiAgICAgIFwiZmlndXJlXCIsXG4gICAgICBcImZvb3RlclwiLFxuICAgICAgXCJmb3JtXCIsXG4gICAgICBcImgxXCIsXG4gICAgICBcImgyXCIsXG4gICAgICBcImgzXCIsXG4gICAgICBcImg0XCIsXG4gICAgICBcImg1XCIsXG4gICAgICBcImg2XCIsXG4gICAgICBcImhlYWRlclwiLFxuICAgICAgXCJoZ3JvdXBcIixcbiAgICAgIFwiaHJcIixcbiAgICAgIFwibGlcIixcbiAgICAgIFwibWFpblwiLFxuICAgICAgXCJuYXZcIixcbiAgICAgIFwibm9zY3JpcHRcIixcbiAgICAgIFwib2xcIixcbiAgICAgIFwib3V0cHV0XCIsXG4gICAgICBcInBcIixcbiAgICAgIFwicHJlXCIsXG4gICAgICBcInJ1YnlcIixcbiAgICAgIFwic2VjdGlvblwiLFxuICAgICAgXCJ0YWJsZVwiLFxuICAgICAgXCJ0Ym9keVwiLFxuICAgICAgXCJ0aGVhZFwiLFxuICAgICAgXCJ0clwiLFxuICAgICAgXCJ0Zm9vdFwiLFxuICAgICAgXCJ1bFwiLFxuICAgICAgXCJ2aWRlb1wiXG4gICAgXTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFzc2VkIGNvbnRlbnQgaW5jbHVkZXMgb25seSBpbmxpbmUgZWxlbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8SFRNTEVsZW1lbnR9IGRhdGEgLSBlbGVtZW50IG9yIGh0bWwgc3RyaW5nXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGNvbnRhaW5zT25seUlubGluZUVsZW1lbnRzKGUpIHtcbiAgICBsZXQgdDtcbiAgICBRKGUpID8gKHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCB0LmlubmVySFRNTCA9IGUpIDogdCA9IGU7XG4gICAgY29uc3QgbyA9IChpKSA9PiAhZC5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKGkudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJiBBcnJheS5mcm9tKGkuY2hpbGRyZW4pLmV2ZXJ5KG8pO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHQuY2hpbGRyZW4pLmV2ZXJ5KG8pO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGFuZCByZXR1cm4gYWxsIGJsb2NrIGVsZW1lbnRzIGluIHRoZSBwYXNzZWQgcGFyZW50IChpbmNsdWRpbmcgc3VidHJlZSlcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50IC0gcm9vdCBlbGVtZW50XG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfVxuICAgKi9cbiAgc3RhdGljIGdldERlZXBlc3RCbG9ja0VsZW1lbnRzKGUpIHtcbiAgICByZXR1cm4gZC5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhlKSA/IFtlXSA6IEFycmF5LmZyb20oZS5jaGlsZHJlbikucmVkdWNlKCh0LCBvKSA9PiBbLi4udCwgLi4uZC5nZXREZWVwZXN0QmxvY2tFbGVtZW50cyhvKV0sIFtdKTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZvciBnZXQgaG9sZGVyIGZyb20ge3N0cmluZ30gb3IgcmV0dXJuIEhUTUxFbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nIHwgSFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBob2xkZXIncyBpZCBvciBob2xkZXIncyBIVE1MIEVsZW1lbnRcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgc3RhdGljIGdldEhvbGRlcihlKSB7XG4gICAgcmV0dXJuIFEoZSkgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlKSA6IGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBlbGVtZW50IGlzIGFuY2hvciAoaXMgQSB0YWcpXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNBbmNob3IoZSkge1xuICAgIHJldHVybiBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJhXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBlbGVtZW50J3Mgb2Zmc2V0IHJlbGF0ZWQgdG8gdGhlIGRvY3VtZW50XG4gICAqXG4gICAqIEB0b2RvIGhhbmRsZSBjYXNlIHdoZW4gZWRpdG9yIGluaXRpYWxpemVkIGluIHNjcm9sbGFibGUgcG9wdXBcbiAgICogQHBhcmFtIGVsIC0gZWxlbWVudCB0byBjb21wdXRlIG9mZnNldFxuICAgKi9cbiAgc3RhdGljIG9mZnNldChlKSB7XG4gICAgY29uc3QgdCA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG8gPSB3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQsIGkgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCwgcyA9IHQudG9wICsgaSwgciA9IHQubGVmdCArIG87XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogcyxcbiAgICAgIGxlZnQ6IHIsXG4gICAgICBib3R0b206IHMgKyB0LmhlaWdodCxcbiAgICAgIHJpZ2h0OiByICsgdC53aWR0aFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIExvKG4pIHtcbiAgcmV0dXJuICEvW15cXHRcXG5cXHIgXS8udGVzdChuKTtcbn1cbmZ1bmN0aW9uIF9vKG4pIHtcbiAgY29uc3QgZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG4pLCB0ID0gcGFyc2VGbG9hdChlLmZvbnRTaXplKSwgbyA9IHBhcnNlRmxvYXQoZS5saW5lSGVpZ2h0KSB8fCB0ICogMS4yLCBpID0gcGFyc2VGbG9hdChlLnBhZGRpbmdUb3ApLCBzID0gcGFyc2VGbG9hdChlLmJvcmRlclRvcFdpZHRoKSwgciA9IHBhcnNlRmxvYXQoZS5tYXJnaW5Ub3ApLCBsID0gdCAqIDAuOCwgYSA9IChvIC0gdCkgLyAyO1xuICByZXR1cm4gciArIHMgKyBpICsgYSArIGw7XG59XG5mdW5jdGlvbiBPdChuKSB7XG4gIG4uZGF0YXNldC5lbXB0eSA9IGQuaXNFbXB0eShuKSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xufVxuY29uc3QgTm8gPSB7XG4gIGJsb2NrVHVuZXM6IHtcbiAgICB0b2dnbGVyOiB7XG4gICAgICBcIkNsaWNrIHRvIHR1bmVcIjogXCJcIixcbiAgICAgIFwib3IgZHJhZyB0byBtb3ZlXCI6IFwiXCJcbiAgICB9XG4gIH0sXG4gIGlubGluZVRvb2xiYXI6IHtcbiAgICBjb252ZXJ0ZXI6IHtcbiAgICAgIFwiQ29udmVydCB0b1wiOiBcIlwiXG4gICAgfVxuICB9LFxuICB0b29sYmFyOiB7XG4gICAgdG9vbGJveDoge1xuICAgICAgQWRkOiBcIlwiXG4gICAgfVxuICB9LFxuICBwb3BvdmVyOiB7XG4gICAgRmlsdGVyOiBcIlwiLFxuICAgIFwiTm90aGluZyBmb3VuZFwiOiBcIlwiLFxuICAgIFwiQ29udmVydCB0b1wiOiBcIlwiXG4gIH1cbn0sIFBvID0ge1xuICBUZXh0OiBcIlwiLFxuICBMaW5rOiBcIlwiLFxuICBCb2xkOiBcIlwiLFxuICBJdGFsaWM6IFwiXCJcbn0sIERvID0ge1xuICBsaW5rOiB7XG4gICAgXCJBZGQgYSBsaW5rXCI6IFwiXCJcbiAgfSxcbiAgc3R1Yjoge1xuICAgIFwiVGhlIGJsb2NrIGNhbiBub3QgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cIjogXCJcIlxuICB9XG59LCBSbyA9IHtcbiAgZGVsZXRlOiB7XG4gICAgRGVsZXRlOiBcIlwiLFxuICAgIFwiQ2xpY2sgdG8gZGVsZXRlXCI6IFwiXCJcbiAgfSxcbiAgbW92ZVVwOiB7XG4gICAgXCJNb3ZlIHVwXCI6IFwiXCJcbiAgfSxcbiAgbW92ZURvd246IHtcbiAgICBcIk1vdmUgZG93blwiOiBcIlwiXG4gIH1cbn0sIEx0ID0ge1xuICB1aTogTm8sXG4gIHRvb2xOYW1lczogUG8sXG4gIHRvb2xzOiBEbyxcbiAgYmxvY2tUdW5lczogUm9cbn0sIF90ID0gY2xhc3MgYWUge1xuICAvKipcbiAgICogVHlwZS1zYWZlIHRyYW5zbGF0aW9uIGZvciBpbnRlcm5hbCBVSSB0ZXh0czpcbiAgICogUGVyZm9ybSB0cmFuc2xhdGlvbiBvZiB0aGUgc3RyaW5nIGJ5IG5hbWVzcGFjZSBhbmQgYSBrZXlcbiAgICpcbiAgICogQGV4YW1wbGUgSTE4bi51aShJMThuSW50ZXJuYWxOUy51aS5ibG9ja1R1bmVzLnRvZ2dsZXIsICdDbGljayB0byB0dW5lJylcbiAgICogQHBhcmFtIGludGVybmFsTmFtZXNwYWNlIC0gcGF0aCB0byB0cmFuc2xhdGVkIHN0cmluZyBpbiBkaWN0aW9uYXJ5XG4gICAqIEBwYXJhbSBkaWN0S2V5IC0gZGljdGlvbmFyeSBrZXkuIEJldHRlciB0byB1c2UgZGVmYXVsdCBsb2NhbGUgb3JpZ2luYWwgdGV4dFxuICAgKi9cbiAgc3RhdGljIHVpKGUsIHQpIHtcbiAgICByZXR1cm4gYWUuX3QoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSBmb3IgZXh0ZXJuYWwgc3RyaW5ncyB0aGF0IGlzIG5vdCBwcmVzZW50ZWQgaW4gZGVmYXVsdCBkaWN0aW9uYXJ5LlxuICAgKiBGb3IgZXhhbXBsZSwgZm9yIHVzZXItc3BlY2lmaWVkIHRvb2wgbmFtZXNcbiAgICpcbiAgICogQHBhcmFtIG5hbWVzcGFjZSAtIHBhdGggdG8gdHJhbnNsYXRlZCBzdHJpbmcgaW4gZGljdGlvbmFyeVxuICAgKiBAcGFyYW0gZGljdEtleSAtIGRpY3Rpb25hcnkga2V5LiBCZXR0ZXIgdG8gdXNlIGRlZmF1bHQgbG9jYWxlIG9yaWdpbmFsIHRleHRcbiAgICovXG4gIHN0YXRpYyB0KGUsIHQpIHtcbiAgICByZXR1cm4gYWUuX3QoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkanVzdCBtb2R1bGUgZm9yIHVzaW5nIGV4dGVybmFsIGRpY3Rpb25hcnlcbiAgICpcbiAgICogQHBhcmFtIGRpY3Rpb25hcnkgLSBuZXcgbWVzc2FnZXMgbGlzdCB0byBvdmVycmlkZSBkZWZhdWx0XG4gICAqL1xuICBzdGF0aWMgc2V0RGljdGlvbmFyeShlKSB7XG4gICAgYWUuY3VycmVudERpY3Rpb25hcnkgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtIHRyYW5zbGF0aW9uIGJvdGggZm9yIGludGVybmFsIGFuZCBleHRlcm5hbCBuYW1lc3BhY2VzXG4gICAqIElmIHRoZXJlIGlzIG5vIHRyYW5zbGF0aW9uIGZvdW5kLCByZXR1cm5zIHBhc3NlZCBrZXkgYXMgYSB0cmFuc2xhdGVkIG1lc3NhZ2VcbiAgICpcbiAgICogQHBhcmFtIG5hbWVzcGFjZSAtIHBhdGggdG8gdHJhbnNsYXRlZCBzdHJpbmcgaW4gZGljdGlvbmFyeVxuICAgKiBAcGFyYW0gZGljdEtleSAtIGRpY3Rpb25hcnkga2V5LiBCZXR0ZXIgdG8gdXNlIGRlZmF1bHQgbG9jYWxlIG9yaWdpbmFsIHRleHRcbiAgICovXG4gIHN0YXRpYyBfdChlLCB0KSB7XG4gICAgY29uc3QgbyA9IGFlLmdldE5hbWVzcGFjZShlKTtcbiAgICByZXR1cm4gIW8gfHwgIW9bdF0gPyB0IDogb1t0XTtcbiAgfVxuICAvKipcbiAgICogRmluZCBtZXNzYWdlcyBzZWN0aW9uIGJ5IG5hbWVzcGFjZSBwYXRoXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lc3BhY2UgLSBwYXRoIHRvIHNlY3Rpb25cbiAgICovXG4gIHN0YXRpYyBnZXROYW1lc3BhY2UoZSkge1xuICAgIHJldHVybiBlLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKG8sIGkpID0+ICFvIHx8ICFPYmplY3Qua2V5cyhvKS5sZW5ndGggPyB7fSA6IG9baV0sIGFlLmN1cnJlbnREaWN0aW9uYXJ5KTtcbiAgfVxufTtcbl90LmN1cnJlbnREaWN0aW9uYXJ5ID0gTHQ7XG5sZXQgeiA9IF90O1xuY2xhc3MgTnQgZXh0ZW5kcyBFcnJvciB7XG59XG5jbGFzcyBUZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcbiAgfVxuICAvKipcbiAgICogU3Vic2NyaWJlIGFueSBldmVudCBvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBzdWJzY3JpYmVyXG4gICAqL1xuICBvbihlLCB0KSB7XG4gICAgZSBpbiB0aGlzLnN1YnNjcmliZXJzIHx8ICh0aGlzLnN1YnNjcmliZXJzW2VdID0gW10pLCB0aGlzLnN1YnNjcmliZXJzW2VdLnB1c2godCk7XG4gIH1cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBhbnkgZXZlbnQgb24gY2FsbGJhY2suIENhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIG9uY2UgYW5kIGJlIHJlbW92ZWQgZnJvbSBzdWJzY3JpYmVycyBhcnJheSBhZnRlciBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBzdWJzY3JpYmVyXG4gICAqL1xuICBvbmNlKGUsIHQpIHtcbiAgICBlIGluIHRoaXMuc3Vic2NyaWJlcnMgfHwgKHRoaXMuc3Vic2NyaWJlcnNbZV0gPSBbXSk7XG4gICAgY29uc3QgbyA9IChpKSA9PiB7XG4gICAgICBjb25zdCBzID0gdChpKSwgciA9IHRoaXMuc3Vic2NyaWJlcnNbZV0uaW5kZXhPZihvKTtcbiAgICAgIHJldHVybiByICE9PSAtMSAmJiB0aGlzLnN1YnNjcmliZXJzW2VdLnNwbGljZShyLCAxKSwgcztcbiAgICB9O1xuICAgIHRoaXMuc3Vic2NyaWJlcnNbZV0ucHVzaChvKTtcbiAgfVxuICAvKipcbiAgICogRW1pdCBjYWxsYmFja3Mgd2l0aCBwYXNzZWQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gZGF0YSAtIHN1YnNjcmliZXJzIGdldCB0aGlzIGRhdGEgd2hlbiB0aGV5IHdlcmUgZmlyZWRcbiAgICovXG4gIGVtaXQoZSwgdCkge1xuICAgIFYodGhpcy5zdWJzY3JpYmVycykgfHwgIXRoaXMuc3Vic2NyaWJlcnNbZV0gfHwgdGhpcy5zdWJzY3JpYmVyc1tlXS5yZWR1Y2UoKG8sIGkpID0+IHtcbiAgICAgIGNvbnN0IHMgPSBpKG8pO1xuICAgICAgcmV0dXJuIHMgIT09IHZvaWQgMCA/IHMgOiBvO1xuICAgIH0sIHQpO1xuICB9XG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBjYWxsYmFjayBmcm9tIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUgLSBldmVudCBuYW1lXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIG9mZihlLCB0KSB7XG4gICAgaWYgKHRoaXMuc3Vic2NyaWJlcnNbZV0gPT09IHZvaWQgMCkge1xuICAgICAgY29uc29sZS53YXJuKGBFdmVudERpc3BhdGNoZXIgLm9mZigpOiB0aGVyZSBpcyBubyBzdWJzY3JpYmVycyBmb3IgZXZlbnQgXCIke2UudG9TdHJpbmcoKX1cIi4gUHJvYmFibHksIC5vZmYoKSBjYWxsZWQgYmVmb3JlIC5vbigpYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IG8gPSAwOyBvIDwgdGhpcy5zdWJzY3JpYmVyc1tlXS5sZW5ndGg7IG8rKylcbiAgICAgIGlmICh0aGlzLnN1YnNjcmliZXJzW2VdW29dID09PSB0KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnN1YnNjcmliZXJzW2VdW29dO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuICAvKipcbiAgICogRGVzdHJveWVyXG4gICAqIGNsZWFycyBzdWJzY3JpYmVycyBsaXN0XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSB7fTtcbiAgfVxufVxuZnVuY3Rpb24gRyhuKSB7XG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCB7XG4gICAgLyoqXG4gICAgICogQmxvY2sgaWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IGlkKCkge1xuICAgICAgcmV0dXJuIG4uaWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUb29sIG5hbWVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICByZXR1cm4gbi5uYW1lO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVG9vbCBjb25maWcgcGFzc2VkIG9uIEVkaXRvcidzIGluaXRpYWxpemF0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VG9vbENvbmZpZ31cbiAgICAgKi9cbiAgICBnZXQgY29uZmlnKCkge1xuICAgICAgcmV0dXJuIG4uY29uZmlnO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogLmNlLWJsb2NrIGVsZW1lbnQsIHRoYXQgd3JhcHMgcGx1Z2luIGNvbnRlbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAgICovXG4gICAgZ2V0IGhvbGRlcigpIHtcbiAgICAgIHJldHVybiBuLmhvbGRlcjtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgQmxvY2sgY29udGVudCBpcyBlbXB0eVxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgICByZXR1cm4gbi5pc0VtcHR5O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBpcyBzZWxlY3RlZCB3aXRoIENyb3NzLUJsb2NrIHNlbGVjdGlvblxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IHNlbGVjdGVkKCkge1xuICAgICAgcmV0dXJuIG4uc2VsZWN0ZWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBTZXQgQmxvY2sncyBzdHJldGNoIHN0YXRlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIOKAlCBzdGF0ZSB0byBzZXRcbiAgICAgKi9cbiAgICBzZXQgc3RyZXRjaGVkKHQpIHtcbiAgICAgIG4uc3RyZXRjaGVkID0gdDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgQmxvY2sgaXMgc3RyZXRjaGVkXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgc3RyZXRjaGVkKCkge1xuICAgICAgcmV0dXJuIG4uc3RyZXRjaGVkO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBoYXMgaW5wdXRzIHRvIGJlIGZvY3VzZWRcbiAgICAgKi9cbiAgICBnZXQgZm9jdXNhYmxlKCkge1xuICAgICAgcmV0dXJuIG4uZm9jdXNhYmxlO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogQ2FsbCBUb29sIG1ldGhvZCB3aXRoIGVycm9ycyBoYW5kbGVyIHVuZGVyLXRoZS1ob29kXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSAtIG1ldGhvZCB0byBjYWxsXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtIC0gb2JqZWN0IHdpdGggcGFyYW1ldGVyc1xuICAgICAqIEByZXR1cm5zIHt1bmtub3dufVxuICAgICAqL1xuICAgIGNhbGwodCwgbykge1xuICAgICAgcmV0dXJuIG4uY2FsbCh0LCBvKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNhdmUgQmxvY2sgY29udGVudFxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZHxTYXZlZERhdGE+fVxuICAgICAqL1xuICAgIHNhdmUoKSB7XG4gICAgICByZXR1cm4gbi5zYXZlKCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBCbG9jayBkYXRhXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jsb2NrVG9vbERhdGF9IGRhdGEgLSBkYXRhIHRvIHZhbGlkYXRlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICovXG4gICAgdmFsaWRhdGUodCkge1xuICAgICAgcmV0dXJuIG4udmFsaWRhdGUodCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBBbGxvd3MgdG8gc2F5IEVkaXRvciB0aGF0IEJsb2NrIHdhcyBjaGFuZ2VkLiBVc2VkIHRvIG1hbnVhbGx5IHRyaWdnZXIgRWRpdG9yJ3MgJ29uQ2hhbmdlJyBjYWxsYmFja1xuICAgICAqIENhbiBiZSB1c2VmdWwgZm9yIGJsb2NrIGNoYW5nZXMgaW52aXNpYmxlIGZvciBlZGl0b3IgY29yZS5cbiAgICAgKi9cbiAgICBkaXNwYXRjaENoYW5nZSgpIHtcbiAgICAgIG4uZGlzcGF0Y2hDaGFuZ2UoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRvb2wgY291bGQgc3BlY2lmeSBzZXZlcmFsIGVudHJpZXMgdG8gYmUgZGlzcGxheWVkIGF0IHRoZSBUb29sYm94IChmb3IgZXhhbXBsZSwgXCJIZWFkaW5nIDFcIiwgXCJIZWFkaW5nIDJcIiwgXCJIZWFkaW5nIDNcIilcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbnRyeSB0aGF0IGlzIHJlbGF0ZWQgdG8gdGhlIEJsb2NrIChkZXBlbmRlZCBvbiB0aGUgQmxvY2sgZGF0YSlcbiAgICAgKi9cbiAgICBnZXRBY3RpdmVUb29sYm94RW50cnkoKSB7XG4gICAgICByZXR1cm4gbi5nZXRBY3RpdmVUb29sYm94RW50cnkoKTtcbiAgICB9XG4gIH0pO1xufVxuY2xhc3MgQ2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmFsbExpc3RlbmVycyA9IFtdO1xuICB9XG4gIC8qKlxuICAgKiBBc3NpZ25zIGV2ZW50IGxpc3RlbmVyIG9uIGVsZW1lbnQgYW5kIHJldHVybnMgdW5pcXVlIGlkZW50aWZpZXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxlbWVudCAtIERPTSBlbGVtZW50IHRoYXQgbmVlZHMgdG8gYmUgbGlzdGVuZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIG1ldGhvZCB0aGF0IHdpbGwgYmUgZmlyZWQgb24gZXZlbnRcbiAgICogQHBhcmFtIHtib29sZWFufEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zfSBvcHRpb25zIC0gdXNlQ2FwdHVyZSBvciB7Y2FwdHVyZSwgcGFzc2l2ZSwgb25jZX1cbiAgICovXG4gIG9uKGUsIHQsIG8sIGkgPSAhMSkge1xuICAgIGNvbnN0IHMgPSBBbyhcImxcIiksIHIgPSB7XG4gICAgICBpZDogcyxcbiAgICAgIGVsZW1lbnQ6IGUsXG4gICAgICBldmVudFR5cGU6IHQsXG4gICAgICBoYW5kbGVyOiBvLFxuICAgICAgb3B0aW9uczogaVxuICAgIH07XG4gICAgaWYgKCF0aGlzLmZpbmRPbmUoZSwgdCwgbykpXG4gICAgICByZXR1cm4gdGhpcy5hbGxMaXN0ZW5lcnMucHVzaChyKSwgZS5hZGRFdmVudExpc3RlbmVyKHQsIG8sIGkpLCBzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVyIGZyb20gZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gRE9NIGVsZW1lbnQgdGhhdCB3ZSByZW1vdmluZyBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gcmVtb3ZlIGhhbmRsZXIsIGlmIGVsZW1lbnQgbGlzdGVucyBzZXZlcmFsIGhhbmRsZXJzIG9uIHRoZSBzYW1lIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtib29sZWFufEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zfSBvcHRpb25zIC0gdXNlQ2FwdHVyZSBvciB7Y2FwdHVyZSwgcGFzc2l2ZSwgb25jZX1cbiAgICovXG4gIG9mZihlLCB0LCBvLCBpKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuZmluZEFsbChlLCB0LCBvKTtcbiAgICBzLmZvckVhY2goKHIsIGwpID0+IHtcbiAgICAgIGNvbnN0IGEgPSB0aGlzLmFsbExpc3RlbmVycy5pbmRleE9mKHNbbF0pO1xuICAgICAgYSA+IC0xICYmICh0aGlzLmFsbExpc3RlbmVycy5zcGxpY2UoYSwgMSksIHIuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHIuZXZlbnRUeXBlLCByLmhhbmRsZXIsIHIub3B0aW9ucykpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGxpc3RlbmVyIGJ5IGlkXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCAtIGxpc3RlbmVyIGlkZW50aWZpZXJcbiAgICovXG4gIG9mZkJ5SWQoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLmZpbmRCeUlkKGUpO1xuICAgIHQgJiYgdC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodC5ldmVudFR5cGUsIHQuaGFuZGxlciwgdC5vcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogRmluZHMgYW5kIHJldHVybnMgZmlyc3QgbGlzdGVuZXIgYnkgcGFzc2VkIHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gZXZlbnQgdGFyZ2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZXZlbnRUeXBlXSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2hhbmRsZXJdIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJucyB7TGlzdGVuZXJEYXRhfG51bGx9XG4gICAqL1xuICBmaW5kT25lKGUsIHQsIG8pIHtcbiAgICBjb25zdCBpID0gdGhpcy5maW5kQWxsKGUsIHQsIG8pO1xuICAgIHJldHVybiBpLmxlbmd0aCA+IDAgPyBpWzBdIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFsbCBzdG9yZWQgbGlzdGVuZXJzIGJ5IHBhc3NlZCBwYXJhbXNcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxlbWVudCAtIGV2ZW50IHRhcmdldFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJucyB7TGlzdGVuZXJEYXRhW119XG4gICAqL1xuICBmaW5kQWxsKGUsIHQsIG8pIHtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBzID0gZSA/IHRoaXMuZmluZEJ5RXZlbnRUYXJnZXQoZSkgOiBbXTtcbiAgICByZXR1cm4gZSAmJiB0ICYmIG8gPyBpID0gcy5maWx0ZXIoKHIpID0+IHIuZXZlbnRUeXBlID09PSB0ICYmIHIuaGFuZGxlciA9PT0gbykgOiBlICYmIHQgPyBpID0gcy5maWx0ZXIoKHIpID0+IHIuZXZlbnRUeXBlID09PSB0KSA6IGkgPSBzLCBpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnNcbiAgICovXG4gIHJlbW92ZUFsbCgpIHtcbiAgICB0aGlzLmFsbExpc3RlbmVycy5tYXAoKGUpID0+IHtcbiAgICAgIGUuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGUuZXZlbnRUeXBlLCBlLmhhbmRsZXIsIGUub3B0aW9ucyk7XG4gICAgfSksIHRoaXMuYWxsTGlzdGVuZXJzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBjbGVhbnVwIG9uIGRlc3RydWN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCBtZXRob2Q6IGxvb2tzIGZvciBsaXN0ZW5lciBieSBwYXNzZWQgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gc2VhcmNoaW5nIGVsZW1lbnRcbiAgICogQHJldHVybnMge0FycmF5fSBsaXN0ZW5lcnMgdGhhdCBmb3VuZCBvbiBlbGVtZW50XG4gICAqL1xuICBmaW5kQnlFdmVudFRhcmdldChlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigodCkgPT4ge1xuICAgICAgaWYgKHQuZWxlbWVudCA9PT0gZSlcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCBtZXRob2Q6IGxvb2tzIGZvciBsaXN0ZW5lciBieSBwYXNzZWQgZXZlbnQgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcmV0dXJucyB7TGlzdGVuZXJEYXRhW119IGxpc3RlbmVycyB0aGF0IGZvdW5kIG9uIGVsZW1lbnRcbiAgICovXG4gIGZpbmRCeVR5cGUoZSkge1xuICAgIHJldHVybiB0aGlzLmFsbExpc3RlbmVycy5maWx0ZXIoKHQpID0+IHtcbiAgICAgIGlmICh0LmV2ZW50VHlwZSA9PT0gZSlcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCBtZXRob2Q6IGxvb2tzIGZvciBsaXN0ZW5lciBieSBwYXNzZWQgaGFuZGxlclxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcmV0dXJucyB7TGlzdGVuZXJEYXRhW119IGxpc3RlbmVycyB0aGF0IGZvdW5kIG9uIGVsZW1lbnRcbiAgICovXG4gIGZpbmRCeUhhbmRsZXIoZSkge1xuICAgIHJldHVybiB0aGlzLmFsbExpc3RlbmVycy5maWx0ZXIoKHQpID0+IHtcbiAgICAgIGlmICh0LmhhbmRsZXIgPT09IGUpXG4gICAgICAgIHJldHVybiB0O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3RlbmVyIGRhdGEgZm91bmQgYnkgaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gbGlzdGVuZXIgaWRlbnRpZmllclxuICAgKiBAcmV0dXJucyB7TGlzdGVuZXJEYXRhfVxuICAgKi9cbiAgZmluZEJ5SWQoZSkge1xuICAgIHJldHVybiB0aGlzLmFsbExpc3RlbmVycy5maW5kKCh0KSA9PiB0LmlkID09PSBlKTtcbiAgfVxufVxuY2xhc3MgeSB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBNb2R1bGUgb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5jb25maWcgLSBNb2R1bGUgY29uZmlnXG4gICAqIEBwYXJhbSBvcHRpb25zLmV2ZW50c0Rpc3BhdGNoZXIgLSBDb21tb24gZXZlbnQgYnVzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogZSwgZXZlbnRzRGlzcGF0Y2hlcjogdCB9KSB7XG4gICAgaWYgKHRoaXMubm9kZXMgPSB7fSwgdGhpcy5saXN0ZW5lcnMgPSBuZXcgQ2UoKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEFzc2lnbnMgZXZlbnQgbGlzdGVuZXIgb24gRE9NIGVsZW1lbnQgYW5kIHB1c2hlcyBpbnRvIHNwZWNpYWwgYXJyYXkgdGhhdCBtaWdodCBiZSByZW1vdmVkXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxlbWVudCAtIERPTSBFbGVtZW50XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gRXZlbnQgbmFtZVxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciAtIEV2ZW50IGhhbmRsZXJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbnxBZGRFdmVudExpc3RlbmVyT3B0aW9uc30gb3B0aW9ucyAtIExpc3RlbmluZyBvcHRpb25zXG4gICAgICAgKi9cbiAgICAgIG9uOiAobywgaSwgcywgciA9ICExKSA9PiB7XG4gICAgICAgIHRoaXMubXV0YWJsZUxpc3RlbmVySWRzLnB1c2goXG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnMub24obywgaSwgcywgcilcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIENsZWFycyBhbGwgbXV0YWJsZSBsaXN0ZW5lcnNcbiAgICAgICAqL1xuICAgICAgY2xlYXJBbGw6ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBvIG9mIHRoaXMubXV0YWJsZUxpc3RlbmVySWRzKVxuICAgICAgICAgIHRoaXMubGlzdGVuZXJzLm9mZkJ5SWQobyk7XG4gICAgICAgIHRoaXMubXV0YWJsZUxpc3RlbmVySWRzID0gW107XG4gICAgICB9XG4gICAgfSwgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMgPSBbXSwgbmV3LnRhcmdldCA9PT0geSlcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDb25zdHJ1Y3RvcnMgZm9yIGFic3RyYWN0IGNsYXNzIE1vZHVsZSBhcmUgbm90IGFsbG93ZWQuXCIpO1xuICAgIHRoaXMuY29uZmlnID0gZSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyID0gdDtcbiAgfVxuICAvKipcbiAgICogRWRpdG9yIG1vZHVsZXMgc2V0dGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RWRpdG9yTW9kdWxlc30gRWRpdG9yIC0gRWRpdG9yJ3MgTW9kdWxlc1xuICAgKi9cbiAgc2V0IHN0YXRlKGUpIHtcbiAgICB0aGlzLkVkaXRvciA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBtZW1vcml6ZWQgbm9kZXNcbiAgICovXG4gIHJlbW92ZUFsbE5vZGVzKCkge1xuICAgIGZvciAoY29uc3QgZSBpbiB0aGlzLm5vZGVzKSB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5ub2Rlc1tlXTtcbiAgICAgIHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCAmJiB0LnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGN1cnJlbnQgZGlyZWN0aW9uIGlzIFJUTCAoUmlnaHQtVG8tTGVmdClcbiAgICovXG4gIGdldCBpc1J0bCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuaTE4bi5kaXJlY3Rpb24gPT09IFwicnRsXCI7XG4gIH1cbn1cbmNsYXNzIGIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmluc3RhbmNlID0gbnVsbCwgdGhpcy5zZWxlY3Rpb24gPSBudWxsLCB0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2UgPSBudWxsLCB0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkID0gITEsIHRoaXMuY29tbWFuZEJhY2tncm91bmQgPSBcImJhY2tDb2xvclwiLCB0aGlzLmNvbW1hbmRSZW1vdmVGb3JtYXQgPSBcInJlbW92ZUZvcm1hdFwiO1xuICB9XG4gIC8qKlxuICAgKiBFZGl0b3Igc3R5bGVzXG4gICAqXG4gICAqIEByZXR1cm5zIHt7ZWRpdG9yV3JhcHBlcjogc3RyaW5nLCBlZGl0b3Jab25lOiBzdHJpbmd9fVxuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRvcldyYXBwZXI6IFwiY29kZXgtZWRpdG9yXCIsXG4gICAgICBlZGl0b3Jab25lOiBcImNvZGV4LWVkaXRvcl9fcmVkYWN0b3JcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VsZWN0ZWQgYW5jaG9yXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvU2VsZWN0aW9uL2FuY2hvck5vZGV9XG4gICAqXG4gICAqIEByZXR1cm5zIHtOb2RlfG51bGx9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGFuY2hvck5vZGUoKSB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gZSA/IGUuYW5jaG9yTm9kZSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VsZWN0ZWQgYW5jaG9yIGVsZW1lbnRcbiAgICpcbiAgICogQHJldHVybnMge0VsZW1lbnR8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgYW5jaG9yRWxlbWVudCgpIHtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghZSlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHQgPSBlLmFuY2hvck5vZGU7XG4gICAgcmV0dXJuIHQgPyBkLmlzRWxlbWVudCh0KSA/IHQgOiB0LnBhcmVudEVsZW1lbnQgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHNlbGVjdGlvbiBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBhbmNob3Igbm9kZVxuICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvcnUvZG9jcy9XZWIvQVBJL1NlbGVjdGlvbi9hbmNob3JPZmZzZXR9XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgYW5jaG9yT2Zmc2V0KCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIGUgPyBlLmFuY2hvck9mZnNldCA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIElzIGN1cnJlbnQgc2VsZWN0aW9uIHJhbmdlIGNvbGxhcHNlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBpc0NvbGxhcHNlZCgpIHtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiBlID8gZS5pc0NvbGxhcHNlZCA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGN1cnJlbnQgc2VsZWN0aW9uIGlmIGl0IGlzIGF0IEVkaXRvcidzIHpvbmVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzQXRFZGl0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTZWxlY3Rpb25BdEVkaXRvcihiLmdldCgpKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFzc2VkIHNlbGVjdGlvbiBpcyBhdCBFZGl0b3IncyB6b25lXG4gICAqXG4gICAqIEBwYXJhbSBzZWxlY3Rpb24gLSBTZWxlY3Rpb24gb2JqZWN0IHRvIGNoZWNrXG4gICAqL1xuICBzdGF0aWMgaXNTZWxlY3Rpb25BdEVkaXRvcihlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuICExO1xuICAgIGxldCB0ID0gZS5hbmNob3JOb2RlIHx8IGUuZm9jdXNOb2RlO1xuICAgIHQgJiYgdC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgKHQgPSB0LnBhcmVudE5vZGUpO1xuICAgIGxldCBvID0gbnVsbDtcbiAgICByZXR1cm4gdCAmJiB0IGluc3RhbmNlb2YgRWxlbWVudCAmJiAobyA9IHQuY2xvc2VzdChgLiR7Yi5DU1MuZWRpdG9yWm9uZX1gKSksIG8gPyBvLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgcmFuZ2UgYXQgRWRpdG9yIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHJhbmdlIC0gcmFuZ2UgdG8gY2hlY2tcbiAgICovXG4gIHN0YXRpYyBpc1JhbmdlQXRFZGl0b3IoZSkge1xuICAgIGlmICghZSlcbiAgICAgIHJldHVybjtcbiAgICBsZXQgdCA9IGUuc3RhcnRDb250YWluZXI7XG4gICAgdCAmJiB0Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiAodCA9IHQucGFyZW50Tm9kZSk7XG4gICAgbGV0IG8gPSBudWxsO1xuICAgIHJldHVybiB0ICYmIHQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIChvID0gdC5jbG9zZXN0KGAuJHtiLkNTUy5lZGl0b3Jab25lfWApKSwgbyA/IG8ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIE1ldGhvZHMgcmV0dXJuIGJvb2xlYW4gdGhhdCB0cnVlIGlmIHNlbGVjdGlvbiBleGlzdHMgb24gdGhlIHBhZ2VcbiAgICovXG4gIHN0YXRpYyBnZXQgaXNTZWxlY3Rpb25FeGlzdHMoKSB7XG4gICAgcmV0dXJuICEhYi5nZXQoKS5hbmNob3JOb2RlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gZmlyc3QgcmFuZ2VcbiAgICpcbiAgICogQHJldHVybnMge1JhbmdlfG51bGx9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHJhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLmdldFJhbmdlRnJvbVNlbGVjdGlvbih0aGlzLmdldCgpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyByYW5nZSBmcm9tIHBhc3NlZCBTZWxlY3Rpb24gb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSBzZWxlY3Rpb24gLSBTZWxlY3Rpb24gb2JqZWN0IHRvIGdldCBSYW5nZSBmcm9tXG4gICAqL1xuICBzdGF0aWMgZ2V0UmFuZ2VGcm9tU2VsZWN0aW9uKGUpIHtcbiAgICByZXR1cm4gZSAmJiBlLnJhbmdlQ291bnQgPyBlLmdldFJhbmdlQXQoMCkgOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHBvc2l0aW9uIGFuZCBzaXplIG9mIHNlbGVjdGVkIHRleHRcbiAgICpcbiAgICogQHJldHVybnMge0RPTVJlY3QgfCBDbGllbnRSZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCByZWN0KCkge1xuICAgIGxldCBlID0gZG9jdW1lbnQuc2VsZWN0aW9uLCB0LCBvID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgaWYgKGUgJiYgZS50eXBlICE9PSBcIkNvbnRyb2xcIilcbiAgICAgIHJldHVybiBlID0gZSwgdCA9IGUuY3JlYXRlUmFuZ2UoKSwgby54ID0gdC5ib3VuZGluZ0xlZnQsIG8ueSA9IHQuYm91bmRpbmdUb3AsIG8ud2lkdGggPSB0LmJvdW5kaW5nV2lkdGgsIG8uaGVpZ2h0ID0gdC5ib3VuZGluZ0hlaWdodCwgbztcbiAgICBpZiAoIXdpbmRvdy5nZXRTZWxlY3Rpb24pXG4gICAgICByZXR1cm4gSShcIk1ldGhvZCB3aW5kb3cuZ2V0U2VsZWN0aW9uIGlzIG5vdCBzdXBwb3J0ZWRcIiwgXCJ3YXJuXCIpLCBvO1xuICAgIGlmIChlID0gd2luZG93LmdldFNlbGVjdGlvbigpLCBlLnJhbmdlQ291bnQgPT09IG51bGwgfHwgaXNOYU4oZS5yYW5nZUNvdW50KSlcbiAgICAgIHJldHVybiBJKFwiTWV0aG9kIFNlbGVjdGlvblV0aWxzLnJhbmdlQ291bnQgaXMgbm90IHN1cHBvcnRlZFwiLCBcIndhcm5cIiksIG87XG4gICAgaWYgKGUucmFuZ2VDb3VudCA9PT0gMClcbiAgICAgIHJldHVybiBvO1xuICAgIGlmICh0ID0gZS5nZXRSYW5nZUF0KDApLmNsb25lUmFuZ2UoKSwgdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgJiYgKG8gPSB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSwgby54ID09PSAwICYmIG8ueSA9PT0gMCkge1xuICAgICAgY29uc3QgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgaWYgKGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KSB7XG4gICAgICAgIGkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCLigItcIikpLCB0Lmluc2VydE5vZGUoaSksIG8gPSBpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBzID0gaS5wYXJlbnROb2RlO1xuICAgICAgICBzLnJlbW92ZUNoaWxkKGkpLCBzLm5vcm1hbGl6ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzZWxlY3RlZCB0ZXh0IGFzIFN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGdldCB0ZXh0KCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0U2VsZWN0aW9uID8gd2luZG93LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkgOiBcIlwiO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdpbmRvdyBTZWxlY3Rpb25VdGlsc1xuICAgKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvcnUvZG9jcy9XZWIvQVBJL1dpbmRvdy9nZXRTZWxlY3Rpb259XG4gICAqXG4gICAqIEByZXR1cm5zIHtTZWxlY3Rpb259XG4gICAqL1xuICBzdGF0aWMgZ2V0KCkge1xuICAgIHJldHVybiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBmb2N1cyB0byBjb250ZW50ZWRpdGFibGUgb3IgbmF0aXZlIGlucHV0IGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnQgLSBlbGVtZW50IHdoZXJlIHRvIHNldCBmb2N1c1xuICAgKiBAcGFyYW0gb2Zmc2V0IC0gb2Zmc2V0IG9mIGN1cnNvclxuICAgKi9cbiAgc3RhdGljIHNldEN1cnNvcihlLCB0ID0gMCkge1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLCBpID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiBkLmlzTmF0aXZlSW5wdXQoZSkgPyBkLmNhblNldENhcmV0KGUpID8gKGUuZm9jdXMoKSwgZS5zZWxlY3Rpb25TdGFydCA9IGUuc2VsZWN0aW9uRW5kID0gdCwgZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkgOiB2b2lkIDAgOiAoby5zZXRTdGFydChlLCB0KSwgby5zZXRFbmQoZSwgdCksIGkucmVtb3ZlQWxsUmFuZ2VzKCksIGkuYWRkUmFuZ2UobyksIG8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50IHJhbmdlIGV4aXN0cyBhbmQgYmVsb25ncyB0byBjb250YWluZXJcbiAgICpcbiAgICogQHBhcmFtIGNvbnRhaW5lciAtIHdoZXJlIHJhbmdlIHNob3VsZCBiZVxuICAgKi9cbiAgc3RhdGljIGlzUmFuZ2VJbnNpZGVDb250YWluZXIoZSkge1xuICAgIGNvbnN0IHQgPSBiLnJhbmdlO1xuICAgIHJldHVybiB0ID09PSBudWxsID8gITEgOiBlLmNvbnRhaW5zKHQuc3RhcnRDb250YWluZXIpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGZha2UgY3Vyc29yIHRvIHRoZSBjdXJyZW50IHJhbmdlXG4gICAqL1xuICBzdGF0aWMgYWRkRmFrZUN1cnNvcigpIHtcbiAgICBjb25zdCBlID0gYi5yYW5nZTtcbiAgICBpZiAoZSA9PT0gbnVsbClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwic3BhblwiLCBcImNvZGV4LWVkaXRvcl9fZmFrZS1jdXJzb3JcIik7XG4gICAgdC5kYXRhc2V0Lm11dGF0aW9uRnJlZSA9IFwidHJ1ZVwiLCBlLmNvbGxhcHNlKCksIGUuaW5zZXJ0Tm9kZSh0KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFzc2VkIGVsZW1lbnQgY29udGFpbnMgYSBmYWtlIGN1cnNvclxuICAgKlxuICAgKiBAcGFyYW0gZWwgLSB3aGVyZSB0byBjaGVja1xuICAgKi9cbiAgc3RhdGljIGlzRmFrZUN1cnNvckluc2lkZUNvbnRhaW5lcihlKSB7XG4gICAgcmV0dXJuIGQuZmluZChlLCBcIi5jb2RleC1lZGl0b3JfX2Zha2UtY3Vyc29yXCIpICE9PSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGZha2UgY3Vyc29yIGZyb20gYSBjb250YWluZXJcbiAgICpcbiAgICogQHBhcmFtIGNvbnRhaW5lciAtIGNvbnRhaW5lciB0byBsb29rIGZvclxuICAgKi9cbiAgc3RhdGljIHJlbW92ZUZha2VDdXJzb3IoZSA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICBjb25zdCB0ID0gZC5maW5kKGUsIFwiLmNvZGV4LWVkaXRvcl9fZmFrZS1jdXJzb3JcIik7XG4gICAgdCAmJiB0LnJlbW92ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGZha2UgYmFja2dyb3VuZFxuICAgKi9cbiAgcmVtb3ZlRmFrZUJhY2tncm91bmQoKSB7XG4gICAgdGhpcy5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZCAmJiAodGhpcy5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZCA9ICExLCBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRSZW1vdmVGb3JtYXQpKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBmYWtlIGJhY2tncm91bmRcbiAgICovXG4gIHNldEZha2VCYWNrZ3JvdW5kKCkge1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZEJhY2tncm91bmQsICExLCBcIiNhOGQ2ZmZcIiksIHRoaXMuaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQgPSAhMDtcbiAgfVxuICAvKipcbiAgICogU2F2ZSBTZWxlY3Rpb25VdGlscydzIHJhbmdlXG4gICAqL1xuICBzYXZlKCkge1xuICAgIHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSA9IGIucmFuZ2U7XG4gIH1cbiAgLyoqXG4gICAqIFJlc3RvcmUgc2F2ZWQgU2VsZWN0aW9uVXRpbHMncyByYW5nZVxuICAgKi9cbiAgcmVzdG9yZSgpIHtcbiAgICBpZiAoIXRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIGUucmVtb3ZlQWxsUmFuZ2VzKCksIGUuYWRkUmFuZ2UodGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHNhdmVkIHNlbGVjdGlvblxuICAgKi9cbiAgY2xlYXJTYXZlZCgpIHtcbiAgICB0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2UgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDb2xsYXBzZSBjdXJyZW50IHNlbGVjdGlvblxuICAgKi9cbiAgY29sbGFwc2VUb0VuZCgpIHtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpLCB0ID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICB0LnNlbGVjdE5vZGVDb250ZW50cyhlLmZvY3VzTm9kZSksIHQuY29sbGFwc2UoITEpLCBlLnJlbW92ZUFsbFJhbmdlcygpLCBlLmFkZFJhbmdlKHQpO1xuICB9XG4gIC8qKlxuICAgKiBMb29rcyBhaGVhZCB0byBmaW5kIHBhc3NlZCB0YWcgZnJvbSBjdXJyZW50IHNlbGVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRhZ05hbWUgICAgICAgLSB0YWcgdG8gZm91bmRcbiAgICogQHBhcmFtICB7c3RyaW5nfSBbY2xhc3NOYW1lXSAgIC0gdGFnJ3MgY2xhc3MgbmFtZVxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IFtzZWFyY2hEZXB0aF0gLSBjb3VudCBvZiB0YWdzIHRoYXQgY2FuIGJlIGluY2x1ZGVkLiBGb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH1cbiAgICovXG4gIGZpbmRQYXJlbnRUYWcoZSwgdCwgbyA9IDEwKSB7XG4gICAgY29uc3QgaSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICBsZXQgcyA9IG51bGw7XG4gICAgcmV0dXJuICFpIHx8ICFpLmFuY2hvck5vZGUgfHwgIWkuZm9jdXNOb2RlID8gbnVsbCA6IChbXG4gICAgICAvKiogdGhlIE5vZGUgaW4gd2hpY2ggdGhlIHNlbGVjdGlvbiBiZWdpbnMgKi9cbiAgICAgIGkuYW5jaG9yTm9kZSxcbiAgICAgIC8qKiB0aGUgTm9kZSBpbiB3aGljaCB0aGUgc2VsZWN0aW9uIGVuZHMgKi9cbiAgICAgIGkuZm9jdXNOb2RlXG4gICAgXS5mb3JFYWNoKChsKSA9PiB7XG4gICAgICBsZXQgYSA9IG87XG4gICAgICBmb3IgKDsgYSA+IDAgJiYgbC5wYXJlbnROb2RlICYmICEobC50YWdOYW1lID09PSBlICYmIChzID0gbCwgdCAmJiBsLmNsYXNzTGlzdCAmJiAhbC5jbGFzc0xpc3QuY29udGFpbnModCkgJiYgKHMgPSBudWxsKSwgcykpOyApXG4gICAgICAgIGwgPSBsLnBhcmVudE5vZGUsIGEtLTtcbiAgICB9KSwgcyk7XG4gIH1cbiAgLyoqXG4gICAqIEV4cGFuZHMgc2VsZWN0aW9uIHJhbmdlIHRvIHRoZSBwYXNzZWQgcGFyZW50IG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgd2hpY2ggY29udGVudHMgc2hvdWxkIGJlIHNlbGVjdGVkXG4gICAqL1xuICBleHBhbmRUb1RhZyhlKSB7XG4gICAgY29uc3QgdCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICB0LnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIG8uc2VsZWN0Tm9kZUNvbnRlbnRzKGUpLCB0LmFkZFJhbmdlKG8pO1xuICB9XG59XG5mdW5jdGlvbiBGbyhuLCBlKSB7XG4gIGNvbnN0IHsgdHlwZTogdCwgdGFyZ2V0OiBvLCBhZGRlZE5vZGVzOiBpLCByZW1vdmVkTm9kZXM6IHMgfSA9IG47XG4gIHJldHVybiBuLnR5cGUgPT09IFwiYXR0cmlidXRlc1wiICYmIG4uYXR0cmlidXRlTmFtZSA9PT0gXCJkYXRhLWVtcHR5XCIgPyAhMSA6ICEhKGUuY29udGFpbnMobykgfHwgdCA9PT0gXCJjaGlsZExpc3RcIiAmJiAoQXJyYXkuZnJvbShpKS5zb21lKChhKSA9PiBhID09PSBlKSB8fCBBcnJheS5mcm9tKHMpLnNvbWUoKGEpID0+IGEgPT09IGUpKSk7XG59XG5jb25zdCBKZSA9IFwicmVkYWN0b3IgZG9tIGNoYW5nZWRcIiwgUHQgPSBcImJsb2NrIGNoYW5nZWRcIiwgRHQgPSBcImZha2UgY3Vyc29yIGlzIGFib3V0IHRvIGJlIHRvZ2dsZWRcIiwgUnQgPSBcImZha2UgY3Vyc29yIGhhdmUgYmVlbiBzZXRcIiwgeWUgPSBcImVkaXRvciBtb2JpbGUgbGF5b3V0IHRvZ2dsZWRcIjtcbmZ1bmN0aW9uIEZ0KG4sIGUpIHtcbiAgaWYgKCFuLmNvbnZlcnNpb25Db25maWcpXG4gICAgcmV0dXJuICExO1xuICBjb25zdCB0ID0gbi5jb252ZXJzaW9uQ29uZmlnW2VdO1xuICByZXR1cm4gTyh0KSB8fCBRKHQpO1xufVxuZnVuY3Rpb24gX2UobiwgZSkge1xuICByZXR1cm4gRnQobi50b29sLCBlKTtcbn1cbmZ1bmN0aW9uIEh0KG4sIGUpIHtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG4pLnNvbWUoKFt0LCBvXSkgPT4gZVt0XSAmJiBPbyhlW3RdLCBvKSk7XG59XG5hc3luYyBmdW5jdGlvbiB6dChuLCBlKSB7XG4gIGNvbnN0IG8gPSAoYXdhaXQgbi5zYXZlKCkpLmRhdGE7XG4gIHJldHVybiBlLnJlZHVjZSgoaSwgcykgPT4ge1xuICAgIGlmICghRnQocywgXCJpbXBvcnRcIikpXG4gICAgICByZXR1cm4gaTtcbiAgICBjb25zdCByID0gcy50b29sYm94LmZpbHRlcigobCkgPT4ge1xuICAgICAgaWYgKFYobCkgfHwgIWwuaWNvbilcbiAgICAgICAgcmV0dXJuICExO1xuICAgICAgaWYgKGwuZGF0YSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmIChIdChsLmRhdGEsIG8pKVxuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgIH0gZWxzZSBpZiAocy5uYW1lID09PSBuLm5hbWUpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIHJldHVybiAhMDtcbiAgICB9KTtcbiAgICByZXR1cm4gaS5wdXNoKHtcbiAgICAgIC4uLnMsXG4gICAgICB0b29sYm94OiByXG4gICAgfSksIGk7XG4gIH0sIFtdKTtcbn1cbmZ1bmN0aW9uIHZ0KG4sIGUpIHtcbiAgcmV0dXJuIG4ubWVyZ2VhYmxlID8gbi5uYW1lID09PSBlLm5hbWUgPyAhMCA6IF9lKGUsIFwiZXhwb3J0XCIpICYmIF9lKG4sIFwiaW1wb3J0XCIpIDogITE7XG59XG5mdW5jdGlvbiBIbyhuLCBlKSB7XG4gIGNvbnN0IHQgPSBlID09IG51bGwgPyB2b2lkIDAgOiBlLmV4cG9ydDtcbiAgcmV0dXJuIE8odCkgPyB0KG4pIDogUSh0KSA/IG5bdF0gOiAodCAhPT0gdm9pZCAwICYmIEkoXCJDb252ZXJzaW9uIMKrZXhwb3J0wrsgcHJvcGVydHkgbXVzdCBiZSBhIHN0cmluZyBvciBmdW5jdGlvbi4gU3RyaW5nIG1lYW5zIGtleSBvZiBzYXZlZCBkYXRhIG9iamVjdCB0byBleHBvcnQuIEZ1bmN0aW9uIHNob3VsZCBleHBvcnQgcHJvY2Vzc2VkIHN0cmluZyB0byBleHBvcnQuXCIpLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHd0KG4sIGUpIHtcbiAgY29uc3QgdCA9IGUgPT0gbnVsbCA/IHZvaWQgMCA6IGUuaW1wb3J0O1xuICByZXR1cm4gTyh0KSA/IHQobikgOiBRKHQpID8ge1xuICAgIFt0XTogblxuICB9IDogKHQgIT09IHZvaWQgMCAmJiBJKFwiQ29udmVyc2lvbiDCq2ltcG9ydMK7IHByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24uIFN0cmluZyBtZWFucyBrZXkgb2YgdG9vbCBkYXRhIHRvIGltcG9ydC4gRnVuY3Rpb24gYWNjZXB0cyBhIGltcG9ydGVkIHN0cmluZyBhbmQgcmV0dXJuIGNvbXBvc2VkIHRvb2wgZGF0YS5cIiksIHt9KTtcbn1cbnZhciBBID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uRGVmYXVsdCA9IFwiZGVmYXVsdFwiLCBuLlNlcGFyYXRvciA9IFwic2VwYXJhdG9yXCIsIG4uSHRtbCA9IFwiaHRtbFwiLCBuKSkoQSB8fCB7fSksIEogPSAvKiBAX19QVVJFX18gKi8gKChuKSA9PiAobi5BUFBFTkRfQ0FMTEJBQ0sgPSBcImFwcGVuZENhbGxiYWNrXCIsIG4uUkVOREVSRUQgPSBcInJlbmRlcmVkXCIsIG4uTU9WRUQgPSBcIm1vdmVkXCIsIG4uVVBEQVRFRCA9IFwidXBkYXRlZFwiLCBuLlJFTU9WRUQgPSBcInJlbW92ZWRcIiwgbi5PTl9QQVNURSA9IFwib25QYXN0ZVwiLCBuKSkoSiB8fCB7fSk7XG5jbGFzcyBEIGV4dGVuZHMgVGUge1xuICAvKipcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBibG9jayBjb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqIEBwYXJhbSBbb3B0aW9ucy5pZF0gLSBibG9jaydzIGlkLiBXaWxsIGJlIGdlbmVyYXRlZCBpZiBvbWl0dGVkLlxuICAgKiBAcGFyYW0gb3B0aW9ucy5kYXRhIC0gVG9vbCdzIGluaXRpYWwgZGF0YVxuICAgKiBAcGFyYW0gb3B0aW9ucy50b29sIOKAlCBibG9jaydzIHRvb2xcbiAgICogQHBhcmFtIG9wdGlvbnMuYXBpIC0gRWRpdG9yIEFQSSBtb2R1bGUgZm9yIHBhc3MgaXQgdG8gdGhlIEJsb2NrIFR1bmVzXG4gICAqIEBwYXJhbSBvcHRpb25zLnJlYWRPbmx5IC0gUmVhZC1Pbmx5IGZsYWdcbiAgICogQHBhcmFtIFtldmVudEJ1c10gLSBFZGl0b3IgY29tbW9uIGV2ZW50IGJ1cy4gQWxsb3dzIHRvIHN1YnNjcmliZSBvbiBzb21lIEVkaXRvciBldmVudHMuIENvdWxkIGJlIG9taXR0ZWQgd2hlbiBcInZpcnR1YWxcIiBCbG9jayBpcyBjcmVhdGVkLiBTZWUgQmxvY2tzQVBJQGNvbXBvc2VCbG9ja0RhdGEuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgaWQ6IGUgPSBJbygpLFxuICAgIGRhdGE6IHQsXG4gICAgdG9vbDogbyxcbiAgICByZWFkT25seTogaSxcbiAgICB0dW5lc0RhdGE6IHNcbiAgfSwgcikge1xuICAgIHN1cGVyKCksIHRoaXMuY2FjaGVkSW5wdXRzID0gW10sIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCA9IG51bGwsIHRoaXMudHVuZXNJbnN0YW5jZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCB0aGlzLmRlZmF1bHRUdW5lc0luc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHRoaXMudW5hdmFpbGFibGVUdW5lc0RhdGEgPSB7fSwgdGhpcy5pbnB1dEluZGV4ID0gMCwgdGhpcy5lZGl0b3JFdmVudEJ1cyA9IG51bGwsIHRoaXMuaGFuZGxlRm9jdXMgPSAoKSA9PiB7XG4gICAgICB0aGlzLmRyb3BJbnB1dHNDYWNoZSgpLCB0aGlzLnVwZGF0ZUN1cnJlbnRJbnB1dCgpO1xuICAgIH0sIHRoaXMuZGlkTXV0YXRlZCA9IChsID0gdm9pZCAwKSA9PiB7XG4gICAgICBjb25zdCBhID0gbCA9PT0gdm9pZCAwLCBjID0gbCBpbnN0YW5jZW9mIElucHV0RXZlbnQ7XG4gICAgICAhYSAmJiAhYyAmJiB0aGlzLmRldGVjdFRvb2xSb290Q2hhbmdlKGwpO1xuICAgICAgbGV0IHU7XG4gICAgICBhIHx8IGMgPyB1ID0gITAgOiB1ID0gIShsLmxlbmd0aCA+IDAgJiYgbC5ldmVyeSgocCkgPT4ge1xuICAgICAgICBjb25zdCB7IGFkZGVkTm9kZXM6IGcsIHJlbW92ZWROb2RlczogZiwgdGFyZ2V0OiBrIH0gPSBwO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIC4uLkFycmF5LmZyb20oZyksXG4gICAgICAgICAgLi4uQXJyYXkuZnJvbShmKSxcbiAgICAgICAgICBrXG4gICAgICAgIF0uc29tZSgoUykgPT4gKGQuaXNFbGVtZW50KFMpIHx8IChTID0gUy5wYXJlbnRFbGVtZW50KSwgUyAmJiBTLmNsb3Nlc3QoJ1tkYXRhLW11dGF0aW9uLWZyZWU9XCJ0cnVlXCJdJykgIT09IG51bGwpKTtcbiAgICAgIH0pKSwgdSAmJiAodGhpcy5kcm9wSW5wdXRzQ2FjaGUoKSwgdGhpcy51cGRhdGVDdXJyZW50SW5wdXQoKSwgdGhpcy50b2dnbGVJbnB1dHNFbXB0eU1hcmsoKSwgdGhpcy5jYWxsKFxuICAgICAgICBcInVwZGF0ZWRcIlxuICAgICAgICAvKiBVUERBVEVEICovXG4gICAgICApLCB0aGlzLmVtaXQoXCJkaWRNdXRhdGVkXCIsIHRoaXMpKTtcbiAgICB9LCB0aGlzLm5hbWUgPSBvLm5hbWUsIHRoaXMuaWQgPSBlLCB0aGlzLnNldHRpbmdzID0gby5zZXR0aW5ncywgdGhpcy5jb25maWcgPSBvLnNldHRpbmdzLmNvbmZpZyB8fCB7fSwgdGhpcy5lZGl0b3JFdmVudEJ1cyA9IHIgfHwgbnVsbCwgdGhpcy5ibG9ja0FQSSA9IG5ldyBHKHRoaXMpLCB0aGlzLnRvb2wgPSBvLCB0aGlzLnRvb2xJbnN0YW5jZSA9IG8uY3JlYXRlKHQsIHRoaXMuYmxvY2tBUEksIGkpLCB0aGlzLnR1bmVzID0gby50dW5lcywgdGhpcy5jb21wb3NlVHVuZXMocyksIHRoaXMuaG9sZGVyID0gdGhpcy5jb21wb3NlKCksIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMud2F0Y2hCbG9ja011dGF0aW9ucygpLCB0aGlzLmFkZElucHV0RXZlbnRzKCksIHRoaXMudG9nZ2xlSW5wdXRzRW1wdHlNYXJrKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENTUyBjbGFzc2VzIGZvciB0aGUgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge3t3cmFwcGVyOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JhcHBlcjogXCJjZS1ibG9ja1wiLFxuICAgICAgd3JhcHBlclN0cmV0Y2hlZDogXCJjZS1ibG9jay0tc3RyZXRjaGVkXCIsXG4gICAgICBjb250ZW50OiBcImNlLWJsb2NrX19jb250ZW50XCIsXG4gICAgICBzZWxlY3RlZDogXCJjZS1ibG9jay0tc2VsZWN0ZWRcIixcbiAgICAgIGRyb3BUYXJnZXQ6IFwiY2UtYmxvY2stLWRyb3AtdGFyZ2V0XCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGFuZCByZXR1cm4gYWxsIGVkaXRhYmxlIGVsZW1lbnRzIChjb250ZW50ZWRpdGFibGUgYW5kIG5hdGl2ZSBpbnB1dHMpIGluIHRoZSBUb29sIEhUTUxcbiAgICovXG4gIGdldCBpbnB1dHMoKSB7XG4gICAgaWYgKHRoaXMuY2FjaGVkSW5wdXRzLmxlbmd0aCAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlZElucHV0cztcbiAgICBjb25zdCBlID0gZC5maW5kQWxsSW5wdXRzKHRoaXMuaG9sZGVyKTtcbiAgICByZXR1cm4gdGhpcy5pbnB1dEluZGV4ID4gZS5sZW5ndGggLSAxICYmICh0aGlzLmlucHV0SW5kZXggPSBlLmxlbmd0aCAtIDEpLCB0aGlzLmNhY2hlZElucHV0cyA9IGUsIGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBjdXJyZW50IFRvb2xgcyBpbnB1dFxuICAgKiBJZiBCbG9jayBkb2Vzbid0IGNvbnRhaW4gaW5wdXRzLCByZXR1cm4gdW5kZWZpbmVkXG4gICAqL1xuICBnZXQgY3VycmVudElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1t0aGlzLmlucHV0SW5kZXhdO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgaW5wdXQgaW5kZXggdG8gdGhlIHBhc3NlZCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IC0gSFRNTCBFbGVtZW50IHRvIHNldCBhcyBjdXJyZW50IGlucHV0XG4gICAqL1xuICBzZXQgY3VycmVudElucHV0KGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5pbnB1dHMuZmluZEluZGV4KChvKSA9PiBvID09PSBlIHx8IG8uY29udGFpbnMoZSkpO1xuICAgIHQgIT09IC0xICYmICh0aGlzLmlucHV0SW5kZXggPSB0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IFRvb2xgcyBpbnB1dFxuICAgKiBJZiBCbG9jayBkb2Vzbid0IGNvbnRhaW4gaW5wdXRzLCByZXR1cm4gdW5kZWZpbmVkXG4gICAqL1xuICBnZXQgZmlyc3RJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNbMF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCBUb29sYHMgaW5wdXRcbiAgICogSWYgQmxvY2sgZG9lc24ndCBjb250YWluIGlucHV0cywgcmV0dXJuIHVuZGVmaW5lZFxuICAgKi9cbiAgZ2V0IGxhc3RJbnB1dCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5pbnB1dHM7XG4gICAgcmV0dXJuIGVbZS5sZW5ndGggLSAxXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIG5leHQgVG9vbGBzIGlucHV0IG9yIHVuZGVmaW5lZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAqIElmIEJsb2NrIGRvZXNuJ3QgY29udGFpbiBpbnB1dHMsIHJldHVybiB1bmRlZmluZWRcbiAgICovXG4gIGdldCBuZXh0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleCArIDFdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gcHJldmlvdXMgVG9vbGBzIGlucHV0IG9yIHVuZGVmaW5lZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAqIElmIEJsb2NrIGRvZXNuJ3QgY29udGFpbiBpbnB1dHMsIHJldHVybiB1bmRlZmluZWRcbiAgICovXG4gIGdldCBwcmV2aW91c0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1t0aGlzLmlucHV0SW5kZXggLSAxXTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrJ3MgSlNPTiBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlKCkudGhlbigoZSkgPT4gZSAmJiAhVihlLmRhdGEpID8gZS5kYXRhIDoge30pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRvb2wncyBzYW5pdGl6ZXIgY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbC5zYW5pdGl6ZUNvbmZpZztcbiAgfVxuICAvKipcbiAgICogaXMgYmxvY2sgbWVyZ2VhYmxlXG4gICAqIFdlIHBsdWdpbiBoYXZlIG1lcmdlIGZ1bmN0aW9uIHRoZW4gd2UgY2FsbCBpdCBtZXJnZWFibGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgbWVyZ2VhYmxlKCkge1xuICAgIHJldHVybiBPKHRoaXMudG9vbEluc3RhbmNlLm1lcmdlKTtcbiAgfVxuICAvKipcbiAgICogSWYgQmxvY2sgY29udGFpbnMgaW5wdXRzLCBpdCBpcyBmb2N1c2FibGVcbiAgICovXG4gIGdldCBmb2N1c2FibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzLmxlbmd0aCAhPT0gMDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgYmxvY2sgZm9yIGVtcHRpbmVzc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc0VtcHR5KCkge1xuICAgIGNvbnN0IGUgPSBkLmlzRW1wdHkodGhpcy5wbHVnaW5zQ29udGVudCwgXCIvXCIpLCB0ID0gIXRoaXMuaGFzTWVkaWE7XG4gICAgcmV0dXJuIGUgJiYgdDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYmxvY2sgaGFzIGEgbWVkaWEgY29udGVudCBzdWNoIGFzIGltYWdlcywgaWZyYW1lIGFuZCBvdGhlclxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBoYXNNZWRpYSgpIHtcbiAgICBjb25zdCBlID0gW1xuICAgICAgXCJpbWdcIixcbiAgICAgIFwiaWZyYW1lXCIsXG4gICAgICBcInZpZGVvXCIsXG4gICAgICBcImF1ZGlvXCIsXG4gICAgICBcInNvdXJjZVwiLFxuICAgICAgXCJpbnB1dFwiLFxuICAgICAgXCJ0ZXh0YXJlYVwiLFxuICAgICAgXCJ0d2l0dGVyd2lkZ2V0XCJcbiAgICBdO1xuICAgIHJldHVybiAhIXRoaXMuaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoZS5qb2luKFwiLFwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RlZCBzdGF0ZVxuICAgKiBXZSBkb24ndCBuZWVkIHRvIG1hcmsgQmxvY2sgYXMgU2VsZWN0ZWQgd2hlbiBpdCBpcyBlbXB0eVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gJ3RydWUnIHRvIHNlbGVjdCwgJ2ZhbHNlJyB0byByZW1vdmUgc2VsZWN0aW9uXG4gICAqL1xuICBzZXQgc2VsZWN0ZWQoZSkge1xuICAgIHZhciBpLCBzO1xuICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC50b2dnbGUoRC5DU1Muc2VsZWN0ZWQsIGUpO1xuICAgIGNvbnN0IHQgPSBlID09PSAhMCAmJiBiLmlzUmFuZ2VJbnNpZGVDb250YWluZXIodGhpcy5ob2xkZXIpLCBvID0gZSA9PT0gITEgJiYgYi5pc0Zha2VDdXJzb3JJbnNpZGVDb250YWluZXIodGhpcy5ob2xkZXIpO1xuICAgICh0IHx8IG8pICYmICgoaSA9IHRoaXMuZWRpdG9yRXZlbnRCdXMpID09IG51bGwgfHwgaS5lbWl0KER0LCB7IHN0YXRlOiBlIH0pLCB0ID8gYi5hZGRGYWtlQ3Vyc29yKCkgOiBiLnJlbW92ZUZha2VDdXJzb3IodGhpcy5ob2xkZXIpLCAocyA9IHRoaXMuZWRpdG9yRXZlbnRCdXMpID09IG51bGwgfHwgcy5lbWl0KFJ0LCB7IHN0YXRlOiBlIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUcnVlIGlmIGl0IGlzIFNlbGVjdGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IHNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnMoRC5DU1Muc2VsZWN0ZWQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc3RyZXRjaGVkIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAndHJ1ZScgdG8gZW5hYmxlLCAnZmFsc2UnIHRvIGRpc2FibGUgc3RyZXRjaGVkIHN0YXRlXG4gICAqL1xuICBzZXQgc3RyZXRjaGVkKGUpIHtcbiAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKEQuQ1NTLndyYXBwZXJTdHJldGNoZWQsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gQmxvY2sncyBzdHJldGNoZWQgc3RhdGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgc3RyZXRjaGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnMoRC5DU1Mud3JhcHBlclN0cmV0Y2hlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSBkcm9wIHRhcmdldCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gJ3RydWUnIGlmIGJsb2NrIGlzIGRyb3AgdGFyZ2V0LCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIHNldCBkcm9wVGFyZ2V0KGUpIHtcbiAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKEQuQ1NTLmRyb3BUYXJnZXQsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFBsdWdpbnMgY29udGVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXQgcGx1Z2luc0NvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogQ2FsbHMgVG9vbCdzIG1ldGhvZFxuICAgKlxuICAgKiBNZXRob2QgY2hlY2tzIHRvb2wgcHJvcGVydHkge01ldGhvZE5hbWV9LiBGaXJlcyBtZXRob2Qgd2l0aCBwYXNzZXMgcGFyYW1zIElmIGl0IGlzIGluc3RhbmNlIG9mIEZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0gbWV0aG9kIHRvIGNhbGxcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIG1ldGhvZCBhcmd1bWVudFxuICAgKi9cbiAgY2FsbChlLCB0KSB7XG4gICAgaWYgKE8odGhpcy50b29sSW5zdGFuY2VbZV0pKSB7XG4gICAgICBlID09PSBcImFwcGVuZENhbGxiYWNrXCIgJiYgSShcbiAgICAgICAgXCJgYXBwZW5kQ2FsbGJhY2tgIGhvb2sgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBgcmVuZGVyZWRgIGhvb2sgaW5zdGVhZFwiLFxuICAgICAgICBcIndhcm5cIlxuICAgICAgKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMudG9vbEluc3RhbmNlW2VdLmNhbGwodGhpcy50b29sSW5zdGFuY2UsIHQpO1xuICAgICAgfSBjYXRjaCAobykge1xuICAgICAgICBJKGBFcnJvciBkdXJpbmcgJyR7ZX0nIGNhbGw6ICR7by5tZXNzYWdlfWAsIFwiZXJyb3JcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIHBsdWdpbnMgbWVyZ2UgbWV0aG9kXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gZGF0YSAtIGRhdGEgdG8gbWVyZ2VcbiAgICovXG4gIGFzeW5jIG1lcmdlV2l0aChlKSB7XG4gICAgYXdhaXQgdGhpcy50b29sSW5zdGFuY2UubWVyZ2UoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGRhdGEgZnJvbSBCbG9ja1xuICAgKiBHcm91cHMgVG9vbCdzIHNhdmUgcHJvY2Vzc2luZyB0aW1lXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLnRvb2xJbnN0YW5jZS5zYXZlKHRoaXMucGx1Z2luc0NvbnRlbnQpLCB0ID0gdGhpcy51bmF2YWlsYWJsZVR1bmVzRGF0YTtcbiAgICBbXG4gICAgICAuLi50aGlzLnR1bmVzSW5zdGFuY2VzLmVudHJpZXMoKSxcbiAgICAgIC4uLnRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzLmVudHJpZXMoKVxuICAgIF0uZm9yRWFjaCgoW3MsIHJdKSA9PiB7XG4gICAgICBpZiAoTyhyLnNhdmUpKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRbc10gPSByLnNhdmUoKTtcbiAgICAgICAgfSBjYXRjaCAobCkge1xuICAgICAgICAgIEkoYFR1bmUgJHtyLmNvbnN0cnVjdG9yLm5hbWV9IHNhdmUgbWV0aG9kIHRocm93cyBhbiBFcnJvciAlb2AsIFwid2FyblwiLCBsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG8gPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgbGV0IGk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlKS50aGVuKChzKSA9PiAoaSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSwge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICB0b29sOiB0aGlzLm5hbWUsXG4gICAgICBkYXRhOiBzLFxuICAgICAgdHVuZXM6IHQsXG4gICAgICB0aW1lOiBpIC0gb1xuICAgIH0pKS5jYXRjaCgocykgPT4ge1xuICAgICAgSShgU2F2aW5nIHByb2Nlc3MgZm9yICR7dGhpcy5uYW1lfSB0b29sIGZhaWxlZCBkdWUgdG8gdGhlICR7c31gLCBcImxvZ1wiLCBcInJlZFwiKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXNlcyBUb29sJ3MgdmFsaWRhdGlvbiBtZXRob2QgdG8gY2hlY2sgdGhlIGNvcnJlY3RuZXNzIG9mIG91dHB1dCBkYXRhXG4gICAqIFRvb2wncyB2YWxpZGF0aW9uIG1ldGhvZCBpcyBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHJldHVybnMgdHJ1ZXxmYWxzZSB3aGV0aGVyIGRhdGEgcGFzc2VkIHRoZSB2YWxpZGF0aW9uIG9yIG5vdFxuICAgKiBAcGFyYW0ge0Jsb2NrVG9vbERhdGF9IGRhdGEgLSBkYXRhIHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSB2YWxpZFxuICAgKi9cbiAgYXN5bmMgdmFsaWRhdGUoZSkge1xuICAgIGxldCB0ID0gITA7XG4gICAgcmV0dXJuIHRoaXMudG9vbEluc3RhbmNlLnZhbGlkYXRlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgKHQgPSBhd2FpdCB0aGlzLnRvb2xJbnN0YW5jZS52YWxpZGF0ZShlKSksIHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZGF0YSB0byByZW5kZXIgaW4gQmxvY2sgVHVuZXMgbWVudS5cbiAgICogU3BsaXRzIGJsb2NrIHR1bmVzIGludG8gMiBncm91cHM6IGJsb2NrIHNwZWNpZmljIHR1bmVzIGFuZCBjb21tb24gdHVuZXNcbiAgICovXG4gIGdldFR1bmVzKCkge1xuICAgIGNvbnN0IGUgPSBbXSwgdCA9IFtdLCBvID0gdHlwZW9mIHRoaXMudG9vbEluc3RhbmNlLnJlbmRlclNldHRpbmdzID09IFwiZnVuY3Rpb25cIiA/IHRoaXMudG9vbEluc3RhbmNlLnJlbmRlclNldHRpbmdzKCkgOiBbXTtcbiAgICByZXR1cm4gZC5pc0VsZW1lbnQobykgPyBlLnB1c2goe1xuICAgICAgdHlwZTogQS5IdG1sLFxuICAgICAgZWxlbWVudDogb1xuICAgIH0pIDogQXJyYXkuaXNBcnJheShvKSA/IGUucHVzaCguLi5vKSA6IGUucHVzaChvKSwgW1xuICAgICAgLi4udGhpcy50dW5lc0luc3RhbmNlcy52YWx1ZXMoKSxcbiAgICAgIC4uLnRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzLnZhbHVlcygpXG4gICAgXS5tYXAoKHMpID0+IHMucmVuZGVyKCkpLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGQuaXNFbGVtZW50KHMpID8gdC5wdXNoKHtcbiAgICAgICAgdHlwZTogQS5IdG1sLFxuICAgICAgICBlbGVtZW50OiBzXG4gICAgICB9KSA6IEFycmF5LmlzQXJyYXkocykgPyB0LnB1c2goLi4ucykgOiB0LnB1c2gocyk7XG4gICAgfSksIHtcbiAgICAgIHRvb2xUdW5lczogZSxcbiAgICAgIGNvbW1vblR1bmVzOiB0XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGN1cnJlbnQgaW5wdXQgaW5kZXggd2l0aCBzZWxlY3Rpb24gYW5jaG9yIG5vZGVcbiAgICovXG4gIHVwZGF0ZUN1cnJlbnRJbnB1dCgpIHtcbiAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IGQuaXNOYXRpdmVJbnB1dChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB8fCAhYi5hbmNob3JOb2RlID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA6IGIuYW5jaG9yTm9kZTtcbiAgfVxuICAvKipcbiAgICogQWxsb3dzIHRvIHNheSBFZGl0b3IgdGhhdCBCbG9jayB3YXMgY2hhbmdlZC4gVXNlZCB0byBtYW51YWxseSB0cmlnZ2VyIEVkaXRvcidzICdvbkNoYW5nZScgY2FsbGJhY2tcbiAgICogQ2FuIGJlIHVzZWZ1bCBmb3IgYmxvY2sgY2hhbmdlcyBpbnZpc2libGUgZm9yIGVkaXRvciBjb3JlLlxuICAgKi9cbiAgZGlzcGF0Y2hDaGFuZ2UoKSB7XG4gICAgdGhpcy5kaWRNdXRhdGVkKCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgVG9vbCBpbnN0YW5jZSBkZXN0cm95IG1ldGhvZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnVud2F0Y2hCbG9ja011dGF0aW9ucygpLCB0aGlzLnJlbW92ZUlucHV0RXZlbnRzKCksIHN1cGVyLmRlc3Ryb3koKSwgTyh0aGlzLnRvb2xJbnN0YW5jZS5kZXN0cm95KSAmJiB0aGlzLnRvb2xJbnN0YW5jZS5kZXN0cm95KCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvb2wgY291bGQgc3BlY2lmeSBzZXZlcmFsIGVudHJpZXMgdG8gYmUgZGlzcGxheWVkIGF0IHRoZSBUb29sYm94IChmb3IgZXhhbXBsZSwgXCJIZWFkaW5nIDFcIiwgXCJIZWFkaW5nIDJcIiwgXCJIZWFkaW5nIDNcIilcbiAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZW50cnkgdGhhdCBpcyByZWxhdGVkIHRvIHRoZSBCbG9jayAoZGVwZW5kZWQgb24gdGhlIEJsb2NrIGRhdGEpXG4gICAqL1xuICBhc3luYyBnZXRBY3RpdmVUb29sYm94RW50cnkoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMudG9vbC50b29sYm94O1xuICAgIGlmIChlLmxlbmd0aCA9PT0gMSlcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy50b29sLnRvb2xib3hbMF0pO1xuICAgIGNvbnN0IHQgPSBhd2FpdCB0aGlzLmRhdGEsIG8gPSBlO1xuICAgIHJldHVybiBvID09IG51bGwgPyB2b2lkIDAgOiBvLmZpbmQoKGkpID0+IEh0KGkuZGF0YSwgdCkpO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnRzIEJsb2NrIGRhdGEgYXMgc3RyaW5nIHVzaW5nIGNvbnZlcnNpb24gY29uZmlnXG4gICAqL1xuICBhc3luYyBleHBvcnREYXRhQXNTdHJpbmcoKSB7XG4gICAgY29uc3QgZSA9IGF3YWl0IHRoaXMuZGF0YTtcbiAgICByZXR1cm4gSG8oZSwgdGhpcy50b29sLmNvbnZlcnNpb25Db25maWcpO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlIGRlZmF1bHQgQmxvY2sgd3JhcHBlcnMgYW5kIHB1dCBUb29sYHMgY29udGVudCB0aGVyZVxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAqL1xuICBjb21wb3NlKCkge1xuICAgIGNvbnN0IGUgPSBkLm1ha2UoXCJkaXZcIiwgRC5DU1Mud3JhcHBlciksIHQgPSBkLm1ha2UoXCJkaXZcIiwgRC5DU1MuY29udGVudCksIG8gPSB0aGlzLnRvb2xJbnN0YW5jZS5yZW5kZXIoKTtcbiAgICBlLmRhdGFzZXQuaWQgPSB0aGlzLmlkLCB0aGlzLnRvb2xSZW5kZXJlZEVsZW1lbnQgPSBvLCB0LmFwcGVuZENoaWxkKHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCk7XG4gICAgbGV0IGkgPSB0O1xuICAgIHJldHVybiBbLi4udGhpcy50dW5lc0luc3RhbmNlcy52YWx1ZXMoKSwgLi4udGhpcy5kZWZhdWx0VHVuZXNJbnN0YW5jZXMudmFsdWVzKCldLmZvckVhY2goKHMpID0+IHtcbiAgICAgIGlmIChPKHMud3JhcCkpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaSA9IHMud3JhcChpKTtcbiAgICAgICAgfSBjYXRjaCAocikge1xuICAgICAgICAgIEkoYFR1bmUgJHtzLmNvbnN0cnVjdG9yLm5hbWV9IHdyYXAgbWV0aG9kIHRocm93cyBhbiBFcnJvciAlb2AsIFwid2FyblwiLCByKTtcbiAgICAgICAgfVxuICAgIH0pLCBlLmFwcGVuZENoaWxkKGkpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSBCbG9jayBUdW5lc1xuICAgKlxuICAgKiBAcGFyYW0gdHVuZXNEYXRhIC0gY3VycmVudCBCbG9jayB0dW5lcyBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb21wb3NlVHVuZXMoZSkge1xuICAgIEFycmF5LmZyb20odGhpcy50dW5lcy52YWx1ZXMoKSkuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgKHQuaXNJbnRlcm5hbCA/IHRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzIDogdGhpcy50dW5lc0luc3RhbmNlcykuc2V0KHQubmFtZSwgdC5jcmVhdGUoZVt0Lm5hbWVdLCB0aGlzLmJsb2NrQVBJKSk7XG4gICAgfSksIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKFt0LCBvXSkgPT4ge1xuICAgICAgdGhpcy50dW5lc0luc3RhbmNlcy5oYXModCkgfHwgKHRoaXMudW5hdmFpbGFibGVUdW5lc0RhdGFbdF0gPSBvKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBmb2N1cyBldmVudCBsaXN0ZW5lcnMgdG8gYWxsIGlucHV0cyBhbmQgY29udGVudGVkaXRhYmxlXG4gICAqL1xuICBhZGRJbnB1dEV2ZW50cygpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLmhhbmRsZUZvY3VzKSwgZC5pc05hdGl2ZUlucHV0KGUpICYmIGUuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZGlkTXV0YXRlZCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIHJlbW92ZXMgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYWxsIGlucHV0cyBhbmQgY29udGVudGVkaXRhYmxlXG4gICAqL1xuICByZW1vdmVJbnB1dEV2ZW50cygpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLmhhbmRsZUZvY3VzKSwgZC5pc05hdGl2ZUlucHV0KGUpICYmIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZGlkTXV0YXRlZCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiBjb21tb24gZWRpdG9yIERvbSBDaGFuZ2VkIGV2ZW50IGFuZCBkZXRlY3QgbXV0YXRpb25zIHJlbGF0ZWQgdG8gdGhlICBCbG9ja1xuICAgKi9cbiAgd2F0Y2hCbG9ja011dGF0aW9ucygpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLnJlZGFjdG9yRG9tQ2hhbmdlZENhbGxiYWNrID0gKHQpID0+IHtcbiAgICAgIGNvbnN0IHsgbXV0YXRpb25zOiBvIH0gPSB0O1xuICAgICAgby5zb21lKChzKSA9PiBGbyhzLCB0aGlzLnRvb2xSZW5kZXJlZEVsZW1lbnQpKSAmJiB0aGlzLmRpZE11dGF0ZWQobyk7XG4gICAgfSwgKGUgPSB0aGlzLmVkaXRvckV2ZW50QnVzKSA9PSBudWxsIHx8IGUub24oSmUsIHRoaXMucmVkYWN0b3JEb21DaGFuZ2VkQ2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVkYWN0b3IgZG9tIGNoYW5nZSBldmVudCBsaXN0ZW5lclxuICAgKi9cbiAgdW53YXRjaEJsb2NrTXV0YXRpb25zKCkge1xuICAgIHZhciBlO1xuICAgIChlID0gdGhpcy5lZGl0b3JFdmVudEJ1cykgPT0gbnVsbCB8fCBlLm9mZihKZSwgdGhpcy5yZWRhY3RvckRvbUNoYW5nZWRDYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIFNvbWV0aW1lcyBUb29sIGNhbiByZXBsYWNlIG93biBtYWluIGVsZW1lbnQsIGZvciBleGFtcGxlIEgyIC0+IEg0IG9yIFVMIC0+IE9MXG4gICAqIFdlIG5lZWQgdG8gZGV0ZWN0IHN1Y2ggY2hhbmdlcyBhbmQgdXBkYXRlIGEgbGluayB0byB0b29scyBtYWluIGVsZW1lbnQgd2l0aCB0aGUgbmV3IG9uZVxuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb25zIC0gcmVjb3JkcyBvZiBibG9jayBjb250ZW50IG11dGF0aW9uc1xuICAgKi9cbiAgZGV0ZWN0VG9vbFJvb3RDaGFuZ2UoZSkge1xuICAgIGUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYgKEFycmF5LmZyb20odC5yZW1vdmVkTm9kZXMpLmluY2x1ZGVzKHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgICAgY29uc3QgaSA9IHQuYWRkZWROb2Rlc1t0LmFkZGVkTm9kZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCA9IGk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBpbnB1dHMgY2FjaGVkIHZhbHVlXG4gICAqL1xuICBkcm9wSW5wdXRzQ2FjaGUoKSB7XG4gICAgdGhpcy5jYWNoZWRJbnB1dHMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogTWFyayBpbnB1dHMgd2l0aCAnZGF0YS1lbXB0eScgYXR0cmlidXRlIHdpdGggdGhlIGVtcHR5IHN0YXRlXG4gICAqL1xuICB0b2dnbGVJbnB1dHNFbXB0eU1hcmsoKSB7XG4gICAgdGhpcy5pbnB1dHMuZm9yRWFjaChPdCk7XG4gIH1cbn1cbmNsYXNzIHpvIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuaW5zZXJ0ID0gKGUgPSB0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2ssIHQgPSB7fSwgbyA9IHt9LCBpLCBzLCByLCBsKSA9PiB7XG4gICAgICBjb25zdCBhID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydCh7XG4gICAgICAgIGlkOiBsLFxuICAgICAgICB0b29sOiBlLFxuICAgICAgICBkYXRhOiB0LFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgbmVlZFRvRm9jdXM6IHMsXG4gICAgICAgIHJlcGxhY2U6IHJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBHKGEpO1xuICAgIH0sIHRoaXMuY29tcG9zZUJsb2NrRGF0YSA9IGFzeW5jIChlKSA9PiB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSk7XG4gICAgICByZXR1cm4gbmV3IEQoe1xuICAgICAgICB0b29sOiB0LFxuICAgICAgICBhcGk6IHRoaXMuRWRpdG9yLkFQSSxcbiAgICAgICAgcmVhZE9ubHk6ICEwLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgdHVuZXNEYXRhOiB7fVxuICAgICAgfSkuZGF0YTtcbiAgICB9LCB0aGlzLnVwZGF0ZSA9IGFzeW5jIChlLCB0LCBvKSA9PiB7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogaSB9ID0gdGhpcy5FZGl0b3IsIHMgPSBpLmdldEJsb2NrQnlJZChlKTtcbiAgICAgIGlmIChzID09PSB2b2lkIDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQmxvY2sgd2l0aCBpZCBcIiR7ZX1cIiBub3QgZm91bmRgKTtcbiAgICAgIGNvbnN0IHIgPSBhd2FpdCBpLnVwZGF0ZShzLCB0LCBvKTtcbiAgICAgIHJldHVybiBuZXcgRyhyKTtcbiAgICB9LCB0aGlzLmNvbnZlcnQgPSBhc3luYyAoZSwgdCwgbykgPT4ge1xuICAgICAgdmFyIGgsIHA7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogaSwgVG9vbHM6IHMgfSA9IHRoaXMuRWRpdG9yLCByID0gaS5nZXRCbG9ja0J5SWQoZSk7XG4gICAgICBpZiAoIXIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQmxvY2sgd2l0aCBpZCBcIiR7ZX1cIiBub3QgZm91bmRgKTtcbiAgICAgIGNvbnN0IGwgPSBzLmJsb2NrVG9vbHMuZ2V0KHIubmFtZSksIGEgPSBzLmJsb2NrVG9vbHMuZ2V0KHQpO1xuICAgICAgaWYgKCFhKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJsb2NrIFRvb2wgd2l0aCB0eXBlIFwiJHt0fVwiIG5vdCBmb3VuZGApO1xuICAgICAgY29uc3QgYyA9ICgoaCA9IGwgPT0gbnVsbCA/IHZvaWQgMCA6IGwuY29udmVyc2lvbkNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IGguZXhwb3J0KSAhPT0gdm9pZCAwLCB1ID0gKChwID0gYS5jb252ZXJzaW9uQ29uZmlnKSA9PSBudWxsID8gdm9pZCAwIDogcC5pbXBvcnQpICE9PSB2b2lkIDA7XG4gICAgICBpZiAoYyAmJiB1KSB7XG4gICAgICAgIGNvbnN0IGcgPSBhd2FpdCBpLmNvbnZlcnQociwgdCwgbyk7XG4gICAgICAgIHJldHVybiBuZXcgRyhnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGcgPSBbXG4gICAgICAgICAgYyA/ICExIDogTGUoci5uYW1lKSxcbiAgICAgICAgICB1ID8gITEgOiBMZSh0KVxuICAgICAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIGFuZCBcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29udmVyc2lvbiBmcm9tIFwiJHtyLm5hbWV9XCIgdG8gXCIke3R9XCIgaXMgbm90IHBvc3NpYmxlLiAke2d9IHRvb2wocykgc2hvdWxkIHByb3ZpZGUgYSBcImNvbnZlcnNpb25Db25maWdcImApO1xuICAgICAgfVxuICAgIH0sIHRoaXMuaW5zZXJ0TWFueSA9IChlLCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGggLSAxKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlSW5kZXgodCk7XG4gICAgICBjb25zdCBvID0gZS5tYXAoKHsgaWQ6IGksIHR5cGU6IHMsIGRhdGE6IHIgfSkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNvbXBvc2VCbG9jayh7XG4gICAgICAgIGlkOiBpLFxuICAgICAgICB0b29sOiBzIHx8IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICAgICAgZGF0YTogclxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnRNYW55KG8sIHQpLCBvLm1hcCgoaSkgPT4gbmV3IEcoaSkpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja3N9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xlYXI6ICgpID0+IHRoaXMuY2xlYXIoKSxcbiAgICAgIHJlbmRlcjogKGUpID0+IHRoaXMucmVuZGVyKGUpLFxuICAgICAgcmVuZGVyRnJvbUhUTUw6IChlKSA9PiB0aGlzLnJlbmRlckZyb21IVE1MKGUpLFxuICAgICAgZGVsZXRlOiAoZSkgPT4gdGhpcy5kZWxldGUoZSksXG4gICAgICBzd2FwOiAoZSwgdCkgPT4gdGhpcy5zd2FwKGUsIHQpLFxuICAgICAgbW92ZTogKGUsIHQpID0+IHRoaXMubW92ZShlLCB0KSxcbiAgICAgIGdldEJsb2NrQnlJbmRleDogKGUpID0+IHRoaXMuZ2V0QmxvY2tCeUluZGV4KGUpLFxuICAgICAgZ2V0QnlJZDogKGUpID0+IHRoaXMuZ2V0QnlJZChlKSxcbiAgICAgIGdldEN1cnJlbnRCbG9ja0luZGV4OiAoKSA9PiB0aGlzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksXG4gICAgICBnZXRCbG9ja0luZGV4OiAoZSkgPT4gdGhpcy5nZXRCbG9ja0luZGV4KGUpLFxuICAgICAgZ2V0QmxvY2tzQ291bnQ6ICgpID0+IHRoaXMuZ2V0QmxvY2tzQ291bnQoKSxcbiAgICAgIGdldEJsb2NrQnlFbGVtZW50OiAoZSkgPT4gdGhpcy5nZXRCbG9ja0J5RWxlbWVudChlKSxcbiAgICAgIHN0cmV0Y2hCbG9jazogKGUsIHQgPSAhMCkgPT4gdGhpcy5zdHJldGNoQmxvY2soZSwgdCksXG4gICAgICBpbnNlcnROZXdCbG9jazogKCkgPT4gdGhpcy5pbnNlcnROZXdCbG9jaygpLFxuICAgICAgaW5zZXJ0OiB0aGlzLmluc2VydCxcbiAgICAgIGluc2VydE1hbnk6IHRoaXMuaW5zZXJ0TWFueSxcbiAgICAgIHVwZGF0ZTogdGhpcy51cGRhdGUsXG4gICAgICBjb21wb3NlQmxvY2tEYXRhOiB0aGlzLmNvbXBvc2VCbG9ja0RhdGEsXG4gICAgICBjb252ZXJ0OiB0aGlzLmNvbnZlcnRcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEJsb2NrcyBjb3VudFxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0QmxvY2tzQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgYmxvY2sgaW5kZXhcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldEN1cnJlbnRCbG9ja0luZGV4KCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrSW5kZXg7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluZGV4IG9mIEJsb2NrIGJ5IGlkO1xuICAgKlxuICAgKiBAcGFyYW0gaWQgLSBibG9jayBpZFxuICAgKi9cbiAgZ2V0QmxvY2tJbmRleChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SWQoZSk7XG4gICAgaWYgKCF0KSB7XG4gICAgICBYKFwiVGhlcmUgaXMgbm8gYmxvY2sgd2l0aCBpZCBgXCIgKyBlICsgXCJgXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0luZGV4KHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEJsb2NrQVBJIG9iamVjdCBieSBCbG9jayBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCB0byBnZXRcbiAgICovXG4gIGdldEJsb2NrQnlJbmRleChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SW5kZXgoZSk7XG4gICAgaWYgKHQgPT09IHZvaWQgMCkge1xuICAgICAgWChcIlRoZXJlIGlzIG5vIGJsb2NrIGF0IGluZGV4IGBcIiArIGUgKyBcImBcIiwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEcodCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgQmxvY2tBUEkgb2JqZWN0IGJ5IEJsb2NrIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIGlkIG9mIGJsb2NrIHRvIGdldFxuICAgKi9cbiAgZ2V0QnlJZChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SWQoZSk7XG4gICAgcmV0dXJuIHQgPT09IHZvaWQgMCA/IChYKFwiVGhlcmUgaXMgbm8gYmxvY2sgd2l0aCBpZCBgXCIgKyBlICsgXCJgXCIsIFwid2FyblwiKSwgbnVsbCkgOiBuZXcgRyh0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrIEFQSSBvYmplY3QgYnkgYW55IGNoaWxkIGh0bWwgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCAtIGh0bWwgZWxlbWVudCB0byBnZXQgQmxvY2sgYnlcbiAgICovXG4gIGdldEJsb2NrQnlFbGVtZW50KGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrKGUpO1xuICAgIGlmICh0ID09PSB2b2lkIDApIHtcbiAgICAgIFgoXCJUaGVyZSBpcyBubyBibG9jayBjb3JyZXNwb25kaW5nIHRvIGVsZW1lbnQgYFwiICsgZSArIFwiYFwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBuZXcgRyh0KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBCbG9jayBNYW5hZ2VyIG1ldGhvZCB0aGF0IHN3YXAgQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBwb3NpdGlvbiBvZiBmaXJzdCBCbG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIHBvc2l0aW9uIG9mIHNlY29uZCBCbG9ja1xuICAgKiBAZGVwcmVjYXRlZCDigJQgdXNlICdtb3ZlJyBpbnN0ZWFkXG4gICAqL1xuICBzd2FwKGUsIHQpIHtcbiAgICBJKFxuICAgICAgXCJgYmxvY2tzLnN3YXAoKWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgYGJsb2NrLm1vdmUoKWAgbWV0aG9kIGluc3RlYWRcIixcbiAgICAgIFwiaW5mb1wiXG4gICAgKSwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnN3YXAoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYmxvY2sgZnJvbSBvbmUgaW5kZXggdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IHRvIG1vdmUgdG9cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGluZGV4IHRvIG1vdmUgZnJvbVxuICAgKi9cbiAgbW92ZShlLCB0KSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLm1vdmUoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJsb2NrSW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBkZWxldGVcbiAgICovXG4gIGRlbGV0ZShlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KGUpO1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnJlbW92ZUJsb2NrKHQpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIFgodCwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0KCksIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgJiYgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLCB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuRU5EKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBFZGl0b3IncyBhcmVhXG4gICAqL1xuICBhc3luYyBjbGVhcigpIHtcbiAgICBhd2FpdCB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoITApLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbGxzIEVkaXRvciB3aXRoIEJsb2NrcyBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7T3V0cHV0RGF0YX0gZGF0YSDigJQgU2F2ZWQgRWRpdG9yIGRhdGFcbiAgICovXG4gIGFzeW5jIHJlbmRlcihlKSB7XG4gICAgaWYgKGUgPT09IHZvaWQgMCB8fCBlLmJsb2NrcyA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb3JyZWN0IGRhdGEgcGFzc2VkIHRvIHRoZSByZW5kZXIoKSBtZXRob2RcIik7XG4gICAgdGhpcy5FZGl0b3IuTW9kaWZpY2F0aW9uc09ic2VydmVyLmRpc2FibGUoKSwgYXdhaXQgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCksIGF3YWl0IHRoaXMuRWRpdG9yLlJlbmRlcmVyLnJlbmRlcihlLmJsb2NrcyksIHRoaXMuRWRpdG9yLk1vZGlmaWNhdGlvbnNPYnNlcnZlci5lbmFibGUoKTtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIHBhc3NlZCBIVE1MIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAtIEhUTUwgc3RyaW5nIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIHJlbmRlckZyb21IVE1MKGUpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCksIHRoaXMuRWRpdG9yLlBhc3RlLnByb2Nlc3NUZXh0KGUsICEwKTtcbiAgfVxuICAvKipcbiAgICogU3RyZXRjaCBCbG9jaydzIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgQmxvY2sgdG8gc3RyZXRjaFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXR1cyAtIHRydWUgdG8gZW5hYmxlLCBmYWxzZSB0byBkaXNhYmxlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBCbG9ja0FQSSBpbnRlcmZhY2UgdG8gc3RyZXRjaCBCbG9ja3NcbiAgICovXG4gIHN0cmV0Y2hCbG9jayhlLCB0ID0gITApIHtcbiAgICBaZShcbiAgICAgICEwLFxuICAgICAgXCJibG9ja3Muc3RyZXRjaEJsb2NrKClcIixcbiAgICAgIFwiQmxvY2tBUElcIlxuICAgICk7XG4gICAgY29uc3QgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SW5kZXgoZSk7XG4gICAgbyAmJiAoby5zdHJldGNoZWQgPSB0KTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9ja1xuICAgKiBBZnRlciBzZXQgY2FyZXQgdG8gdGhpcyBCbG9ja1xuICAgKlxuICAgKiBAdG9kbyByZW1vdmUgaW4gMy4wLjBcbiAgICogQGRlcHJlY2F0ZWQgd2l0aCBpbnNlcnQoKSBtZXRob2RcbiAgICovXG4gIGluc2VydE5ld0Jsb2NrKCkge1xuICAgIEkoXCJNZXRob2QgYmxvY2tzLmluc2VydE5ld0Jsb2NrKCkgaXMgZGVwcmVjYXRlZCBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBibG9ja3MuaW5zZXJ0KCkgaW5zdGVhZC5cIiwgXCJ3YXJuXCIpLCB0aGlzLmluc2VydCgpO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZWQgYmxvY2sgaW5kZXggYW5kIHRocm93cyBhbiBlcnJvciBpZiBpdCdzIGludmFsaWRcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggdG8gdmFsaWRhdGVcbiAgICovXG4gIHZhbGlkYXRlSW5kZXgoZSkge1xuICAgIGlmICh0eXBlb2YgZSAhPSBcIm51bWJlclwiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyXCIpO1xuICAgIGlmIChlIDwgMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZGV4IHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFwiKTtcbiAgICBpZiAoZSA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZGV4IHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFwiKTtcbiAgfVxufVxuZnVuY3Rpb24gVW8obiwgZSkge1xuICByZXR1cm4gdHlwZW9mIG4gPT0gXCJudW1iZXJcIiA/IGUuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJbmRleChuKSA6IHR5cGVvZiBuID09IFwic3RyaW5nXCIgPyBlLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SWQobikgOiBlLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SWQobi5pZCk7XG59XG5jbGFzcyBqbyBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnNldFRvRmlyc3RCbG9jayA9IChlID0gdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsIHQgPSAwKSA9PiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZmlyc3RCbG9jayA/ICh0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5maXJzdEJsb2NrLCBlLCB0KSwgITApIDogITEsIHRoaXMuc2V0VG9MYXN0QmxvY2sgPSAoZSA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCB0ID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jayA/ICh0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2ssIGUsIHQpLCAhMCkgOiAhMSwgdGhpcy5zZXRUb1ByZXZpb3VzQmxvY2sgPSAoZSA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCB0ID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnByZXZpb3VzQmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIucHJldmlvdXNCbG9jaywgZSwgdCksICEwKSA6ICExLCB0aGlzLnNldFRvTmV4dEJsb2NrID0gKGUgPSB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuREVGQVVMVCwgdCA9IDApID0+IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5uZXh0QmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIubmV4dEJsb2NrLCBlLCB0KSwgITApIDogITEsIHRoaXMuc2V0VG9CbG9jayA9IChlLCB0ID0gdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsIG8gPSAwKSA9PiB7XG4gICAgICBjb25zdCBpID0gVW8oZSwgdGhpcy5FZGl0b3IpO1xuICAgICAgcmV0dXJuIGkgPT09IHZvaWQgMCA/ICExIDogKHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2soaSwgdCwgbyksICEwKTtcbiAgICB9LCB0aGlzLmZvY3VzID0gKGUgPSAhMSkgPT4gZSA/IHRoaXMuc2V0VG9MYXN0QmxvY2sodGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkVORCkgOiB0aGlzLnNldFRvRmlyc3RCbG9jayh0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuU1RBUlQpO1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q2FyZXR9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2V0VG9GaXJzdEJsb2NrOiB0aGlzLnNldFRvRmlyc3RCbG9jayxcbiAgICAgIHNldFRvTGFzdEJsb2NrOiB0aGlzLnNldFRvTGFzdEJsb2NrLFxuICAgICAgc2V0VG9QcmV2aW91c0Jsb2NrOiB0aGlzLnNldFRvUHJldmlvdXNCbG9jayxcbiAgICAgIHNldFRvTmV4dEJsb2NrOiB0aGlzLnNldFRvTmV4dEJsb2NrLFxuICAgICAgc2V0VG9CbG9jazogdGhpcy5zZXRUb0Jsb2NrLFxuICAgICAgZm9jdXM6IHRoaXMuZm9jdXNcbiAgICB9O1xuICB9XG59XG5jbGFzcyAkbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge0V2ZW50c31cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlbWl0OiAoZSwgdCkgPT4gdGhpcy5lbWl0KGUsIHQpLFxuICAgICAgb2ZmOiAoZSwgdCkgPT4gdGhpcy5vZmYoZSwgdCksXG4gICAgICBvbjogKGUsIHQpID0+IHRoaXMub24oZSwgdClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgb24gRXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBldmVudCBuYW1lIHRvIHN1YnNjcmliZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIGV2ZW50IGhhbmRsZXJcbiAgICovXG4gIG9uKGUsIHQpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24oZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEVtaXQgZXZlbnQgd2l0aCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBldmVudCB0byBlbWl0XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gZXZlbnQncyBkYXRhXG4gICAqL1xuICBlbWl0KGUsIHQpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChlLCB0KTtcbiAgfVxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSBFdmVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gZXZlbnQgdG8gdW5zdWJzY3JpYmVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBldmVudCBoYW5kbGVyXG4gICAqL1xuICBvZmYoZSwgdCkge1xuICAgIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5vZmYoZSwgdCk7XG4gIH1cbn1cbmNsYXNzIHR0IGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBSZXR1cm4gbmFtZXNwYWNlIHNlY3Rpb24gZm9yIHRvb2wgb3IgYmxvY2sgdHVuZVxuICAgKlxuICAgKiBAcGFyYW0gdG9vbE5hbWUgLSB0b29sIG5hbWVcbiAgICogQHBhcmFtIGlzVHVuZSAtIGlzIHRvb2wgYSBibG9jayB0dW5lXG4gICAqL1xuICBzdGF0aWMgZ2V0TmFtZXNwYWNlKGUsIHQpIHtcbiAgICByZXR1cm4gdCA/IGBibG9ja1R1bmVzLiR7ZX1gIDogYHRvb2xzLiR7ZX1gO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gSTE4biBBUEkgbWV0aG9kcyB3aXRoIGdsb2JhbCBkaWN0aW9uYXJ5IGFjY2Vzc1xuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHQ6ICgpID0+IHtcbiAgICAgICAgWChcIkkxOG4udCgpIG1ldGhvZCBjYW4gYmUgYWNjZXNzZWQgb25seSBmcm9tIFRvb2xzXCIsIFwid2FyblwiKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gSTE4biBBUEkgbWV0aG9kcyB3aXRoIHRvb2wgbmFtZXNwYWNlZCBkaWN0aW9uYXJ5XG4gICAqXG4gICAqIEBwYXJhbSB0b29sTmFtZSAtIHRvb2wgbmFtZVxuICAgKiBAcGFyYW0gaXNUdW5lIC0gaXMgdG9vbCBhIGJsb2NrIHR1bmVcbiAgICovXG4gIGdldE1ldGhvZHNGb3JUb29sKGUsIHQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMubWV0aG9kcyxcbiAgICAgIHtcbiAgICAgICAgdDogKG8pID0+IHoudCh0dC5nZXROYW1lc3BhY2UoZSwgdCksIG8pXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuY2xhc3MgWW8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEVkaXRvci5qcyBDb3JlIEFQSSBtb2R1bGVzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmxvY2tzOiB0aGlzLkVkaXRvci5CbG9ja3NBUEkubWV0aG9kcyxcbiAgICAgIGNhcmV0OiB0aGlzLkVkaXRvci5DYXJldEFQSS5tZXRob2RzLFxuICAgICAgdG9vbHM6IHRoaXMuRWRpdG9yLlRvb2xzQVBJLm1ldGhvZHMsXG4gICAgICBldmVudHM6IHRoaXMuRWRpdG9yLkV2ZW50c0FQSS5tZXRob2RzLFxuICAgICAgbGlzdGVuZXJzOiB0aGlzLkVkaXRvci5MaXN0ZW5lcnNBUEkubWV0aG9kcyxcbiAgICAgIG5vdGlmaWVyOiB0aGlzLkVkaXRvci5Ob3RpZmllckFQSS5tZXRob2RzLFxuICAgICAgc2FuaXRpemVyOiB0aGlzLkVkaXRvci5TYW5pdGl6ZXJBUEkubWV0aG9kcyxcbiAgICAgIHNhdmVyOiB0aGlzLkVkaXRvci5TYXZlckFQSS5tZXRob2RzLFxuICAgICAgc2VsZWN0aW9uOiB0aGlzLkVkaXRvci5TZWxlY3Rpb25BUEkubWV0aG9kcyxcbiAgICAgIHN0eWxlczogdGhpcy5FZGl0b3IuU3R5bGVzQVBJLmNsYXNzZXMsXG4gICAgICB0b29sYmFyOiB0aGlzLkVkaXRvci5Ub29sYmFyQVBJLm1ldGhvZHMsXG4gICAgICBpbmxpbmVUb29sYmFyOiB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyQVBJLm1ldGhvZHMsXG4gICAgICB0b29sdGlwOiB0aGlzLkVkaXRvci5Ub29sdGlwQVBJLm1ldGhvZHMsXG4gICAgICBpMThuOiB0aGlzLkVkaXRvci5JMThuQVBJLm1ldGhvZHMsXG4gICAgICByZWFkT25seTogdGhpcy5FZGl0b3IuUmVhZE9ubHlBUEkubWV0aG9kcyxcbiAgICAgIHVpOiB0aGlzLkVkaXRvci5VaUFQSS5tZXRob2RzXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBFZGl0b3IuanMgQ29yZSBBUEkgbWV0aG9kcyBmb3IgcGFzc2VkIHRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2xOYW1lIC0gdG9vbCBuYW1lXG4gICAqIEBwYXJhbSBpc1R1bmUgLSBpcyB0b29sIGEgYmxvY2sgdHVuZVxuICAgKi9cbiAgZ2V0TWV0aG9kc0ZvclRvb2woZSwgdCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgdGhpcy5tZXRob2RzLFxuICAgICAge1xuICAgICAgICBpMThuOiB0aGlzLkVkaXRvci5JMThuQVBJLmdldE1ldGhvZHNGb3JUb29sKGUsIHQpXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuY2xhc3MgV28gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmxpbmVUb29sYmFyfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsb3NlOiAoKSA9PiB0aGlzLmNsb3NlKCksXG4gICAgICBvcGVuOiAoKSA9PiB0aGlzLm9wZW4oKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci50cnlUb1Nob3coKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxufVxuY2xhc3MgS28gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lcnN9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb246IChlLCB0LCBvLCBpKSA9PiB0aGlzLm9uKGUsIHQsIG8sIGkpLFxuICAgICAgb2ZmOiAoZSwgdCwgbywgaSkgPT4gdGhpcy5vZmYoZSwgdCwgbywgaSksXG4gICAgICBvZmZCeUlkOiAoZSkgPT4gdGhpcy5vZmZCeUlkKGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQWRzIGEgRE9NIGV2ZW50IGxpc3RlbmVyLiBSZXR1cm4gaXQncyBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gc2V0IGhhbmRsZXIgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHsoKSA9PiB2b2lkfSBoYW5kbGVyIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhcHR1cmUgLSBjYXB0dXJlIGV2ZW50IG9yIG5vdFxuICAgKi9cbiAgb24oZSwgdCwgbywgaSkge1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5vbihlLCB0LCBvLCBpKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBET00gbGlzdGVuZXIgZnJvbSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gcmVtb3ZlIGhhbmRsZXIgZnJvbVxuICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0gaGFuZGxlciAtIGV2ZW50IGhhbmRsZXJcbiAgICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlIC0gY2FwdHVyZSBldmVudCBvciBub3RcbiAgICovXG4gIG9mZihlLCB0LCBvLCBpKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub2ZmKGUsIHQsIG8sIGkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIERPTSBsaXN0ZW5lciBieSB0aGUgbGlzdGVuZXIgaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gaWQgb2YgdGhlIGxpc3RlbmVyIHRvIHJlbW92ZVxuICAgKi9cbiAgb2ZmQnlJZChlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub2ZmQnlJZChlKTtcbiAgfVxufVxudmFyIFV0ID0geyBleHBvcnRzOiB7fSB9O1xuKGZ1bmN0aW9uKG4sIGUpIHtcbiAgKGZ1bmN0aW9uKHQsIG8pIHtcbiAgICBuLmV4cG9ydHMgPSBvKCk7XG4gIH0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBvID0ge307XG4gICAgICBmdW5jdGlvbiBpKHMpIHtcbiAgICAgICAgaWYgKG9bc10pXG4gICAgICAgICAgcmV0dXJuIG9bc10uZXhwb3J0cztcbiAgICAgICAgdmFyIHIgPSBvW3NdID0geyBpOiBzLCBsOiAhMSwgZXhwb3J0czoge30gfTtcbiAgICAgICAgcmV0dXJuIHRbc10uY2FsbChyLmV4cG9ydHMsIHIsIHIuZXhwb3J0cywgaSksIHIubCA9ICEwLCByLmV4cG9ydHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaS5tID0gdCwgaS5jID0gbywgaS5kID0gZnVuY3Rpb24ocywgciwgbCkge1xuICAgICAgICBpLm8ocywgcikgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHMsIHIsIHsgZW51bWVyYWJsZTogITAsIGdldDogbCB9KTtcbiAgICAgIH0sIGkuciA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgdHlwZW9mIFN5bWJvbCA8IFwidVwiICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkocywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkocywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xuICAgICAgfSwgaS50ID0gZnVuY3Rpb24ocywgcikge1xuICAgICAgICBpZiAoMSAmIHIgJiYgKHMgPSBpKHMpKSwgOCAmIHIgfHwgNCAmIHIgJiYgdHlwZW9mIHMgPT0gXCJvYmplY3RcIiAmJiBzICYmIHMuX19lc01vZHVsZSlcbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgdmFyIGwgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKGkucihsKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6ICEwLCB2YWx1ZTogcyB9KSwgMiAmIHIgJiYgdHlwZW9mIHMgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICBmb3IgKHZhciBhIGluIHMpXG4gICAgICAgICAgICBpLmQobCwgYSwgKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNbY107XG4gICAgICAgICAgICB9KS5iaW5kKG51bGwsIGEpKTtcbiAgICAgICAgcmV0dXJuIGw7XG4gICAgICB9LCBpLm4gPSBmdW5jdGlvbihzKSB7XG4gICAgICAgIHZhciByID0gcyAmJiBzLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcy5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLmQociwgXCJhXCIsIHIpLCByO1xuICAgICAgfSwgaS5vID0gZnVuY3Rpb24ocywgcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHIpO1xuICAgICAgfSwgaS5wID0gXCIvXCIsIGkoaS5zID0gMCk7XG4gICAgfShbZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgaSgxKSwgLyohXG4gICAgICAgKiBDb2RleCBKYXZhU2NyaXB0IE5vdGlmaWNhdGlvbiBtb2R1bGVcbiAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleC10ZWFtL2pzLW5vdGlmaWVyXG4gICAgICAgKi9cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcyA9IGkoNiksIHIgPSBcImNkeC1ub3RpZnktLWJvdW5jZS1pblwiLCBsID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHsgc2hvdzogZnVuY3Rpb24oYSkge1xuICAgICAgICAgIGlmIChhLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICBsID0gcy5nZXRXcmFwcGVyKCksIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobCk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgdmFyIGMgPSBudWxsLCB1ID0gYS50aW1lIHx8IDhlMztcbiAgICAgICAgICAgIHN3aXRjaCAoYS50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJjb25maXJtXCI6XG4gICAgICAgICAgICAgICAgYyA9IHMuY29uZmlybShhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInByb21wdFwiOlxuICAgICAgICAgICAgICAgIGMgPSBzLnByb21wdChhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjID0gcy5hbGVydChhKSwgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBjLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbC5hcHBlbmRDaGlsZChjKSwgYy5jbGFzc0xpc3QuYWRkKHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB9O1xuICAgICAgfSgpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIHZhciBzID0gaSgyKTtcbiAgICAgIHR5cGVvZiBzID09IFwic3RyaW5nXCIgJiYgKHMgPSBbW3QuaSwgcywgXCJcIl1dKTtcbiAgICAgIHZhciByID0geyBobXI6ICEwLCB0cmFuc2Zvcm06IHZvaWQgMCwgaW5zZXJ0SW50bzogdm9pZCAwIH07XG4gICAgICBpKDQpKHMsIHIpLCBzLmxvY2FscyAmJiAodC5leHBvcnRzID0gcy5sb2NhbHMpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgICh0LmV4cG9ydHMgPSBpKDMpKCExKSkucHVzaChbdC5pLCBgLmNkeC1ub3RpZnktLWVycm9ye2JhY2tncm91bmQ6I2ZmZmJmYiFpbXBvcnRhbnR9LmNkeC1ub3RpZnktLWVycm9yOjpiZWZvcmV7YmFja2dyb3VuZDojZmI1ZDVkIWltcG9ydGFudH0uY2R4LW5vdGlmeV9faW5wdXR7bWF4LXdpZHRoOjEzMHB4O3BhZGRpbmc6NXB4IDEwcHg7YmFja2dyb3VuZDojZjdmN2Y3O2JvcmRlcjowO2JvcmRlci1yYWRpdXM6M3B4O2ZvbnQtc2l6ZToxM3B4O2NvbG9yOiM2NTZiN2M7b3V0bGluZTowfS5jZHgtbm90aWZ5X19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzY1NmI3Y30uY2R4LW5vdGlmeV9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOiM2NTZiN2N9LmNkeC1ub3RpZnlfX2lucHV0OmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDEwMSwxMDcsMTI0LC4zKX0uY2R4LW5vdGlmeV9faW5wdXQ6Zm9jdXM6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMTAxLDEwNywxMjQsLjMpfS5jZHgtbm90aWZ5X19idXR0b257Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czozcHg7Zm9udC1zaXplOjEzcHg7cGFkZGluZzo1cHggMTBweDtjdXJzb3I6cG9pbnRlcn0uY2R4LW5vdGlmeV9fYnV0dG9uOmxhc3QtY2hpbGR7bWFyZ2luLWxlZnQ6MTBweH0uY2R4LW5vdGlmeV9fYnV0dG9uLS1jYW5jZWx7YmFja2dyb3VuZDojZjJmNWY3O2JveC1zaGFkb3c6MCAycHggMXB4IDAgcmdiYSgxNiwxOSwyOSwwKTtjb2xvcjojNjU2YjdjfS5jZHgtbm90aWZ5X19idXR0b24tLWNhbmNlbDpob3ZlcntiYWNrZ3JvdW5kOiNlZWV9LmNkeC1ub3RpZnlfX2J1dHRvbi0tY29uZmlybXtiYWNrZ3JvdW5kOiMzNGM5OTI7Ym94LXNoYWRvdzowIDFweCAxcHggMCByZ2JhKDE4LDQ5LDM1LC4wNSk7Y29sb3I6I2ZmZn0uY2R4LW5vdGlmeV9fYnV0dG9uLS1jb25maXJtOmhvdmVye2JhY2tncm91bmQ6IzMzYjA4Mn0uY2R4LW5vdGlmeV9fYnRucy13cmFwcGVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDttYXJnaW4tdG9wOjVweH0uY2R4LW5vdGlmeV9fY3Jvc3N7cG9zaXRpb246YWJzb2x1dGU7dG9wOjVweDtyaWdodDo1cHg7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDtwYWRkaW5nOjVweDtvcGFjaXR5Oi41NDtjdXJzb3I6cG9pbnRlcn0uY2R4LW5vdGlmeV9fY3Jvc3M6OmFmdGVyLC5jZHgtbm90aWZ5X19jcm9zczo6YmVmb3Jle2NvbnRlbnQ6Jyc7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo5cHg7dG9wOjVweDtoZWlnaHQ6MTJweDt3aWR0aDoycHg7YmFja2dyb3VuZDojNTc1ZDY3fS5jZHgtbm90aWZ5X19jcm9zczo6YmVmb3Jle3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uY2R4LW5vdGlmeV9fY3Jvc3M6OmFmdGVye3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5jZHgtbm90aWZ5X19jcm9zczpob3ZlcntvcGFjaXR5OjF9LmNkeC1ub3RpZmllc3twb3NpdGlvbjpmaXhlZDt6LWluZGV4OjI7Ym90dG9tOjIwcHg7bGVmdDoyMHB4O2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sT3h5Z2VuLFVidW50dSxDYW50YXJlbGwsXCJGaXJhIFNhbnNcIixcIkRyb2lkIFNhbnNcIixcIkhlbHZldGljYSBOZXVlXCIsc2Fucy1zZXJpZn0uY2R4LW5vdGlmeXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoyMjBweDttYXJnaW4tdG9wOjE1cHg7cGFkZGluZzoxM3B4IDE2cHg7YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MCAxMXB4IDE3cHggMCByZ2JhKDIzLDMyLDYxLC4xMyk7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MS40ZW07d29yZC13cmFwOmJyZWFrLXdvcmR9LmNkeC1ub3RpZnk6OmJlZm9yZXtjb250ZW50OicnO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7dG9wOjA7bGVmdDowO3dpZHRoOjNweDtoZWlnaHQ6Y2FsYygxMDAlIC0gNnB4KTttYXJnaW46M3B4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQ6MCAwfUBrZXlmcmFtZXMgYm91bmNlSW57MCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguMyl9NTAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9NzAle3RyYW5zZm9ybTpzY2FsZSguOSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSl9fS5jZHgtbm90aWZ5LS1ib3VuY2UtaW57YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW47YW5pbWF0aW9uLWR1cmF0aW9uOi42czthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjF9LmNkeC1ub3RpZnktLXN1Y2Nlc3N7YmFja2dyb3VuZDojZmFmZmZlIWltcG9ydGFudH0uY2R4LW5vdGlmeS0tc3VjY2Vzczo6YmVmb3Jle2JhY2tncm91bmQ6IzQxZmZiMSFpbXBvcnRhbnR9YCwgXCJcIl0pO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8pIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIHMgPSBbXTtcbiAgICAgICAgcmV0dXJuIHMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdmFyIGwgPSBmdW5jdGlvbihhLCBjKSB7XG4gICAgICAgICAgICAgIHZhciB1ID0gYVsxXSB8fCBcIlwiLCBoID0gYVszXTtcbiAgICAgICAgICAgICAgaWYgKCFoKVxuICAgICAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgICAgICBpZiAoYyAmJiB0eXBlb2YgYnRvYSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IChmID0gaCwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShmKSkpKSArIFwiICovXCIpLCBnID0gaC5zb3VyY2VzLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiICsgaC5zb3VyY2VSb290ICsgayArIFwiICovXCI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt1XS5jb25jYXQoZykuY29uY2F0KFtwXSkuam9pbihgXG5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZjtcbiAgICAgICAgICAgICAgcmV0dXJuIFt1XS5qb2luKGBcbmApO1xuICAgICAgICAgICAgfShyLCBpKTtcbiAgICAgICAgICAgIHJldHVybiByWzJdID8gXCJAbWVkaWEgXCIgKyByWzJdICsgXCJ7XCIgKyBsICsgXCJ9XCIgOiBsO1xuICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIHMuaSA9IGZ1bmN0aW9uKHIsIGwpIHtcbiAgICAgICAgICB0eXBlb2YgciA9PSBcInN0cmluZ1wiICYmIChyID0gW1tudWxsLCByLCBcIlwiXV0pO1xuICAgICAgICAgIGZvciAodmFyIGEgPSB7fSwgYyA9IDA7IGMgPCB0aGlzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRoaXNbY11bMF07XG4gICAgICAgICAgICB0eXBlb2YgdSA9PSBcIm51bWJlclwiICYmIChhW3VdID0gITApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgci5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgdmFyIGggPSByW2NdO1xuICAgICAgICAgICAgdHlwZW9mIGhbMF0gPT0gXCJudW1iZXJcIiAmJiBhW2hbMF1dIHx8IChsICYmICFoWzJdID8gaFsyXSA9IGwgOiBsICYmIChoWzJdID0gXCIoXCIgKyBoWzJdICsgXCIpIGFuZCAoXCIgKyBsICsgXCIpXCIpLCBzLnB1c2goaCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgcztcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgdmFyIHMsIHIsIGwgPSB7fSwgYSA9IChzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gciA9PT0gdm9pZCAwICYmIChyID0gcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjtcbiAgICAgIH0pLCBjID0gZnVuY3Rpb24odikge1xuICAgICAgICB2YXIgbSA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgeCA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICByZXR1cm4geCgpO1xuICAgICAgICAgIGlmIChtW3hdID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZhciBFID0gKGZ1bmN0aW9uKE0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoTSk7XG4gICAgICAgICAgICB9KS5jYWxsKHRoaXMsIHgpO1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBFIGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KVxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIEUgPSBFLmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICBFID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgbVt4XSA9IEU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtW3hdO1xuICAgICAgICB9O1xuICAgICAgfSgpLCB1ID0gbnVsbCwgaCA9IDAsIHAgPSBbXSwgZyA9IGkoNSk7XG4gICAgICBmdW5jdGlvbiBmKHYsIG0pIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB2Lmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgdmFyIEUgPSB2W3hdLCBNID0gbFtFLmlkXTtcbiAgICAgICAgICBpZiAoTSkge1xuICAgICAgICAgICAgTS5yZWZzKys7XG4gICAgICAgICAgICBmb3IgKHZhciBUID0gMDsgVCA8IE0ucGFydHMubGVuZ3RoOyBUKyspXG4gICAgICAgICAgICAgIE0ucGFydHNbVF0oRS5wYXJ0c1tUXSk7XG4gICAgICAgICAgICBmb3IgKDsgVCA8IEUucGFydHMubGVuZ3RoOyBUKyspXG4gICAgICAgICAgICAgIE0ucGFydHMucHVzaChqKEUucGFydHNbVF0sIG0pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIFAgPSBbXTtcbiAgICAgICAgICAgIGZvciAoVCA9IDA7IFQgPCBFLnBhcnRzLmxlbmd0aDsgVCsrKVxuICAgICAgICAgICAgICBQLnB1c2goaihFLnBhcnRzW1RdLCBtKSk7XG4gICAgICAgICAgICBsW0UuaWRdID0geyBpZDogRS5pZCwgcmVmczogMSwgcGFydHM6IFAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGsodiwgbSkge1xuICAgICAgICBmb3IgKHZhciB4ID0gW10sIEUgPSB7fSwgTSA9IDA7IE0gPCB2Lmxlbmd0aDsgTSsrKSB7XG4gICAgICAgICAgdmFyIFQgPSB2W01dLCBQID0gbS5iYXNlID8gVFswXSArIG0uYmFzZSA6IFRbMF0sIEIgPSB7IGNzczogVFsxXSwgbWVkaWE6IFRbMl0sIHNvdXJjZU1hcDogVFszXSB9O1xuICAgICAgICAgIEVbUF0gPyBFW1BdLnBhcnRzLnB1c2goQikgOiB4LnB1c2goRVtQXSA9IHsgaWQ6IFAsIHBhcnRzOiBbQl0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBDKHYsIG0pIHtcbiAgICAgICAgdmFyIHggPSBjKHYuaW5zZXJ0SW50byk7XG4gICAgICAgIGlmICgheClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgdmFyIEUgPSBwW3AubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh2Lmluc2VydEF0ID09PSBcInRvcFwiKVxuICAgICAgICAgIEUgPyBFLm5leHRTaWJsaW5nID8geC5pbnNlcnRCZWZvcmUobSwgRS5uZXh0U2libGluZykgOiB4LmFwcGVuZENoaWxkKG0pIDogeC5pbnNlcnRCZWZvcmUobSwgeC5maXJzdENoaWxkKSwgcC5wdXNoKG0pO1xuICAgICAgICBlbHNlIGlmICh2Lmluc2VydEF0ID09PSBcImJvdHRvbVwiKVxuICAgICAgICAgIHguYXBwZW5kQ2hpbGQobSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlb2Ygdi5pbnNlcnRBdCAhPSBcIm9iamVjdFwiIHx8ICF2Lmluc2VydEF0LmJlZm9yZSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgW1N0eWxlIExvYWRlcl1cblxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxuYCk7XG4gICAgICAgICAgdmFyIE0gPSBjKHYuaW5zZXJ0SW50byArIFwiIFwiICsgdi5pbnNlcnRBdC5iZWZvcmUpO1xuICAgICAgICAgIHguaW5zZXJ0QmVmb3JlKG0sIE0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBTKHYpIHtcbiAgICAgICAgaWYgKHYucGFyZW50Tm9kZSA9PT0gbnVsbClcbiAgICAgICAgICByZXR1cm4gITE7XG4gICAgICAgIHYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh2KTtcbiAgICAgICAgdmFyIG0gPSBwLmluZGV4T2Yodik7XG4gICAgICAgIG0gPj0gMCAmJiBwLnNwbGljZShtLCAxKTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIF8odikge1xuICAgICAgICB2YXIgbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgcmV0dXJuIHYuYXR0cnMudHlwZSA9PT0gdm9pZCAwICYmICh2LmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCIpLCBlZShtLCB2LmF0dHJzKSwgQyh2LCBtKSwgbTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVlKHYsIG0pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobSkuZm9yRWFjaChmdW5jdGlvbih4KSB7XG4gICAgICAgICAgdi5zZXRBdHRyaWJ1dGUoeCwgbVt4XSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gaih2LCBtKSB7XG4gICAgICAgIHZhciB4LCBFLCBNLCBUO1xuICAgICAgICBpZiAobS50cmFuc2Zvcm0gJiYgdi5jc3MpIHtcbiAgICAgICAgICBpZiAoIShUID0gbS50cmFuc2Zvcm0odi5jc3MpKSlcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgdi5jc3MgPSBUO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtLnNpbmdsZXRvbikge1xuICAgICAgICAgIHZhciBQID0gaCsrO1xuICAgICAgICAgIHggPSB1IHx8ICh1ID0gXyhtKSksIEUgPSBmZS5iaW5kKG51bGwsIHgsIFAsICExKSwgTSA9IGZlLmJpbmQobnVsbCwgeCwgUCwgITApO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICB2LnNvdXJjZU1hcCAmJiB0eXBlb2YgVVJMID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBCbG9iID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgYnRvYSA9PSBcImZ1bmN0aW9uXCIgPyAoeCA9IGZ1bmN0aW9uKEIpIHtcbiAgICAgICAgICAgIHZhciBZID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgICAgICAgICByZXR1cm4gQi5hdHRycy50eXBlID09PSB2b2lkIDAgJiYgKEIuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIiksIEIuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCIsIGVlKFksIEIuYXR0cnMpLCBDKEIsIFkpLCBZO1xuICAgICAgICAgIH0obSksIEUgPSAoZnVuY3Rpb24oQiwgWSwgZ2UpIHtcbiAgICAgICAgICAgIHZhciBpZSA9IGdlLmNzcywgSGUgPSBnZS5zb3VyY2VNYXAsIG1vID0gWS5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHZvaWQgMCAmJiBIZTtcbiAgICAgICAgICAgIChZLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBtbykgJiYgKGllID0gZyhpZSkpLCBIZSAmJiAoaWUgKz0gYFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxgICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoSGUpKSkpICsgXCIgKi9cIik7XG4gICAgICAgICAgICB2YXIgYm8gPSBuZXcgQmxvYihbaWVdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KSwgZ3QgPSBCLmhyZWY7XG4gICAgICAgICAgICBCLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJvKSwgZ3QgJiYgVVJMLnJldm9rZU9iamVjdFVSTChndCk7XG4gICAgICAgICAgfSkuYmluZChudWxsLCB4LCBtKSwgTSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgUyh4KSwgeC5ocmVmICYmIFVSTC5yZXZva2VPYmplY3RVUkwoeC5ocmVmKTtcbiAgICAgICAgICB9KSA6ICh4ID0gXyhtKSwgRSA9IChmdW5jdGlvbihCLCBZKSB7XG4gICAgICAgICAgICB2YXIgZ2UgPSBZLmNzcywgaWUgPSBZLm1lZGlhO1xuICAgICAgICAgICAgaWYgKGllICYmIEIuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgaWUpLCBCLnN0eWxlU2hlZXQpXG4gICAgICAgICAgICAgIEIuc3R5bGVTaGVldC5jc3NUZXh0ID0gZ2U7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZm9yICg7IEIuZmlyc3RDaGlsZDsgKVxuICAgICAgICAgICAgICAgIEIucmVtb3ZlQ2hpbGQoQi5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgQi5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShnZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pLmJpbmQobnVsbCwgeCksIE0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFMoeCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBFKHYpLCBmdW5jdGlvbihCKSB7XG4gICAgICAgICAgaWYgKEIpIHtcbiAgICAgICAgICAgIGlmIChCLmNzcyA9PT0gdi5jc3MgJiYgQi5tZWRpYSA9PT0gdi5tZWRpYSAmJiBCLnNvdXJjZU1hcCA9PT0gdi5zb3VyY2VNYXApXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIEUodiA9IEIpO1xuICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgTSgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24odiwgbSkge1xuICAgICAgICBpZiAodHlwZW9mIERFQlVHIDwgXCJ1XCIgJiYgREVCVUcgJiYgdHlwZW9mIGRvY3VtZW50ICE9IFwib2JqZWN0XCIpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuICAgICAgICAobSA9IG0gfHwge30pLmF0dHJzID0gdHlwZW9mIG0uYXR0cnMgPT0gXCJvYmplY3RcIiA/IG0uYXR0cnMgOiB7fSwgbS5zaW5nbGV0b24gfHwgdHlwZW9mIG0uc2luZ2xldG9uID09IFwiYm9vbGVhblwiIHx8IChtLnNpbmdsZXRvbiA9IGEoKSksIG0uaW5zZXJ0SW50byB8fCAobS5pbnNlcnRJbnRvID0gXCJoZWFkXCIpLCBtLmluc2VydEF0IHx8IChtLmluc2VydEF0ID0gXCJib3R0b21cIik7XG4gICAgICAgIHZhciB4ID0gayh2LCBtKTtcbiAgICAgICAgcmV0dXJuIGYoeCwgbSksIGZ1bmN0aW9uKEUpIHtcbiAgICAgICAgICBmb3IgKHZhciBNID0gW10sIFQgPSAwOyBUIDwgeC5sZW5ndGg7IFQrKykge1xuICAgICAgICAgICAgdmFyIFAgPSB4W1RdO1xuICAgICAgICAgICAgKEIgPSBsW1AuaWRdKS5yZWZzLS0sIE0ucHVzaChCKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChFICYmIGYoayhFLCBtKSwgbSksIFQgPSAwOyBUIDwgTS5sZW5ndGg7IFQrKykge1xuICAgICAgICAgICAgdmFyIEI7XG4gICAgICAgICAgICBpZiAoKEIgPSBNW1RdKS5yZWZzID09PSAwKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIFkgPSAwOyBZIDwgQi5wYXJ0cy5sZW5ndGg7IFkrKylcbiAgICAgICAgICAgICAgICBCLnBhcnRzW1ldKCk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBsW0IuaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICB2YXIgJCwgb2UgPSAoJCA9IFtdLCBmdW5jdGlvbih2LCBtKSB7XG4gICAgICAgIHJldHVybiAkW3ZdID0gbSwgJC5maWx0ZXIoQm9vbGVhbikuam9pbihgXG5gKTtcbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gZmUodiwgbSwgeCwgRSkge1xuICAgICAgICB2YXIgTSA9IHggPyBcIlwiIDogRS5jc3M7XG4gICAgICAgIGlmICh2LnN0eWxlU2hlZXQpXG4gICAgICAgICAgdi5zdHlsZVNoZWV0LmNzc1RleHQgPSBvZShtLCBNKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIFQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShNKSwgUCA9IHYuY2hpbGROb2RlcztcbiAgICAgICAgICBQW21dICYmIHYucmVtb3ZlQ2hpbGQoUFttXSksIFAubGVuZ3RoID8gdi5pbnNlcnRCZWZvcmUoVCwgUFttXSkgOiB2LmFwcGVuZENoaWxkKFQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24odCwgbykge1xuICAgICAgdC5leHBvcnRzID0gZnVuY3Rpb24oaSkge1xuICAgICAgICB2YXIgcyA9IHR5cGVvZiB3aW5kb3cgPCBcInVcIiAmJiB3aW5kb3cubG9jYXRpb247XG4gICAgICAgIGlmICghcylcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgICAgICAgaWYgKCFpIHx8IHR5cGVvZiBpICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIHZhciByID0gcy5wcm90b2NvbCArIFwiLy9cIiArIHMuaG9zdCwgbCA9IHIgKyBzLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuICAgICAgICByZXR1cm4gaS5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oYSwgYykge1xuICAgICAgICAgIHZhciB1LCBoID0gYy50cmltKCkucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKHAsIGcpIHtcbiAgICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICAgIH0pLnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24ocCwgZykge1xuICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QoaCkgPyBhIDogKHUgPSBoLmluZGV4T2YoXCIvL1wiKSA9PT0gMCA/IGggOiBoLmluZGV4T2YoXCIvXCIpID09PSAwID8gciArIGggOiBsICsgaC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIiksIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkodSkgKyBcIilcIik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICB2YXIgcywgciwgbCwgYSwgYywgdSwgaCwgcCwgZztcbiAgICAgIHQuZXhwb3J0cyA9IChzID0gXCJjZHgtbm90aWZpZXNcIiwgciA9IFwiY2R4LW5vdGlmeVwiLCBsID0gXCJjZHgtbm90aWZ5X19jcm9zc1wiLCBhID0gXCJjZHgtbm90aWZ5X19idXR0b24tLWNvbmZpcm1cIiwgYyA9IFwiY2R4LW5vdGlmeV9fYnV0dG9uLS1jYW5jZWxcIiwgdSA9IFwiY2R4LW5vdGlmeV9faW5wdXRcIiwgaCA9IFwiY2R4LW5vdGlmeV9fYnV0dG9uXCIsIHAgPSBcImNkeC1ub3RpZnlfX2J0bnMtd3JhcHBlclwiLCB7IGFsZXJ0OiBnID0gZnVuY3Rpb24oZikge1xuICAgICAgICB2YXIgayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIEMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBTID0gZi5tZXNzYWdlLCBfID0gZi5zdHlsZTtcbiAgICAgICAgcmV0dXJuIGsuY2xhc3NMaXN0LmFkZChyKSwgXyAmJiBrLmNsYXNzTGlzdC5hZGQociArIFwiLS1cIiArIF8pLCBrLmlubmVySFRNTCA9IFMsIEMuY2xhc3NMaXN0LmFkZChsKSwgQy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgay5yZW1vdmUuYmluZChrKSksIGsuYXBwZW5kQ2hpbGQoQyksIGs7XG4gICAgICB9LCBjb25maXJtOiBmdW5jdGlvbihmKSB7XG4gICAgICAgIHZhciBrID0gZyhmKSwgQyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIFMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLCBfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgZWUgPSBrLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBsKSwgaiA9IGYuY2FuY2VsSGFuZGxlciwgJCA9IGYub2tIYW5kbGVyO1xuICAgICAgICByZXR1cm4gQy5jbGFzc0xpc3QuYWRkKHApLCBTLmlubmVySFRNTCA9IGYub2tUZXh0IHx8IFwiQ29uZmlybVwiLCBfLmlubmVySFRNTCA9IGYuY2FuY2VsVGV4dCB8fCBcIkNhbmNlbFwiLCBTLmNsYXNzTGlzdC5hZGQoaCksIF8uY2xhc3NMaXN0LmFkZChoKSwgUy5jbGFzc0xpc3QuYWRkKGEpLCBfLmNsYXNzTGlzdC5hZGQoYyksIGogJiYgdHlwZW9mIGogPT0gXCJmdW5jdGlvblwiICYmIChfLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBqKSwgZWUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGopKSwgJCAmJiB0eXBlb2YgJCA9PSBcImZ1bmN0aW9uXCIgJiYgUy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgJCksIFMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGsucmVtb3ZlLmJpbmQoaykpLCBfLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBrLnJlbW92ZS5iaW5kKGspKSwgQy5hcHBlbmRDaGlsZChTKSwgQy5hcHBlbmRDaGlsZChfKSwgay5hcHBlbmRDaGlsZChDKSwgaztcbiAgICAgIH0sIHByb21wdDogZnVuY3Rpb24oZikge1xuICAgICAgICB2YXIgayA9IGcoZiksIEMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBTID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgXyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgZWUgPSBrLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBsKSwgaiA9IGYuY2FuY2VsSGFuZGxlciwgJCA9IGYub2tIYW5kbGVyO1xuICAgICAgICByZXR1cm4gQy5jbGFzc0xpc3QuYWRkKHApLCBTLmlubmVySFRNTCA9IGYub2tUZXh0IHx8IFwiT2tcIiwgUy5jbGFzc0xpc3QuYWRkKGgpLCBTLmNsYXNzTGlzdC5hZGQoYSksIF8uY2xhc3NMaXN0LmFkZCh1KSwgZi5wbGFjZWhvbGRlciAmJiBfLnNldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIsIGYucGxhY2Vob2xkZXIpLCBmLmRlZmF1bHQgJiYgKF8udmFsdWUgPSBmLmRlZmF1bHQpLCBmLmlucHV0VHlwZSAmJiAoXy50eXBlID0gZi5pbnB1dFR5cGUpLCBqICYmIHR5cGVvZiBqID09IFwiZnVuY3Rpb25cIiAmJiBlZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaiksICQgJiYgdHlwZW9mICQgPT0gXCJmdW5jdGlvblwiICYmIFMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICQoXy52YWx1ZSk7XG4gICAgICAgIH0pLCBTLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBrLnJlbW92ZS5iaW5kKGspKSwgQy5hcHBlbmRDaGlsZChfKSwgQy5hcHBlbmRDaGlsZChTKSwgay5hcHBlbmRDaGlsZChDKSwgaztcbiAgICAgIH0sIGdldFdyYXBwZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIik7XG4gICAgICAgIHJldHVybiBmLmNsYXNzTGlzdC5hZGQocyksIGY7XG4gICAgICB9IH0pO1xuICAgIH1dKTtcbiAgfSk7XG59KShVdCk7XG52YXIgWG8gPSBVdC5leHBvcnRzO1xuY29uc3QgVm8gPSAvKiBAX19QVVJFX18gKi8gRmUoWG8pO1xuY2xhc3MgcW8ge1xuICAvKipcbiAgICogU2hvdyB3ZWIgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm90aWZpZXJPcHRpb25zIHwgQ29uZmlybU5vdGlmaWVyT3B0aW9ucyB8IFByb21wdE5vdGlmaWVyT3B0aW9uc30gb3B0aW9ucyAtIG5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBzaG93KGUpIHtcbiAgICBWby5zaG93KGUpO1xuICB9XG59XG5jbGFzcyBabyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMubm90aWZpZXIgPSBuZXcgcW8oKTtcbiAgfVxuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93OiAoZSkgPT4gdGhpcy5zaG93KGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2hvdyBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtOb3RpZmllck9wdGlvbnN9IG9wdGlvbnMgLSBtZXNzYWdlIG9wdGlvblxuICAgKi9cbiAgc2hvdyhlKSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZpZXIuc2hvdyhlKTtcbiAgfVxufVxuY2xhc3MgR28gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICBjb25zdCBlID0gKCkgPT4gdGhpcy5pc0VuYWJsZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvZ2dsZTogKHQpID0+IHRoaXMudG9nZ2xlKHQpLFxuICAgICAgZ2V0IGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgb3IgdG9nZ2xlIHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBzdGF0ZSAtIHNldCBvciB0b2dnbGUgc3RhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGN1cnJlbnQgdmFsdWVcbiAgICovXG4gIHRvZ2dsZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLlJlYWRPbmx5LnRvZ2dsZShlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IHJlYWQtb25seSBzdGF0ZVxuICAgKi9cbiAgZ2V0IGlzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkO1xuICB9XG59XG52YXIganQgPSB7IGV4cG9ydHM6IHt9IH07XG4oZnVuY3Rpb24obiwgZSkge1xuICAoZnVuY3Rpb24odCwgbykge1xuICAgIG4uZXhwb3J0cyA9IG8oKTtcbiAgfSkoa28sIGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoaCkge1xuICAgICAgdmFyIHAgPSBoLnRhZ3MsIGcgPSBPYmplY3Qua2V5cyhwKSwgZiA9IGcubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwW2tdO1xuICAgICAgfSkuZXZlcnkoZnVuY3Rpb24oaykge1xuICAgICAgICByZXR1cm4gayA9PT0gXCJvYmplY3RcIiB8fCBrID09PSBcImJvb2xlYW5cIiB8fCBrID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICB9KTtcbiAgICAgIGlmICghZilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGNvbmZpZ3VyYXRpb24gd2FzIGludmFsaWRcIik7XG4gICAgICB0aGlzLmNvbmZpZyA9IGg7XG4gICAgfVxuICAgIHZhciBvID0gW1wiUFwiLCBcIkxJXCIsIFwiVERcIiwgXCJUSFwiLCBcIkRJVlwiLCBcIkgxXCIsIFwiSDJcIiwgXCJIM1wiLCBcIkg0XCIsIFwiSDVcIiwgXCJINlwiLCBcIlBSRVwiXTtcbiAgICBmdW5jdGlvbiBpKGgpIHtcbiAgICAgIHJldHVybiBvLmluZGV4T2YoaC5ub2RlTmFtZSkgIT09IC0xO1xuICAgIH1cbiAgICB2YXIgcyA9IFtcIkFcIiwgXCJCXCIsIFwiU1RST05HXCIsIFwiSVwiLCBcIkVNXCIsIFwiU1VCXCIsIFwiU1VQXCIsIFwiVVwiLCBcIlNUUklLRVwiXTtcbiAgICBmdW5jdGlvbiByKGgpIHtcbiAgICAgIHJldHVybiBzLmluZGV4T2YoaC5ub2RlTmFtZSkgIT09IC0xO1xuICAgIH1cbiAgICB0LnByb3RvdHlwZS5jbGVhbiA9IGZ1bmN0aW9uKGgpIHtcbiAgICAgIGNvbnN0IHAgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKSwgZyA9IHAuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHJldHVybiBnLmlubmVySFRNTCA9IGgsIHRoaXMuX3Nhbml0aXplKHAsIGcpLCBnLmlubmVySFRNTDtcbiAgICB9LCB0LnByb3RvdHlwZS5fc2FuaXRpemUgPSBmdW5jdGlvbihoLCBwKSB7XG4gICAgICB2YXIgZyA9IGwoaCwgcCksIGYgPSBnLmZpcnN0Q2hpbGQoKTtcbiAgICAgIGlmIChmKVxuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKGYubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKVxuICAgICAgICAgICAgaWYgKGYuZGF0YS50cmltKCkgPT09IFwiXCIgJiYgKGYucHJldmlvdXNFbGVtZW50U2libGluZyAmJiBpKGYucHJldmlvdXNFbGVtZW50U2libGluZykgfHwgZi5uZXh0RWxlbWVudFNpYmxpbmcgJiYgaShmLm5leHRFbGVtZW50U2libGluZykpKSB7XG4gICAgICAgICAgICAgIHAucmVtb3ZlQ2hpbGQoZiksIHRoaXMuX3Nhbml0aXplKGgsIHApO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBpZiAoZi5ub2RlVHlwZSA9PT0gTm9kZS5DT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgIHAucmVtb3ZlQ2hpbGQoZiksIHRoaXMuX3Nhbml0aXplKGgsIHApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBrID0gcihmKSwgQztcbiAgICAgICAgICBrICYmIChDID0gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChmLmNoaWxkTm9kZXMsIGkpKTtcbiAgICAgICAgICB2YXIgUyA9ICEhcC5wYXJlbnROb2RlLCBfID0gaShwKSAmJiBpKGYpICYmIFMsIGVlID0gZi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCBqID0gYSh0aGlzLmNvbmZpZywgZWUsIGYpLCAkID0gayAmJiBDO1xuICAgICAgICAgIGlmICgkIHx8IGMoZiwgaikgfHwgIXRoaXMuY29uZmlnLmtlZXBOZXN0ZWRCbG9ja0VsZW1lbnRzICYmIF8pIHtcbiAgICAgICAgICAgIGlmICghKGYubm9kZU5hbWUgPT09IFwiU0NSSVBUXCIgfHwgZi5ub2RlTmFtZSA9PT0gXCJTVFlMRVwiKSlcbiAgICAgICAgICAgICAgZm9yICg7IGYuY2hpbGROb2Rlcy5sZW5ndGggPiAwOyApXG4gICAgICAgICAgICAgICAgcC5pbnNlcnRCZWZvcmUoZi5jaGlsZE5vZGVzWzBdLCBmKTtcbiAgICAgICAgICAgIHAucmVtb3ZlQ2hpbGQoZiksIHRoaXMuX3Nhbml0aXplKGgsIHApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIG9lID0gMDsgb2UgPCBmLmF0dHJpYnV0ZXMubGVuZ3RoOyBvZSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgZmUgPSBmLmF0dHJpYnV0ZXNbb2VdO1xuICAgICAgICAgICAgdShmZSwgaiwgZikgJiYgKGYucmVtb3ZlQXR0cmlidXRlKGZlLm5hbWUpLCBvZSA9IG9lIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3Nhbml0aXplKGgsIGYpO1xuICAgICAgICB9IHdoaWxlIChmID0gZy5uZXh0U2libGluZygpKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGwoaCwgcCkge1xuICAgICAgcmV0dXJuIGguY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgcCxcbiAgICAgICAgTm9kZUZpbHRlci5TSE9XX1RFWFQgfCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCB8IE5vZGVGaWx0ZXIuU0hPV19DT01NRU5ULFxuICAgICAgICBudWxsLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYShoLCBwLCBnKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGgudGFnc1twXSA9PSBcImZ1bmN0aW9uXCIgPyBoLnRhZ3NbcF0oZykgOiBoLnRhZ3NbcF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGMoaCwgcCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBwID4gXCJ1XCIgPyAhMCA6IHR5cGVvZiBwID09IFwiYm9vbGVhblwiID8gIXAgOiAhMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdShoLCBwLCBnKSB7XG4gICAgICB2YXIgZiA9IGgubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHAgPT09ICEwID8gITEgOiB0eXBlb2YgcFtmXSA9PSBcImZ1bmN0aW9uXCIgPyAhcFtmXShoLnZhbHVlLCBnKSA6IHR5cGVvZiBwW2ZdID4gXCJ1XCIgfHwgcFtmXSA9PT0gITEgPyAhMCA6IHR5cGVvZiBwW2ZdID09IFwic3RyaW5nXCIgPyBwW2ZdICE9PSBoLnZhbHVlIDogITE7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9KTtcbn0pKGp0KTtcbnZhciBKbyA9IGp0LmV4cG9ydHM7XG5jb25zdCBRbyA9IC8qIEBfX1BVUkVfXyAqLyBGZShKbyk7XG5mdW5jdGlvbiBvdChuLCBlKSB7XG4gIHJldHVybiBuLm1hcCgodCkgPT4ge1xuICAgIGNvbnN0IG8gPSBPKGUpID8gZSh0LnRvb2wpIDogZTtcbiAgICByZXR1cm4gVihvKSB8fCAodC5kYXRhID0gaXQodC5kYXRhLCBvKSksIHQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gcShuLCBlID0ge30pIHtcbiAgY29uc3QgdCA9IHtcbiAgICB0YWdzOiBlXG4gIH07XG4gIHJldHVybiBuZXcgUW8odCkuY2xlYW4obik7XG59XG5mdW5jdGlvbiBpdChuLCBlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG4pID8gZWkobiwgZSkgOiBSKG4pID8gdGkobiwgZSkgOiBRKG4pID8gb2kobiwgZSkgOiBuO1xufVxuZnVuY3Rpb24gZWkobiwgZSkge1xuICByZXR1cm4gbi5tYXAoKHQpID0+IGl0KHQsIGUpKTtcbn1cbmZ1bmN0aW9uIHRpKG4sIGUpIHtcbiAgY29uc3QgdCA9IHt9O1xuICBmb3IgKGNvbnN0IG8gaW4gbikge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIG8pKVxuICAgICAgY29udGludWU7XG4gICAgY29uc3QgaSA9IG5bb10sIHMgPSBpaShlW29dKSA/IGVbb10gOiBlO1xuICAgIHRbb10gPSBpdChpLCBzKTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIG9pKG4sIGUpIHtcbiAgcmV0dXJuIFIoZSkgPyBxKG4sIGUpIDogZSA9PT0gITEgPyBxKG4sIHt9KSA6IG47XG59XG5mdW5jdGlvbiBpaShuKSB7XG4gIHJldHVybiBSKG4pIHx8IHlvKG4pIHx8IE8obik7XG59XG5jbGFzcyBzaSBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1Nhbml0aXplckNvbmZpZ31cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGVhbjogKGUsIHQpID0+IHRoaXMuY2xlYW4oZSwgdClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtIHNhbml0aXppbmcgb2YgYSBzdHJpbmdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhaW50U3RyaW5nIC0gd2hhdCB0byBzYW5pdGl6ZVxuICAgKiBAcGFyYW0ge1Nhbml0aXplckNvbmZpZ30gY29uZmlnIC0gc2FuaXRpemVyIGNvbmZpZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgY2xlYW4oZSwgdCkge1xuICAgIHJldHVybiBxKGUsIHQpO1xuICB9XG59XG5jbGFzcyBuaSBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1NhdmVyfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNhdmU6ICgpID0+IHRoaXMuc2F2ZSgpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIEVkaXRvcidzIGRhdGFcbiAgICpcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBzYXZlKCkge1xuICAgIGNvbnN0IGUgPSBcIkVkaXRvcidzIGNvbnRlbnQgY2FuIG5vdCBiZSBzYXZlZCBpbiByZWFkLW9ubHkgbW9kZVwiO1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQgPyAoWChlLCBcIndhcm5cIiksIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihlKSkpIDogdGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpO1xuICB9XG59XG5jbGFzcyByaSBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnNlbGVjdGlvblV0aWxzID0gbmV3IGIoKTtcbiAgfVxuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1NlbGVjdGlvbkFQSUludGVyZmFjZX1cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaW5kUGFyZW50VGFnOiAoZSwgdCkgPT4gdGhpcy5maW5kUGFyZW50VGFnKGUsIHQpLFxuICAgICAgZXhwYW5kVG9UYWc6IChlKSA9PiB0aGlzLmV4cGFuZFRvVGFnKGUpLFxuICAgICAgc2F2ZTogKCkgPT4gdGhpcy5zZWxlY3Rpb25VdGlscy5zYXZlKCksXG4gICAgICByZXN0b3JlOiAoKSA9PiB0aGlzLnNlbGVjdGlvblV0aWxzLnJlc3RvcmUoKSxcbiAgICAgIHNldEZha2VCYWNrZ3JvdW5kOiAoKSA9PiB0aGlzLnNlbGVjdGlvblV0aWxzLnNldEZha2VCYWNrZ3JvdW5kKCksXG4gICAgICByZW1vdmVGYWtlQmFja2dyb3VuZDogKCkgPT4gdGhpcy5zZWxlY3Rpb25VdGlscy5yZW1vdmVGYWtlQmFja2dyb3VuZCgpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTG9va3MgYWhlYWQgZnJvbSBzZWxlY3Rpb24gYW5kIGZpbmQgcGFzc2VkIHRhZyB3aXRoIGNsYXNzIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgLSB0YWcgdG8gZmluZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIC0gdGFnJ3MgY2xhc3MgbmFtZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH1cbiAgICovXG4gIGZpbmRQYXJlbnRUYWcoZSwgdCkge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblV0aWxzLmZpbmRQYXJlbnRUYWcoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEV4cGFuZCBzZWxlY3Rpb24gdG8gcGFzc2VkIHRhZ1xuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIC0gdGFnIHRoYXQgc2hvdWxkIGNvbnRhaW4gc2VsZWN0aW9uXG4gICAqL1xuICBleHBhbmRUb1RhZyhlKSB7XG4gICAgdGhpcy5zZWxlY3Rpb25VdGlscy5leHBhbmRUb1RhZyhlKTtcbiAgfVxufVxuY2xhc3MgbGkgZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0QmxvY2tUb29sczogKCkgPT4gQXJyYXkuZnJvbSh0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLnZhbHVlcygpKVxuICAgIH07XG4gIH1cbn1cbmNsYXNzIGFpIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBFeHBvcnRlZCBjbGFzc2VzXG4gICAqL1xuICBnZXQgY2xhc3NlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBCYXNlIEJsb2NrIHN0eWxlc1xuICAgICAgICovXG4gICAgICBibG9jazogXCJjZHgtYmxvY2tcIixcbiAgICAgIC8qKlxuICAgICAgICogSW5saW5lIFRvb2xzIHN0eWxlc1xuICAgICAgICovXG4gICAgICBpbmxpbmVUb29sQnV0dG9uOiBcImNlLWlubGluZS10b29sXCIsXG4gICAgICBpbmxpbmVUb29sQnV0dG9uQWN0aXZlOiBcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixcbiAgICAgIC8qKlxuICAgICAgICogVUkgZWxlbWVudHNcbiAgICAgICAqL1xuICAgICAgaW5wdXQ6IFwiY2R4LWlucHV0XCIsXG4gICAgICBsb2FkZXI6IFwiY2R4LWxvYWRlclwiLFxuICAgICAgYnV0dG9uOiBcImNkeC1idXR0b25cIixcbiAgICAgIC8qKlxuICAgICAgICogU2V0dGluZ3Mgc3R5bGVzXG4gICAgICAgKi9cbiAgICAgIHNldHRpbmdzQnV0dG9uOiBcImNkeC1zZXR0aW5ncy1idXR0b25cIixcbiAgICAgIHNldHRpbmdzQnV0dG9uQWN0aXZlOiBcImNkeC1zZXR0aW5ncy1idXR0b24tLWFjdGl2ZVwiXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgY2kgZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtUb29sYmFyfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsb3NlOiAoKSA9PiB0aGlzLmNsb3NlKCksXG4gICAgICBvcGVuOiAoKSA9PiB0aGlzLm9wZW4oKSxcbiAgICAgIHRvZ2dsZUJsb2NrU2V0dGluZ3M6IChlKSA9PiB0aGlzLnRvZ2dsZUJsb2NrU2V0dGluZ3MoZSksXG4gICAgICB0b2dnbGVUb29sYm94OiAoZSkgPT4gdGhpcy50b2dnbGVUb29sYm94KGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT3BlbiB0b29sYmFyXG4gICAqL1xuICBvcGVuKCkge1xuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgdG9vbGJhciBhbmQgYWxsIGluY2x1ZGVkIGVsZW1lbnRzXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgQmxvY2sgU2V0dGluZyBvZiB0aGUgY3VycmVudCBibG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wZW5pbmdTdGF0ZSDigJQgIG9wZW5pbmcgc3RhdGUgb2YgQmxvY2sgU2V0dGluZ1xuICAgKi9cbiAgdG9nZ2xlQmxvY2tTZXR0aW5ncyhlKSB7XG4gICAgaWYgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2tJbmRleCA9PT0gLTEpIHtcbiAgICAgIFgoXCJDb3VsZCd0IHRvZ2dsZSB0aGUgVG9vbGJhciBiZWNhdXNlIHRoZXJlIGlzIG5vIGJsb2NrIHNlbGVjdGVkIFwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUgPz8gIXRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkID8gKHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKCkpIDogdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIHRvb2xib3hcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBvcGVuaW5nU3RhdGUgLSBPcGVuaW5nIHN0YXRlIG9mIHRvb2xib3hcbiAgICovXG4gIHRvZ2dsZVRvb2xib3goZSkge1xuICAgIGlmICh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrSW5kZXggPT09IC0xKSB7XG4gICAgICBYKFwiQ291bGQndCB0b2dnbGUgdGhlIFRvb2xib3ggYmVjYXVzZSB0aGVyZSBpcyBubyBibG9jayBzZWxlY3RlZCBcIiwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlID8/ICF0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3gub3BlbmVkID8gKHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKSwgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW4oKSkgOiB0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3guY2xvc2UoKTtcbiAgfVxufVxudmFyICR0ID0geyBleHBvcnRzOiB7fSB9O1xuLyohXG4gKiBDb2RlWC5Ub29sdGlwc1xuICogXG4gKiBAdmVyc2lvbiAxLjAuNVxuICogXG4gKiBAbGljZW5jZSBNSVRcbiAqIEBhdXRob3IgQ29kZVggPGh0dHBzOi8vY29kZXguc28+XG4gKiBcbiAqIFxuICovXG4oZnVuY3Rpb24obiwgZSkge1xuICAoZnVuY3Rpb24odCwgbykge1xuICAgIG4uZXhwb3J0cyA9IG8oKTtcbiAgfSkod2luZG93LCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIGZ1bmN0aW9uIGkocykge1xuICAgICAgICBpZiAob1tzXSlcbiAgICAgICAgICByZXR1cm4gb1tzXS5leHBvcnRzO1xuICAgICAgICB2YXIgciA9IG9bc10gPSB7IGk6IHMsIGw6ICExLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICByZXR1cm4gdFtzXS5jYWxsKHIuZXhwb3J0cywgciwgci5leHBvcnRzLCBpKSwgci5sID0gITAsIHIuZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpLm0gPSB0LCBpLmMgPSBvLCBpLmQgPSBmdW5jdGlvbihzLCByLCBsKSB7XG4gICAgICAgIGkubyhzLCByKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkocywgciwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBsIH0pO1xuICAgICAgfSwgaS5yID0gZnVuY3Rpb24ocykge1xuICAgICAgICB0eXBlb2YgU3ltYm9sIDwgXCJ1XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gICAgICB9LCBpLnQgPSBmdW5jdGlvbihzLCByKSB7XG4gICAgICAgIGlmICgxICYgciAmJiAocyA9IGkocykpLCA4ICYgciB8fCA0ICYgciAmJiB0eXBlb2YgcyA9PSBcIm9iamVjdFwiICYmIHMgJiYgcy5fX2VzTW9kdWxlKVxuICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB2YXIgbCA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoaS5yKGwpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobCwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiBzIH0pLCAyICYgciAmJiB0eXBlb2YgcyAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgIGZvciAodmFyIGEgaW4gcylcbiAgICAgICAgICAgIGkuZChsLCBhLCAoZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICByZXR1cm4gc1tjXTtcbiAgICAgICAgICAgIH0pLmJpbmQobnVsbCwgYSkpO1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH0sIGkubiA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgdmFyIHIgPSBzICYmIHMuX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzLmRlZmF1bHQ7XG4gICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkuZChyLCBcImFcIiwgciksIHI7XG4gICAgICB9LCBpLm8gPSBmdW5jdGlvbihzLCByKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcik7XG4gICAgICB9LCBpLnAgPSBcIlwiLCBpKGkucyA9IDApO1xuICAgIH0oW2Z1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIHQuZXhwb3J0cyA9IGkoMSk7XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgaS5yKG8pLCBpLmQobywgXCJkZWZhdWx0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0pO1xuICAgICAgY2xhc3MgcyB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgIHRoaXMubm9kZXMgPSB7IHdyYXBwZXI6IG51bGwsIGNvbnRlbnQ6IG51bGwgfSwgdGhpcy5zaG93ZWQgPSAhMSwgdGhpcy5vZmZzZXRUb3AgPSAxMCwgdGhpcy5vZmZzZXRMZWZ0ID0gMTAsIHRoaXMub2Zmc2V0UmlnaHQgPSAxMCwgdGhpcy5oaWRpbmdEZWxheSA9IDAsIHRoaXMuaGFuZGxlV2luZG93U2Nyb2xsID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93ZWQgJiYgdGhpcy5oaWRlKCEwKTtcbiAgICAgICAgICB9LCB0aGlzLmxvYWRTdHlsZXMoKSwgdGhpcy5wcmVwYXJlKCksIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGFuZGxlV2luZG93U2Nyb2xsLCB7IHBhc3NpdmU6ICEwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGdldCBDU1MoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgdG9vbHRpcDogXCJjdFwiLCB0b29sdGlwQ29udGVudDogXCJjdF9fY29udGVudFwiLCB0b29sdGlwU2hvd246IFwiY3QtLXNob3duXCIsIHBsYWNlbWVudDogeyBsZWZ0OiBcImN0LS1sZWZ0XCIsIGJvdHRvbTogXCJjdC0tYm90dG9tXCIsIHJpZ2h0OiBcImN0LS1yaWdodFwiLCB0b3A6IFwiY3QtLXRvcFwiIH0gfTtcbiAgICAgICAgfVxuICAgICAgICBzaG93KGwsIGEsIGMpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIgfHwgdGhpcy5wcmVwYXJlKCksIHRoaXMuaGlkaW5nVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5oaWRpbmdUaW1lb3V0KTtcbiAgICAgICAgICBjb25zdCB1ID0gT2JqZWN0LmFzc2lnbih7IHBsYWNlbWVudDogXCJib3R0b21cIiwgbWFyZ2luVG9wOiAwLCBtYXJnaW5MZWZ0OiAwLCBtYXJnaW5SaWdodDogMCwgbWFyZ2luQm90dG9tOiAwLCBkZWxheTogNzAsIGhpZGluZ0RlbGF5OiAwIH0sIGMpO1xuICAgICAgICAgIGlmICh1LmhpZGluZ0RlbGF5ICYmICh0aGlzLmhpZGluZ0RlbGF5ID0gdS5oaWRpbmdEZWxheSksIHRoaXMubm9kZXMuY29udGVudC5pbm5lckhUTUwgPSBcIlwiLCB0eXBlb2YgYSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgdGhpcy5ub2Rlcy5jb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEpKTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghKGEgaW5zdGFuY2VvZiBOb2RlKSlcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJbQ29kZVggVG9vbHRpcF0gV3JvbmcgdHlwZSBvZiDCq2NvbnRlbnTCuyBwYXNzZWQuIEl0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiBOb2RlIG9yIFN0cmluZy4gQnV0IFwiICsgdHlwZW9mIGEgKyBcIiBnaXZlbi5cIik7XG4gICAgICAgICAgICB0aGlzLm5vZGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAodGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoLi4uT2JqZWN0LnZhbHVlcyh0aGlzLkNTUy5wbGFjZW1lbnQpKSwgdS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgICAgICAgICAgdGhpcy5wbGFjZVRvcChsLCB1KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgICAgICB0aGlzLnBsYWNlTGVmdChsLCB1KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICAgICAgdGhpcy5wbGFjZVJpZ2h0KGwsIHUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRoaXMucGxhY2VCb3R0b20obCwgdSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHUgJiYgdS5kZWxheSA/IHRoaXMuc2hvd2luZ1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRvb2x0aXBTaG93biksIHRoaXMuc2hvd2VkID0gITA7XG4gICAgICAgICAgfSwgdS5kZWxheSkgOiAodGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MudG9vbHRpcFNob3duKSwgdGhpcy5zaG93ZWQgPSAhMCk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZShsID0gITEpIHtcbiAgICAgICAgICBpZiAodGhpcy5oaWRpbmdEZWxheSAmJiAhbClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhpZGluZ1RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMuaGlkaW5nVGltZW91dCksIHZvaWQgKHRoaXMuaGlkaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmhpZGUoITApO1xuICAgICAgICAgICAgfSwgdGhpcy5oaWRpbmdEZWxheSkpO1xuICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLnRvb2x0aXBTaG93biksIHRoaXMuc2hvd2VkID0gITEsIHRoaXMuc2hvd2luZ1RpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMuc2hvd2luZ1RpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIG9uSG92ZXIobCwgYSwgYykge1xuICAgICAgICAgIGwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zaG93KGwsIGEsIGMpO1xuICAgICAgICAgIH0pLCBsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGRlc3Ryb3koKSB7XG4gICAgICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyLnJlbW92ZSgpLCB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB0aGlzLmhhbmRsZVdpbmRvd1Njcm9sbCk7XG4gICAgICAgIH1cbiAgICAgICAgcHJlcGFyZSgpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSB0aGlzLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MudG9vbHRpcCksIHRoaXMubm9kZXMuY29udGVudCA9IHRoaXMubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b29sdGlwQ29udGVudCksIHRoaXMuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy5jb250ZW50KSwgdGhpcy5hcHBlbmQoZG9jdW1lbnQuYm9keSwgdGhpcy5ub2Rlcy53cmFwcGVyKTtcbiAgICAgICAgfVxuICAgICAgICBsb2FkU3R5bGVzKCkge1xuICAgICAgICAgIGNvbnN0IGwgPSBcImNvZGV4LXRvb2x0aXBzLXN0eWxlXCI7XG4gICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGwpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIGNvbnN0IGEgPSBpKDIpLCBjID0gdGhpcy5tYWtlKFwic3R5bGVcIiwgbnVsbCwgeyB0ZXh0Q29udGVudDogYS50b1N0cmluZygpLCBpZDogbCB9KTtcbiAgICAgICAgICB0aGlzLnByZXBlbmQoZG9jdW1lbnQuaGVhZCwgYyk7XG4gICAgICAgIH1cbiAgICAgICAgcGxhY2VCb3R0b20obCwgYSkge1xuICAgICAgICAgIGNvbnN0IGMgPSBsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0ICsgbC5jbGllbnRXaWR0aCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGggLyAyLCBoID0gYy5ib3R0b20gKyB3aW5kb3cucGFnZVlPZmZzZXQgKyB0aGlzLm9mZnNldFRvcCArIGEubWFyZ2luVG9wO1xuICAgICAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoXCJib3R0b21cIiwgdSwgaCk7XG4gICAgICAgIH1cbiAgICAgICAgcGxhY2VUb3AobCwgYSkge1xuICAgICAgICAgIGNvbnN0IGMgPSBsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0ICsgbC5jbGllbnRXaWR0aCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGggLyAyLCBoID0gYy50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgLSB0aGlzLm5vZGVzLndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gdGhpcy5vZmZzZXRUb3A7XG4gICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChcInRvcFwiLCB1LCBoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZUxlZnQobCwgYSkge1xuICAgICAgICAgIGNvbnN0IGMgPSBsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gYy5sZWZ0IC0gdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldFdpZHRoIC0gdGhpcy5vZmZzZXRMZWZ0IC0gYS5tYXJnaW5MZWZ0LCBoID0gYy50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgKyBsLmNsaWVudEhlaWdodCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICB0aGlzLmFwcGx5UGxhY2VtZW50KFwibGVmdFwiLCB1LCBoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZVJpZ2h0KGwsIGEpIHtcbiAgICAgICAgICBjb25zdCBjID0gbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdSA9IGMucmlnaHQgKyB0aGlzLm9mZnNldFJpZ2h0ICsgYS5tYXJnaW5SaWdodCwgaCA9IGMudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0ICsgbC5jbGllbnRIZWlnaHQgLyAyIC0gdGhpcy5ub2Rlcy53cmFwcGVyLm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChcInJpZ2h0XCIsIHUsIGgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcGx5UGxhY2VtZW50KGwsIGEsIGMpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5wbGFjZW1lbnRbbF0pLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdCA9IGEgKyBcInB4XCIsIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBjICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIG1ha2UobCwgYSA9IG51bGwsIGMgPSB7fSkge1xuICAgICAgICAgIGNvbnN0IHUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGwpO1xuICAgICAgICAgIEFycmF5LmlzQXJyYXkoYSkgPyB1LmNsYXNzTGlzdC5hZGQoLi4uYSkgOiBhICYmIHUuY2xhc3NMaXN0LmFkZChhKTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGggaW4gYylcbiAgICAgICAgICAgIGMuaGFzT3duUHJvcGVydHkoaCkgJiYgKHVbaF0gPSBjW2hdKTtcbiAgICAgICAgICByZXR1cm4gdTtcbiAgICAgICAgfVxuICAgICAgICBhcHBlbmQobCwgYSkge1xuICAgICAgICAgIEFycmF5LmlzQXJyYXkoYSkgPyBhLmZvckVhY2goKGMpID0+IGwuYXBwZW5kQ2hpbGQoYykpIDogbC5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgfVxuICAgICAgICBwcmVwZW5kKGwsIGEpIHtcbiAgICAgICAgICBBcnJheS5pc0FycmF5KGEpID8gKGEgPSBhLnJldmVyc2UoKSkuZm9yRWFjaCgoYykgPT4gbC5wcmVwZW5kKGMpKSA6IGwucHJlcGVuZChhKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uKHQsIG8pIHtcbiAgICAgIHQuZXhwb3J0cyA9IGAuY3R7ei1pbmRleDo5OTk7b3BhY2l0eTowOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtwb2ludGVyLWV2ZW50czpub25lOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbiwtd2Via2l0LXRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3RyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sLXdlYmtpdC10cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt0cmFuc2l0aW9uOm9wYWNpdHkgNTBtcyBlYXNlLWluLHRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3RyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSksLXdlYmtpdC10cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTt3aWxsLWNoYW5nZTpvcGFjaXR5LHRvcCxsZWZ0Oy13ZWJraXQtYm94LXNoYWRvdzowIDhweCAxMnB4IDAgcmdiYSgyOSwzMiw0MywuMTcpLDAgNHB4IDVweCAtM3B4IHJnYmEoNSw2LDEyLC40OSk7Ym94LXNoYWRvdzowIDhweCAxMnB4IDAgcmdiYSgyOSwzMiw0MywuMTcpLDAgNHB4IDVweCAtM3B4IHJnYmEoNSw2LDEyLC40OSk7Ym9yZGVyLXJhZGl1czo5cHh9LmN0LC5jdDpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowfS5jdDpiZWZvcmV7Y29udGVudDpcIlwiO2JvdHRvbTowO3JpZ2h0OjA7YmFja2dyb3VuZC1jb2xvcjojMWQyMDJiO3otaW5kZXg6LTE7Ym9yZGVyLXJhZGl1czo0cHh9QHN1cHBvcnRzKC13ZWJraXQtbWFzay1ib3gtaW1hZ2U6dXJsKFwiXCIpKXsuY3Q6YmVmb3Jle2JvcmRlci1yYWRpdXM6MDstd2Via2l0LW1hc2stYm94LWltYWdlOnVybCgnZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmLTgsPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCI+PHBhdGggZD1cIk0xMC43MSAwaDIuNThjMy4wMiAwIDQuNjQuNDIgNi4xIDEuMmE4LjE4IDguMTggMCAwMTMuNCAzLjRDMjMuNiA2LjA3IDI0IDcuNyAyNCAxMC43MXYyLjU4YzAgMy4wMi0uNDIgNC42NC0xLjIgNi4xYTguMTggOC4xOCAwIDAxLTMuNCAzLjRjLTEuNDcuOC0zLjEgMS4yMS02LjExIDEuMjFIMTAuN2MtMy4wMiAwLTQuNjQtLjQyLTYuMS0xLjJhOC4xOCA4LjE4IDAgMDEtMy40LTMuNEMuNCAxNy45MyAwIDE2LjMgMCAxMy4yOVYxMC43YzAtMy4wMi40Mi00LjY0IDEuMi02LjFhOC4xOCA4LjE4IDAgMDEzLjQtMy40QzYuMDcuNCA3LjcgMCAxMC43MSAwelwiLz48L3N2Zz4nKSA0OCUgNDElIDM3LjklIDUzLjMlfX1AbWVkaWEgKC0tbW9iaWxlKXsuY3R7ZGlzcGxheTpub25lfX0uY3RfX2NvbnRlbnR7cGFkZGluZzo2cHggMTBweDtjb2xvcjojY2RkMWUwO2ZvbnQtc2l6ZToxMnB4O3RleHQtYWxpZ246Y2VudGVyO2xldHRlci1zcGFjaW5nOi4wMmVtO2xpbmUtaGVpZ2h0OjFlbX0uY3Q6YWZ0ZXJ7Y29udGVudDpcIlwiO3dpZHRoOjhweDtoZWlnaHQ6OHB4O3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6IzFkMjAyYjt6LWluZGV4Oi0xfS5jdC0tYm90dG9tey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1cHgpfS5jdC0tYm90dG9tOmFmdGVye3RvcDotM3B4O2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS10b3B7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNXB4KX0uY3QtLXRvcDphZnRlcnt0b3A6YXV0bztib3R0b206LTNweDtsZWZ0OjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tbGVmdHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKC01cHgpfS5jdC0tbGVmdDphZnRlcnt0b3A6NTAlO2xlZnQ6YXV0bztyaWdodDowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSg0MS42JSwtNTAlKSByb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlKDQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tcmlnaHR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCl9LmN0LS1yaWdodDphZnRlcnt0b3A6NTAlO2xlZnQ6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpfS5jdC0tc2hvd257b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9YDtcbiAgICB9XSkuZGVmYXVsdDtcbiAgfSk7XG59KSgkdCk7XG52YXIgZGkgPSAkdC5leHBvcnRzO1xuY29uc3QgaGkgPSAvKiBAX19QVVJFX18gKi8gRmUoZGkpO1xubGV0IFUgPSBudWxsO1xuZnVuY3Rpb24gc3QoKSB7XG4gIFUgfHwgKFUgPSBuZXcgaGkoKSk7XG59XG5mdW5jdGlvbiB1aShuLCBlLCB0KSB7XG4gIHN0KCksIFUgPT0gbnVsbCB8fCBVLnNob3cobiwgZSwgdCk7XG59XG5mdW5jdGlvbiBOZShuID0gITEpIHtcbiAgc3QoKSwgVSA9PSBudWxsIHx8IFUuaGlkZShuKTtcbn1cbmZ1bmN0aW9uIFBlKG4sIGUsIHQpIHtcbiAgc3QoKSwgVSA9PSBudWxsIHx8IFUub25Ib3ZlcihuLCBlLCB0KTtcbn1cbmZ1bmN0aW9uIHBpKCkge1xuICBVID09IG51bGwgfHwgVS5kZXN0cm95KCksIFUgPSBudWxsO1xufVxuY2xhc3MgZmkgZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbiAtIE1vZHVsZSBDb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmNvbmZpZyAtIEVkaXRvcidzIGNvbmZpZ1xuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5ldmVudHNEaXNwYXRjaGVyIC0gRWRpdG9yJ3MgZXZlbnQgZGlzcGF0Y2hlclxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBjb25maWc6IGUsIGV2ZW50c0Rpc3BhdGNoZXI6IHQgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvbmZpZzogZSxcbiAgICAgIGV2ZW50c0Rpc3BhdGNoZXI6IHRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93OiAoZSwgdCwgbykgPT4gdGhpcy5zaG93KGUsIHQsIG8pLFxuICAgICAgaGlkZTogKCkgPT4gdGhpcy5oaWRlKCksXG4gICAgICBvbkhvdmVyOiAoZSwgdCwgbykgPT4gdGhpcy5vbkhvdmVyKGUsIHQsIG8pXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kIHNob3cgdG9vbHRpcCBvbiBlbGVtZW50IHdpdGggcGFzc2VkIEhUTUwgY29udGVudFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCBvbiB3aGljaCB0b29sdGlwIHNob3VsZCBiZSBzaG93blxuICAgKiBAcGFyYW0ge1Rvb2x0aXBDb250ZW50fSBjb250ZW50IC0gdG9vbHRpcCBjb250ZW50XG4gICAqIEBwYXJhbSB7VG9vbHRpcE9wdGlvbnN9IG9wdGlvbnMgLSB0b29sdGlwIG9wdGlvbnNcbiAgICovXG4gIHNob3coZSwgdCwgbykge1xuICAgIHVpKGUsIHQsIG8pO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgaGlkZXMgdG9vbHRpcCBvbiBIVE1MIHBhZ2VcbiAgICovXG4gIGhpZGUoKSB7XG4gICAgTmUoKTtcbiAgfVxuICAvKipcbiAgICogRGVjb3JhdG9yIGZvciBzaG93aW5nIFRvb2x0aXAgYnkgbW91c2VlbnRlci9tb3VzZWxlYXZlXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IG9uIHdoaWNoIHRvb2x0aXAgc2hvdWxkIGJlIHNob3duXG4gICAqIEBwYXJhbSB7VG9vbHRpcENvbnRlbnR9IGNvbnRlbnQgLSB0b29sdGlwIGNvbnRlbnRcbiAgICogQHBhcmFtIHtUb29sdGlwT3B0aW9uc30gb3B0aW9ucyAtIHRvb2x0aXAgb3B0aW9uc1xuICAgKi9cbiAgb25Ib3ZlcihlLCB0LCBvKSB7XG4gICAgUGUoZSwgdCwgbyk7XG4gIH1cbn1cbmNsYXNzIGdpIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kcyAvIGdldHRlcnNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlczogdGhpcy5lZGl0b3JOb2Rlc1xuICAgICAgLyoqXG4gICAgICAgKiBUaGVyZSBjYW4gYmUgYWRkZWQgc29tZSBVSSBtZXRob2RzLCBsaWtlIHRvZ2dsZVRoaW5Nb2RlKCkgZXRjXG4gICAgICAgKi9cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnRlZCBjbGFzc2VzXG4gICAqL1xuICBnZXQgZWRpdG9yTm9kZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogVG9wLWxldmVsIGVkaXRvciBpbnN0YW5jZSB3cmFwcGVyXG4gICAgICAgKi9cbiAgICAgIHdyYXBwZXI6IHRoaXMuRWRpdG9yLlVJLm5vZGVzLndyYXBwZXIsXG4gICAgICAvKipcbiAgICAgICAqIEVsZW1lbnQgdGhhdCBob2xkcyBhbGwgdGhlIEJsb2Nrc1xuICAgICAgICovXG4gICAgICByZWRhY3RvcjogdGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3JcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBZdChuLCBlKSB7XG4gIGNvbnN0IHQgPSB7fTtcbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKG4pLmZvckVhY2goKFtvLCBpXSkgPT4ge1xuICAgIGlmIChSKGkpKSB7XG4gICAgICBjb25zdCBzID0gZSA/IGAke2V9LiR7b31gIDogbztcbiAgICAgIE9iamVjdC52YWx1ZXMoaSkuZXZlcnkoKGwpID0+IFEobCkpID8gdFtvXSA9IHMgOiB0W29dID0gWXQoaSwgcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRbb10gPSBpO1xuICB9KSwgdDtcbn1cbmNvbnN0IEsgPSBZdChMdCk7XG5mdW5jdGlvbiBtaShuLCBlKSB7XG4gIGNvbnN0IHQgPSB7fTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG4pLmZvckVhY2goKG8pID0+IHtcbiAgICBjb25zdCBpID0gZVtvXTtcbiAgICBpICE9PSB2b2lkIDAgPyB0W2ldID0gbltvXSA6IHRbb10gPSBuW29dO1xuICB9KSwgdDtcbn1cbmNvbnN0IFd0ID0gY2xhc3MgdmUge1xuICAvKipcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBub2RlTGlzdCDigJQgdGhlIGxpc3Qgb2YgaXRlcmFibGUgSFRNTC1pdGVtc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZm9jdXNlZENzc0NsYXNzIC0gdXNlci1wcm92aWRlZCBDU1MtY2xhc3MgdGhhdCB3aWxsIGJlIHNldCBpbiBmbGlwcGluZyBwcm9jZXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgdGhpcy5jdXJzb3IgPSAtMSwgdGhpcy5pdGVtcyA9IFtdLCB0aGlzLml0ZW1zID0gZSB8fCBbXSwgdGhpcy5mb2N1c2VkQ3NzQ2xhc3MgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEZvY3VzZWQgYnV0dG9uIE5vZGVcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRJdGVtKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnNvciA9PT0gLTEgPyBudWxsIDogdGhpcy5pdGVtc1t0aGlzLmN1cnNvcl07XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgY3Vyc29yIHRvIHNwZWNpZmllZCBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0gY3Vyc29yUG9zaXRpb24gLSBuZXcgY3Vyc29yIHBvc2l0aW9uXG4gICAqL1xuICBzZXRDdXJzb3IoZSkge1xuICAgIGUgPCB0aGlzLml0ZW1zLmxlbmd0aCAmJiBlID49IC0xICYmICh0aGlzLmRyb3BDdXJzb3IoKSwgdGhpcy5jdXJzb3IgPSBlLCB0aGlzLml0ZW1zW3RoaXMuY3Vyc29yXS5jbGFzc0xpc3QuYWRkKHRoaXMuZm9jdXNlZENzc0NsYXNzKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgaXRlbXMuIENhbiBiZSB1c2VkIHdoZW4gaXRlcmFibGUgaXRlbXMgY2hhbmdlZCBkeW5hbWljYWxseVxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50W119IG5vZGVMaXN0IC0gbm9kZXMgdG8gaXRlcmF0ZVxuICAgKi9cbiAgc2V0SXRlbXMoZSkge1xuICAgIHRoaXMuaXRlbXMgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGN1cnNvciBuZXh0IHRvIHRoZSBjdXJyZW50XG4gICAqL1xuICBuZXh0KCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5sZWFmTm9kZXNBbmRSZXR1cm5JbmRleCh2ZS5kaXJlY3Rpb25zLlJJR0hUKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJzb3IgYmVmb3JlIGN1cnJlbnRcbiAgICovXG4gIHByZXZpb3VzKCkge1xuICAgIHRoaXMuY3Vyc29yID0gdGhpcy5sZWFmTm9kZXNBbmRSZXR1cm5JbmRleCh2ZS5kaXJlY3Rpb25zLkxFRlQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGN1cnNvciB0byB0aGUgZGVmYXVsdCBwb3NpdGlvbiBhbmQgcmVtb3ZlcyBDU1MtY2xhc3MgZnJvbSBwcmV2aW91c2x5IGZvY3VzZWQgaXRlbVxuICAgKi9cbiAgZHJvcEN1cnNvcigpIHtcbiAgICB0aGlzLmN1cnNvciAhPT0gLTEgJiYgKHRoaXMuaXRlbXNbdGhpcy5jdXJzb3JdLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5mb2N1c2VkQ3NzQ2xhc3MpLCB0aGlzLmN1cnNvciA9IC0xKTtcbiAgfVxuICAvKipcbiAgICogTGVhZnMgbm9kZXMgaW5zaWRlIHRoZSB0YXJnZXQgbGlzdCBmcm9tIGFjdGl2ZSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXJlY3Rpb24gLSBsZWFmIGRpcmVjdGlvbi4gQ2FuIGJlICdsZWZ0JyBvciAncmlnaHQnXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGluZGV4IG9mIGZvY3VzZWQgbm9kZVxuICAgKi9cbiAgbGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgoZSkge1xuICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmN1cnNvcjtcbiAgICBsZXQgdCA9IHRoaXMuY3Vyc29yO1xuICAgIHJldHVybiB0ID09PSAtMSA/IHQgPSBlID09PSB2ZS5kaXJlY3Rpb25zLlJJR0hUID8gLTEgOiAwIDogdGhpcy5pdGVtc1t0XS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9jdXNlZENzc0NsYXNzKSwgZSA9PT0gdmUuZGlyZWN0aW9ucy5SSUdIVCA/IHQgPSAodCArIDEpICUgdGhpcy5pdGVtcy5sZW5ndGggOiB0ID0gKHRoaXMuaXRlbXMubGVuZ3RoICsgdCAtIDEpICUgdGhpcy5pdGVtcy5sZW5ndGgsIGQuY2FuU2V0Q2FyZXQodGhpcy5pdGVtc1t0XSkgJiYgT2UoKCkgPT4gYi5zZXRDdXJzb3IodGhpcy5pdGVtc1t0XSksIDUwKSgpLCB0aGlzLml0ZW1zW3RdLmNsYXNzTGlzdC5hZGQodGhpcy5mb2N1c2VkQ3NzQ2xhc3MpLCB0O1xuICB9XG59O1xuV3QuZGlyZWN0aW9ucyA9IHtcbiAgUklHSFQ6IFwicmlnaHRcIixcbiAgTEVGVDogXCJsZWZ0XCJcbn07XG5sZXQgbWUgPSBXdDtcbmNsYXNzIGxlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gZGlmZmVyZW50IGNvbnN0cnVjdGluZyBzZXR0aW5nc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMuaXRlcmF0b3IgPSBudWxsLCB0aGlzLmFjdGl2YXRlZCA9ICExLCB0aGlzLmZsaXBDYWxsYmFja3MgPSBbXSwgdGhpcy5vbktleURvd24gPSAodCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNFdmVudFJlYWR5Rm9ySGFuZGxpbmcodCkpXG4gICAgICAgIHN3aXRjaCAobGUudXNlZEtleXMuaW5jbHVkZXModC5rZXlDb2RlKSAmJiB0LnByZXZlbnREZWZhdWx0KCksIHQua2V5Q29kZSkge1xuICAgICAgICAgIGNhc2Ugdy5UQUI6XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVRhYlByZXNzKHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB3LkxFRlQ6XG4gICAgICAgICAgY2FzZSB3LlVQOlxuICAgICAgICAgICAgdGhpcy5mbGlwTGVmdCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB3LlJJR0hUOlxuICAgICAgICAgIGNhc2Ugdy5ET1dOOlxuICAgICAgICAgICAgdGhpcy5mbGlwUmlnaHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugdy5FTlRFUjpcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRW50ZXJQcmVzcyh0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSwgdGhpcy5pdGVyYXRvciA9IG5ldyBtZShlLml0ZW1zLCBlLmZvY3VzZWRJdGVtQ2xhc3MpLCB0aGlzLmFjdGl2YXRlQ2FsbGJhY2sgPSBlLmFjdGl2YXRlQ2FsbGJhY2ssIHRoaXMuYWxsb3dlZEtleXMgPSBlLmFsbG93ZWRLZXlzIHx8IGxlLnVzZWRLZXlzO1xuICB9XG4gIC8qKlxuICAgKiBUcnVlIGlmIGZsaXBwZXIgaXMgY3VycmVudGx5IGFjdGl2YXRlZFxuICAgKi9cbiAgZ2V0IGlzQWN0aXZhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZDtcbiAgfVxuICAvKipcbiAgICogQXJyYXkgb2Yga2V5cyAoY29kZXMpIHRoYXQgaXMgaGFuZGxlZCBieSBGbGlwcGVyXG4gICAqIFVzZWQgdG86XG4gICAqICAtIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIHRoaXMga2V5cywgbm90IGFsbCBrZXlkb3ducyAoQHNlZSBjb25zdHJ1Y3RvcilcbiAgICogIC0gdG8gc2tpcCBleHRlcm5hbCBiZWhhdmlvdXJzIG9ubHkgZm9yIHRoZXNlIGtleXMsIHdoZW4gZmlsbGVyIGlzIGFjdGl2YXRlZCAoQHNlZSBCbG9ja0V2ZW50c0BhcnJvd1JpZ2h0QW5kRG93bilcbiAgICovXG4gIHN0YXRpYyBnZXQgdXNlZEtleXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHcuVEFCLFxuICAgICAgdy5MRUZULFxuICAgICAgdy5SSUdIVCxcbiAgICAgIHcuRU5URVIsXG4gICAgICB3LlVQLFxuICAgICAgdy5ET1dOXG4gICAgXTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZlIHRhYi9hcnJvd3MgaGFuZGxpbmcgYnkgZmxpcHBlclxuICAgKlxuICAgKiBAcGFyYW0gaXRlbXMgLSBTb21lIG1vZHVsZXMgKGxpa2UsIElubGluZVRvb2xiYXIsIEJsb2NrU2V0dGluZ3MpIG1pZ2h0IHJlZnJlc2ggYnV0dG9ucyBkeW5hbWljYWxseVxuICAgKiBAcGFyYW0gY3Vyc29yUG9zaXRpb24gLSBpbmRleCBvZiB0aGUgaXRlbSB0aGF0IHNob3VsZCBiZSBmb2N1c2VkIG9uY2UgZmxpcHBlciBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIGFjdGl2YXRlKGUsIHQpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCA9ICEwLCBlICYmIHRoaXMuaXRlcmF0b3Iuc2V0SXRlbXMoZSksIHQgIT09IHZvaWQgMCAmJiB0aGlzLml0ZXJhdG9yLnNldEN1cnNvcih0KSwgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24sICEwKTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSB0YWIvYXJyb3dzIGhhbmRsaW5nIGJ5IGZsaXBwZXJcbiAgICovXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZWQgPSAhMSwgdGhpcy5kcm9wQ3Vyc29yKCksIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXMgZmlyc3QgaXRlbVxuICAgKi9cbiAgZm9jdXNGaXJzdCgpIHtcbiAgICB0aGlzLmRyb3BDdXJzb3IoKSwgdGhpcy5mbGlwUmlnaHQoKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBwcmV2aW91cyBmbGlwcGVyIGl0ZXJhdG9yIGl0ZW1cbiAgICovXG4gIGZsaXBMZWZ0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IucHJldmlvdXMoKSwgdGhpcy5mbGlwQ2FsbGJhY2soKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBuZXh0IGZsaXBwZXIgaXRlcmF0b3IgaXRlbVxuICAgKi9cbiAgZmxpcFJpZ2h0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IubmV4dCgpLCB0aGlzLmZsaXBDYWxsYmFjaygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiBzb21lIGJ1dHRvbiBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gISF0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGV4ZWN1dGVkIG9uIGVhY2ggbmF2aWdhdGlvbiBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGNiIC0gZnVuY3Rpb24gdG8gZXhlY3V0ZVxuICAgKi9cbiAgb25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gZWFjaCBuYXZpZ2F0aW9uIGFjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gY2IgLSBmdW5jdGlvbiB0byBzdG9wIGV4ZWN1dGluZ1xuICAgKi9cbiAgcmVtb3ZlT25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MgPSB0aGlzLmZsaXBDYWxsYmFja3MuZmlsdGVyKCh0KSA9PiB0ICE9PSBlKTtcbiAgfVxuICAvKipcbiAgICogRHJvcHMgZmxpcHBlcidzIGl0ZXJhdG9yIGN1cnNvclxuICAgKlxuICAgKiBAc2VlIERvbUl0ZXJhdG9yI2Ryb3BDdXJzb3JcbiAgICovXG4gIGRyb3BDdXJzb3IoKSB7XG4gICAgdGhpcy5pdGVyYXRvci5kcm9wQ3Vyc29yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgZmlyZWQgYmVmb3JlIGhhbmRsaW5nIGZsaXBwZXIga2V5Y29kZXNcbiAgICogVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGRlZmluZXMgaWYgaXQgaXMgbmVlZCB0byBiZSBoYW5kbGVkIG9yIG5vdFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93biBrZXlib2FyZCBldmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRXZlbnRSZWFkeUZvckhhbmRsaW5nKGUpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZWQgJiYgdGhpcy5hbGxvd2VkS2V5cy5pbmNsdWRlcyhlLmtleUNvZGUpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIGZsaXBwZXIgaXMgYWN0aXZhdGVkIHRhYiBwcmVzcyB3aWxsIGxlYWYgdGhlIGl0ZW1zXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSB0YWIga2V5ZG93biBldmVudFxuICAgKi9cbiAgaGFuZGxlVGFiUHJlc3MoZSkge1xuICAgIHN3aXRjaCAoZS5zaGlmdEtleSA/IG1lLmRpcmVjdGlvbnMuTEVGVCA6IG1lLmRpcmVjdGlvbnMuUklHSFQpIHtcbiAgICAgIGNhc2UgbWUuZGlyZWN0aW9ucy5SSUdIVDpcbiAgICAgICAgdGhpcy5mbGlwUmlnaHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG1lLmRpcmVjdGlvbnMuTEVGVDpcbiAgICAgICAgdGhpcy5mbGlwTGVmdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVudGVyIHByZXNzIHdpbGwgY2xpY2sgY3VycmVudCBpdGVtIGlmIGZsaXBwZXIgaXMgYWN0aXZhdGVkXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBlbnRlciBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBoYW5kbGVFbnRlclByZXNzKGUpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCAmJiAodGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbSAmJiAoZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtLmNsaWNrKCkpLCBPKHRoaXMuYWN0aXZhdGVDYWxsYmFjaykgJiYgdGhpcy5hY3RpdmF0ZUNhbGxiYWNrKHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0pKTtcbiAgfVxuICAvKipcbiAgICogRmlyZWQgYWZ0ZXIgZmxpcHBpbmcgaW4gYW55IGRpcmVjdGlvblxuICAgKi9cbiAgZmxpcENhbGxiYWNrKCkge1xuICAgIHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0gJiYgdGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCksIHRoaXMuZmxpcENhbGxiYWNrcy5mb3JFYWNoKChlKSA9PiBlKCkpO1xuICB9XG59XG5jb25zdCBiaSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSAxMkw5IDcuMUM5IDcuMDQ0NzcgOS4wNDQ3NyA3IDkuMSA3SDEwLjRDMTEuNSA3IDE0IDcuMSAxNCA5LjVDMTQgOS41IDE0IDEyIDExIDEyTTkgMTJWMTYuOEM5IDE2LjkxMDUgOS4wODk1NCAxNyA5LjIgMTdIMTIuNUMxNCAxNyAxNSAxNiAxNSAxNC41QzE1IDExLjcwNDYgMTEgMTIgMTEgMTJNOSAxMkgxMVwiLz48L3N2Zz4nLCBraSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNyAxMEwxMS44NTg2IDE0Ljg1ODZDMTEuOTM2NyAxNC45MzY3IDEyLjA2MzMgMTQuOTM2NyAxMi4xNDE0IDE0Ljg1ODZMMTcgMTBcIi8+PC9zdmc+JywgdmkgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE0LjUgMTcuNUw5LjY0MTQyIDEyLjY0MTRDOS41NjMzMSAxMi41NjMzIDkuNTYzMzEgMTIuNDM2NyA5LjY0MTQyIDEyLjM1ODZMMTQuNSA3LjVcIi8+PC9zdmc+Jywgd2kgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkuNTgyODQgMTcuNUwxNC40NDE0IDEyLjY0MTRDMTQuNTE5NSAxMi41NjMzIDE0LjUxOTUgMTIuNDM2NyAxNC40NDE0IDEyLjM1ODZMOS41ODI4NCA3LjVcIi8+PC9zdmc+JywgeGkgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTcgMTVMMTEuODU4NiAxMC4xNDE0QzExLjkzNjcgMTAuMDYzMyAxMi4wNjMzIDEwLjA2MzMgMTIuMTQxNCAxMC4xNDE0TDE3IDE1XCIvPjwvc3ZnPicsIHlpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk04IDhMMTIgMTJNMTIgMTJMMTYgMTZNMTIgMTJMMTYgOE0xMiAxMkw4IDE2XCIvPjwvc3ZnPicsIEVpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiNFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+JywgQmkgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEzLjM0IDEwQzEyLjQyMjMgMTIuNzMzNyAxMSAxNyAxMSAxN1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTQuMjEgN0gxNC4yXCIvPjwvc3ZnPicsIHh0ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk03LjY5OTk4IDEyLjZMNy42Nzg5NiAxMi42MkM2LjUzOTkzIDEzLjcwNDggNi41MjAxMiAxNS41MTU1IDcuNjM1MTYgMTYuNjI1VjE2LjYyNUM4LjcyMjkzIDE3LjcwNzMgMTAuNDc5OSAxNy43MTAyIDExLjU3MTIgMTYuNjMxNEwxMy4wMjYzIDE1LjE5M0MxNC4wNzAzIDE0LjE2MDkgMTQuMjE0MSAxMi41MjUgMTMuMzY2MiAxMS4zMjY2TDEzLjIyIDExLjEyXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNi4yMiAxMS4xMkwxNi4zNTY0IDEwLjk4MDVDMTcuMjg5NSAxMC4wMjY1IDE3LjM0NzggOC41MjA3IDE2LjQ5MTQgNy40OTczM1Y3LjQ5NzMzQzE1LjU2OTEgNi4zOTUwOSAxMy45MjY5IDYuMjUxNDMgMTIuODI3MSA3LjE3Njc1TDExLjM5MDEgOC4zODU4OEMxMC4wOTM1IDkuNDc2NzQgOS45NTcwNiAxMS40MjQxIDExLjA4ODggMTIuNjg1MkwxMS4xMiAxMi43MlwiLz48L3N2Zz4nLCBUaSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk05LjQwOTk5IDcuMjk5OTlIOS40XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyLjZcIiBkPVwiTTE0LjYgNy4yOTk5OUgxNC41OVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk05LjMwOTk5IDEySDkuM1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk0xNC42IDEySDE0LjU5XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyLjZcIiBkPVwiTTkuNDA5OTkgMTYuN0g5LjRcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuNlwiIGQ9XCJNMTQuNiAxNi43SDE0LjU5XCIvPjwvc3ZnPicsIENpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMiA3VjEyTTEyIDE3VjEyTTE3IDEySDEyTTEyIDEySDdcIi8+PC9zdmc+JywgS3QgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTExLjUgMTcuNUw1IDExTTUgMTFWMTUuNU01IDExSDkuNVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTIuNSA2LjVMMTkgMTNNMTkgMTNWOC41TTE5IDEzSDE0LjVcIi8+PC9zdmc+JywgU2kgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGNpcmNsZSBjeD1cIjEwLjVcIiBjeT1cIjEwLjVcIiByPVwiNS41XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48bGluZSB4MT1cIjE1LjQxNDJcIiB4Mj1cIjE5XCIgeTE9XCIxNVwiIHkyPVwiMTguNTg1OFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjwvc3ZnPicsIElpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNS43Nzk1IDExLjVDMTUuNzc5NSAxMS41IDE2LjA1MyAxMS4xOTYyIDE2LjU0OTcgMTAuNjcyMkMxNy40NDQyIDkuNzI4NTYgMTcuNDcwMSA4LjI0NzUgMTYuNTc4MSA3LjMwMTQ1VjcuMzAxNDVDMTUuNjQ4MiA2LjMxNTIyIDE0LjA4NzMgNi4yOTIyNyAxMy4xMjg4IDcuMjUwNzNMMTEuODc5NiA4LjQ5OTk5XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk04LjI0NTE3IDEyLjM4ODNDOC4yNDUxNyAxMi4zODgzIDcuOTcxNzEgMTIuNjkyMiA3LjQ3NTA0IDEzLjIxNjFDNi41ODA1MSAxNC4xNTk4IDYuNTU0NjcgMTUuNjQwOCA3LjQ0NjY2IDE2LjU4NjlWMTYuNTg2OUM4LjM3NjUzIDE3LjU3MzEgOS45Mzc0NCAxNy41OTYxIDEwLjg5NTkgMTYuNjM3NkwxMi4xNDUyIDE1LjM4ODNcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE3Ljc4MDIgMTUuMTAzMkwxNi41OTcgMTQuOTQyMkMxNi4wMTA5IDE0Ljg2MjQgMTUuNDg0MSAxNS4zMDU5IDE1LjQ2MjcgMTUuODk2OUwxNS40MTk5IDE3LjA4MThcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTYuMzkwNjQgOS4wMzIzOEw3LjU4NDMyIDkuMDY2NjhDOC4xNzU1MSA5LjA4MzY2IDguNjUyMiA4LjU4NjY1IDguNjEwNTYgNy45OTY2OUw4LjUyNzEgNi44MTM5N1wiLz48bGluZSB4MT1cIjEyLjExNDJcIiB4Mj1cIjExLjdcIiB5MT1cIjEyLjJcIiB5Mj1cIjExLjc4NThcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48L3N2Zz4nLCBNaSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cmVjdCB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMTRcIiB4PVwiNVwiIHk9XCI1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHJ4PVwiNFwiLz48bGluZSB4MT1cIjEyXCIgeDI9XCIxMlwiIHkxPVwiOVwiIHkyPVwiMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTIgMTUuMDJWMTUuMDFcIi8+PC9zdmc+JywgQWkgPSBcIl9fXCIsIE9pID0gXCItLVwiO1xuZnVuY3Rpb24gdGUobikge1xuICByZXR1cm4gKGUsIHQpID0+IFtbbiwgZV0uZmlsdGVyKChpKSA9PiAhIWkpLmpvaW4oQWkpLCB0XS5maWx0ZXIoKGkpID0+ICEhaSkuam9pbihPaSk7XG59XG5jb25zdCBiZSA9IHRlKFwiY2UtaGludFwiKSwga2UgPSB7XG4gIHJvb3Q6IGJlKCksXG4gIGFsaWduZWRTdGFydDogYmUobnVsbCwgXCJhbGlnbi1sZWZ0XCIpLFxuICBhbGlnbmVkQ2VudGVyOiBiZShudWxsLCBcImFsaWduLWNlbnRlclwiKSxcbiAgdGl0bGU6IGJlKFwidGl0bGVcIiksXG4gIGRlc2NyaXB0aW9uOiBiZShcImRlc2NyaXB0aW9uXCIpXG59O1xuY2xhc3MgTGkge1xuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgaGludCBjb250ZW50IGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBoaW50IGNvbnRlbnQgcGFyYW1ldGVyc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMubm9kZXMgPSB7XG4gICAgICByb290OiBkLm1ha2UoXCJkaXZcIiwgW2tlLnJvb3QsIGUuYWxpZ25tZW50ID09PSBcImNlbnRlclwiID8ga2UuYWxpZ25lZENlbnRlciA6IGtlLmFsaWduZWRTdGFydF0pLFxuICAgICAgdGl0bGU6IGQubWFrZShcImRpdlwiLCBrZS50aXRsZSwgeyB0ZXh0Q29udGVudDogZS50aXRsZSB9KVxuICAgIH0sIHRoaXMubm9kZXMucm9vdC5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLnRpdGxlKSwgZS5kZXNjcmlwdGlvbiAhPT0gdm9pZCAwICYmICh0aGlzLm5vZGVzLmRlc2NyaXB0aW9uID0gZC5tYWtlKFwiZGl2XCIsIGtlLmRlc2NyaXB0aW9uLCB7IHRleHRDb250ZW50OiBlLmRlc2NyaXB0aW9uIH0pLCB0aGlzLm5vZGVzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5kZXNjcmlwdGlvbikpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByb290IGVsZW1lbnQgb2YgdGhlIGhpbnQgY29udGVudFxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290O1xuICB9XG59XG5jbGFzcyBudCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gaW5zdGFuY2UgcGFyYW1ldGVyc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMucGFyYW1zID0gZTtcbiAgfVxuICAvKipcbiAgICogSXRlbSBuYW1lIGlmIGV4aXN0c1xuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgaWYgKHRoaXMucGFyYW1zICE9PSB2b2lkIDAgJiYgXCJuYW1lXCIgaW4gdGhpcy5wYXJhbXMpXG4gICAgICByZXR1cm4gdGhpcy5wYXJhbXMubmFtZTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIE5lKCk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGNoaWxkcmVuIHBvcG92ZXIgaXMgb3BlbmVkIChpZiBleGlzdHMpXG4gICAqL1xuICBvbkNoaWxkcmVuT3BlbigpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLnBhcmFtcyAhPT0gdm9pZCAwICYmIFwiY2hpbGRyZW5cIiBpbiB0aGlzLnBhcmFtcyAmJiB0eXBlb2YgKChlID0gdGhpcy5wYXJhbXMuY2hpbGRyZW4pID09IG51bGwgPyB2b2lkIDAgOiBlLm9uT3BlbikgPT0gXCJmdW5jdGlvblwiICYmIHRoaXMucGFyYW1zLmNoaWxkcmVuLm9uT3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBjaGlsZHJlbiBwb3BvdmVyIGlzIGNsb3NlZCAoaWYgZXhpc3RzKVxuICAgKi9cbiAgb25DaGlsZHJlbkNsb3NlKCkge1xuICAgIHZhciBlO1xuICAgIHRoaXMucGFyYW1zICE9PSB2b2lkIDAgJiYgXCJjaGlsZHJlblwiIGluIHRoaXMucGFyYW1zICYmIHR5cGVvZiAoKGUgPSB0aGlzLnBhcmFtcy5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IGUub25DbG9zZSkgPT0gXCJmdW5jdGlvblwiICYmIHRoaXMucGFyYW1zLmNoaWxkcmVuLm9uQ2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIG9uIHBvcG92ZXIgaXRlbSBjbGlja1xuICAgKi9cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgdmFyIGUsIHQ7XG4gICAgdGhpcy5wYXJhbXMgIT09IHZvaWQgMCAmJiBcIm9uQWN0aXZhdGVcIiBpbiB0aGlzLnBhcmFtcyAmJiAoKHQgPSAoZSA9IHRoaXMucGFyYW1zKS5vbkFjdGl2YXRlKSA9PSBudWxsIHx8IHQuY2FsbChlLCB0aGlzLnBhcmFtcykpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGhpbnQgdG8gdGhlIGl0ZW0gZWxlbWVudCBpZiBoaW50IGRhdGEgaXMgcHJvdmlkZWRcbiAgICpcbiAgICogQHBhcmFtIGl0ZW1FbGVtZW50IC0gcG9wb3ZlciBpdGVtIHJvb3QgZWxlbWVudCB0byBhZGQgaGludCB0b1xuICAgKiBAcGFyYW0gaGludERhdGEgLSBoaW50IGRhdGFcbiAgICovXG4gIGFkZEhpbnQoZSwgdCkge1xuICAgIGNvbnN0IG8gPSBuZXcgTGkodCk7XG4gICAgUGUoZSwgby5nZXRFbGVtZW50KCksIHtcbiAgICAgIHBsYWNlbWVudDogdC5wb3NpdGlvbixcbiAgICAgIGhpZGluZ0RlbGF5OiAxMDBcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpdGVtIGNoaWxkcmVuIHRoYXQgYXJlIHJlcHJlc2VudGVkIGFzIHBvcG92ZXIgaXRlbXNcbiAgICovXG4gIGdldCBjaGlsZHJlbigpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMgIT09IHZvaWQgMCAmJiBcImNoaWxkcmVuXCIgaW4gdGhpcy5wYXJhbXMgJiYgKChlID0gdGhpcy5wYXJhbXMuY2hpbGRyZW4pID09IG51bGwgPyB2b2lkIDAgOiBlLml0ZW1zKSAhPT0gdm9pZCAwID8gdGhpcy5wYXJhbXMuY2hpbGRyZW4uaXRlbXMgOiBbXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGl0ZW0gaGFzIGFueSB0eXBlIG9mIGNoaWxkcmVuXG4gICAqL1xuICBnZXQgaGFzQ2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGl0ZW0gY2hpbGRyZW4gc2hvdWxkIGJlIG9wZW4gaW5zdGFudGx5IGFmdGVyIHBvcG92ZXIgaXMgb3BlbmVkIGFuZCBub3Qgb24gaXRlbSBjbGljay9ob3ZlclxuICAgKi9cbiAgZ2V0IGlzQ2hpbGRyZW5PcGVuKCkge1xuICAgIHZhciBlO1xuICAgIHJldHVybiB0aGlzLnBhcmFtcyAhPT0gdm9pZCAwICYmIFwiY2hpbGRyZW5cIiBpbiB0aGlzLnBhcmFtcyAmJiAoKGUgPSB0aGlzLnBhcmFtcy5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IGUuaXNPcGVuKSA9PT0gITA7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgaXRlbSBjaGlsZHJlbiBpdGVtcyBzaG91bGQgYmUgbmF2aWdhdGFibGUgdmlhIGtleWJvYXJkXG4gICAqL1xuICBnZXQgaXNDaGlsZHJlbkZsaXBwYWJsZSgpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4gISh0aGlzLnBhcmFtcyA9PT0gdm9pZCAwIHx8ICEoXCJjaGlsZHJlblwiIGluIHRoaXMucGFyYW1zKSB8fCAoKGUgPSB0aGlzLnBhcmFtcy5jaGlsZHJlbikgPT0gbnVsbCA/IHZvaWQgMCA6IGUuaXNGbGlwcGFibGUpID09PSAhMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBpdGVtIGhhcyBjaGlsZHJlbiB0aGF0IHNob3VsZCBiZSBzZWFyY2hhYmxlXG4gICAqL1xuICBnZXQgaXNDaGlsZHJlblNlYXJjaGFibGUoKSB7XG4gICAgdmFyIGU7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zICE9PSB2b2lkIDAgJiYgXCJjaGlsZHJlblwiIGluIHRoaXMucGFyYW1zICYmICgoZSA9IHRoaXMucGFyYW1zLmNoaWxkcmVuKSA9PSBudWxsID8gdm9pZCAwIDogZS5zZWFyY2hhYmxlKSA9PT0gITA7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgcG9wb3ZlciBzaG91bGQgY2xvc2Ugb25jZSBpdGVtIGlzIGFjdGl2YXRlZFxuICAgKi9cbiAgZ2V0IGNsb3NlT25BY3RpdmF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMgIT09IHZvaWQgMCAmJiBcImNsb3NlT25BY3RpdmF0ZVwiIGluIHRoaXMucGFyYW1zICYmIHRoaXMucGFyYW1zLmNsb3NlT25BY3RpdmF0ZTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBpdGVtIGlzIGFjdGl2ZVxuICAgKi9cbiAgZ2V0IGlzQWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcyA9PT0gdm9pZCAwIHx8ICEoXCJpc0FjdGl2ZVwiIGluIHRoaXMucGFyYW1zKSA/ICExIDogdHlwZW9mIHRoaXMucGFyYW1zLmlzQWN0aXZlID09IFwiZnVuY3Rpb25cIiA/IHRoaXMucGFyYW1zLmlzQWN0aXZlKCkgOiB0aGlzLnBhcmFtcy5pc0FjdGl2ZSA9PT0gITA7XG4gIH1cbn1cbmNvbnN0IFcgPSB0ZShcImNlLXBvcG92ZXItaXRlbVwiKSwgTCA9IHtcbiAgY29udGFpbmVyOiBXKCksXG4gIGFjdGl2ZTogVyhudWxsLCBcImFjdGl2ZVwiKSxcbiAgZGlzYWJsZWQ6IFcobnVsbCwgXCJkaXNhYmxlZFwiKSxcbiAgZm9jdXNlZDogVyhudWxsLCBcImZvY3VzZWRcIiksXG4gIGhpZGRlbjogVyhudWxsLCBcImhpZGRlblwiKSxcbiAgY29uZmlybWF0aW9uU3RhdGU6IFcobnVsbCwgXCJjb25maXJtYXRpb25cIiksXG4gIG5vSG92ZXI6IFcobnVsbCwgXCJuby1ob3ZlclwiKSxcbiAgbm9Gb2N1czogVyhudWxsLCBcIm5vLWZvY3VzXCIpLFxuICB0aXRsZTogVyhcInRpdGxlXCIpLFxuICBzZWNvbmRhcnlUaXRsZTogVyhcInNlY29uZGFyeS10aXRsZVwiKSxcbiAgaWNvbjogVyhcImljb25cIiksXG4gIGljb25Ub29sOiBXKFwiaWNvblwiLCBcInRvb2xcIiksXG4gIGljb25DaGV2cm9uUmlnaHQ6IFcoXCJpY29uXCIsIFwiY2hldnJvbi1yaWdodFwiKSxcbiAgd29iYmxlQW5pbWF0aW9uOiB0ZShcIndvYmJsZVwiKSgpXG59O1xuY2xhc3Mgc2UgZXh0ZW5kcyBudCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIHBvcG92ZXIgaXRlbSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gcG9wb3ZlciBpdGVtIGNvbnN0cnVjdGlvbiBwYXJhbXNcbiAgICogQHBhcmFtIHJlbmRlclBhcmFtcyAtIHBvcG92ZXIgaXRlbSByZW5kZXIgcGFyYW1zLlxuICAgKiBUaGUgcGFyYW1ldGVycyB0aGF0IGFyZSBub3Qgc2V0IGJ5IHVzZXIgdmlhIHBvcG92ZXIgYXBpIGJ1dCByYXRoZXIgZGVwZW5kIG9uIHRlY2huaWNhbCBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgIHN1cGVyKGUpLCB0aGlzLnBhcmFtcyA9IGUsIHRoaXMubm9kZXMgPSB7XG4gICAgICByb290OiBudWxsLFxuICAgICAgaWNvbjogbnVsbFxuICAgIH0sIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgPSBudWxsLCB0aGlzLnJlbW92ZVNwZWNpYWxGb2N1c0JlaGF2aW9yID0gKCkgPT4ge1xuICAgICAgdmFyIG87XG4gICAgICAobyA9IHRoaXMubm9kZXMucm9vdCkgPT0gbnVsbCB8fCBvLmNsYXNzTGlzdC5yZW1vdmUoTC5ub0ZvY3VzKTtcbiAgICB9LCB0aGlzLnJlbW92ZVNwZWNpYWxIb3ZlckJlaGF2aW9yID0gKCkgPT4ge1xuICAgICAgdmFyIG87XG4gICAgICAobyA9IHRoaXMubm9kZXMucm9vdCkgPT0gbnVsbCB8fCBvLmNsYXNzTGlzdC5yZW1vdmUoTC5ub0hvdmVyKTtcbiAgICB9LCB0aGlzLm9uRXJyb3JBbmltYXRpb25FbmQgPSAoKSA9PiB7XG4gICAgICB2YXIgbywgaTtcbiAgICAgIChvID0gdGhpcy5ub2Rlcy5pY29uKSA9PSBudWxsIHx8IG8uY2xhc3NMaXN0LnJlbW92ZShMLndvYmJsZUFuaW1hdGlvbiksIChpID0gdGhpcy5ub2Rlcy5pY29uKSA9PSBudWxsIHx8IGkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFuaW1hdGlvbmVuZFwiLCB0aGlzLm9uRXJyb3JBbmltYXRpb25FbmQpO1xuICAgIH0sIHRoaXMubm9kZXMucm9vdCA9IHRoaXMubWFrZShlLCB0KTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBpdGVtIGlzIGRpc2FibGVkIGFuZCBoZW5jZSBub3QgY2xpY2thYmxlXG4gICAqL1xuICBnZXQgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMuaXNEaXNhYmxlZCA9PT0gITA7XG4gIH1cbiAgLyoqXG4gICAqIEV4cG9zZXMgcG9wb3ZlciBpdGVtIHRvZ2dsZSBwYXJhbWV0ZXJcbiAgICovXG4gIGdldCB0b2dnbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnRvZ2dsZTtcbiAgfVxuICAvKipcbiAgICogSXRlbSB0aXRsZVxuICAgKi9cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy50aXRsZTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBjb25maXJtYXRpb24gc3RhdGUgaXMgZW5hYmxlZCBmb3IgcG9wb3ZlciBpdGVtXG4gICAqL1xuICBnZXQgaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgIT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgaXRlbSBpcyBmb2N1c2VkIGluIGtleWJvYXJkIG5hdmlnYXRpb24gcHJvY2Vzc1xuICAgKi9cbiAgZ2V0IGlzRm9jdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290ID09PSBudWxsID8gITEgOiB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKEwuZm9jdXNlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcG9wb3ZlciBpdGVtIHJvb3QgZWxlbWVudFxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290O1xuICB9XG4gIC8qKlxuICAgKiBDYWxsZWQgb24gcG9wb3ZlciBpdGVtIGNsaWNrXG4gICAqL1xuICBoYW5kbGVDbGljaygpIHtcbiAgICBpZiAodGhpcy5pc0NvbmZpcm1hdGlvblN0YXRlRW5hYmxlZCAmJiB0aGlzLmNvbmZpcm1hdGlvblN0YXRlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMuY29uZmlybWF0aW9uU3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMucGFyYW1zKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBpdGVtIGFjdGl2ZSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gaXNBY3RpdmUgLSB0cnVlIGlmIGl0ZW0gc2hvdWxkIHN0cmljdGx5IHNob3VsZCBiZWNvbWUgYWN0aXZlXG4gICAqL1xuICB0b2dnbGVBY3RpdmUoZSkge1xuICAgIHZhciB0O1xuICAgICh0ID0gdGhpcy5ub2Rlcy5yb290KSA9PSBudWxsIHx8IHQuY2xhc3NMaXN0LnRvZ2dsZShMLmFjdGl2ZSwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgaXRlbSBoaWRkZW4gc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIGlzSGlkZGVuIC0gdHJ1ZSBpZiBpdGVtIHNob3VsZCBiZSBoaWRkZW5cbiAgICovXG4gIHRvZ2dsZUhpZGRlbihlKSB7XG4gICAgdmFyIHQ7XG4gICAgKHQgPSB0aGlzLm5vZGVzLnJvb3QpID09IG51bGwgfHwgdC5jbGFzc0xpc3QudG9nZ2xlKEwuaGlkZGVuLCBlKTtcbiAgfVxuICAvKipcbiAgICogUmVzZXRzIHBvcG92ZXIgaXRlbSB0byBpdHMgb3JpZ2luYWwgc3RhdGVcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQgJiYgdGhpcy5kaXNhYmxlQ29uZmlybWF0aW9uTW9kZSgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgY2FsbGVkIG9uY2UgaXRlbSBiZWNvbWVzIGZvY3VzZWQgZHVyaW5nIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICovXG4gIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5kaXNhYmxlU3BlY2lhbEhvdmVyQW5kRm9jdXNCZWhhdmlvcigpO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIEhUTUwgZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHBvcG92ZXIgaXRlbSBwYXJhbXNcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIGl0ZW0gY29uc3RydWN0aW9uIHBhcmFtc1xuICAgKiBAcGFyYW0gcmVuZGVyUGFyYW1zIC0gcG9wb3ZlciBpdGVtIHJlbmRlciBwYXJhbXNcbiAgICovXG4gIG1ha2UoZSwgdCkge1xuICAgIHZhciBzLCByO1xuICAgIGNvbnN0IG8gPSAodCA9PSBudWxsID8gdm9pZCAwIDogdC53cmFwcGVyVGFnKSB8fCBcImRpdlwiLCBpID0gZC5tYWtlKG8sIEwuY29udGFpbmVyLCB7XG4gICAgICB0eXBlOiBvID09PSBcImJ1dHRvblwiID8gXCJidXR0b25cIiA6IHZvaWQgMFxuICAgIH0pO1xuICAgIHJldHVybiBlLm5hbWUgJiYgKGkuZGF0YXNldC5pdGVtTmFtZSA9IGUubmFtZSksIHRoaXMubm9kZXMuaWNvbiA9IGQubWFrZShcImRpdlwiLCBbTC5pY29uLCBMLmljb25Ub29sXSwge1xuICAgICAgaW5uZXJIVE1MOiBlLmljb24gfHwgRWlcbiAgICB9KSwgaS5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmljb24pLCBlLnRpdGxlICE9PSB2b2lkIDAgJiYgaS5hcHBlbmRDaGlsZChkLm1ha2UoXCJkaXZcIiwgTC50aXRsZSwge1xuICAgICAgaW5uZXJIVE1MOiBlLnRpdGxlIHx8IFwiXCJcbiAgICB9KSksIGUuc2Vjb25kYXJ5TGFiZWwgJiYgaS5hcHBlbmRDaGlsZChkLm1ha2UoXCJkaXZcIiwgTC5zZWNvbmRhcnlUaXRsZSwge1xuICAgICAgdGV4dENvbnRlbnQ6IGUuc2Vjb25kYXJ5TGFiZWxcbiAgICB9KSksIHRoaXMuaGFzQ2hpbGRyZW4gJiYgaS5hcHBlbmRDaGlsZChkLm1ha2UoXCJkaXZcIiwgW0wuaWNvbiwgTC5pY29uQ2hldnJvblJpZ2h0XSwge1xuICAgICAgaW5uZXJIVE1MOiB3aVxuICAgIH0pKSwgdGhpcy5pc0FjdGl2ZSAmJiBpLmNsYXNzTGlzdC5hZGQoTC5hY3RpdmUpLCBlLmlzRGlzYWJsZWQgJiYgaS5jbGFzc0xpc3QuYWRkKEwuZGlzYWJsZWQpLCBlLmhpbnQgIT09IHZvaWQgMCAmJiAoKHMgPSB0ID09IG51bGwgPyB2b2lkIDAgOiB0LmhpbnQpID09IG51bGwgPyB2b2lkIDAgOiBzLmVuYWJsZWQpICE9PSAhMSAmJiB0aGlzLmFkZEhpbnQoaSwge1xuICAgICAgLi4uZS5oaW50LFxuICAgICAgcG9zaXRpb246ICgociA9IHQgPT0gbnVsbCA/IHZvaWQgMCA6IHQuaGludCkgPT0gbnVsbCA/IHZvaWQgMCA6IHIucG9zaXRpb24pIHx8IFwicmlnaHRcIlxuICAgIH0pLCBpO1xuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgY29uZmlybWF0aW9uIG1vZGUgZm9yIHRoZSBpdGVtLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3U3RhdGUgLSBuZXcgcG9wb3ZlciBpdGVtIHBhcmFtcyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkXG4gICAqL1xuICBlbmFibGVDb25maXJtYXRpb25Nb2RlKGUpIHtcbiAgICBpZiAodGhpcy5ub2Rlcy5yb290ID09PSBudWxsKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSB7XG4gICAgICAuLi50aGlzLnBhcmFtcyxcbiAgICAgIC4uLmUsXG4gICAgICBjb25maXJtYXRpb246IFwiY29uZmlybWF0aW9uXCIgaW4gZSA/IGUuY29uZmlybWF0aW9uIDogdm9pZCAwXG4gICAgfSwgbyA9IHRoaXMubWFrZSh0KTtcbiAgICB0aGlzLm5vZGVzLnJvb3QuaW5uZXJIVE1MID0gby5pbm5lckhUTUwsIHRoaXMubm9kZXMucm9vdC5jbGFzc0xpc3QuYWRkKEwuY29uZmlybWF0aW9uU3RhdGUpLCB0aGlzLmNvbmZpcm1hdGlvblN0YXRlID0gZSwgdGhpcy5lbmFibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaXRlbSB0byBpdHMgb3JpZ2luYWwgc3RhdGVcbiAgICovXG4gIGRpc2FibGVDb25maXJtYXRpb25Nb2RlKCkge1xuICAgIGlmICh0aGlzLm5vZGVzLnJvb3QgPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgZSA9IHRoaXMubWFrZSh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5ub2Rlcy5yb290LmlubmVySFRNTCA9IGUuaW5uZXJIVE1MLCB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShMLmNvbmZpcm1hdGlvblN0YXRlKSwgdGhpcy5jb25maXJtYXRpb25TdGF0ZSA9IG51bGwsIHRoaXMuZGlzYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IoKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBzcGVjaWFsIGZvY3VzIGFuZCBob3ZlciBiZWhhdmlvciBmb3IgaXRlbSBpbiBjb25maXJtYXRpb24gc3RhdGUuXG4gICAqIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnQgaXRlbSBmcm9tIGJlaW5nIGhpZ2hsaWdodGVkIGFzIGhvdmVyZWQvZm9jdXNlZCBqdXN0IGFmdGVyIGNsaWNrLlxuICAgKi9cbiAgZW5hYmxlU3BlY2lhbEhvdmVyQW5kRm9jdXNCZWhhdmlvcigpIHtcbiAgICB2YXIgZSwgdCwgbztcbiAgICAoZSA9IHRoaXMubm9kZXMucm9vdCkgPT0gbnVsbCB8fCBlLmNsYXNzTGlzdC5hZGQoTC5ub0hvdmVyKSwgKHQgPSB0aGlzLm5vZGVzLnJvb3QpID09IG51bGwgfHwgdC5jbGFzc0xpc3QuYWRkKEwubm9Gb2N1cyksIChvID0gdGhpcy5ub2Rlcy5yb290KSA9PSBudWxsIHx8IG8uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvciwgeyBvbmNlOiAhMCB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgc3BlY2lhbCBmb2N1cyBhbmQgaG92ZXIgYmVoYXZpb3JcbiAgICovXG4gIGRpc2FibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCkge1xuICAgIHZhciBlO1xuICAgIHRoaXMucmVtb3ZlU3BlY2lhbEZvY3VzQmVoYXZpb3IoKSwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvcigpLCAoZSA9IHRoaXMubm9kZXMucm9vdCkgPT0gbnVsbCB8fCBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMucmVtb3ZlU3BlY2lhbEhvdmVyQmVoYXZpb3IpO1xuICB9XG4gIC8qKlxuICAgKiBFeGVjdXRlcyBpdGVtJ3Mgb25BY3RpdmF0ZSBjYWxsYmFjayBpZiB0aGUgaXRlbSBoYXMgbm8gY29uZmlybWF0aW9uIGNvbmZpZ3VyZWRcbiAgICpcbiAgICogQHBhcmFtIGl0ZW0gLSBpdGVtIHRvIGFjdGl2YXRlIG9yIGJyaW5nIHRvIGNvbmZpcm1hdGlvbiBtb2RlXG4gICAqL1xuICBhY3RpdmF0ZU9yRW5hYmxlQ29uZmlybWF0aW9uTW9kZShlKSB7XG4gICAgdmFyIHQ7XG4gICAgaWYgKCEoXCJjb25maXJtYXRpb25cIiBpbiBlKSB8fCBlLmNvbmZpcm1hdGlvbiA9PT0gdm9pZCAwKVxuICAgICAgdHJ5IHtcbiAgICAgICAgKHQgPSBlLm9uQWN0aXZhdGUpID09IG51bGwgfHwgdC5jYWxsKGUsIGUpLCB0aGlzLmRpc2FibGVDb25maXJtYXRpb25Nb2RlKCk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgdGhpcy5hbmltYXRlRXJyb3IoKTtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICB0aGlzLmVuYWJsZUNvbmZpcm1hdGlvbk1vZGUoZS5jb25maXJtYXRpb24pO1xuICB9XG4gIC8qKlxuICAgKiBBbmltYXRlcyBpdGVtIHdoaWNoIHN5bWJvbGl6ZXMgdGhhdCBlcnJvciBvY2N1cmVkIHdoaWxlIGV4ZWN1dGluZyAnb25BY3RpdmF0ZSgpJyBjYWxsYmFja1xuICAgKi9cbiAgYW5pbWF0ZUVycm9yKCkge1xuICAgIHZhciBlLCB0LCBvO1xuICAgIChlID0gdGhpcy5ub2Rlcy5pY29uKSAhPSBudWxsICYmIGUuY2xhc3NMaXN0LmNvbnRhaW5zKEwud29iYmxlQW5pbWF0aW9uKSB8fCAoKHQgPSB0aGlzLm5vZGVzLmljb24pID09IG51bGwgfHwgdC5jbGFzc0xpc3QuYWRkKEwud29iYmxlQW5pbWF0aW9uKSwgKG8gPSB0aGlzLm5vZGVzLmljb24pID09IG51bGwgfHwgby5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIHRoaXMub25FcnJvckFuaW1hdGlvbkVuZCkpO1xuICB9XG59XG5jb25zdCBVZSA9IHRlKFwiY2UtcG9wb3Zlci1pdGVtLXNlcGFyYXRvclwiKSwgamUgPSB7XG4gIGNvbnRhaW5lcjogVWUoKSxcbiAgbGluZTogVWUoXCJsaW5lXCIpLFxuICBoaWRkZW46IFVlKG51bGwsIFwiaGlkZGVuXCIpXG59O1xuY2xhc3MgWHQgZXh0ZW5kcyBudCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBpbnN0YW5jZVxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHJvb3Q6IGQubWFrZShcImRpdlwiLCBqZS5jb250YWluZXIpLFxuICAgICAgbGluZTogZC5tYWtlKFwiZGl2XCIsIGplLmxpbmUpXG4gICAgfSwgdGhpcy5ub2Rlcy5yb290LmFwcGVuZENoaWxkKHRoaXMubm9kZXMubGluZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcG9wb3ZlciBzZXBhcmF0b3Igcm9vdCBlbGVtZW50XG4gICAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnJvb3Q7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgaXRlbSBoaWRkZW4gc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIGlzSGlkZGVuIC0gdHJ1ZSBpZiBpdGVtIHNob3VsZCBiZSBoaWRkZW5cbiAgICovXG4gIHRvZ2dsZUhpZGRlbihlKSB7XG4gICAgdmFyIHQ7XG4gICAgKHQgPSB0aGlzLm5vZGVzLnJvb3QpID09IG51bGwgfHwgdC5jbGFzc0xpc3QudG9nZ2xlKGplLmhpZGRlbiwgZSk7XG4gIH1cbn1cbnZhciBaID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uQ2xvc2VkID0gXCJjbG9zZWRcIiwgbi5DbG9zZWRPbkFjdGl2YXRlID0gXCJjbG9zZWQtb24tYWN0aXZhdGVcIiwgbikpKFogfHwge30pO1xuY29uc3QgSCA9IHRlKFwiY2UtcG9wb3ZlclwiKSwgTiA9IHtcbiAgcG9wb3ZlcjogSCgpLFxuICBwb3BvdmVyQ29udGFpbmVyOiBIKFwiY29udGFpbmVyXCIpLFxuICBwb3BvdmVyT3BlblRvcDogSChudWxsLCBcIm9wZW4tdG9wXCIpLFxuICBwb3BvdmVyT3BlbkxlZnQ6IEgobnVsbCwgXCJvcGVuLWxlZnRcIiksXG4gIHBvcG92ZXJPcGVuZWQ6IEgobnVsbCwgXCJvcGVuZWRcIiksXG4gIHNlYXJjaDogSChcInNlYXJjaFwiKSxcbiAgbm90aGluZ0ZvdW5kTWVzc2FnZTogSChcIm5vdGhpbmctZm91bmQtbWVzc2FnZVwiKSxcbiAgbm90aGluZ0ZvdW5kTWVzc2FnZURpc3BsYXllZDogSChcIm5vdGhpbmctZm91bmQtbWVzc2FnZVwiLCBcImRpc3BsYXllZFwiKSxcbiAgaXRlbXM6IEgoXCJpdGVtc1wiKSxcbiAgb3ZlcmxheTogSChcIm92ZXJsYXlcIiksXG4gIG92ZXJsYXlIaWRkZW46IEgoXCJvdmVybGF5XCIsIFwiaGlkZGVuXCIpLFxuICBwb3BvdmVyTmVzdGVkOiBIKG51bGwsIFwibmVzdGVkXCIpLFxuICBnZXRQb3BvdmVyTmVzdGVkQ2xhc3M6IChuKSA9PiBIKG51bGwsIGBuZXN0ZWQtbGV2ZWwtJHtuLnRvU3RyaW5nKCl9YCksXG4gIHBvcG92ZXJJbmxpbmU6IEgobnVsbCwgXCJpbmxpbmVcIiksXG4gIHBvcG92ZXJIZWFkZXI6IEgoXCJoZWFkZXJcIilcbn07XG52YXIgZGUgPSAvKiBAX19QVVJFX18gKi8gKChuKSA9PiAobi5OZXN0aW5nTGV2ZWwgPSBcIi0tbmVzdGluZy1sZXZlbFwiLCBuLlBvcG92ZXJIZWlnaHQgPSBcIi0tcG9wb3Zlci1oZWlnaHRcIiwgbi5JbmxpbmVQb3BvdmVyV2lkdGggPSBcIi0taW5saW5lLXBvcG92ZXItd2lkdGhcIiwgbi5UcmlnZ2VySXRlbUxlZnQgPSBcIi0tdHJpZ2dlci1pdGVtLWxlZnRcIiwgbi5UcmlnZ2VySXRlbVRvcCA9IFwiLS10cmlnZ2VyLWl0ZW0tdG9wXCIsIG4pKShkZSB8fCB7fSk7XG5jb25zdCB5dCA9IHRlKFwiY2UtcG9wb3Zlci1pdGVtLWh0bWxcIiksIEV0ID0ge1xuICByb290OiB5dCgpLFxuICBoaWRkZW46IHl0KG51bGwsIFwiaGlkZGVuXCIpXG59O1xuY2xhc3MgRWUgZXh0ZW5kcyBudCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIHRoZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIOKAkyBpbnN0YW5jZSBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSByZW5kZXJQYXJhbXMg4oCTIHBvcG92ZXIgaXRlbSByZW5kZXIgcGFyYW1zLlxuICAgKiBUaGUgcGFyYW1ldGVycyB0aGF0IGFyZSBub3Qgc2V0IGJ5IHVzZXIgdmlhIHBvcG92ZXIgYXBpIGJ1dCByYXRoZXIgZGVwZW5kIG9uIHRlY2huaWNhbCBpbXBsZW1lbnRhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCkge1xuICAgIHZhciBvLCBpO1xuICAgIHN1cGVyKGUpLCB0aGlzLm5vZGVzID0ge1xuICAgICAgcm9vdDogZC5tYWtlKFwiZGl2XCIsIEV0LnJvb3QpXG4gICAgfSwgdGhpcy5ub2Rlcy5yb290LmFwcGVuZENoaWxkKGUuZWxlbWVudCksIGUubmFtZSAmJiAodGhpcy5ub2Rlcy5yb290LmRhdGFzZXQuaXRlbU5hbWUgPSBlLm5hbWUpLCBlLmhpbnQgIT09IHZvaWQgMCAmJiAoKG8gPSB0ID09IG51bGwgPyB2b2lkIDAgOiB0LmhpbnQpID09IG51bGwgPyB2b2lkIDAgOiBvLmVuYWJsZWQpICE9PSAhMSAmJiB0aGlzLmFkZEhpbnQodGhpcy5ub2Rlcy5yb290LCB7XG4gICAgICAuLi5lLmhpbnQsXG4gICAgICBwb3NpdGlvbjogKChpID0gdCA9PSBudWxsID8gdm9pZCAwIDogdC5oaW50KSA9PSBudWxsID8gdm9pZCAwIDogaS5wb3NpdGlvbikgfHwgXCJyaWdodFwiXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcG9wb3ZlciBpdGVtIHJvb3QgZWxlbWVudFxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290O1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGVzIGl0ZW0gaGlkZGVuIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSBpc0hpZGRlbiAtIHRydWUgaWYgaXRlbSBzaG91bGQgYmUgaGlkZGVuXG4gICAqL1xuICB0b2dnbGVIaWRkZW4oZSkge1xuICAgIHZhciB0O1xuICAgICh0ID0gdGhpcy5ub2Rlcy5yb290KSA9PSBudWxsIHx8IHQuY2xhc3NMaXN0LnRvZ2dsZShFdC5oaWRkZW4sIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgYnV0dG9ucyBhbmQgaW5wdXRzIGluc2lkZSBjdXN0b20gY29udGVudFxuICAgKi9cbiAgZ2V0Q29udHJvbHMoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMubm9kZXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgYGJ1dHRvbiwgJHtkLmFsbElucHV0c1NlbGVjdG9yfWBcbiAgICApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGUpO1xuICB9XG59XG5jbGFzcyBWdCBleHRlbmRzIFRlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBwb3BvdmVyIGNvbnN0cnVjdGlvbiBwYXJhbXNcbiAgICogQHBhcmFtIGl0ZW1zUmVuZGVyUGFyYW1zIC0gcG9wb3ZlciBpdGVtIHJlbmRlciBwYXJhbXMuXG4gICAqIFRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIG5vdCBzZXQgYnkgdXNlciB2aWEgcG9wb3ZlciBhcGkgYnV0IHJhdGhlciBkZXBlbmQgb24gdGVjaG5pY2FsIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCB0ID0ge30pIHtcbiAgICBzdXBlcigpLCB0aGlzLnBhcmFtcyA9IGUsIHRoaXMuaXRlbXNSZW5kZXJQYXJhbXMgPSB0LCB0aGlzLmxpc3RlbmVycyA9IG5ldyBDZSgpLCB0aGlzLm1lc3NhZ2VzID0ge1xuICAgICAgbm90aGluZ0ZvdW5kOiBcIk5vdGhpbmcgZm91bmRcIixcbiAgICAgIHNlYXJjaDogXCJTZWFyY2hcIlxuICAgIH0sIHRoaXMuaXRlbXMgPSB0aGlzLmJ1aWxkSXRlbXMoZS5pdGVtcyksIGUubWVzc2FnZXMgJiYgKHRoaXMubWVzc2FnZXMgPSB7XG4gICAgICAuLi50aGlzLm1lc3NhZ2VzLFxuICAgICAgLi4uZS5tZXNzYWdlc1xuICAgIH0pLCB0aGlzLm5vZGVzID0ge30sIHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lciA9IGQubWFrZShcImRpdlwiLCBbTi5wb3BvdmVyQ29udGFpbmVyXSksIHRoaXMubm9kZXMubm90aGluZ0ZvdW5kTWVzc2FnZSA9IGQubWFrZShcImRpdlwiLCBbTi5ub3RoaW5nRm91bmRNZXNzYWdlXSwge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMubWVzc2FnZXMubm90aGluZ0ZvdW5kXG4gICAgfSksIHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLm5vdGhpbmdGb3VuZE1lc3NhZ2UpLCB0aGlzLm5vZGVzLml0ZW1zID0gZC5tYWtlKFwiZGl2XCIsIFtOLml0ZW1zXSksIHRoaXMuaXRlbXMuZm9yRWFjaCgobykgPT4ge1xuICAgICAgY29uc3QgaSA9IG8uZ2V0RWxlbWVudCgpO1xuICAgICAgaSAhPT0gbnVsbCAmJiB0aGlzLm5vZGVzLml0ZW1zLmFwcGVuZENoaWxkKGkpO1xuICAgIH0pLCB0aGlzLm5vZGVzLnBvcG92ZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pdGVtcyksIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lciwgXCJjbGlja1wiLCAobykgPT4gdGhpcy5oYW5kbGVDbGljayhvKSksIHRoaXMubm9kZXMucG9wb3ZlciA9IGQubWFrZShcImRpdlwiLCBbXG4gICAgICBOLnBvcG92ZXIsXG4gICAgICB0aGlzLnBhcmFtcy5jbGFzc1xuICAgIF0pLCB0aGlzLm5vZGVzLnBvcG92ZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyKTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBvZiBkZWZhdWx0IHBvcG92ZXIgaXRlbXMgdGhhdCBhcmUgc2VhcmNoYWJsZSBhbmQgbWF5IGhhdmUgY29uZmlybWF0aW9uIHN0YXRlXG4gICAqL1xuICBnZXQgaXRlbXNEZWZhdWx0KCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigoZSkgPT4gZSBpbnN0YW5jZW9mIHNlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBIVE1MIGVsZW1lbnQgY29ycmVzcG9uZGluZyB0byB0aGUgcG9wb3ZlclxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5wb3BvdmVyO1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIHBvcG92ZXJcbiAgICovXG4gIHNob3coKSB7XG4gICAgdGhpcy5ub2Rlcy5wb3BvdmVyLmNsYXNzTGlzdC5hZGQoTi5wb3BvdmVyT3BlbmVkKSwgdGhpcy5zZWFyY2ggIT09IHZvaWQgMCAmJiB0aGlzLnNlYXJjaC5mb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZXMgcG9wb3ZlclxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZShOLnBvcG92ZXJPcGVuZWQpLCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZShOLnBvcG92ZXJPcGVuVG9wKSwgdGhpcy5pdGVtc0RlZmF1bHQuZm9yRWFjaCgoZSkgPT4gZS5yZXNldCgpKSwgdGhpcy5zZWFyY2ggIT09IHZvaWQgMCAmJiB0aGlzLnNlYXJjaC5jbGVhcigpLCB0aGlzLmVtaXQoWi5DbG9zZWQpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgbWVtb3J5XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBlO1xuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgodCkgPT4gdC5kZXN0cm95KCkpLCB0aGlzLm5vZGVzLnBvcG92ZXIucmVtb3ZlKCksIHRoaXMubGlzdGVuZXJzLnJlbW92ZUFsbCgpLCAoZSA9IHRoaXMuc2VhcmNoKSA9PSBudWxsIHx8IGUuZGVzdHJveSgpO1xuICB9XG4gIC8qKlxuICAgKiBMb29rcyBmb3IgdGhlIGl0ZW0gYnkgbmFtZSBhbmQgaW1pdGF0ZXMgY2xpY2sgb24gaXRcbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSBuYW1lIG9mIHRoZSBpdGVtIHRvIGFjdGl2YXRlXG4gICAqL1xuICBhY3RpdmF0ZUl0ZW1CeU5hbWUoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLml0ZW1zLmZpbmQoKG8pID0+IG8ubmFtZSA9PT0gZSk7XG4gICAgdGhpcy5oYW5kbGVJdGVtQ2xpY2sodCk7XG4gIH1cbiAgLyoqXG4gICAqIEZhY3RvcnkgbWV0aG9kIGZvciBjcmVhdGluZyBwb3BvdmVyIGl0ZW1zXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtcyAtIGxpc3Qgb2YgaXRlbXMgcGFyYW1zXG4gICAqL1xuICBidWlsZEl0ZW1zKGUpIHtcbiAgICByZXR1cm4gZS5tYXAoKHQpID0+IHtcbiAgICAgIHN3aXRjaCAodC50eXBlKSB7XG4gICAgICAgIGNhc2UgQS5TZXBhcmF0b3I6XG4gICAgICAgICAgcmV0dXJuIG5ldyBYdCgpO1xuICAgICAgICBjYXNlIEEuSHRtbDpcbiAgICAgICAgICByZXR1cm4gbmV3IEVlKHQsIHRoaXMuaXRlbXNSZW5kZXJQYXJhbXNbQS5IdG1sXSk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG5ldyBzZSh0LCB0aGlzLml0ZW1zUmVuZGVyUGFyYW1zW0EuRGVmYXVsdF0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgcG9wb3ZlciBpdGVtIHRoYXQgaXMgdGhlIHRhcmdldCBvZiB0aGUgc3BlY2lmaWVkIGV2ZW50XG4gICAqXG4gICAqIEBwYXJhbSBldmVudCAtIGV2ZW50IHRvIHJldHJpZXZlIHBvcG92ZXIgaXRlbSBmcm9tXG4gICAqL1xuICBnZXRUYXJnZXRJdGVtKGUpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcy5maWx0ZXIoKHQpID0+IHQgaW5zdGFuY2VvZiBzZSB8fCB0IGluc3RhbmNlb2YgRWUpLmZpbmQoKHQpID0+IHtcbiAgICAgIGNvbnN0IG8gPSB0LmdldEVsZW1lbnQoKTtcbiAgICAgIHJldHVybiBvID09PSBudWxsID8gITEgOiBlLmNvbXBvc2VkUGF0aCgpLmluY2x1ZGVzKG8pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIHBvcG92ZXIgaXRlbSBjbGlja1xuICAgKlxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gdG8gaGFuZGxlIGNsaWNrIG9mXG4gICAqL1xuICBoYW5kbGVJdGVtQ2xpY2soZSkge1xuICAgIGlmICghKFwiaXNEaXNhYmxlZFwiIGluIGUgJiYgZS5pc0Rpc2FibGVkKSkge1xuICAgICAgaWYgKGUuaGFzQ2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5zaG93TmVzdGVkSXRlbXMoZSksIFwiaGFuZGxlQ2xpY2tcIiBpbiBlICYmIHR5cGVvZiBlLmhhbmRsZUNsaWNrID09IFwiZnVuY3Rpb25cIiAmJiBlLmhhbmRsZUNsaWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXRlbXNEZWZhdWx0LmZpbHRlcigodCkgPT4gdCAhPT0gZSkuZm9yRWFjaCgodCkgPT4gdC5yZXNldCgpKSwgXCJoYW5kbGVDbGlja1wiIGluIGUgJiYgdHlwZW9mIGUuaGFuZGxlQ2xpY2sgPT0gXCJmdW5jdGlvblwiICYmIGUuaGFuZGxlQ2xpY2soKSwgdGhpcy50b2dnbGVJdGVtQWN0aXZlbmVzc0lmTmVlZGVkKGUpLCBlLmNsb3NlT25BY3RpdmF0ZSAmJiAodGhpcy5oaWRlKCksIHRoaXMuZW1pdChaLkNsb3NlZE9uQWN0aXZhdGUpKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgY2xpY2tzIGluc2lkZSBwb3BvdmVyXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCAtIGl0ZW0gdG8gaGFuZGxlIGNsaWNrIG9mXG4gICAqL1xuICBoYW5kbGVDbGljayhlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZ2V0VGFyZ2V0SXRlbShlKTtcbiAgICB0ICE9PSB2b2lkIDAgJiYgdGhpcy5oYW5kbGVJdGVtQ2xpY2sodCk7XG4gIH1cbiAgLyoqXG4gICAqIC0gVG9nZ2xlcyBpdGVtIGFjdGl2ZSBzdGF0ZSwgaWYgY2xpY2tlZCBwb3BvdmVyIGl0ZW0gaGFzIHByb3BlcnR5ICd0b2dnbGUnIHNldCB0byB0cnVlLlxuICAgKlxuICAgKiAtIFBlcmZvcm1zIHJhZGlvYnV0dG9uLWxpa2UgYmVoYXZpb3IgaWYgdGhlIGl0ZW0gaGFzIHByb3BlcnR5ICd0b2dnbGUnIHNldCB0byBzdHJpbmcga2V5LlxuICAgKiAoQWxsIHRoZSBvdGhlciBpdGVtcyB3aXRoIHRoZSBzYW1lIGtleSBnZXQgaW5hY3RpdmUsIGFuZCB0aGUgaXRlbSBnZXRzIGFjdGl2ZSlcbiAgICpcbiAgICogQHBhcmFtIGNsaWNrZWRJdGVtIC0gcG9wb3ZlciBpdGVtIHRoYXQgd2FzIGNsaWNrZWRcbiAgICovXG4gIHRvZ2dsZUl0ZW1BY3RpdmVuZXNzSWZOZWVkZWQoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2Ygc2UgJiYgKGUudG9nZ2xlID09PSAhMCAmJiBlLnRvZ2dsZUFjdGl2ZSgpLCB0eXBlb2YgZS50b2dnbGUgPT0gXCJzdHJpbmdcIikpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLml0ZW1zRGVmYXVsdC5maWx0ZXIoKG8pID0+IG8udG9nZ2xlID09PSBlLnRvZ2dsZSk7XG4gICAgICBpZiAodC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZS50b2dnbGVBY3RpdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdC5mb3JFYWNoKChvKSA9PiB7XG4gICAgICAgIG8udG9nZ2xlQWN0aXZlKG8gPT09IGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG52YXIgRGUgPSAvKiBAX19QVVJFX18gKi8gKChuKSA9PiAobi5TZWFyY2ggPSBcInNlYXJjaFwiLCBuKSkoRGUgfHwge30pO1xuY29uc3QgJGUgPSB0ZShcImNkeC1zZWFyY2gtZmllbGRcIiksIFllID0ge1xuICB3cmFwcGVyOiAkZSgpLFxuICBpY29uOiAkZShcImljb25cIiksXG4gIGlucHV0OiAkZShcImlucHV0XCIpXG59O1xuY2xhc3MgX2kgZXh0ZW5kcyBUZSB7XG4gIC8qKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIGF2YWlsYWJsZSBjb25maWdcbiAgICogQHBhcmFtIG9wdGlvbnMuaXRlbXMgLSBzZWFyY2hhYmxlIGl0ZW1zIGxpc3RcbiAgICogQHBhcmFtIG9wdGlvbnMucGxhY2Vob2xkZXIgLSBpbnB1dCBwbGFjZWhvbGRlclxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBpdGVtczogZSwgcGxhY2Vob2xkZXI6IHQgfSkge1xuICAgIHN1cGVyKCksIHRoaXMubGlzdGVuZXJzID0gbmV3IENlKCksIHRoaXMuaXRlbXMgPSBlLCB0aGlzLndyYXBwZXIgPSBkLm1ha2UoXCJkaXZcIiwgWWUud3JhcHBlcik7XG4gICAgY29uc3QgbyA9IGQubWFrZShcImRpdlwiLCBZZS5pY29uLCB7XG4gICAgICBpbm5lckhUTUw6IFNpXG4gICAgfSk7XG4gICAgdGhpcy5pbnB1dCA9IGQubWFrZShcImlucHV0XCIsIFllLmlucHV0LCB7XG4gICAgICBwbGFjZWhvbGRlcjogdCxcbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBwcmV2ZW50IGZvY3VzaW5nIG9uIHRoZSBpbnB1dCBieSBUYWIga2V5XG4gICAgICAgKiAoUG9wb3ZlciBpbiB0aGUgVG9vbGJhciBsYXlzIGJlbG93IHRoZSBibG9ja3MsXG4gICAgICAgKiBzbyBUYWIgaW4gdGhlIGxhc3QgYmxvY2sgd2lsbCBmb2N1cyB0aGlzIGhpZGRlbiBpbnB1dCBpZiB0aGlzIHByb3BlcnR5IGlzIG5vdCBzZXQpXG4gICAgICAgKi9cbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0pLCB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQobyksIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmlucHV0KSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5pbnB1dCwgXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gdGhpcy5pbnB1dC52YWx1ZSwgdGhpcy5lbWl0KERlLlNlYXJjaCwge1xuICAgICAgICBxdWVyeTogdGhpcy5zZWFyY2hRdWVyeSxcbiAgICAgICAgaXRlbXM6IHRoaXMuZm91bmRJdGVtc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VhcmNoIGZpZWxkIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogU2V0cyBmb2N1cyB0byB0aGUgaW5wdXRcbiAgICovXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHNlYXJjaCBxdWVyeSBhbmQgcmVzdWx0c1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IFwiXCIsIHRoaXMuc2VhcmNoUXVlcnkgPSBcIlwiLCB0aGlzLmVtaXQoRGUuU2VhcmNoLCB7XG4gICAgICBxdWVyeTogXCJcIixcbiAgICAgIGl0ZW1zOiB0aGlzLmZvdW5kSXRlbXNcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIG1lbW9yeVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5yZW1vdmVBbGwoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIGZvdW5kIGl0ZW1zIGZvciB0aGUgY3VycmVudCBzZWFyY2ggcXVlcnlcbiAgICovXG4gIGdldCBmb3VuZEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigoZSkgPT4gdGhpcy5jaGVja0l0ZW0oZSkpO1xuICB9XG4gIC8qKlxuICAgKiBDb250YWlucyBsb2dpYyBmb3IgY2hlY2tpbmcgd2hldGhlciBwYXNzZWQgaXRlbSBjb25mb3JtcyB0aGUgc2VhcmNoIHF1ZXJ5XG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gaXRlbSB0byBiZSBjaGVja2VkXG4gICAqL1xuICBjaGVja0l0ZW0oZSkge1xuICAgIHZhciBpLCBzO1xuICAgIGNvbnN0IHQgPSAoKGkgPSBlLnRpdGxlKSA9PSBudWxsID8gdm9pZCAwIDogaS50b0xvd2VyQ2FzZSgpKSB8fCBcIlwiLCBvID0gKHMgPSB0aGlzLnNlYXJjaFF1ZXJ5KSA9PSBudWxsID8gdm9pZCAwIDogcy50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBvICE9PSB2b2lkIDAgPyB0LmluY2x1ZGVzKG8pIDogITE7XG4gIH1cbn1cbnZhciBOaSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgUGkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBEaSA9IChuLCBlLCB0LCBvKSA9PiB7XG4gIGZvciAodmFyIGkgPSBvID4gMSA/IHZvaWQgMCA6IG8gPyBQaShlLCB0KSA6IGUsIHMgPSBuLmxlbmd0aCAtIDEsIHI7IHMgPj0gMDsgcy0tKVxuICAgIChyID0gbltzXSkgJiYgKGkgPSAobyA/IHIoZSwgdCwgaSkgOiByKGkpKSB8fCBpKTtcbiAgcmV0dXJuIG8gJiYgaSAmJiBOaShlLCB0LCBpKSwgaTtcbn07XG5jb25zdCBxdCA9IGNsYXNzIFp0IGV4dGVuZHMgVnQge1xuICAvKipcbiAgICogQ29uc3RydWN0IHRoZSBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gcG9wb3ZlciBwYXJhbXNcbiAgICogQHBhcmFtIGl0ZW1zUmVuZGVyUGFyYW1zIOKAk8KgcG9wb3ZlciBpdGVtIHJlbmRlciBwYXJhbXMuXG4gICAqIFRoZSBwYXJhbWV0ZXJzIHRoYXQgYXJlIG5vdCBzZXQgYnkgdXNlciB2aWEgcG9wb3ZlciBhcGkgYnV0IHJhdGhlciBkZXBlbmQgb24gdGVjaG5pY2FsIGltcGxlbWVudGF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCB0KSB7XG4gICAgc3VwZXIoZSwgdCksIHRoaXMubmVzdGluZ0xldmVsID0gMCwgdGhpcy5uZXN0ZWRQb3BvdmVyVHJpZ2dlckl0ZW0gPSBudWxsLCB0aGlzLnByZXZpb3VzbHlIb3ZlcmVkSXRlbSA9IG51bGwsIHRoaXMuc2NvcGVFbGVtZW50ID0gZG9jdW1lbnQuYm9keSwgdGhpcy5oaWRlID0gKCkgPT4ge1xuICAgICAgdmFyIG87XG4gICAgICBzdXBlci5oaWRlKCksIHRoaXMuZGVzdHJveU5lc3RlZFBvcG92ZXJJZkV4aXN0cygpLCAobyA9IHRoaXMuZmxpcHBlcikgPT0gbnVsbCB8fCBvLmRlYWN0aXZhdGUoKSwgdGhpcy5wcmV2aW91c2x5SG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgIH0sIHRoaXMub25GbGlwID0gKCkgPT4ge1xuICAgICAgY29uc3QgbyA9IHRoaXMuaXRlbXNEZWZhdWx0LmZpbmQoKGkpID0+IGkuaXNGb2N1c2VkKTtcbiAgICAgIG8gPT0gbnVsbCB8fCBvLm9uRm9jdXMoKTtcbiAgICB9LCB0aGlzLm9uU2VhcmNoID0gKG8pID0+IHtcbiAgICAgIHZhciBsO1xuICAgICAgY29uc3QgaSA9IG8ucXVlcnkgPT09IFwiXCIsIHMgPSBvLml0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICBsZXQgYyA9ICExO1xuICAgICAgICBhIGluc3RhbmNlb2Ygc2UgPyBjID0gIW8uaXRlbXMuaW5jbHVkZXMoYSkgOiAoYSBpbnN0YW5jZW9mIFh0IHx8IGEgaW5zdGFuY2VvZiBFZSkgJiYgKGMgPSBzIHx8ICFpKSwgYS50b2dnbGVIaWRkZW4oYyk7XG4gICAgICB9KSwgdGhpcy50b2dnbGVOb3RoaW5nRm91bmRNZXNzYWdlKHMpO1xuICAgICAgY29uc3QgciA9IG8ucXVlcnkgPT09IFwiXCIgPyB0aGlzLmZsaXBwYWJsZUVsZW1lbnRzIDogby5pdGVtcy5tYXAoKGEpID0+IGEuZ2V0RWxlbWVudCgpKTtcbiAgICAgIChsID0gdGhpcy5mbGlwcGVyKSAhPSBudWxsICYmIGwuaXNBY3RpdmF0ZWQgJiYgKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZShyKSk7XG4gICAgfSwgZS5uZXN0aW5nTGV2ZWwgIT09IHZvaWQgMCAmJiAodGhpcy5uZXN0aW5nTGV2ZWwgPSBlLm5lc3RpbmdMZXZlbCksIHRoaXMubmVzdGluZ0xldmVsID4gMCAmJiB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LmFkZChOLnBvcG92ZXJOZXN0ZWQpLCBlLnNjb3BlRWxlbWVudCAhPT0gdm9pZCAwICYmICh0aGlzLnNjb3BlRWxlbWVudCA9IGUuc2NvcGVFbGVtZW50KSwgdGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyICE9PSBudWxsICYmIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lciwgXCJtb3VzZW92ZXJcIiwgKG8pID0+IHRoaXMuaGFuZGxlSG92ZXIobykpLCBlLnNlYXJjaGFibGUgJiYgdGhpcy5hZGRTZWFyY2goKSwgZS5mbGlwcGFibGUgIT09ICExICYmICh0aGlzLmZsaXBwZXIgPSBuZXcgbGUoe1xuICAgICAgaXRlbXM6IHRoaXMuZmxpcHBhYmxlRWxlbWVudHMsXG4gICAgICBmb2N1c2VkSXRlbUNsYXNzOiBMLmZvY3VzZWQsXG4gICAgICBhbGxvd2VkS2V5czogW1xuICAgICAgICB3LlRBQixcbiAgICAgICAgdy5VUCxcbiAgICAgICAgdy5ET1dOLFxuICAgICAgICB3LkVOVEVSXG4gICAgICBdXG4gICAgfSksIHRoaXMuZmxpcHBlci5vbkZsaXAodGhpcy5vbkZsaXApKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHNvbWUgaXRlbSBpbnNpZGUgcG9wb3ZlciBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gdGhpcy5mbGlwcGVyID09PSB2b2lkIDAgPyAhMSA6IHRoaXMuZmxpcHBlci5oYXNGb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBTY3JvbGwgcG9zaXRpb24gaW5zaWRlIGl0ZW1zIGNvbnRhaW5lciBvZiB0aGUgcG9wb3ZlclxuICAgKi9cbiAgZ2V0IHNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5pdGVtcyA9PT0gbnVsbCA/IDAgOiB0aGlzLm5vZGVzLml0ZW1zLnNjcm9sbFRvcDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB2aXNpYmxlIGVsZW1lbnQgb2Zmc2V0IHRvcFxuICAgKi9cbiAgZ2V0IG9mZnNldFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyID09PSBudWxsID8gMCA6IHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lci5vZmZzZXRUb3A7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gcG9wb3ZlclxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLm5vZGVzLnBvcG92ZXIuc3R5bGUuc2V0UHJvcGVydHkoZGUuUG9wb3ZlckhlaWdodCwgdGhpcy5zaXplLmhlaWdodCArIFwicHhcIiksIHRoaXMuc2hvdWxkT3BlbkJvdHRvbSB8fCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LmFkZChOLnBvcG92ZXJPcGVuVG9wKSwgdGhpcy5zaG91bGRPcGVuUmlnaHQgfHwgdGhpcy5ub2Rlcy5wb3BvdmVyLmNsYXNzTGlzdC5hZGQoTi5wb3BvdmVyT3BlbkxlZnQpLCBzdXBlci5zaG93KCksIChlID0gdGhpcy5mbGlwcGVyKSA9PSBudWxsIHx8IGUuYWN0aXZhdGUodGhpcy5mbGlwcGFibGVFbGVtZW50cyk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBtZW1vcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5oaWRlKCksIHN1cGVyLmRlc3Ryb3koKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBkaXNwbGF5aW5nIG5lc3RlZCBpdGVtcyBmb3IgdGhlIGl0ZW0uXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIOKAkyBpdGVtIHRvIHNob3cgbmVzdGVkIHBvcG92ZXIgZm9yXG4gICAqL1xuICBzaG93TmVzdGVkSXRlbXMoZSkge1xuICAgIHRoaXMubmVzdGVkUG9wb3ZlciAhPT0gbnVsbCAmJiB0aGlzLm5lc3RlZFBvcG92ZXIgIT09IHZvaWQgMCB8fCAodGhpcy5uZXN0ZWRQb3BvdmVyVHJpZ2dlckl0ZW0gPSBlLCB0aGlzLnNob3dOZXN0ZWRQb3BvdmVyRm9ySXRlbShlKSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgaG92ZXIgZXZlbnRzIGluc2lkZSBwb3BvdmVyIGl0ZW1zIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBob3ZlciBldmVudCBkYXRhXG4gICAqL1xuICBoYW5kbGVIb3ZlcihlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZ2V0VGFyZ2V0SXRlbShlKTtcbiAgICB0ICE9PSB2b2lkIDAgJiYgdGhpcy5wcmV2aW91c2x5SG92ZXJlZEl0ZW0gIT09IHQgJiYgKHRoaXMuZGVzdHJveU5lc3RlZFBvcG92ZXJJZkV4aXN0cygpLCB0aGlzLnByZXZpb3VzbHlIb3ZlcmVkSXRlbSA9IHQsIHQuaGFzQ2hpbGRyZW4gJiYgdGhpcy5zaG93TmVzdGVkUG9wb3ZlckZvckl0ZW0odCkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIENTUyB2YXJpYWJsZSB3aXRoIHBvc2l0aW9uIG9mIGl0ZW0gbmVhciB3aGljaCBuZXN0ZWQgcG9wb3ZlciBzaG91bGQgYmUgZGlzcGxheWVkLlxuICAgKiBJcyB1c2VkIGZvciBjb3JyZWN0IHBvc2l0aW9uaW5nIG9mIHRoZSBuZXN0ZWQgcG9wb3ZlclxuICAgKlxuICAgKiBAcGFyYW0gbmVzdGVkUG9wb3ZlckVsIC0gbmVzdGVkIHBvcG92ZXIgZWxlbWVudFxuICAgKiBAcGFyYW0gaXRlbSDigJMgaXRlbSBuZWFyIHdoaWNoIG5lc3RlZCBwb3BvdmVyIHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICovXG4gIHNldFRyaWdnZXJJdGVtUG9zaXRpb24oZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0LmdldEVsZW1lbnQoKSwgaSA9IChvID8gby5vZmZzZXRUb3AgOiAwKSAtIHRoaXMuc2Nyb2xsVG9wLCBzID0gdGhpcy5vZmZzZXRUb3AgKyBpO1xuICAgIGUuc3R5bGUuc2V0UHJvcGVydHkoZGUuVHJpZ2dlckl0ZW1Ub3AsIHMgKyBcInB4XCIpO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyBleGlzdGluZyBuZXN0ZWQgcG9wb3ZlclxuICAgKi9cbiAgZGVzdHJveU5lc3RlZFBvcG92ZXJJZkV4aXN0cygpIHtcbiAgICB2YXIgZSwgdDtcbiAgICB0aGlzLm5lc3RlZFBvcG92ZXIgPT09IHZvaWQgMCB8fCB0aGlzLm5lc3RlZFBvcG92ZXIgPT09IG51bGwgfHwgKHRoaXMubmVzdGVkUG9wb3Zlci5vZmYoWi5DbG9zZWRPbkFjdGl2YXRlLCB0aGlzLmhpZGUpLCB0aGlzLm5lc3RlZFBvcG92ZXIuaGlkZSgpLCB0aGlzLm5lc3RlZFBvcG92ZXIuZGVzdHJveSgpLCB0aGlzLm5lc3RlZFBvcG92ZXIuZ2V0RWxlbWVudCgpLnJlbW92ZSgpLCB0aGlzLm5lc3RlZFBvcG92ZXIgPSBudWxsLCAoZSA9IHRoaXMuZmxpcHBlcikgPT0gbnVsbCB8fCBlLmFjdGl2YXRlKHRoaXMuZmxpcHBhYmxlRWxlbWVudHMpLCAodCA9IHRoaXMubmVzdGVkUG9wb3ZlclRyaWdnZXJJdGVtKSA9PSBudWxsIHx8IHQub25DaGlsZHJlbkNsb3NlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBkaXNwbGF5cyBuZXN0ZWQgcG9wb3ZlciBmb3Igc3BlY2lmaWVkIGl0ZW0uXG4gICAqIElzIHVzZWQgb25seSBvbiBkZXNrdG9wXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gaXRlbSB0byBkaXNwbGF5IG5lc3RlZCBwb3BvdmVyIGJ5XG4gICAqL1xuICBzaG93TmVzdGVkUG9wb3ZlckZvckl0ZW0oZSkge1xuICAgIHZhciBvO1xuICAgIHRoaXMubmVzdGVkUG9wb3ZlciA9IG5ldyBadCh7XG4gICAgICBzZWFyY2hhYmxlOiBlLmlzQ2hpbGRyZW5TZWFyY2hhYmxlLFxuICAgICAgaXRlbXM6IGUuY2hpbGRyZW4sXG4gICAgICBuZXN0aW5nTGV2ZWw6IHRoaXMubmVzdGluZ0xldmVsICsgMSxcbiAgICAgIGZsaXBwYWJsZTogZS5pc0NoaWxkcmVuRmxpcHBhYmxlLFxuICAgICAgbWVzc2FnZXM6IHRoaXMubWVzc2FnZXNcbiAgICB9KSwgZS5vbkNoaWxkcmVuT3BlbigpLCB0aGlzLm5lc3RlZFBvcG92ZXIub24oWi5DbG9zZWRPbkFjdGl2YXRlLCB0aGlzLmhpZGUpO1xuICAgIGNvbnN0IHQgPSB0aGlzLm5lc3RlZFBvcG92ZXIuZ2V0RWxlbWVudCgpO1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnBvcG92ZXIuYXBwZW5kQ2hpbGQodCksIHRoaXMuc2V0VHJpZ2dlckl0ZW1Qb3NpdGlvbih0LCBlKSwgdC5zdHlsZS5zZXRQcm9wZXJ0eShkZS5OZXN0aW5nTGV2ZWwsIHRoaXMubmVzdGVkUG9wb3Zlci5uZXN0aW5nTGV2ZWwudG9TdHJpbmcoKSksIHRoaXMubmVzdGVkUG9wb3Zlci5zaG93KCksIChvID0gdGhpcy5mbGlwcGVyKSA9PSBudWxsIHx8IG8uZGVhY3RpdmF0ZSgpLCB0aGlzLm5lc3RlZFBvcG92ZXI7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBwb3BvdmVyIHNob3VsZCBiZSBvcGVuZWQgYm90dG9tLlxuICAgKiBJdCBzaG91bGQgaGFwcGVuIHdoZW4gdGhlcmUgaXMgZW5vdWdoIHNwYWNlIGJlbG93IG9yIG5vdCBlbm91Z2ggc3BhY2UgYWJvdmVcbiAgICovXG4gIGdldCBzaG91bGRPcGVuQm90dG9tKCkge1xuICAgIGlmICh0aGlzLm5vZGVzLnBvcG92ZXIgPT09IHZvaWQgMCB8fCB0aGlzLm5vZGVzLnBvcG92ZXIgPT09IG51bGwpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgZSA9IHRoaXMubm9kZXMucG9wb3ZlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdCA9IHRoaXMuc2NvcGVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBvID0gdGhpcy5zaXplLmhlaWdodCwgaSA9IGUudG9wICsgbywgcyA9IGUudG9wIC0gbywgciA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCwgdC5ib3R0b20pO1xuICAgIHJldHVybiBzIDwgdC50b3AgfHwgaSA8PSByO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcG9wb3ZlciBzaG91bGQgYmUgb3BlbmVkIGxlZnQuXG4gICAqIEl0IHNob3VsZCBoYXBwZW4gd2hlbiB0aGVyZSBpcyBlbm91Z2ggc3BhY2UgaW4gdGhlIHJpZ2h0IG9yIG5vdCBlbm91Z2ggc3BhY2UgaW4gdGhlIGxlZnRcbiAgICovXG4gIGdldCBzaG91bGRPcGVuUmlnaHQoKSB7XG4gICAgaWYgKHRoaXMubm9kZXMucG9wb3ZlciA9PT0gdm9pZCAwIHx8IHRoaXMubm9kZXMucG9wb3ZlciA9PT0gbnVsbClcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBlID0gdGhpcy5ub2Rlcy5wb3BvdmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB0ID0gdGhpcy5zY29wZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIG8gPSB0aGlzLnNpemUud2lkdGgsIGkgPSBlLnJpZ2h0ICsgbywgcyA9IGUubGVmdCAtIG8sIHIgPSBNYXRoLm1pbih3aW5kb3cuaW5uZXJXaWR0aCwgdC5yaWdodCk7XG4gICAgcmV0dXJuIHMgPCB0LmxlZnQgfHwgaSA8PSByO1xuICB9XG4gIGdldCBzaXplKCkge1xuICAgIHZhciBpO1xuICAgIGNvbnN0IGUgPSB7XG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICB3aWR0aDogMFxuICAgIH07XG4gICAgaWYgKHRoaXMubm9kZXMucG9wb3ZlciA9PT0gbnVsbClcbiAgICAgIHJldHVybiBlO1xuICAgIGNvbnN0IHQgPSB0aGlzLm5vZGVzLnBvcG92ZXIuY2xvbmVOb2RlKCEwKTtcbiAgICB0LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiLCB0LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiLCB0LnN0eWxlLnRvcCA9IFwiLTEwMDBweFwiLCB0LmNsYXNzTGlzdC5hZGQoTi5wb3BvdmVyT3BlbmVkKSwgKGkgPSB0LnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBOLnBvcG92ZXJOZXN0ZWQpKSA9PSBudWxsIHx8IGkucmVtb3ZlKCksIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCk7XG4gICAgY29uc3QgbyA9IHQucXVlcnlTZWxlY3RvcihcIi5cIiArIE4ucG9wb3ZlckNvbnRhaW5lcik7XG4gICAgcmV0dXJuIGUuaGVpZ2h0ID0gby5vZmZzZXRIZWlnaHQsIGUud2lkdGggPSBvLm9mZnNldFdpZHRoLCB0LnJlbW92ZSgpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgZWxlbWVudHMgYXZhaWxhYmxlIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLlxuICAgKi9cbiAgZ2V0IGZsaXBwYWJsZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zLm1hcCgodCkgPT4ge1xuICAgICAgaWYgKHQgaW5zdGFuY2VvZiBzZSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0RWxlbWVudCgpO1xuICAgICAgaWYgKHQgaW5zdGFuY2VvZiBFZSlcbiAgICAgICAgcmV0dXJuIHQuZ2V0Q29udHJvbHMoKTtcbiAgICB9KS5mbGF0KCkuZmlsdGVyKCh0KSA9PiB0ICE9IG51bGwpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIHNlYXJjaCB0byB0aGUgcG9wb3ZlclxuICAgKi9cbiAgYWRkU2VhcmNoKCkge1xuICAgIHRoaXMuc2VhcmNoID0gbmV3IF9pKHtcbiAgICAgIGl0ZW1zOiB0aGlzLml0ZW1zRGVmYXVsdCxcbiAgICAgIHBsYWNlaG9sZGVyOiB0aGlzLm1lc3NhZ2VzLnNlYXJjaFxuICAgIH0pLCB0aGlzLnNlYXJjaC5vbihEZS5TZWFyY2gsIHRoaXMub25TZWFyY2gpO1xuICAgIGNvbnN0IGUgPSB0aGlzLnNlYXJjaC5nZXRFbGVtZW50KCk7XG4gICAgZS5jbGFzc0xpc3QuYWRkKE4uc2VhcmNoKSwgdGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyLmluc2VydEJlZm9yZShlLCB0aGlzLm5vZGVzLnBvcG92ZXJDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgbm90aGluZyBmb3VuZCBtZXNzYWdlIHZpc2liaWxpdHlcbiAgICpcbiAgICogQHBhcmFtIGlzRGlzcGxheWVkIC0gdHJ1ZSBpZiB0aGUgbWVzc2FnZSBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAqL1xuICB0b2dnbGVOb3RoaW5nRm91bmRNZXNzYWdlKGUpIHtcbiAgICB0aGlzLm5vZGVzLm5vdGhpbmdGb3VuZE1lc3NhZ2UuY2xhc3NMaXN0LnRvZ2dsZShOLm5vdGhpbmdGb3VuZE1lc3NhZ2VEaXNwbGF5ZWQsIGUpO1xuICB9XG59O1xuRGkoW1xuICB1ZVxuXSwgcXQucHJvdG90eXBlLCBcInNpemVcIiwgMSk7XG5sZXQgcnQgPSBxdDtcbmNsYXNzIFJpIGV4dGVuZHMgcnQge1xuICAvKipcbiAgICogQ29uc3RydWN0cyB0aGUgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIGluc3RhbmNlIHBhcmFtZXRlcnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICBjb25zdCB0ID0gIXBlKCk7XG4gICAgc3VwZXIoXG4gICAgICB7XG4gICAgICAgIC4uLmUsXG4gICAgICAgIGNsYXNzOiBOLnBvcG92ZXJJbmxpbmVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFtBLkRlZmF1bHRdOiB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogV2UgdXNlIGJ1dHRvbiBpbnN0ZWFkIG9mIGRpdiBoZXJlIHRvIGZpeCBidWcgYXNzb2NpYXRlZCB3aXRoIGZvY3VzIGxvc3MgKHdoaWNoIGxlYWRzIHRvIHNlbGVjdGlvbiBjaGFuZ2UpIG9uIGNsaWNrIGluIHNhZmFyaVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogQHRvZG8gZmlndXJlIG91dCBiZXR0ZXIgd2F5IHRvIHNvbHZlIHRoZSBpc3N1ZVxuICAgICAgICAgICAqL1xuICAgICAgICAgIHdyYXBwZXJUYWc6IFwiYnV0dG9uXCIsXG4gICAgICAgICAgaGludDoge1xuICAgICAgICAgICAgcG9zaXRpb246IFwidG9wXCIsXG4gICAgICAgICAgICBhbGlnbm1lbnQ6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBlbmFibGVkOiB0XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbQS5IdG1sXToge1xuICAgICAgICAgIGhpbnQ6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcFwiLFxuICAgICAgICAgICAgYWxpZ25tZW50OiBcImNlbnRlclwiLFxuICAgICAgICAgICAgZW5hYmxlZDogdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICksIHRoaXMuaXRlbXMuZm9yRWFjaCgobykgPT4ge1xuICAgICAgIShvIGluc3RhbmNlb2Ygc2UpICYmICEobyBpbnN0YW5jZW9mIEVlKSB8fCBvLmhhc0NoaWxkcmVuICYmIG8uaXNDaGlsZHJlbk9wZW4gJiYgdGhpcy5zaG93TmVzdGVkSXRlbXMobyk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdmlzaWJsZSBlbGVtZW50IG9mZnNldCB0b3BcbiAgICovXG4gIGdldCBvZmZzZXRMZWZ0KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnBvcG92ZXJDb250YWluZXIgPT09IG51bGwgPyAwIDogdGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyLm9mZnNldExlZnQ7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gcG9wb3ZlclxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLm5lc3RpbmdMZXZlbCA9PT0gMCAmJiB0aGlzLm5vZGVzLnBvcG92ZXIuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBkZS5JbmxpbmVQb3BvdmVyV2lkdGgsXG4gICAgICB0aGlzLnNpemUud2lkdGggKyBcInB4XCJcbiAgICApLCBzdXBlci5zaG93KCk7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgaG92ZXIgZXZlbnQgaGFuZGxpbmcuXG4gICAqIE92ZXJyaWRlcyBwYXJlbnQncyBjbGFzcyBiZWhhdmlvclxuICAgKi9cbiAgaGFuZGxlSG92ZXIoKSB7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgQ1NTIHZhcmlhYmxlIHdpdGggcG9zaXRpb24gb2YgaXRlbSBuZWFyIHdoaWNoIG5lc3RlZCBwb3BvdmVyIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gICAqIElzIHVzZWQgdG8gcG9zaXRpb24gbmVzdGVkIHBvcG92ZXIgcmlnaHQgYmVsb3cgY2xpY2tlZCBpdGVtXG4gICAqXG4gICAqIEBwYXJhbSBuZXN0ZWRQb3BvdmVyRWwgLSBuZXN0ZWQgcG9wb3ZlciBlbGVtZW50XG4gICAqIEBwYXJhbSBpdGVtIOKAkyBpdGVtIG5lYXIgd2hpY2ggbmVzdGVkIHBvcG92ZXIgc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgKi9cbiAgc2V0VHJpZ2dlckl0ZW1Qb3NpdGlvbihlLCB0KSB7XG4gICAgY29uc3QgbyA9IHQuZ2V0RWxlbWVudCgpLCBpID0gbyA/IG8ub2Zmc2V0TGVmdCA6IDAsIHMgPSB0aGlzLm9mZnNldExlZnQgKyBpO1xuICAgIGUuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBkZS5UcmlnZ2VySXRlbUxlZnQsXG4gICAgICBzICsgXCJweFwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBkaXNwbGF5aW5nIG5lc3RlZCBpdGVtcyBmb3IgdGhlIGl0ZW0uXG4gICAqIE92ZXJyaWRpbmcgaW4gb3JkZXIgdG8gYWRkIHRvZ2dsaW5nIGJlaGF2aW91clxuICAgKlxuICAgKiBAcGFyYW0gaXRlbSDigJMgaXRlbSB0byB0b2dnbGUgbmVzdGVkIHBvcG92ZXIgZm9yXG4gICAqL1xuICBzaG93TmVzdGVkSXRlbXMoZSkge1xuICAgIGlmICh0aGlzLm5lc3RlZFBvcG92ZXJUcmlnZ2VySXRlbSA9PT0gZSkge1xuICAgICAgdGhpcy5kZXN0cm95TmVzdGVkUG9wb3ZlcklmRXhpc3RzKCksIHRoaXMubmVzdGVkUG9wb3ZlclRyaWdnZXJJdGVtID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuc2hvd05lc3RlZEl0ZW1zKGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBkaXNwbGF5cyBuZXN0ZWQgcG9wb3ZlciBmb3Igc3BlY2lmaWVkIGl0ZW0uXG4gICAqIElzIHVzZWQgb25seSBvbiBkZXNrdG9wXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gaXRlbSB0byBkaXNwbGF5IG5lc3RlZCBwb3BvdmVyIGJ5XG4gICAqL1xuICBzaG93TmVzdGVkUG9wb3ZlckZvckl0ZW0oZSkge1xuICAgIGNvbnN0IHQgPSBzdXBlci5zaG93TmVzdGVkUG9wb3ZlckZvckl0ZW0oZSk7XG4gICAgcmV0dXJuIHQuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoTi5nZXRQb3BvdmVyTmVzdGVkQ2xhc3ModC5uZXN0aW5nTGV2ZWwpKSwgdDtcbiAgfVxuICAvKipcbiAgICogT3ZlcnJpZGVzIGRlZmF1bHQgaXRlbSBjbGljayBoYW5kbGluZy5cbiAgICogSGVscHMgdG8gY2xvc2UgbmVzdGVkIHBvcG92ZXIgb25jZSBvdGhlciBpdGVtIGlzIGNsaWNrZWQuXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gY2xpY2tlZCBpdGVtXG4gICAqL1xuICBoYW5kbGVJdGVtQ2xpY2soZSkge1xuICAgIHZhciB0O1xuICAgIGUgIT09IHRoaXMubmVzdGVkUG9wb3ZlclRyaWdnZXJJdGVtICYmICgodCA9IHRoaXMubmVzdGVkUG9wb3ZlclRyaWdnZXJJdGVtKSA9PSBudWxsIHx8IHQuaGFuZGxlQ2xpY2soKSwgc3VwZXIuZGVzdHJveU5lc3RlZFBvcG92ZXJJZkV4aXN0cygpKSwgc3VwZXIuaGFuZGxlSXRlbUNsaWNrKGUpO1xuICB9XG59XG5jb25zdCBHdCA9IGNsYXNzIHdlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zY3JvbGxQb3NpdGlvbiA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIExvY2tzIGJvZHkgZWxlbWVudCBzY3JvbGxcbiAgICovXG4gIGxvY2soKSB7XG4gICAgR2UgPyB0aGlzLmxvY2tIYXJkKCkgOiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQod2UuQ1NTLnNjcm9sbExvY2tlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFVubG9ja3MgYm9keSBlbGVtZW50IHNjcm9sbFxuICAgKi9cbiAgdW5sb2NrKCkge1xuICAgIEdlID8gdGhpcy51bmxvY2tIYXJkKCkgOiBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUod2UuQ1NTLnNjcm9sbExvY2tlZCk7XG4gIH1cbiAgLyoqXG4gICAqIExvY2tzIHNjcm9sbCBpbiBhIGhhcmQgd2F5ICh2aWEgc2V0dGluZyBmaXhlZCBwb3NpdGlvbiB0byBib2R5IGVsZW1lbnQpXG4gICAqL1xuICBsb2NrSGFyZCgpIHtcbiAgICB0aGlzLnNjcm9sbFBvc2l0aW9uID0gd2luZG93LnBhZ2VZT2Zmc2V0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXG4gICAgICBcIi0td2luZG93LXNjcm9sbC1vZmZzZXRcIixcbiAgICAgIGAke3RoaXMuc2Nyb2xsUG9zaXRpb259cHhgXG4gICAgKSwgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHdlLkNTUy5zY3JvbGxMb2NrZWRIYXJkKTtcbiAgfVxuICAvKipcbiAgICogVW5sb2NrcyBoYXJkIHNjcm9sbCBsb2NrXG4gICAqL1xuICB1bmxvY2tIYXJkKCkge1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSh3ZS5DU1Muc2Nyb2xsTG9ja2VkSGFyZCksIHRoaXMuc2Nyb2xsUG9zaXRpb24gIT09IG51bGwgJiYgd2luZG93LnNjcm9sbFRvKDAsIHRoaXMuc2Nyb2xsUG9zaXRpb24pLCB0aGlzLnNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgfVxufTtcbkd0LkNTUyA9IHtcbiAgc2Nyb2xsTG9ja2VkOiBcImNlLXNjcm9sbC1sb2NrZWRcIixcbiAgc2Nyb2xsTG9ja2VkSGFyZDogXCJjZS1zY3JvbGwtbG9ja2VkLS1oYXJkXCJcbn07XG5sZXQgRmkgPSBHdDtcbmNvbnN0IFdlID0gdGUoXCJjZS1wb3BvdmVyLWhlYWRlclwiKSwgS2UgPSB7XG4gIHJvb3Q6IFdlKCksXG4gIHRleHQ6IFdlKFwidGV4dFwiKSxcbiAgYmFja0J1dHRvbjogV2UoXCJiYWNrLWJ1dHRvblwiKVxufTtcbmNsYXNzIEhpIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBwb3BvdmVyIGhlYWRlciBwYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgdGV4dDogZSwgb25CYWNrQnV0dG9uQ2xpY2s6IHQgfSkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IENlKCksIHRoaXMudGV4dCA9IGUsIHRoaXMub25CYWNrQnV0dG9uQ2xpY2sgPSB0LCB0aGlzLm5vZGVzID0ge1xuICAgICAgcm9vdDogZC5tYWtlKFwiZGl2XCIsIFtLZS5yb290XSksXG4gICAgICBiYWNrQnV0dG9uOiBkLm1ha2UoXCJidXR0b25cIiwgW0tlLmJhY2tCdXR0b25dKSxcbiAgICAgIHRleHQ6IGQubWFrZShcImRpdlwiLCBbS2UudGV4dF0pXG4gICAgfSwgdGhpcy5ub2Rlcy5iYWNrQnV0dG9uLmlubmVySFRNTCA9IHZpLCB0aGlzLm5vZGVzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5iYWNrQnV0dG9uKSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy5iYWNrQnV0dG9uLCBcImNsaWNrXCIsIHRoaXMub25CYWNrQnV0dG9uQ2xpY2spLCB0aGlzLm5vZGVzLnRleHQuaW5uZXJUZXh0ID0gdGhpcy50ZXh0LCB0aGlzLm5vZGVzLnJvb3QuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy50ZXh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBwb3BvdmVyIGhlYWRlciByb290IGh0bWwgZWxlbWVudFxuICAgKi9cbiAgZ2V0RWxlbWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290O1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgaW5zdGFuY2VcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub2Rlcy5yb290LnJlbW92ZSgpLCB0aGlzLmxpc3RlbmVycy5kZXN0cm95KCk7XG4gIH1cbn1cbmNsYXNzIHppIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oaXN0b3J5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFB1c2ggbmV3IHBvcG92ZXIgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIHN0YXRlIC0gbmV3IHN0YXRlXG4gICAqL1xuICBwdXNoKGUpIHtcbiAgICB0aGlzLmhpc3RvcnkucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogUG9wIGxhc3QgcG9wb3ZlciBzdGF0ZVxuICAgKi9cbiAgcG9wKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnkucG9wKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRpdGxlIHJldHJpZXZlZCBmcm9tIHRoZSBjdXJyZW50IHN0YXRlXG4gICAqL1xuICBnZXQgY3VycmVudFRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLmhpc3RvcnkubGVuZ3RoID09PSAwID8gXCJcIiA6IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV0udGl0bGU7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZW1zIGxpc3QgcmV0cmlldmVkIGZyb20gdGhlIGN1cnJlbnQgc3RhdGVcbiAgICovXG4gIGdldCBjdXJyZW50SXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5sZW5ndGggPT09IDAgPyBbXSA6IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV0uaXRlbXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaGlzdG9yeSB0byBpbml0aWFsIHBvcG92ZXIgc3RhdGVcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIGZvciAoOyB0aGlzLmhpc3RvcnkubGVuZ3RoID4gMTsgKVxuICAgICAgdGhpcy5wb3AoKTtcbiAgfVxufVxuY2xhc3MgSnQgZXh0ZW5kcyBWdCB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBwb3BvdmVyIHBhcmFtc1xuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHN1cGVyKGUsIHtcbiAgICAgIFtBLkRlZmF1bHRdOiB7XG4gICAgICAgIGhpbnQ6IHtcbiAgICAgICAgICBlbmFibGVkOiAhMVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW0EuSHRtbF06IHtcbiAgICAgICAgaGludDoge1xuICAgICAgICAgIGVuYWJsZWQ6ICExXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KSwgdGhpcy5zY3JvbGxMb2NrZXIgPSBuZXcgRmkoKSwgdGhpcy5oaXN0b3J5ID0gbmV3IHppKCksIHRoaXMuaXNIaWRkZW4gPSAhMCwgdGhpcy5ub2Rlcy5vdmVybGF5ID0gZC5tYWtlKFwiZGl2XCIsIFtOLm92ZXJsYXksIE4ub3ZlcmxheUhpZGRlbl0pLCB0aGlzLm5vZGVzLnBvcG92ZXIuaW5zZXJ0QmVmb3JlKHRoaXMubm9kZXMub3ZlcmxheSwgdGhpcy5ub2Rlcy5wb3BvdmVyLmZpcnN0Q2hpbGQpLCB0aGlzLmxpc3RlbmVycy5vbih0aGlzLm5vZGVzLm92ZXJsYXksIFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSksIHRoaXMuaGlzdG9yeS5wdXNoKHsgaXRlbXM6IGUuaXRlbXMgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gcG9wb3ZlclxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLm5vZGVzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZShOLm92ZXJsYXlIaWRkZW4pLCBzdXBlci5zaG93KCksIHRoaXMuc2Nyb2xsTG9ja2VyLmxvY2soKSwgdGhpcy5pc0hpZGRlbiA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZXMgcG9wb3ZlclxuICAgKi9cbiAgaGlkZSgpIHtcbiAgICB0aGlzLmlzSGlkZGVuIHx8IChzdXBlci5oaWRlKCksIHRoaXMubm9kZXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKE4ub3ZlcmxheUhpZGRlbiksIHRoaXMuc2Nyb2xsTG9ja2VyLnVubG9jaygpLCB0aGlzLmhpc3RvcnkucmVzZXQoKSwgdGhpcy5pc0hpZGRlbiA9ICEwKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIG1lbW9yeVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCksIHRoaXMuc2Nyb2xsTG9ja2VyLnVubG9jaygpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGRpc3BsYXlpbmcgbmVzdGVkIGl0ZW1zIGZvciB0aGUgaXRlbVxuICAgKlxuICAgKiBAcGFyYW0gaXRlbSDigJPCoGl0ZW0gdG8gc2hvdyBuZXN0ZWQgcG9wb3ZlciBmb3JcbiAgICovXG4gIHNob3dOZXN0ZWRJdGVtcyhlKSB7XG4gICAgdGhpcy51cGRhdGVJdGVtc0FuZEhlYWRlcihlLmNoaWxkcmVuLCBlLnRpdGxlKSwgdGhpcy5oaXN0b3J5LnB1c2goe1xuICAgICAgdGl0bGU6IGUudGl0bGUsXG4gICAgICBpdGVtczogZS5jaGlsZHJlblxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIHJlbmRlcmVkIHBvcG92ZXIgaXRlbXMgYW5kIGhlYWRlciBhbmQgZGlzcGxheXMgbmV3IG9uZXNcbiAgICpcbiAgICogQHBhcmFtIGl0ZW1zIC0gbmV3IHBvcG92ZXIgaXRlbXNcbiAgICogQHBhcmFtIHRpdGxlIC0gbmV3IHBvcG92ZXIgaGVhZGVyIHRleHRcbiAgICovXG4gIHVwZGF0ZUl0ZW1zQW5kSGVhZGVyKGUsIHQpIHtcbiAgICBpZiAodGhpcy5oZWFkZXIgIT09IG51bGwgJiYgdGhpcy5oZWFkZXIgIT09IHZvaWQgMCAmJiAodGhpcy5oZWFkZXIuZGVzdHJveSgpLCB0aGlzLmhlYWRlciA9IG51bGwpLCB0ICE9PSB2b2lkIDApIHtcbiAgICAgIHRoaXMuaGVhZGVyID0gbmV3IEhpKHtcbiAgICAgICAgdGV4dDogdCxcbiAgICAgICAgb25CYWNrQnV0dG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCksIHRoaXMudXBkYXRlSXRlbXNBbmRIZWFkZXIodGhpcy5oaXN0b3J5LmN1cnJlbnRJdGVtcywgdGhpcy5oaXN0b3J5LmN1cnJlbnRUaXRsZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgbyA9IHRoaXMuaGVhZGVyLmdldEVsZW1lbnQoKTtcbiAgICAgIG8gIT09IG51bGwgJiYgdGhpcy5ub2Rlcy5wb3BvdmVyQ29udGFpbmVyLmluc2VydEJlZm9yZShvLCB0aGlzLm5vZGVzLnBvcG92ZXJDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHRoaXMuaXRlbXMuZm9yRWFjaCgobykgPT4ge1xuICAgICAgdmFyIGk7XG4gICAgICByZXR1cm4gKGkgPSBvLmdldEVsZW1lbnQoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IGkucmVtb3ZlKCk7XG4gICAgfSksIHRoaXMuaXRlbXMgPSB0aGlzLmJ1aWxkSXRlbXMoZSksIHRoaXMuaXRlbXMuZm9yRWFjaCgobykgPT4ge1xuICAgICAgdmFyIHM7XG4gICAgICBjb25zdCBpID0gby5nZXRFbGVtZW50KCk7XG4gICAgICBpICE9PSBudWxsICYmICgocyA9IHRoaXMubm9kZXMuaXRlbXMpID09IG51bGwgfHwgcy5hcHBlbmRDaGlsZChpKSk7XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFVpIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMub3BlbmVkID0gITEsIHRoaXMuc2VsZWN0aW9uID0gbmV3IGIoKSwgdGhpcy5wb3BvdmVyID0gbnVsbCwgdGhpcy5jbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMub3BlbmVkICYmICh0aGlzLm9wZW5lZCA9ICExLCBiLmlzQXRFZGl0b3IgfHwgdGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLnNlbGVjdGlvbi5jbGVhclNhdmVkKCksICF0aGlzLkVkaXRvci5Dcm9zc0Jsb2NrU2VsZWN0aW9uLmlzQ3Jvc3NCbG9ja1NlbGVjdGlvblN0YXJ0ZWQgJiYgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayAmJiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi51bnNlbGVjdEJsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2spLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdCh0aGlzLmV2ZW50cy5jbG9zZWQpLCB0aGlzLnBvcG92ZXIgJiYgKHRoaXMucG9wb3Zlci5vZmYoWi5DbG9zZWQsIHRoaXMub25Qb3BvdmVyQ2xvc2UpLCB0aGlzLnBvcG92ZXIuZGVzdHJveSgpLCB0aGlzLnBvcG92ZXIuZ2V0RWxlbWVudCgpLnJlbW92ZSgpLCB0aGlzLnBvcG92ZXIgPSBudWxsKSk7XG4gICAgfSwgdGhpcy5vblBvcG92ZXJDbG9zZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNb2R1bGUgRXZlbnRzXG4gICAqL1xuICBnZXQgZXZlbnRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuZWQ6IFwiYmxvY2stc2V0dGluZ3Mtb3BlbmVkXCIsXG4gICAgICBjbG9zZWQ6IFwiYmxvY2stc2V0dGluZ3MtY2xvc2VkXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBCbG9jayBTZXR0aW5ncyBDU1NcbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNldHRpbmdzOiBcImNlLXNldHRpbmdzXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGlubmVyIHBvcG92ZXIncyBmbGlwcGVyIGluc3RhbmNlXG4gICAqXG4gICAqIEB0b2RvIHJlbW92ZSBvbmNlIEJsb2NrU2V0dGluZ3MgYmVjb21lcyBzdGFuZGFsb25lIG5vbi1tb2R1bGUgY2xhc3NcbiAgICovXG4gIGdldCBmbGlwcGVyKCkge1xuICAgIHZhciBlO1xuICAgIGlmICh0aGlzLnBvcG92ZXIgIT09IG51bGwpXG4gICAgICByZXR1cm4gXCJmbGlwcGVyXCIgaW4gdGhpcy5wb3BvdmVyID8gKGUgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBlLmZsaXBwZXIgOiB2b2lkIDA7XG4gIH1cbiAgLyoqXG4gICAqIFBhbmVsIHdpdGggYmxvY2sgc2V0dGluZ3Mgd2l0aCAyIHNlY3Rpb25zOlxuICAgKiAgLSBUb29sJ3MgU2V0dGluZ3NcbiAgICogIC0gRGVmYXVsdCBTZXR0aW5ncyBbTW92ZSwgUmVtb3ZlLCBldGNdXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGQubWFrZShcImRpdlwiLCBbdGhpcy5DU1Muc2V0dGluZ3NdKSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKHllLCB0aGlzLmNsb3NlKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgbW9kdWxlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsTm9kZXMoKSwgdGhpcy5saXN0ZW5lcnMuZGVzdHJveSgpLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub2ZmKHllLCB0aGlzLmNsb3NlKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBCbG9jayBTZXR0aW5ncyBwYW5lXG4gICAqXG4gICAqIEBwYXJhbSB0YXJnZXRCbG9jayAtIG5lYXIgd2hpY2ggQmxvY2sgd2Ugc2hvdWxkIG9wZW4gQmxvY2tTZXR0aW5nc1xuICAgKi9cbiAgYXN5bmMgb3BlbihlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaykge1xuICAgIHZhciBzO1xuICAgIHRoaXMub3BlbmVkID0gITAsIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0QmxvY2soZSksIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyQ2FjaGUoKTtcbiAgICBjb25zdCB7IHRvb2xUdW5lczogdCwgY29tbW9uVHVuZXM6IG8gfSA9IGUuZ2V0VHVuZXMoKTtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdCh0aGlzLmV2ZW50cy5vcGVuZWQpO1xuICAgIGNvbnN0IGkgPSBwZSgpID8gSnQgOiBydDtcbiAgICB0aGlzLnBvcG92ZXIgPSBuZXcgaSh7XG4gICAgICBzZWFyY2hhYmxlOiAhMCxcbiAgICAgIGl0ZW1zOiBhd2FpdCB0aGlzLmdldFR1bmVzSXRlbXMoZSwgbywgdCksXG4gICAgICBzY29wZUVsZW1lbnQ6IHRoaXMuRWRpdG9yLkFQSS5tZXRob2RzLnVpLm5vZGVzLnJlZGFjdG9yLFxuICAgICAgbWVzc2FnZXM6IHtcbiAgICAgICAgbm90aGluZ0ZvdW5kOiB6LnVpKEsudWkucG9wb3ZlciwgXCJOb3RoaW5nIGZvdW5kXCIpLFxuICAgICAgICBzZWFyY2g6IHoudWkoSy51aS5wb3BvdmVyLCBcIkZpbHRlclwiKVxuICAgICAgfVxuICAgIH0pLCB0aGlzLnBvcG92ZXIub24oWi5DbG9zZWQsIHRoaXMub25Qb3BvdmVyQ2xvc2UpLCAocyA9IHRoaXMubm9kZXMud3JhcHBlcikgPT0gbnVsbCB8fCBzLmFwcGVuZCh0aGlzLnBvcG92ZXIuZ2V0RWxlbWVudCgpKSwgdGhpcy5wb3BvdmVyLnNob3coKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyByb290IGJsb2NrIHNldHRpbmdzIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIGl0ZW1zIHRvIGJlIGRpc3BsYXllZCBpbiBibG9jayB0dW5lcyBtZW51LlxuICAgKiBNZXJnZXMgdG9vbCBzcGVjaWZpYyB0dW5lcywgY29udmVyc2lvbiBtZW51IGFuZCBjb21tb24gdHVuZXMgaW4gb25lIGxpc3QgaW4gcHJlZGVmaW5lZCBvcmRlclxuICAgKlxuICAgKiBAcGFyYW0gY3VycmVudEJsb2NrIOKAkyAgYmxvY2sgd2UgYXJlIGFib3V0IHRvIG9wZW4gYmxvY2sgdHVuZXMgZm9yXG4gICAqIEBwYXJhbSBjb21tb25UdW5lcyDigJMgY29tbW9uIHR1bmVzXG4gICAqIEBwYXJhbSB0b29sVHVuZXMgLSB0b29sIHNwZWNpZmljIHR1bmVzXG4gICAqL1xuICBhc3luYyBnZXRUdW5lc0l0ZW1zKGUsIHQsIG8pIHtcbiAgICBjb25zdCBpID0gW107XG4gICAgbyAhPT0gdm9pZCAwICYmIG8ubGVuZ3RoID4gMCAmJiAoaS5wdXNoKC4uLm8pLCBpLnB1c2goe1xuICAgICAgdHlwZTogQS5TZXBhcmF0b3JcbiAgICB9KSk7XG4gICAgY29uc3QgcyA9IEFycmF5LmZyb20odGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy52YWx1ZXMoKSksIGwgPSAoYXdhaXQgenQoZSwgcykpLnJlZHVjZSgoYSwgYykgPT4gKGMudG9vbGJveC5mb3JFYWNoKCh1KSA9PiB7XG4gICAgICBhLnB1c2goe1xuICAgICAgICBpY29uOiB1Lmljb24sXG4gICAgICAgIHRpdGxlOiB6LnQoSy50b29sTmFtZXMsIHUudGl0bGUpLFxuICAgICAgICBuYW1lOiBjLm5hbWUsXG4gICAgICAgIGNsb3NlT25BY3RpdmF0ZTogITAsXG4gICAgICAgIG9uQWN0aXZhdGU6IGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogaCwgQ2FyZXQ6IHAsIFRvb2xiYXI6IGcgfSA9IHRoaXMuRWRpdG9yLCBmID0gYXdhaXQgaC5jb252ZXJ0KGUsIGMubmFtZSwgdS5kYXRhKTtcbiAgICAgICAgICBnLmNsb3NlKCksIHAuc2V0VG9CbG9jayhmLCBwLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSwgYSksIFtdKTtcbiAgICByZXR1cm4gbC5sZW5ndGggPiAwICYmIChpLnB1c2goe1xuICAgICAgaWNvbjogS3QsXG4gICAgICBuYW1lOiBcImNvbnZlcnQtdG9cIixcbiAgICAgIHRpdGxlOiB6LnVpKEsudWkucG9wb3ZlciwgXCJDb252ZXJ0IHRvXCIpLFxuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgc2VhcmNoYWJsZTogITAsXG4gICAgICAgIGl0ZW1zOiBsXG4gICAgICB9XG4gICAgfSksIGkucHVzaCh7XG4gICAgICB0eXBlOiBBLlNlcGFyYXRvclxuICAgIH0pKSwgaS5wdXNoKC4uLnQpLCBpLm1hcCgoYSkgPT4gdGhpcy5yZXNvbHZlVHVuZUFsaWFzZXMoYSkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhbGlhc2VzIGluIHR1bmVzIG1lbnUgaXRlbXNcbiAgICpcbiAgICogQHBhcmFtIGl0ZW0gLSBpdGVtIHdpdGggcmVzb2x2ZWQgYWxpYXNlc1xuICAgKi9cbiAgcmVzb2x2ZVR1bmVBbGlhc2VzKGUpIHtcbiAgICBpZiAoZS50eXBlID09PSBBLlNlcGFyYXRvciB8fCBlLnR5cGUgPT09IEEuSHRtbClcbiAgICAgIHJldHVybiBlO1xuICAgIGNvbnN0IHQgPSBtaShlLCB7IGxhYmVsOiBcInRpdGxlXCIgfSk7XG4gICAgcmV0dXJuIGUuY29uZmlybWF0aW9uICYmICh0LmNvbmZpcm1hdGlvbiA9IHRoaXMucmVzb2x2ZVR1bmVBbGlhc2VzKGUuY29uZmlybWF0aW9uKSksIHQ7XG4gIH1cbn1cbnZhciBRdCA9IHsgZXhwb3J0czoge30gfTtcbi8qIVxuICogTGlicmFyeSBmb3IgaGFuZGxpbmcga2V5Ym9hcmQgc2hvcnRjdXRzXG4gKiBAY29weXJpZ2h0IENvZGVYIChodHRwczovL2NvZGV4LnNvKVxuICogQGxpY2Vuc2UgTUlUXG4gKiBAYXV0aG9yIENvZGVYIChodHRwczovL2NvZGV4LnNvKVxuICogQHZlcnNpb24gMS4yLjBcbiAqL1xuKGZ1bmN0aW9uKG4sIGUpIHtcbiAgKGZ1bmN0aW9uKHQsIG8pIHtcbiAgICBuLmV4cG9ydHMgPSBvKCk7XG4gIH0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBvID0ge307XG4gICAgICBmdW5jdGlvbiBpKHMpIHtcbiAgICAgICAgaWYgKG9bc10pXG4gICAgICAgICAgcmV0dXJuIG9bc10uZXhwb3J0cztcbiAgICAgICAgdmFyIHIgPSBvW3NdID0geyBpOiBzLCBsOiAhMSwgZXhwb3J0czoge30gfTtcbiAgICAgICAgcmV0dXJuIHRbc10uY2FsbChyLmV4cG9ydHMsIHIsIHIuZXhwb3J0cywgaSksIHIubCA9ICEwLCByLmV4cG9ydHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaS5tID0gdCwgaS5jID0gbywgaS5kID0gZnVuY3Rpb24ocywgciwgbCkge1xuICAgICAgICBpLm8ocywgcikgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KHMsIHIsIHsgZW51bWVyYWJsZTogITAsIGdldDogbCB9KTtcbiAgICAgIH0sIGkuciA9IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgdHlwZW9mIFN5bWJvbCA8IFwidVwiICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkocywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkocywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xuICAgICAgfSwgaS50ID0gZnVuY3Rpb24ocywgcikge1xuICAgICAgICBpZiAoMSAmIHIgJiYgKHMgPSBpKHMpKSwgOCAmIHIgfHwgNCAmIHIgJiYgdHlwZW9mIHMgPT0gXCJvYmplY3RcIiAmJiBzICYmIHMuX19lc01vZHVsZSlcbiAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgdmFyIGwgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKGkucihsKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6ICEwLCB2YWx1ZTogcyB9KSwgMiAmIHIgJiYgdHlwZW9mIHMgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICBmb3IgKHZhciBhIGluIHMpXG4gICAgICAgICAgICBpLmQobCwgYSwgKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNbY107XG4gICAgICAgICAgICB9KS5iaW5kKG51bGwsIGEpKTtcbiAgICAgICAgcmV0dXJuIGw7XG4gICAgICB9LCBpLm4gPSBmdW5jdGlvbihzKSB7XG4gICAgICAgIHZhciByID0gcyAmJiBzLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gcy5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLmQociwgXCJhXCIsIHIpLCByO1xuICAgICAgfSwgaS5vID0gZnVuY3Rpb24ocywgcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHIpO1xuICAgICAgfSwgaS5wID0gXCJcIiwgaShpLnMgPSAwKTtcbiAgICB9KFtmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICBmdW5jdGlvbiBzKGEsIGMpIHtcbiAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBjLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgdmFyIGggPSBjW3VdO1xuICAgICAgICAgIGguZW51bWVyYWJsZSA9IGguZW51bWVyYWJsZSB8fCAhMSwgaC5jb25maWd1cmFibGUgPSAhMCwgXCJ2YWx1ZVwiIGluIGggJiYgKGgud3JpdGFibGUgPSAhMCksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBoLmtleSwgaCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHIoYSwgYywgdSkge1xuICAgICAgICByZXR1cm4gYyAmJiBzKGEucHJvdG90eXBlLCBjKSwgdSAmJiBzKGEsIHUpLCBhO1xuICAgICAgfVxuICAgICAgaS5yKG8pO1xuICAgICAgdmFyIGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gYShjKSB7XG4gICAgICAgICAgdmFyIHUgPSB0aGlzO1xuICAgICAgICAgIChmdW5jdGlvbihoLCBwKSB7XG4gICAgICAgICAgICBpZiAoIShoIGluc3RhbmNlb2YgcCkpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICAgICAgfSkodGhpcywgYSksIHRoaXMuY29tbWFuZHMgPSB7fSwgdGhpcy5rZXlzID0ge30sIHRoaXMubmFtZSA9IGMubmFtZSwgdGhpcy5wYXJzZVNob3J0Y3V0TmFtZShjLm5hbWUpLCB0aGlzLmVsZW1lbnQgPSBjLm9uLCB0aGlzLmNhbGxiYWNrID0gYy5jYWxsYmFjaywgdGhpcy5leGVjdXRlU2hvcnRjdXQgPSBmdW5jdGlvbihoKSB7XG4gICAgICAgICAgICB1LmV4ZWN1dGUoaCk7XG4gICAgICAgICAgfSwgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXhlY3V0ZVNob3J0Y3V0LCAhMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHIoYSwgbnVsbCwgW3sga2V5OiBcInN1cHBvcnRlZENvbW1hbmRzXCIsIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHsgU0hJRlQ6IFtcIlNISUZUXCJdLCBDTUQ6IFtcIkNNRFwiLCBcIkNPTlRST0xcIiwgXCJDT01NQU5EXCIsIFwiV0lORE9XU1wiLCBcIkNUUkxcIl0sIEFMVDogW1wiQUxUXCIsIFwiT1BUSU9OXCJdIH07XG4gICAgICAgIH0gfSwgeyBrZXk6IFwia2V5Q29kZXNcIiwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4geyAwOiA0OCwgMTogNDksIDI6IDUwLCAzOiA1MSwgNDogNTIsIDU6IDUzLCA2OiA1NCwgNzogNTUsIDg6IDU2LCA5OiA1NywgQTogNjUsIEI6IDY2LCBDOiA2NywgRDogNjgsIEU6IDY5LCBGOiA3MCwgRzogNzEsIEg6IDcyLCBJOiA3MywgSjogNzQsIEs6IDc1LCBMOiA3NiwgTTogNzcsIE46IDc4LCBPOiA3OSwgUDogODAsIFE6IDgxLCBSOiA4MiwgUzogODMsIFQ6IDg0LCBVOiA4NSwgVjogODYsIFc6IDg3LCBYOiA4OCwgWTogODksIFo6IDkwLCBCQUNLU1BBQ0U6IDgsIEVOVEVSOiAxMywgRVNDQVBFOiAyNywgTEVGVDogMzcsIFVQOiAzOCwgUklHSFQ6IDM5LCBET1dOOiA0MCwgSU5TRVJUOiA0NSwgREVMRVRFOiA0NiwgXCIuXCI6IDE5MCB9O1xuICAgICAgICB9IH1dKSwgcihhLCBbeyBrZXk6IFwicGFyc2VTaG9ydGN1dE5hbWVcIiwgdmFsdWU6IGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICBjID0gYy5zcGxpdChcIitcIik7XG4gICAgICAgICAgZm9yICh2YXIgdSA9IDA7IHUgPCBjLmxlbmd0aDsgdSsrKSB7XG4gICAgICAgICAgICBjW3VdID0gY1t1XS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIGggPSAhMTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gYS5zdXBwb3J0ZWRDb21tYW5kcylcbiAgICAgICAgICAgICAgaWYgKGEuc3VwcG9ydGVkQ29tbWFuZHNbcF0uaW5jbHVkZXMoY1t1XSkpIHtcbiAgICAgICAgICAgICAgICBoID0gdGhpcy5jb21tYW5kc1twXSA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBoIHx8ICh0aGlzLmtleXNbY1t1XV0gPSAhMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIGcgaW4gYS5zdXBwb3J0ZWRDb21tYW5kcylcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHNbZ10gfHwgKHRoaXMuY29tbWFuZHNbZ10gPSAhMSk7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwiZXhlY3V0ZVwiLCB2YWx1ZTogZnVuY3Rpb24oYykge1xuICAgICAgICAgIHZhciB1LCBoID0geyBDTUQ6IGMuY3RybEtleSB8fCBjLm1ldGFLZXksIFNISUZUOiBjLnNoaWZ0S2V5LCBBTFQ6IGMuYWx0S2V5IH0sIHAgPSAhMDtcbiAgICAgICAgICBmb3IgKHUgaW4gdGhpcy5jb21tYW5kcylcbiAgICAgICAgICAgIHRoaXMuY29tbWFuZHNbdV0gIT09IGhbdV0gJiYgKHAgPSAhMSk7XG4gICAgICAgICAgdmFyIGcsIGYgPSAhMDtcbiAgICAgICAgICBmb3IgKGcgaW4gdGhpcy5rZXlzKVxuICAgICAgICAgICAgZiA9IGYgJiYgYy5rZXlDb2RlID09PSBhLmtleUNvZGVzW2ddO1xuICAgICAgICAgIHAgJiYgZiAmJiB0aGlzLmNhbGxiYWNrKGMpO1xuICAgICAgICB9IH0sIHsga2V5OiBcInJlbW92ZVwiLCB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuZXhlY3V0ZVNob3J0Y3V0KTtcbiAgICAgICAgfSB9XSksIGE7XG4gICAgICB9KCk7XG4gICAgICBvLmRlZmF1bHQgPSBsO1xuICAgIH1dKS5kZWZhdWx0O1xuICB9KTtcbn0pKFF0KTtcbnZhciBqaSA9IFF0LmV4cG9ydHM7XG5jb25zdCAkaSA9IC8qIEBfX1BVUkVfXyAqLyBGZShqaSk7XG5jbGFzcyBZaSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIHNob3J0Y3V0XG4gICAqXG4gICAqIEBwYXJhbSBzaG9ydGN1dCAtIHNob3J0Y3V0IG9wdGlvbnNcbiAgICovXG4gIGFkZChlKSB7XG4gICAgaWYgKHRoaXMuZmluZFNob3J0Y3V0KGUub24sIGUubmFtZSkpXG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgYFNob3J0Y3V0ICR7ZS5uYW1lfSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yICR7ZS5vbn0uIFBsZWFzZSByZW1vdmUgaXQgYmVmb3JlIGFkZCBhIG5ldyBoYW5kbGVyLmBcbiAgICAgICk7XG4gICAgY29uc3QgbyA9IG5ldyAkaSh7XG4gICAgICBuYW1lOiBlLm5hbWUsXG4gICAgICBvbjogZS5vbixcbiAgICAgIGNhbGxiYWNrOiBlLmhhbmRsZXJcbiAgICB9KSwgaSA9IHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5nZXQoZS5vbikgfHwgW107XG4gICAgdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLnNldChlLm9uLCBbLi4uaSwgb10pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc2hvcnRjdXRcbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnQgLSBFbGVtZW50IHNob3J0Y3V0IGlzIHNldCBmb3JcbiAgICogQHBhcmFtIG5hbWUgLSBzaG9ydGN1dCBuYW1lXG4gICAqL1xuICByZW1vdmUoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmZpbmRTaG9ydGN1dChlLCB0KTtcbiAgICBpZiAoIW8pXG4gICAgICByZXR1cm47XG4gICAgby5yZW1vdmUoKTtcbiAgICBjb25zdCBpID0gdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLmdldChlKTtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuc2V0KGUsIGkuZmlsdGVyKChzKSA9PiBzICE9PSBvKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBTaG9ydGN1dCBpbnN0YW5jZSBpZiBleGlzdFxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCAtIEVsZW1lbnQgc2hvcmN1dCBpcyBzZXQgZm9yXG4gICAqIEBwYXJhbSBzaG9ydGN1dCAtIHNob3J0Y3V0IG5hbWVcbiAgICogQHJldHVybnMge251bWJlcn0gaW5kZXggLSBzaG9ydGN1dCBpbmRleCBpZiBleGlzdFxuICAgKi9cbiAgZmluZFNob3J0Y3V0KGUsIHQpIHtcbiAgICByZXR1cm4gKHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5nZXQoZSkgfHwgW10pLmZpbmQoKHsgbmFtZTogaSB9KSA9PiBpID09PSB0KTtcbiAgfVxufVxuY29uc3QgaGUgPSBuZXcgWWkoKTtcbnZhciBXaSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgS2kgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBlbyA9IChuLCBlLCB0LCBvKSA9PiB7XG4gIGZvciAodmFyIGkgPSBvID4gMSA/IHZvaWQgMCA6IG8gPyBLaShlLCB0KSA6IGUsIHMgPSBuLmxlbmd0aCAtIDEsIHI7IHMgPj0gMDsgcy0tKVxuICAgIChyID0gbltzXSkgJiYgKGkgPSAobyA/IHIoZSwgdCwgaSkgOiByKGkpKSB8fCBpKTtcbiAgcmV0dXJuIG8gJiYgaSAmJiBXaShlLCB0LCBpKSwgaTtcbn0sIFNlID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uT3BlbmVkID0gXCJ0b29sYm94LW9wZW5lZFwiLCBuLkNsb3NlZCA9IFwidG9vbGJveC1jbG9zZWRcIiwgbi5CbG9ja0FkZGVkID0gXCJ0b29sYm94LWJsb2NrLWFkZGVkXCIsIG4pKShTZSB8fCB7fSk7XG5jb25zdCBsdCA9IGNsYXNzIHRvIGV4dGVuZHMgVGUge1xuICAvKipcbiAgICogVG9vbGJveCBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIGF2YWlsYWJsZSBwYXJhbWV0ZXJzXG4gICAqIEBwYXJhbSBvcHRpb25zLmFwaSAtIEVkaXRvciBBUEkgbWV0aG9kc1xuICAgKiBAcGFyYW0gb3B0aW9ucy50b29scyAtIFRvb2xzIGF2YWlsYWJsZSB0byBjaGVjayB3aGV0aGVyIHNvbWUgb2YgdGhlbSBzaG91bGQgYmUgZGlzcGxheWVkIGF0IHRoZSBUb29sYm94IG9yIG5vdFxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBhcGk6IGUsIHRvb2xzOiB0LCBpMThuTGFiZWxzOiBvIH0pIHtcbiAgICBzdXBlcigpLCB0aGlzLm9wZW5lZCA9ICExLCB0aGlzLmxpc3RlbmVycyA9IG5ldyBDZSgpLCB0aGlzLnBvcG92ZXIgPSBudWxsLCB0aGlzLmhhbmRsZU1vYmlsZUxheW91dFRvZ2dsZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveVBvcG92ZXIoKSwgdGhpcy5pbml0UG9wb3ZlcigpO1xuICAgIH0sIHRoaXMub25Qb3BvdmVyQ2xvc2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLm9wZW5lZCA9ICExLCB0aGlzLmVtaXQoXG4gICAgICAgIFwidG9vbGJveC1jbG9zZWRcIlxuICAgICAgICAvKiBDbG9zZWQgKi9cbiAgICAgICk7XG4gICAgfSwgdGhpcy5hcGkgPSBlLCB0aGlzLnRvb2xzID0gdCwgdGhpcy5pMThuTGFiZWxzID0gbywgdGhpcy5lbmFibGVTaG9ydGN1dHMoKSwgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHRvb2xib3g6IGQubWFrZShcImRpdlwiLCB0by5DU1MudG9vbGJveClcbiAgICB9LCB0aGlzLmluaXRQb3BvdmVyKCksIHRoaXMuYXBpLmV2ZW50cy5vbih5ZSwgdGhpcy5oYW5kbGVNb2JpbGVMYXlvdXRUb2dnbGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRydWUgaWYgVG9vbGJveCBpcyBFbXB0eSBhbmQgbm90aGluZyB0byBzaG93XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLmxlbmd0aCA9PT0gMDtcbiAgfVxuICAvKipcbiAgICogQ1NTIHN0eWxlc1xuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xib3g6IFwiY2UtdG9vbGJveFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyByb290IGJsb2NrIHNldHRpbmdzIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMudG9vbGJveDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBUb29sYm94IGhhcyB0aGUgRmxpcHBlciBhY3RpdmF0ZWQgYW5kIHRoZSBGbGlwcGVyIGhhcyBzZWxlY3RlZCBidXR0b25cbiAgICovXG4gIGhhc0ZvY3VzKCkge1xuICAgIGlmICh0aGlzLnBvcG92ZXIgIT09IG51bGwpXG4gICAgICByZXR1cm4gXCJoYXNGb2N1c1wiIGluIHRoaXMucG9wb3ZlciA/IHRoaXMucG9wb3Zlci5oYXNGb2N1cygpIDogdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBEZXN0cm95IE1vZHVsZVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB2YXIgZTtcbiAgICBzdXBlci5kZXN0cm95KCksIHRoaXMubm9kZXMgJiYgdGhpcy5ub2Rlcy50b29sYm94ICYmIHRoaXMubm9kZXMudG9vbGJveC5yZW1vdmUoKSwgdGhpcy5yZW1vdmVBbGxTaG9ydGN1dHMoKSwgKGUgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgfHwgZS5vZmYoWi5DbG9zZWQsIHRoaXMub25Qb3BvdmVyQ2xvc2UpLCB0aGlzLmxpc3RlbmVycy5kZXN0cm95KCksIHRoaXMuYXBpLmV2ZW50cy5vZmYoeWUsIHRoaXMuaGFuZGxlTW9iaWxlTGF5b3V0VG9nZ2xlKTtcbiAgfVxuICAvKipcbiAgICogVG9vbGJveCBUb29sJ3MgYnV0dG9uIGNsaWNrIGhhbmRsZXJcbiAgICpcbiAgICogQHBhcmFtIHRvb2xOYW1lIC0gdG9vbCB0eXBlIHRvIGJlIGFjdGl2YXRlZFxuICAgKiBAcGFyYW0gYmxvY2tEYXRhT3ZlcnJpZGVzIC0gQmxvY2sgZGF0YSBwcmVkZWZpbmVkIGJ5IHRoZSBhY3RpdmF0ZWQgVG9vbGJveCBpdGVtXG4gICAqL1xuICB0b29sQnV0dG9uQWN0aXZhdGVkKGUsIHQpIHtcbiAgICB0aGlzLmluc2VydE5ld0Jsb2NrKGUsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIFRvb2xib3ggd2l0aCBUb29sc1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLmlzRW1wdHkgfHwgKChlID0gdGhpcy5wb3BvdmVyKSA9PSBudWxsIHx8IGUuc2hvdygpLCB0aGlzLm9wZW5lZCA9ICEwLCB0aGlzLmVtaXQoXG4gICAgICBcInRvb2xib3gtb3BlbmVkXCJcbiAgICAgIC8qIE9wZW5lZCAqL1xuICAgICkpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBUb29sYm94XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB2YXIgZTtcbiAgICAoZSA9IHRoaXMucG9wb3ZlcikgPT0gbnVsbCB8fCBlLmhpZGUoKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5lbWl0KFxuICAgICAgXCJ0b29sYm94LWNsb3NlZFwiXG4gICAgICAvKiBDbG9zZWQgKi9cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBUb29sYm94XG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpcy5vcGVuZWQgPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4oKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyB0b29sYm94IHBvcG92ZXIgYW5kIGFwcGVuZHMgaXQgaW5zaWRlIHdyYXBwZXIgZWxlbWVudFxuICAgKi9cbiAgaW5pdFBvcG92ZXIoKSB7XG4gICAgdmFyIHQ7XG4gICAgY29uc3QgZSA9IHBlKCkgPyBKdCA6IHJ0O1xuICAgIHRoaXMucG9wb3ZlciA9IG5ldyBlKHtcbiAgICAgIHNjb3BlRWxlbWVudDogdGhpcy5hcGkudWkubm9kZXMucmVkYWN0b3IsXG4gICAgICBzZWFyY2hhYmxlOiAhMCxcbiAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgIG5vdGhpbmdGb3VuZDogdGhpcy5pMThuTGFiZWxzLm5vdGhpbmdGb3VuZCxcbiAgICAgICAgc2VhcmNoOiB0aGlzLmkxOG5MYWJlbHMuZmlsdGVyXG4gICAgICB9LFxuICAgICAgaXRlbXM6IHRoaXMudG9vbGJveEl0ZW1zVG9CZURpc3BsYXllZFxuICAgIH0pLCB0aGlzLnBvcG92ZXIub24oWi5DbG9zZWQsIHRoaXMub25Qb3BvdmVyQ2xvc2UpLCAodCA9IHRoaXMubm9kZXMudG9vbGJveCkgPT0gbnVsbCB8fCB0LmFwcGVuZCh0aGlzLnBvcG92ZXIuZ2V0RWxlbWVudCgpKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgcG9wb3ZlciBpbnN0YW5jZSBhbmQgcmVtb3ZlcyBpdCBmcm9tIERPTVxuICAgKi9cbiAgZGVzdHJveVBvcG92ZXIoKSB7XG4gICAgdGhpcy5wb3BvdmVyICE9PSBudWxsICYmICh0aGlzLnBvcG92ZXIuaGlkZSgpLCB0aGlzLnBvcG92ZXIub2ZmKFouQ2xvc2VkLCB0aGlzLm9uUG9wb3ZlckNsb3NlKSwgdGhpcy5wb3BvdmVyLmRlc3Ryb3koKSwgdGhpcy5wb3BvdmVyID0gbnVsbCksIHRoaXMubm9kZXMudG9vbGJveCAhPT0gbnVsbCAmJiAodGhpcy5ub2Rlcy50b29sYm94LmlubmVySFRNTCA9IFwiXCIpO1xuICB9XG4gIGdldCB0b29sc1RvQmVEaXNwbGF5ZWQoKSB7XG4gICAgY29uc3QgZSA9IFtdO1xuICAgIHJldHVybiB0aGlzLnRvb2xzLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHQudG9vbGJveCAmJiBlLnB1c2godCk7XG4gICAgfSksIGU7XG4gIH1cbiAgZ2V0IHRvb2xib3hJdGVtc1RvQmVEaXNwbGF5ZWQoKSB7XG4gICAgY29uc3QgZSA9ICh0LCBvKSA9PiAoe1xuICAgICAgaWNvbjogdC5pY29uLFxuICAgICAgdGl0bGU6IHoudChLLnRvb2xOYW1lcywgdC50aXRsZSB8fCBMZShvLm5hbWUpKSxcbiAgICAgIG5hbWU6IG8ubmFtZSxcbiAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHtcbiAgICAgICAgdGhpcy50b29sQnV0dG9uQWN0aXZhdGVkKG8ubmFtZSwgdC5kYXRhKTtcbiAgICAgIH0sXG4gICAgICBzZWNvbmRhcnlMYWJlbDogby5zaG9ydGN1dCA/IGV0KG8uc2hvcnRjdXQpIDogXCJcIlxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnRvb2xzVG9CZURpc3BsYXllZC5yZWR1Y2UoKHQsIG8pID0+IChBcnJheS5pc0FycmF5KG8udG9vbGJveCkgPyBvLnRvb2xib3guZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgdC5wdXNoKGUoaSwgbykpO1xuICAgIH0pIDogby50b29sYm94ICE9PSB2b2lkIDAgJiYgdC5wdXNoKGUoby50b29sYm94LCBvKSksIHQpLCBbXSk7XG4gIH1cbiAgLyoqXG4gICAqIEl0ZXJhdGUgYWxsIHRvb2xzIGFuZCBlbmFibGUgdGhlaXJzIHNob3J0Y3V0cyBpZiBzcGVjaWZpZWRcbiAgICovXG4gIGVuYWJsZVNob3J0Y3V0cygpIHtcbiAgICB0aGlzLnRvb2xzVG9CZURpc3BsYXllZC5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBjb25zdCB0ID0gZS5zaG9ydGN1dDtcbiAgICAgIHQgJiYgdGhpcy5lbmFibGVTaG9ydGN1dEZvclRvb2woZS5uYW1lLCB0KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIHNob3J0Y3V0IEJsb2NrIFRvb2wgaW1wbGVtZW50ZWQgc2hvcnRjdXRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvb2xOYW1lIC0gVG9vbCBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzaG9ydGN1dCAtIHNob3J0Y3V0IGFjY29yZGluZyB0byB0aGUgU2hvcnRjdXREYXRhIE1vZHVsZSBmb3JtYXRcbiAgICovXG4gIGVuYWJsZVNob3J0Y3V0Rm9yVG9vbChlLCB0KSB7XG4gICAgaGUuYWRkKHtcbiAgICAgIG5hbWU6IHQsXG4gICAgICBvbjogdGhpcy5hcGkudWkubm9kZXMucmVkYWN0b3IsXG4gICAgICBoYW5kbGVyOiBhc3luYyAobykgPT4ge1xuICAgICAgICBvLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGkgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSwgcyA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgoaSk7XG4gICAgICAgIGlmIChzKVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByID0gYXdhaXQgdGhpcy5hcGkuYmxvY2tzLmNvbnZlcnQocy5pZCwgZSk7XG4gICAgICAgICAgICB0aGlzLmFwaS5jYXJldC5zZXRUb0Jsb2NrKHIsIFwiZW5kXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnNlcnROZXdCbG9jayhlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgYWRkZWQgc2hvcnRjdXRzXG4gICAqIEZpcmVkIHdoZW4gdGhlIFJlYWQtT25seSBtb2RlIGlzIGFjdGl2YXRlZFxuICAgKi9cbiAgcmVtb3ZlQWxsU2hvcnRjdXRzKCkge1xuICAgIHRoaXMudG9vbHNUb0JlRGlzcGxheWVkLmZvckVhY2goKGUpID0+IHtcbiAgICAgIGNvbnN0IHQgPSBlLnNob3J0Y3V0O1xuICAgICAgdCAmJiBoZS5yZW1vdmUodGhpcy5hcGkudWkubm9kZXMucmVkYWN0b3IsIHQpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIG5ldyBibG9ja1xuICAgKiBDYW4gYmUgY2FsbGVkIHdoZW4gYnV0dG9uIGNsaWNrZWQgb24gVG9vbGJveCBvciBieSBTaG9ydGN1dERhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvb2xOYW1lIC0gVG9vbCBuYW1lXG4gICAqIEBwYXJhbSBibG9ja0RhdGFPdmVycmlkZXMgLSBwcmVkZWZpbmVkIEJsb2NrIGRhdGFcbiAgICovXG4gIGFzeW5jIGluc2VydE5ld0Jsb2NrKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksIGkgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KG8pO1xuICAgIGlmICghaSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBzID0gaS5pc0VtcHR5ID8gbyA6IG8gKyAxO1xuICAgIGxldCByO1xuICAgIGlmICh0KSB7XG4gICAgICBjb25zdCBhID0gYXdhaXQgdGhpcy5hcGkuYmxvY2tzLmNvbXBvc2VCbG9ja0RhdGEoZSk7XG4gICAgICByID0gT2JqZWN0LmFzc2lnbihhLCB0KTtcbiAgICB9XG4gICAgY29uc3QgbCA9IHRoaXMuYXBpLmJsb2Nrcy5pbnNlcnQoXG4gICAgICBlLFxuICAgICAgcixcbiAgICAgIHZvaWQgMCxcbiAgICAgIHMsXG4gICAgICB2b2lkIDAsXG4gICAgICBpLmlzRW1wdHlcbiAgICApO1xuICAgIGwuY2FsbChKLkFQUEVORF9DQUxMQkFDSyksIHRoaXMuYXBpLmNhcmV0LnNldFRvQmxvY2socyksIHRoaXMuZW1pdChcInRvb2xib3gtYmxvY2stYWRkZWRcIiwge1xuICAgICAgYmxvY2s6IGxcbiAgICB9KSwgdGhpcy5hcGkudG9vbGJhci5jbG9zZSgpO1xuICB9XG59O1xuZW8oW1xuICB1ZVxuXSwgbHQucHJvdG90eXBlLCBcInRvb2xzVG9CZURpc3BsYXllZFwiLCAxKTtcbmVvKFtcbiAgdWVcbl0sIGx0LnByb3RvdHlwZSwgXCJ0b29sYm94SXRlbXNUb0JlRGlzcGxheWVkXCIsIDEpO1xubGV0IFhpID0gbHQ7XG5jb25zdCBvbyA9IFwiYmxvY2sgaG92ZXJlZFwiO1xuYXN5bmMgZnVuY3Rpb24gVmkobiwgZSkge1xuICBjb25zdCB0ID0gbmF2aWdhdG9yLmtleWJvYXJkO1xuICByZXR1cm4gdCAmJiAoYXdhaXQgdC5nZXRMYXlvdXRNYXAoKSkuZ2V0KG4pIHx8IGU7XG59XG5jbGFzcyBxaSBleHRlbmRzIHkge1xuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uIC0gTW9kdWxlIENvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uY29uZmlnIC0gRWRpdG9yJ3MgY29uZmlnXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmV2ZW50c0Rpc3BhdGNoZXIgLSBFZGl0b3IncyBldmVudCBkaXNwYXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogZSwgZXZlbnRzRGlzcGF0Y2hlcjogdCB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY29uZmlnOiBlLFxuICAgICAgZXZlbnRzRGlzcGF0Y2hlcjogdFxuICAgIH0pLCB0aGlzLnRvb2xib3hJbnN0YW5jZSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENTUyBzdHlsZXNcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xiYXI6IFwiY2UtdG9vbGJhclwiLFxuICAgICAgY29udGVudDogXCJjZS10b29sYmFyX19jb250ZW50XCIsXG4gICAgICBhY3Rpb25zOiBcImNlLXRvb2xiYXJfX2FjdGlvbnNcIixcbiAgICAgIGFjdGlvbnNPcGVuZWQ6IFwiY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVkXCIsXG4gICAgICB0b29sYmFyT3BlbmVkOiBcImNlLXRvb2xiYXItLW9wZW5lZFwiLFxuICAgICAgb3BlbmVkVG9vbGJveEhvbGRlck1vZGlmaWVyOiBcImNvZGV4LWVkaXRvci0tdG9vbGJveC1vcGVuZWRcIixcbiAgICAgIHBsdXNCdXR0b246IFwiY2UtdG9vbGJhcl9fcGx1c1wiLFxuICAgICAgcGx1c0J1dHRvblNob3J0Y3V0OiBcImNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXRcIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlcjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG5cIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlckhpZGRlbjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWhpZGRlblwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgVG9vbGJhciBvcGVuaW5nIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IG9wZW5lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLkNTUy50b29sYmFyT3BlbmVkKTtcbiAgfVxuICAvKipcbiAgICogUHVibGljIGludGVyZmFjZSBmb3IgYWNjZXNzaW5nIHRoZSBUb29sYm94XG4gICAqL1xuICBnZXQgdG9vbGJveCgpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbmVkOiAoZSA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsID8gdm9pZCAwIDogZS5vcGVuZWQsXG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgKHQgPSB0aGlzLnRvb2xib3hJbnN0YW5jZSkgPT0gbnVsbCB8fCB0LmNsb3NlKCk7XG4gICAgICB9LFxuICAgICAgb3BlbjogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy50b29sYm94SW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICBJKFwidG9vbGJveC5vcGVuKCkgY2FsbGVkIGJlZm9yZSBpbml0aWFsaXphdGlvbiBpcyBmaW5pc2hlZFwiLCBcIndhcm5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgPSB0aGlzLmhvdmVyZWRCbG9jaywgdGhpcy50b29sYm94SW5zdGFuY2Uub3BlbigpO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZTogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy50b29sYm94SW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICBJKFwidG9vbGJveC50b2dnbGUoKSBjYWxsZWQgYmVmb3JlIGluaXRpYWxpemF0aW9uIGlzIGZpbmlzaGVkXCIsIFwid2FyblwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b29sYm94SW5zdGFuY2UudG9nZ2xlKCk7XG4gICAgICB9LFxuICAgICAgaGFzRm9jdXM6ICgpID0+IHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgIHJldHVybiAodCA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsID8gdm9pZCAwIDogdC5oYXNGb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEJsb2NrIGFjdGlvbnMgYXBwZWFyYW5jZSBtYW5pcHVsYXRpb25zXG4gICAqL1xuICBnZXQgYmxvY2tBY3Rpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoaWRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMubm9kZXMuYWN0aW9ucy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmFjdGlvbnNPcGVuZWQpO1xuICAgICAgfSxcbiAgICAgIHNob3c6ICgpID0+IHtcbiAgICAgICAgdGhpcy5ub2Rlcy5hY3Rpb25zLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYWN0aW9uc09wZW5lZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIEJsb2NrIFR1bmVzIHRvZ2dsZXJcbiAgICovXG4gIGdldCBibG9ja1R1bmVzVG9nZ2xlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGlkZTogKCkgPT4gdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXJIaWRkZW4pLFxuICAgICAgc2hvdzogKCkgPT4gdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXJIaWRkZW4pXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyByZWFkLW9ubHkgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/ICh0aGlzLmRlc3Ryb3koKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5kZXN0cm95KCksIHRoaXMuZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkpIDogd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5kcmF3VUkoKSwgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICAgIH0sIHsgdGltZW91dDogMmUzIH0pO1xuICB9XG4gIC8qKlxuICAgKiBNb3ZlIFRvb2xiYXIgdG8gdGhlIHBhc3NlZCAob3IgY3VycmVudCkgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gYmxvY2sgdG8gbW92ZSBUb29sYmFyIG5lYXIgaXRcbiAgICovXG4gIG1vdmVBbmRPcGVuKGUgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrKSB7XG4gICAgaWYgKHRoaXMudG9vbGJveEluc3RhbmNlID09PSBudWxsKSB7XG4gICAgICBJKFwiQ2FuJ3Qgb3BlbiBUb29sYmFyIHNpbmNlIEVkaXRvciBpbml0aWFsaXphdGlvbiBpcyBub3QgZmluaXNoZWQgeWV0XCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudG9vbGJveEluc3RhbmNlLm9wZW5lZCAmJiB0aGlzLnRvb2xib3hJbnN0YW5jZS5jbG9zZSgpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCAmJiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCksICFlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuaG92ZXJlZEJsb2NrID0gZTtcbiAgICBjb25zdCB0ID0gZS5ob2xkZXIsIHsgaXNNb2JpbGU6IG8gfSA9IHRoaXMuRWRpdG9yLlVJO1xuICAgIGxldCBpO1xuICAgIGNvbnN0IHMgPSAyMCwgciA9IGUuZmlyc3RJbnB1dCwgbCA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGEgPSByICE9PSB2b2lkIDAgPyByLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogbnVsbCwgYyA9IGEgIT09IG51bGwgPyBhLnRvcCAtIGwudG9wIDogbnVsbCwgdSA9IGMgIT09IG51bGwgPyBjID4gcyA6IHZvaWQgMDtcbiAgICBpZiAobylcbiAgICAgIGkgPSB0Lm9mZnNldFRvcCArIHQub2Zmc2V0SGVpZ2h0O1xuICAgIGVsc2UgaWYgKHIgPT09IHZvaWQgMCB8fCB1KSB7XG4gICAgICBjb25zdCBoID0gcGFyc2VJbnQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZS5wbHVnaW5zQ29udGVudCkucGFkZGluZ1RvcCk7XG4gICAgICBpID0gdC5vZmZzZXRUb3AgKyBoO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBoID0gX28ociksIHAgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm5vZGVzLnBsdXNCdXR0b24pLmhlaWdodCwgMTApLCBnID0gODtcbiAgICAgIGkgPSB0Lm9mZnNldFRvcCArIGggLSBwICsgZyArIGM7XG4gICAgfVxuICAgIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBgJHtNYXRoLmZsb29yKGkpfXB4YCwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGggPT09IDEgJiYgZS5pc0VtcHR5ID8gdGhpcy5ibG9ja1R1bmVzVG9nZ2xlci5oaWRlKCkgOiB0aGlzLmJsb2NrVHVuZXNUb2dnbGVyLnNob3coKSwgdGhpcy5vcGVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBUb29sYmFyXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB2YXIgZSwgdDtcbiAgICB0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQgfHwgKChlID0gdGhpcy5ub2Rlcy53cmFwcGVyKSA9PSBudWxsIHx8IGUuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy50b29sYmFyT3BlbmVkKSwgdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpLCAodCA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsIHx8IHQuY2xvc2UoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpLCB0aGlzLnJlc2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgVG9vbGJhciBwb3NpdGlvbiB0byBwcmV2ZW50IERPTSBoZWlnaHQgZ3Jvd3RoLCBmb3IgZXhhbXBsZSBhZnRlciBibG9ja3MgZGVsZXRpb25cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBcInVuc2V0XCI7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gVG9vbGJhciB3aXRoIFBsdXMgQnV0dG9uIGFuZCBBY3Rpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aEJsb2NrQWN0aW9ucyAtIGJ5IGRlZmF1bHQsIFRvb2xiYXIgb3BlbnMgd2l0aCBCbG9jayBBY3Rpb25zLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGZsYWcgYWxsb3dzIHRvIG9wZW4gVG9vbGJhciB3aXRob3V0IEFjdGlvbnMuXG4gICAqL1xuICBvcGVuKGUgPSAhMCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRvb2xiYXJPcGVuZWQpLCBlID8gdGhpcy5ibG9ja0FjdGlvbnMuc2hvdygpIDogdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEcmF3cyBUb29sYmFyIGVsZW1lbnRzXG4gICAqL1xuICBhc3luYyBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b29sYmFyKSwgW1wiY29udGVudFwiLCBcImFjdGlvbnNcIl0uZm9yRWFjaCgocykgPT4ge1xuICAgICAgdGhpcy5ub2Rlc1tzXSA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTU1tzXSk7XG4gICAgfSksIGQuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy5jb250ZW50KSwgZC5hcHBlbmQodGhpcy5ub2Rlcy5jb250ZW50LCB0aGlzLm5vZGVzLmFjdGlvbnMpLCB0aGlzLm5vZGVzLnBsdXNCdXR0b24gPSBkLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MucGx1c0J1dHRvbiwge1xuICAgICAgaW5uZXJIVE1MOiBDaVxuICAgIH0pLCBkLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubm9kZXMucGx1c0J1dHRvbiksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucGx1c0J1dHRvbiwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBOZSghMCksIHRoaXMucGx1c0J1dHRvbkNsaWNrZWQoKTtcbiAgICB9LCAhMSk7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiKTtcbiAgICBlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHoudWkoSy51aS50b29sYmFyLnRvb2xib3gsIFwiQWRkXCIpKSksIGUuYXBwZW5kQ2hpbGQoZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnBsdXNCdXR0b25TaG9ydGN1dCwge1xuICAgICAgdGV4dENvbnRlbnQ6IFwiL1wiXG4gICAgfSkpLCBQZSh0aGlzLm5vZGVzLnBsdXNCdXR0b24sIGUsIHtcbiAgICAgIGhpZGluZ0RlbGF5OiA0MDBcbiAgICB9KSwgdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIgPSBkLm1ha2UoXCJzcGFuXCIsIHRoaXMuQ1NTLnNldHRpbmdzVG9nZ2xlciwge1xuICAgICAgaW5uZXJIVE1MOiBUaVxuICAgIH0pLCBkLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyKTtcbiAgICBjb25zdCB0ID0gZC5tYWtlKFwiZGl2XCIpLCBvID0gZC50ZXh0KHoudWkoSy51aS5ibG9ja1R1bmVzLnRvZ2dsZXIsIFwiQ2xpY2sgdG8gdHVuZVwiKSksIGkgPSBhd2FpdCBWaShcIlNsYXNoXCIsIFwiL1wiKTtcbiAgICB0LmFwcGVuZENoaWxkKG8pLCB0LmFwcGVuZENoaWxkKGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy5wbHVzQnV0dG9uU2hvcnRjdXQsIHtcbiAgICAgIHRleHRDb250ZW50OiBldChgQ01EICsgJHtpfWApXG4gICAgfSkpLCBQZSh0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlciwgdCwge1xuICAgICAgaGlkaW5nRGVsYXk6IDQwMFxuICAgIH0pLCBkLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubWFrZVRvb2xib3goKSksIGQuYXBwZW5kKHRoaXMubm9kZXMuYWN0aW9ucywgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5nZXRFbGVtZW50KCkpLCBkLmFwcGVuZCh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLndyYXBwZXIpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBUb29sYm94IGluc3RhbmNlIGFuZCByZXR1cm4gaXQncyByZW5kZXJlZCBlbGVtZW50XG4gICAqL1xuICBtYWtlVG9vbGJveCgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sYm94SW5zdGFuY2UgPSBuZXcgWGkoe1xuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEkubWV0aG9kcyxcbiAgICAgIHRvb2xzOiB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLFxuICAgICAgaTE4bkxhYmVsczoge1xuICAgICAgICBmaWx0ZXI6IHoudWkoSy51aS5wb3BvdmVyLCBcIkZpbHRlclwiKSxcbiAgICAgICAgbm90aGluZ0ZvdW5kOiB6LnVpKEsudWkucG9wb3ZlciwgXCJOb3RoaW5nIGZvdW5kXCIpXG4gICAgICB9XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKFNlLk9wZW5lZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKFNlLkNsb3NlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKFNlLkJsb2NrQWRkZWQsICh7IGJsb2NrOiBlIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSB0LmdldEJsb2NrQnlJZChlLmlkKTtcbiAgICAgIGkuaW5wdXRzLmxlbmd0aCA9PT0gMCAmJiAoaSA9PT0gdC5sYXN0QmxvY2sgPyAodC5pbnNlcnRBdEVuZCgpLCBvLnNldFRvQmxvY2sodC5sYXN0QmxvY2spKSA6IG8uc2V0VG9CbG9jayh0Lm5leHRCbG9jaykpO1xuICAgIH0pLCB0aGlzLnRvb2xib3hJbnN0YW5jZS5nZXRFbGVtZW50KCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFBsdXMgQnV0dG9uXG4gICAqL1xuICBwbHVzQnV0dG9uQ2xpY2tlZCgpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrID0gdGhpcy5ob3ZlcmVkQmxvY2ssIChlID0gdGhpcy50b29sYm94SW5zdGFuY2UpID09IG51bGwgfHwgZS50b2dnbGUoKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIGJpbmRpbmdzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlciwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHZhciB0O1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKSwgdGhpcy5zZXR0aW5nc1RvZ2dsZXJDbGlja2VkKCksICh0ID0gdGhpcy50b29sYm94SW5zdGFuY2UpICE9IG51bGwgJiYgdC5vcGVuZWQgJiYgdGhpcy50b29sYm94SW5zdGFuY2UuY2xvc2UoKSwgTmUoITApO1xuICAgIH0sICEwKSwgcGUoKSB8fCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24ob28sIChlKSA9PiB7XG4gICAgICB2YXIgdDtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkIHx8ICh0ID0gdGhpcy50b29sYm94SW5zdGFuY2UpICE9IG51bGwgJiYgdC5vcGVuZWQgfHwgdGhpcy5tb3ZlQW5kT3BlbihlLmJsb2NrKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSBiaW5kaW5nc1xuICAgKi9cbiAgZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLmNsZWFyQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsaWNrcyBvbiB0aGUgQmxvY2sgU2V0dGluZ3MgdG9nZ2xlclxuICAgKi9cbiAgc2V0dGluZ3NUb2dnbGVyQ2xpY2tlZCgpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrID0gdGhpcy5ob3ZlcmVkQmxvY2ssIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkID8gdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpIDogdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKHRoaXMuaG92ZXJlZEJsb2NrKTtcbiAgfVxuICAvKipcbiAgICogRHJhd3MgVG9vbGJhciBVSVxuICAgKlxuICAgKiBUb29sYmFyIGNvbnRhaW5zIEJsb2NrU2V0dGluZ3MgYW5kIFRvb2xib3guXG4gICAqIFRoYXQncyB3aHkgYXQgZmlyc3Qgd2UgZHJhdyBpdHMgY29tcG9uZW50cyBhbmQgdGhlbiBUb29sYmFyIGl0c2VsZlxuICAgKlxuICAgKiBTdGVwczpcbiAgICogIC0gTWFrZSBUb29sYmFyIGRlcGVuZGVudCBjb21wb25lbnRzIGxpa2UgQmxvY2tTZXR0aW5ncywgVG9vbGJveCBhbmQgc28gb25cbiAgICogIC0gTWFrZSBpdHNlbGYgYW5kIGFwcGVuZCBkZXBlbmRlbnQgbm9kZXMgdG8gaXRzZWxmXG4gICAqXG4gICAqL1xuICBkcmF3VUkoKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5tYWtlKCksIHRoaXMubWFrZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjcmVhdGVkIGFuZCBzYXZlZCBIVE1MRWxlbWVudHNcbiAgICogSXQgaXMgdXNlZCBpbiBSZWFkLU9ubHkgbW9kZVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUFsbE5vZGVzKCksIHRoaXMudG9vbGJveEluc3RhbmNlICYmIHRoaXMudG9vbGJveEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgfVxufVxudmFyIG5lID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG5bbi5CbG9jayA9IDBdID0gXCJCbG9ja1wiLCBuW24uSW5saW5lID0gMV0gPSBcIklubGluZVwiLCBuW24uVHVuZSA9IDJdID0gXCJUdW5lXCIsIG4pKShuZSB8fCB7fSksIEllID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uU2hvcnRjdXQgPSBcInNob3J0Y3V0XCIsIG4uVG9vbGJveCA9IFwidG9vbGJveFwiLCBuLkVuYWJsZWRJbmxpbmVUb29scyA9IFwiaW5saW5lVG9vbGJhclwiLCBuLkVuYWJsZWRCbG9ja1R1bmVzID0gXCJ0dW5lc1wiLCBuLkNvbmZpZyA9IFwiY29uZmlnXCIsIG4pKShJZSB8fCB7fSksIGlvID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uU2hvcnRjdXQgPSBcInNob3J0Y3V0XCIsIG4uU2FuaXRpemVDb25maWcgPSBcInNhbml0aXplXCIsIG4pKShpbyB8fCB7fSksIGNlID0gLyogQF9fUFVSRV9fICovICgobikgPT4gKG4uSXNFbmFibGVkTGluZUJyZWFrcyA9IFwiZW5hYmxlTGluZUJyZWFrc1wiLCBuLlRvb2xib3ggPSBcInRvb2xib3hcIiwgbi5Db252ZXJzaW9uQ29uZmlnID0gXCJjb252ZXJzaW9uQ29uZmlnXCIsIG4uSXNSZWFkT25seVN1cHBvcnRlZCA9IFwiaXNSZWFkT25seVN1cHBvcnRlZFwiLCBuLlBhc3RlQ29uZmlnID0gXCJwYXN0ZUNvbmZpZ1wiLCBuKSkoY2UgfHwge30pLCBhdCA9IC8qIEBfX1BVUkVfXyAqLyAoKG4pID0+IChuLklzSW5saW5lID0gXCJpc0lubGluZVwiLCBuLlRpdGxlID0gXCJ0aXRsZVwiLCBuKSkoYXQgfHwge30pLCBRZSA9IC8qIEBfX1BVUkVfXyAqLyAoKG4pID0+IChuLklzVHVuZSA9IFwiaXNUdW5lXCIsIG4pKShRZSB8fCB7fSk7XG5jbGFzcyBjdCB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvck9wdGlvbnN9IG9wdGlvbnMgLSBDb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbmFtZTogZSxcbiAgICBjb25zdHJ1Y3RhYmxlOiB0LFxuICAgIGNvbmZpZzogbyxcbiAgICBhcGk6IGksXG4gICAgaXNEZWZhdWx0OiBzLFxuICAgIGlzSW50ZXJuYWw6IHIgPSAhMSxcbiAgICBkZWZhdWx0UGxhY2Vob2xkZXI6IGxcbiAgfSkge1xuICAgIHRoaXMuYXBpID0gaSwgdGhpcy5uYW1lID0gZSwgdGhpcy5jb25zdHJ1Y3RhYmxlID0gdCwgdGhpcy5jb25maWcgPSBvLCB0aGlzLmlzRGVmYXVsdCA9IHMsIHRoaXMuaXNJbnRlcm5hbCA9IHIsIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyID0gbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIHVzZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IHNldHRpbmdzKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmNvbmZpZy5jb25maWcgfHwge307XG4gICAgcmV0dXJuIHRoaXMuaXNEZWZhdWx0ICYmICEoXCJwbGFjZWhvbGRlclwiIGluIGUpICYmIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyICYmIChlLnBsYWNlaG9sZGVyID0gdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBUb29sJ3MgcmVzZXQgbWV0aG9kXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBpZiAoTyh0aGlzLmNvbnN0cnVjdGFibGUucmVzZXQpKVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZS5yZXNldCgpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBUb29sJ3MgcHJlcGFyZSBtZXRob2RcbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgaWYgKE8odGhpcy5jb25zdHJ1Y3RhYmxlLnByZXBhcmUpKVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZS5wcmVwYXJlKHtcbiAgICAgICAgdG9vbE5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgY29uZmlnOiB0aGlzLnNldHRpbmdzXG4gICAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzaG9ydGN1dCBmb3IgVG9vbCAoaW50ZXJuYWwgb3Igc3BlY2lmaWVkIGJ5IHVzZXIpXG4gICAqL1xuICBnZXQgc2hvcnRjdXQoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuY29uc3RydWN0YWJsZS5zaG9ydGN1dDtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuc2hvcnRjdXQgfHwgZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sJ3Mgc2FuaXRpemVyIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGdldCBzYW5pdGl6ZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlLnNhbml0aXplIHx8IHt9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgVG9vbHMgaXMgaW5saW5lXG4gICAqL1xuICBpc0lubGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBuZS5JbmxpbmU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBUb29scyBpcyBibG9ja1xuICAgKi9cbiAgaXNCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBuZS5CbG9jaztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIFRvb2xzIGlzIHR1bmVcbiAgICovXG4gIGlzVHVuZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBuZS5UdW5lO1xuICB9XG59XG5jbGFzcyBaaSBleHRlbmRzIHkge1xuICAvKipcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMuQ1NTID0ge1xuICAgICAgaW5saW5lVG9vbGJhcjogXCJjZS1pbmxpbmUtdG9vbGJhclwiXG4gICAgfSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5wb3BvdmVyID0gbnVsbCwgdGhpcy50b29sYmFyVmVydGljYWxNYXJnaW4gPSBwZSgpID8gMjAgOiA2LCB0aGlzLnRvb2xzSW5zdGFuY2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyByZWFkLW9ubHkgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/IHRoaXMuZGVzdHJveSgpIDogd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5tYWtlKCk7XG4gICAgfSwgeyB0aW1lb3V0OiAyZTMgfSk7XG4gIH1cbiAgLyoqXG4gICAqICBNb3ZpbmcgLyBhcHBlYXJhbmNlXG4gICAqICB+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+XG4gICAqL1xuICAvKipcbiAgICogU2hvd3MgSW5saW5lIFRvb2xiYXIgaWYgc29tZXRoaW5nIGlzIHNlbGVjdGVkXG4gICAqXG4gICAqIEBwYXJhbSBbbmVlZFRvQ2xvc2VdIC0gcGFzcyB0cnVlIHRvIGNsb3NlIHRvb2xiYXIgaWYgaXQgaXMgbm90IGFsbG93ZWQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEF2b2lkIHRvIHVzZSBpdCBqdXN0IGZvciBjbG9zaW5nIElULCBiZXR0ZXIgY2FsbCAuY2xvc2UoKSBjbGVhcmx5LlxuICAgKi9cbiAgYXN5bmMgdHJ5VG9TaG93KGUgPSAhMSkge1xuICAgIGUgJiYgdGhpcy5jbG9zZSgpLCB0aGlzLmFsbG93ZWRUb1Nob3coKSAmJiAoYXdhaXQgdGhpcy5vcGVuKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGVzIElubGluZSBUb29sYmFyXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB2YXIgZSwgdDtcbiAgICB0aGlzLm9wZW5lZCAmJiAodGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkIHx8IChBcnJheS5mcm9tKHRoaXMudG9vbHNJbnN0YW5jZXMuZW50cmllcygpKS5mb3JFYWNoKChbbywgaV0pID0+IHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLmdldFRvb2xTaG9ydGN1dChvKTtcbiAgICAgIHMgJiYgaGUucmVtb3ZlKHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yLCBzKSwgTyhpLmNsZWFyKSAmJiBpLmNsZWFyKCk7XG4gICAgfSksIHRoaXMudG9vbHNJbnN0YW5jZXMgPSBudWxsLCB0aGlzLnJlc2V0KCksIHRoaXMub3BlbmVkID0gITEsIChlID0gdGhpcy5wb3BvdmVyKSA9PSBudWxsIHx8IGUuaGlkZSgpLCAodCA9IHRoaXMucG9wb3ZlcikgPT0gbnVsbCB8fCB0LmRlc3Ryb3koKSwgdGhpcy5wb3BvdmVyID0gbnVsbCkpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBub2RlIGlzIGNvbnRhaW5lZCBieSBJbmxpbmUgVG9vbGJhclxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUg4oCUIG5vZGUgdG8gY2hlY2tcbiAgICovXG4gIGNvbnRhaW5zTm9kZShlKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlciA9PT0gdm9pZCAwID8gITEgOiB0aGlzLm5vZGVzLndyYXBwZXIuY29udGFpbnMoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgVUkgYW5kIGl0cyBjb21wb25lbnRzXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBlO1xuICAgIHRoaXMucmVtb3ZlQWxsTm9kZXMoKSwgKGUgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgfHwgZS5kZXN0cm95KCksIHRoaXMucG9wb3ZlciA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2luZyBET01cbiAgICovXG4gIG1ha2UoKSB7XG4gICAgdGhpcy5ub2Rlcy53cmFwcGVyID0gZC5tYWtlKFwiZGl2XCIsIFtcbiAgICAgIHRoaXMuQ1NTLmlubGluZVRvb2xiYXIsXG4gICAgICAuLi50aGlzLmlzUnRsID8gW3RoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JSdGxGaXhdIDogW11cbiAgICBdKSwgZC5hcHBlbmQodGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy53cmFwcGVyKTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIGFzeW5jIG9wZW4oKSB7XG4gICAgdmFyIHQ7XG4gICAgaWYgKHRoaXMub3BlbmVkKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMub3BlbmVkID0gITAsIHRoaXMucG9wb3ZlciAhPT0gbnVsbCAmJiB0aGlzLnBvcG92ZXIuZGVzdHJveSgpO1xuICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLmdldElubGluZVRvb2xzKCk7XG4gICAgdGhpcy5wb3BvdmVyID0gbmV3IFJpKHtcbiAgICAgIGl0ZW1zOiBlLFxuICAgICAgc2NvcGVFbGVtZW50OiB0aGlzLkVkaXRvci5BUEkubWV0aG9kcy51aS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgIG5vdGhpbmdGb3VuZDogei51aShLLnVpLnBvcG92ZXIsIFwiTm90aGluZyBmb3VuZFwiKSxcbiAgICAgICAgc2VhcmNoOiB6LnVpKEsudWkucG9wb3ZlciwgXCJGaWx0ZXJcIilcbiAgICAgIH1cbiAgICB9KSwgdGhpcy5tb3ZlKHRoaXMucG9wb3Zlci5zaXplLndpZHRoKSwgKHQgPSB0aGlzLm5vZGVzLndyYXBwZXIpID09IG51bGwgfHwgdC5hcHBlbmQodGhpcy5wb3BvdmVyLmdldEVsZW1lbnQoKSksIHRoaXMucG9wb3Zlci5zaG93KCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgVG9vbGJhciB0byB0aGUgc2VsZWN0ZWQgdGV4dFxuICAgKlxuICAgKiBAcGFyYW0gcG9wb3ZlcldpZHRoIC0gd2lkdGggb2YgdGhlIHRvb2xiYXIgcG9wb3ZlclxuICAgKi9cbiAgbW92ZShlKSB7XG4gICAgY29uc3QgdCA9IGIucmVjdCwgbyA9IHRoaXMuRWRpdG9yLlVJLm5vZGVzLndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGkgPSB7XG4gICAgICB4OiB0LnggLSBvLngsXG4gICAgICB5OiB0LnkgKyB0LmhlaWdodCAtIC8vICsgd2luZG93LnNjcm9sbFlcbiAgICAgIG8udG9wICsgdGhpcy50b29sYmFyVmVydGljYWxNYXJnaW5cbiAgICB9O1xuICAgIGkueCArIGUgKyBvLnggPiB0aGlzLkVkaXRvci5VSS5jb250ZW50UmVjdC5yaWdodCAmJiAoaS54ID0gdGhpcy5FZGl0b3IuVUkuY29udGVudFJlY3QucmlnaHQgLSBlIC0gby54KSwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLmxlZnQgPSBNYXRoLmZsb29yKGkueCkgKyBcInB4XCIsIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBNYXRoLmZsb29yKGkueSkgKyBcInB4XCI7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIG9yaWVudGF0aW9uIGNsYXNzZXMgYW5kIHJlc2V0IHBvc2l0aW9uXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdCA9IFwiMFwiLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUudG9wID0gXCIwXCI7XG4gIH1cbiAgLyoqXG4gICAqIE5lZWQgdG8gc2hvdyBJbmxpbmUgVG9vbGJhciBvciBub3RcbiAgICovXG4gIGFsbG93ZWRUb1Nob3coKSB7XG4gICAgY29uc3QgZSA9IFtcIklNR1wiLCBcIklOUFVUXCJdLCB0ID0gYi5nZXQoKSwgbyA9IGIudGV4dDtcbiAgICBpZiAoIXQgfHwgIXQuYW5jaG9yTm9kZSB8fCB0LmlzQ29sbGFwc2VkIHx8IG8ubGVuZ3RoIDwgMSlcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCBpID0gZC5pc0VsZW1lbnQodC5hbmNob3JOb2RlKSA/IHQuYW5jaG9yTm9kZSA6IHQuYW5jaG9yTm9kZS5wYXJlbnRFbGVtZW50O1xuICAgIGlmIChpID09PSBudWxsIHx8IHQgJiYgZS5pbmNsdWRlcyhpLnRhZ05hbWUpIHx8IGkuY2xvc2VzdCgnW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0nKSA9PT0gbnVsbClcbiAgICAgIHJldHVybiAhMTtcbiAgICBjb25zdCByID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrKHQuYW5jaG9yTm9kZSk7XG4gICAgcmV0dXJuIHIgPyByLnRvb2wuaW5saW5lVG9vbHMuc2l6ZSAhPT0gMCA6ICExO1xuICB9XG4gIC8qKlxuICAgKiAgV29ya2luZyB3aXRoIFRvb2xzXG4gICAqICB+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+XG4gICAqL1xuICAvKipcbiAgICogUmV0dXJucyBJbmxpbmUgVG9vbHMgc2VncmVnYXRlZCBieSB0aGVpciBhcHBlYXJhbmNlIHR5cGU6IHBvcG92ZXIgaXRlbXMgYW5kIGN1c3RvbSBodG1sIGVsZW1lbnRzLlxuICAgKiBTZXRzIHRoaXMudG9vbHNJbnN0YW5jZXMgbWFwXG4gICAqL1xuICBhc3luYyBnZXRJbmxpbmVUb29scygpIHtcbiAgICBjb25zdCBlID0gYi5nZXQoKSwgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9jayhlLmFuY2hvck5vZGUpLCBvID0gQXJyYXkuZnJvbSh0LnRvb2wuaW5saW5lVG9vbHMudmFsdWVzKCkpLCBpID0gW107XG4gICAgdGhpcy50b29sc0luc3RhbmNlcyA9PT0gbnVsbCAmJiAodGhpcy50b29sc0luc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICAgIGZvciAobGV0IHMgPSAwOyBzIDwgby5sZW5ndGg7IHMrKykge1xuICAgICAgY29uc3QgciA9IG9bc10sIGwgPSByLmNyZWF0ZSgpLCBhID0gYXdhaXQgbC5yZW5kZXIoKTtcbiAgICAgIHRoaXMudG9vbHNJbnN0YW5jZXMuc2V0KHIubmFtZSwgbCk7XG4gICAgICBjb25zdCBjID0gdGhpcy5nZXRUb29sU2hvcnRjdXQoci5uYW1lKTtcbiAgICAgIGlmIChjKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuZW5hYmxlU2hvcnRjdXRzKHIubmFtZSwgYyk7XG4gICAgICAgIH0gY2F0Y2gge1xuICAgICAgICB9XG4gICAgICBjb25zdCB1ID0gYyAhPT0gdm9pZCAwID8gZXQoYykgOiB2b2lkIDAsIGggPSB6LnQoXG4gICAgICAgIEsudG9vbE5hbWVzLFxuICAgICAgICByLnRpdGxlIHx8IExlKHIubmFtZSlcbiAgICAgICk7XG4gICAgICBbYV0uZmxhdCgpLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgdmFyIGYsIGs7XG4gICAgICAgIGNvbnN0IGcgPSB7XG4gICAgICAgICAgbmFtZTogci5uYW1lLFxuICAgICAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudG9vbENsaWNrZWQobCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoaW50OiB7XG4gICAgICAgICAgICB0aXRsZTogaCxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB1XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZC5pc0VsZW1lbnQocCkpIHtcbiAgICAgICAgICBjb25zdCBDID0ge1xuICAgICAgICAgICAgLi4uZyxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHAsXG4gICAgICAgICAgICB0eXBlOiBBLkh0bWxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChPKGwucmVuZGVyQWN0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnN0IFMgPSBsLnJlbmRlckFjdGlvbnMoKTtcbiAgICAgICAgICAgIEMuY2hpbGRyZW4gPSB7XG4gICAgICAgICAgICAgIGlzT3BlbjogKGYgPSBsLmNoZWNrU3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBmLmNhbGwobCwgYi5nZXQoKSksXG4gICAgICAgICAgICAgIC8qKiBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb24gaW4gYWN0aW9ucywgYXMgaXQgbWlnaHQgY29uZmxpY3Qgd2l0aCBlbnRlciBwcmVzcyBoYW5kbGluZyAqL1xuICAgICAgICAgICAgICBpc0ZsaXBwYWJsZTogITEsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgdHlwZTogQS5IdG1sLFxuICAgICAgICAgICAgICAgICAgZWxlbWVudDogU1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIChrID0gbC5jaGVja1N0YXRlKSA9PSBudWxsIHx8IGsuY2FsbChsLCBiLmdldCgpKTtcbiAgICAgICAgICBpLnB1c2goQyk7XG4gICAgICAgIH0gZWxzZSBpZiAocC50eXBlID09PSBBLkh0bWwpXG4gICAgICAgICAgaS5wdXNoKHtcbiAgICAgICAgICAgIC4uLmcsXG4gICAgICAgICAgICAuLi5wLFxuICAgICAgICAgICAgdHlwZTogQS5IdG1sXG4gICAgICAgICAgfSk7XG4gICAgICAgIGVsc2UgaWYgKHAudHlwZSA9PT0gQS5TZXBhcmF0b3IpXG4gICAgICAgICAgaS5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IEEuU2VwYXJhdG9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnN0IEMgPSB7XG4gICAgICAgICAgICAuLi5nLFxuICAgICAgICAgICAgLi4ucCxcbiAgICAgICAgICAgIHR5cGU6IEEuRGVmYXVsdFxuICAgICAgICAgIH07XG4gICAgICAgICAgXCJjaGlsZHJlblwiIGluIEMgJiYgcyAhPT0gMCAmJiBpLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogQS5TZXBhcmF0b3JcbiAgICAgICAgICB9KSwgaS5wdXNoKEMpLCBcImNoaWxkcmVuXCIgaW4gQyAmJiBzIDwgby5sZW5ndGggLSAxICYmIGkucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBBLlNlcGFyYXRvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBzaG9ydGN1dCBuYW1lIGZvciB0b29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sTmFtZSDigJQgVG9vbCBuYW1lXG4gICAqL1xuICBnZXRUb29sU2hvcnRjdXQoZSkge1xuICAgIGNvbnN0IHsgVG9vbHM6IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gdC5pbmxpbmVUb29scy5nZXQoZSksIGkgPSB0LmludGVybmFsLmlubGluZVRvb2xzO1xuICAgIHJldHVybiBBcnJheS5mcm9tKGkua2V5cygpKS5pbmNsdWRlcyhlKSA/IHRoaXMuaW5saW5lVG9vbHNbZV1baW8uU2hvcnRjdXRdIDogbyA9PSBudWxsID8gdm9pZCAwIDogby5zaG9ydGN1dDtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIFRvb2wgc2hvcnRjdXQgd2l0aCBFZGl0b3IgU2hvcnRjdXRzIE1vZHVsZVxuICAgKlxuICAgKiBAcGFyYW0gdG9vbE5hbWUgLSB0b29sIG5hbWVcbiAgICogQHBhcmFtIHNob3J0Y3V0IC0gc2hvcnRjdXQgYWNjb3JkaW5nIHRvIHRoZSBTaG9ydGN1dERhdGEgTW9kdWxlIGZvcm1hdFxuICAgKi9cbiAgZW5hYmxlU2hvcnRjdXRzKGUsIHQpIHtcbiAgICBoZS5hZGQoe1xuICAgICAgbmFtZTogdCxcbiAgICAgIGhhbmRsZXI6IChvKSA9PiB7XG4gICAgICAgIHZhciBzO1xuICAgICAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyO1xuICAgICAgICBpICYmIGkudG9vbC5lbmFibGVkSW5saW5lVG9vbHMgJiYgKG8ucHJldmVudERlZmF1bHQoKSwgKHMgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgfHwgcy5hY3RpdmF0ZUl0ZW1CeU5hbWUoZSkpO1xuICAgICAgfSxcbiAgICAgIG9uOiB0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvclxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbmxpbmUgVG9vbCBidXR0b24gY2xpY2tzXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIC0gVG9vbCdzIGluc3RhbmNlXG4gICAqL1xuICB0b29sQ2xpY2tlZChlKSB7XG4gICAgdmFyIG87XG4gICAgY29uc3QgdCA9IGIucmFuZ2U7XG4gICAgKG8gPSBlLnN1cnJvdW5kKSA9PSBudWxsIHx8IG8uY2FsbChlLCB0KSwgdGhpcy5jaGVja1Rvb2xzU3RhdGUoKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgVG9vbHNgIHN0YXRlIGJ5IHNlbGVjdGlvblxuICAgKi9cbiAgY2hlY2tUb29sc1N0YXRlKCkge1xuICAgIHZhciBlO1xuICAgIChlID0gdGhpcy50b29sc0luc3RhbmNlcykgPT0gbnVsbCB8fCBlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHZhciBvO1xuICAgICAgKG8gPSB0LmNoZWNrU3RhdGUpID09IG51bGwgfHwgby5jYWxsKHQsIGIuZ2V0KCkpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5saW5lIHRvb2xzIHRvb2xzXG4gICAqIFRvb2xzIHRoYXQgaGFzIGlzSW5saW5lIGlzIHRydWVcbiAgICovXG4gIGdldCBpbmxpbmVUb29scygpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5FZGl0b3IuVG9vbHMuaW5saW5lVG9vbHMuZW50cmllcygpKS5mb3JFYWNoKChbdCwgb10pID0+IHtcbiAgICAgIGVbdF0gPSBvLmNyZWF0ZSgpO1xuICAgIH0pLCBlO1xuICB9XG59XG5mdW5jdGlvbiBzbygpIHtcbiAgY29uc3QgbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKG4gPT09IG51bGwpXG4gICAgcmV0dXJuIFtudWxsLCAwXTtcbiAgbGV0IGUgPSBuLmZvY3VzTm9kZSwgdCA9IG4uZm9jdXNPZmZzZXQ7XG4gIHJldHVybiBlID09PSBudWxsID8gW251bGwsIDBdIDogKGUubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFICYmIGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwICYmIChlLmNoaWxkTm9kZXNbdF0gPyAoZSA9IGUuY2hpbGROb2Rlc1t0XSwgdCA9IDApIDogKGUgPSBlLmNoaWxkTm9kZXNbdCAtIDFdLCB0ID0gZS50ZXh0Q29udGVudC5sZW5ndGgpKSwgW2UsIHRdKTtcbn1cbmZ1bmN0aW9uIG5vKG4sIGUsIHQsIG8pIHtcbiAgY29uc3QgaSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIG8gPT09IFwibGVmdFwiID8gKGkuc2V0U3RhcnQobiwgMCksIGkuc2V0RW5kKGUsIHQpKSA6IChpLnNldFN0YXJ0KGUsIHQpLCBpLnNldEVuZChuLCBuLmNoaWxkTm9kZXMubGVuZ3RoKSk7XG4gIGNvbnN0IHMgPSBpLmNsb25lQ29udGVudHMoKSwgciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHIuYXBwZW5kQ2hpbGQocyk7XG4gIGNvbnN0IGwgPSByLnRleHRDb250ZW50IHx8IFwiXCI7XG4gIHJldHVybiBMbyhsKTtcbn1cbmZ1bmN0aW9uIE1lKG4pIHtcbiAgY29uc3QgZSA9IGQuZ2V0RGVlcGVzdE5vZGUobik7XG4gIGlmIChlID09PSBudWxsIHx8IGQuaXNFbXB0eShuKSlcbiAgICByZXR1cm4gITA7XG4gIGlmIChkLmlzTmF0aXZlSW5wdXQoZSkpXG4gICAgcmV0dXJuIGUuc2VsZWN0aW9uRW5kID09PSAwO1xuICBpZiAoZC5pc0VtcHR5KG4pKVxuICAgIHJldHVybiAhMDtcbiAgY29uc3QgW3QsIG9dID0gc28oKTtcbiAgcmV0dXJuIHQgPT09IG51bGwgPyAhMSA6IG5vKG4sIHQsIG8sIFwibGVmdFwiKTtcbn1cbmZ1bmN0aW9uIEFlKG4pIHtcbiAgY29uc3QgZSA9IGQuZ2V0RGVlcGVzdE5vZGUobiwgITApO1xuICBpZiAoZSA9PT0gbnVsbClcbiAgICByZXR1cm4gITA7XG4gIGlmIChkLmlzTmF0aXZlSW5wdXQoZSkpXG4gICAgcmV0dXJuIGUuc2VsZWN0aW9uRW5kID09PSBlLnZhbHVlLmxlbmd0aDtcbiAgY29uc3QgW3QsIG9dID0gc28oKTtcbiAgcmV0dXJuIHQgPT09IG51bGwgPyAhMSA6IG5vKG4sIHQsIG8sIFwicmlnaHRcIik7XG59XG5jbGFzcyBHaSBleHRlbmRzIHkge1xuICAvKipcbiAgICogQWxsIGtleWRvd25zIG9uIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBrZXlkb3duKGUpIHtcbiAgICBzd2l0Y2ggKHRoaXMuYmVmb3JlS2V5ZG93blByb2Nlc3NpbmcoZSksIGUua2V5Q29kZSkge1xuICAgICAgY2FzZSB3LkJBQ0tTUEFDRTpcbiAgICAgICAgdGhpcy5iYWNrc3BhY2UoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB3LkRFTEVURTpcbiAgICAgICAgdGhpcy5kZWxldGUoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB3LkVOVEVSOlxuICAgICAgICB0aGlzLmVudGVyKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugdy5ET1dOOlxuICAgICAgY2FzZSB3LlJJR0hUOlxuICAgICAgICB0aGlzLmFycm93UmlnaHRBbmREb3duKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugdy5VUDpcbiAgICAgIGNhc2Ugdy5MRUZUOlxuICAgICAgICB0aGlzLmFycm93TGVmdEFuZFVwKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugdy5UQUI6XG4gICAgICAgIHRoaXMudGFiUHJlc3NlZChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGUua2V5ID09PSBcIi9cIiAmJiAhZS5jdHJsS2V5ICYmICFlLm1ldGFLZXkgJiYgdGhpcy5zbGFzaFByZXNzZWQoZSksIGUuY29kZSA9PT0gXCJTbGFzaFwiICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmNvbW1hbmRTbGFzaFByZXNzZWQoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVzIG9uIGtleWRvd24gYmVmb3JlIGV2ZW50IHByb2Nlc3NpbmdcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWRvd25cbiAgICovXG4gIGJlZm9yZUtleWRvd25Qcm9jZXNzaW5nKGUpIHtcbiAgICB0aGlzLm5lZWRUb29sYmFyQ2xvc2luZyhlKSAmJiBJdChlLmtleUNvZGUpICYmICh0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCksIGUuY3RybEtleSB8fCBlLm1ldGFLZXkgfHwgZS5hbHRLZXkgfHwgZS5zaGlmdEtleSB8fCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKSk7XG4gIH1cbiAgLyoqXG4gICAqIEtleSB1cCBvbiBCbG9jazpcbiAgICogLSBzaG93cyBJbmxpbmUgVG9vbGJhciBpZiBzb21ldGhpbmcgc2VsZWN0ZWRcbiAgICogLSBzaG93cyBjb252ZXJzaW9uIHRvb2xiYXIgd2l0aCA4NSUgb2YgYmxvY2sgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXl1cCBldmVudFxuICAgKi9cbiAga2V5dXAoZSkge1xuICAgIGUuc2hpZnRLZXkgfHwgdGhpcy5FZGl0b3IuVUkuY2hlY2tFbXB0aW5lc3MoKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGRyb3AgdGFyZ2V0IHN0eWxlc1xuICAgKlxuICAgKiBAcGFyYW0ge0RyYWdFdmVudH0gZXZlbnQgLSBkcmFnIG92ZXIgZXZlbnRcbiAgICovXG4gIGRyYWdPdmVyKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgIHQuZHJvcFRhcmdldCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgZHJvcCB0YXJnZXQgc3R5bGVcbiAgICpcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGV2ZW50IC0gZHJhZyBsZWF2ZSBldmVudFxuICAgKi9cbiAgZHJhZ0xlYXZlKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgIHQuZHJvcFRhcmdldCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBDb3B5aW5nIHNlbGVjdGVkIGJsb2Nrc1xuICAgKiBCZWZvcmUgcHV0dGluZyB0byB0aGUgY2xpcGJvYXJkIHdlIHNhbml0aXplIGFsbCBibG9ja3MgYW5kIHRoZW4gY29weSB0byB0aGUgY2xpcGJvYXJkXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpcGJvYXJkRXZlbnR9IGV2ZW50IC0gY2xpcGJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kQyhlKSB7XG4gICAgY29uc3QgeyBCbG9ja1NlbGVjdGlvbjogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5hbnlCbG9ja1NlbGVjdGVkICYmIHQuY29weVNlbGVjdGVkQmxvY2tzKGUpO1xuICB9XG4gIC8qKlxuICAgKiBDb3B5IGFuZCBEZWxldGUgc2VsZWN0ZWQgQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpcGJvYXJkRXZlbnR9IGV2ZW50IC0gY2xpcGJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kWChlKSB7XG4gICAgY29uc3QgeyBCbG9ja1NlbGVjdGlvbjogdCwgQmxvY2tNYW5hZ2VyOiBvLCBDYXJldDogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5hbnlCbG9ja1NlbGVjdGVkICYmIHQuY29weVNlbGVjdGVkQmxvY2tzKGUpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgcyA9IG8ucmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKSwgciA9IG8uaW5zZXJ0RGVmYXVsdEJsb2NrQXRJbmRleChzLCAhMCk7XG4gICAgICBpLnNldFRvQmxvY2sociwgaS5wb3NpdGlvbnMuU1RBUlQpLCB0LmNsZWFyU2VsZWN0aW9uKGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUYWIgcHJlc3NlZCBpbnNpZGUgYSBCbG9jay5cbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWRvd25cbiAgICovXG4gIHRhYlByZXNzZWQoZSkge1xuICAgIGNvbnN0IHsgSW5saW5lVG9vbGJhcjogdCwgQ2FyZXQ6IG8gfSA9IHRoaXMuRWRpdG9yO1xuICAgIGlmICh0Lm9wZW5lZClcbiAgICAgIHJldHVybjtcbiAgICAoZS5zaGlmdEtleSA/IG8ubmF2aWdhdGVQcmV2aW91cyghMCkgOiBvLm5hdmlnYXRlTmV4dCghMCkpICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogJy8nICsgJ2NvbW1hbmQnIGtleWRvd24gaW5zaWRlIGEgQmxvY2tcbiAgICovXG4gIGNvbW1hbmRTbGFzaFByZXNzZWQoKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMSB8fCB0aGlzLmFjdGl2YXRlQmxvY2tTZXR0aW5ncygpO1xuICB9XG4gIC8qKlxuICAgKiAnLycga2V5ZG93biBpbnNpZGUgYSBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBzbGFzaFByZXNzZWQoZSkge1xuICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suaXNFbXB0eSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLkVkaXRvci5DYXJldC5pbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKFwiL1wiKSwgdGhpcy5hY3RpdmF0ZVRvb2xib3goKSk7XG4gIH1cbiAgLyoqXG4gICAqIEVOVEVSIHByZXNzZWQgb24gYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWRvd25cbiAgICovXG4gIGVudGVyKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgVUk6IG8gfSA9IHRoaXMuRWRpdG9yLCBpID0gdC5jdXJyZW50QmxvY2s7XG4gICAgaWYgKGkgPT09IHZvaWQgMCB8fCBpLnRvb2wuaXNMaW5lQnJlYWtzRW5hYmxlZCB8fCBvLnNvbWVUb29sYmFyT3BlbmVkICYmIG8uc29tZUZsaXBwZXJCdXR0b25Gb2N1c2VkIHx8IGUuc2hpZnRLZXkgJiYgIUdlKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBzID0gaTtcbiAgICBpLmN1cnJlbnRJbnB1dCAhPT0gdm9pZCAwICYmIE1lKGkuY3VycmVudElucHV0KSAmJiAhaS5oYXNNZWRpYSA/IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4KHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2tJbmRleCkgOiBpLmN1cnJlbnRJbnB1dCAmJiBBZShpLmN1cnJlbnRJbnB1dCkgPyBzID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4ICsgMSkgOiBzID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNwbGl0KCksIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2socyksIHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4ocyksIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGJhY2tzcGFjZSBrZXlkb3duIG9uIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBiYWNrc3BhY2UoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiBpLCBwcmV2aW91c0Jsb2NrOiBzIH0gPSB0O1xuICAgIGlmIChpID09PSB2b2lkIDAgfHwgIWIuaXNDb2xsYXBzZWQgfHwgIWkuY3VycmVudElucHV0IHx8ICFNZShpLmN1cnJlbnRJbnB1dCkpXG4gICAgICByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLCAhKGkuY3VycmVudElucHV0ID09PSBpLmZpcnN0SW5wdXQpKSB7XG4gICAgICBvLm5hdmlnYXRlUHJldmlvdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHMgPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHMuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGkuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhpKTtcbiAgICAgIGNvbnN0IGEgPSB0LmN1cnJlbnRCbG9jaztcbiAgICAgIG8uc2V0VG9CbG9jayhhLCBvLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2dChzLCBpKSA/IHRoaXMubWVyZ2VCbG9ja3MocywgaSkgOiBvLnNldFRvQmxvY2socywgby5wb3NpdGlvbnMuRU5EKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBkZWxldGUga2V5ZG93biBvbiBCbG9ja1xuICAgKiBSZW1vdmVzIGNoYXIgYWZ0ZXIgdGhlIGNhcmV0LlxuICAgKiBJZiBjYXJldCBpcyBhdCB0aGUgZW5kIG9mIHRoZSBibG9jaywgbWVyZ2UgbmV4dCBibG9jayB3aXRoIGN1cnJlbnRcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWRvd25cbiAgICovXG4gIGRlbGV0ZShlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIENhcmV0OiBvIH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IGksIG5leHRCbG9jazogcyB9ID0gdDtcbiAgICBpZiAoIWIuaXNDb2xsYXBzZWQgfHwgIUFlKGkuY3VycmVudElucHV0KSlcbiAgICAgIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCksICEoaS5jdXJyZW50SW5wdXQgPT09IGkubGFzdElucHV0KSkge1xuICAgICAgby5uYXZpZ2F0ZU5leHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHMgPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgaWYgKHMuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGkuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhpKSwgby5zZXRUb0Jsb2NrKHMsIG8ucG9zaXRpb25zLlNUQVJUKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdnQoaSwgcykgPyB0aGlzLm1lcmdlQmxvY2tzKGksIHMpIDogby5zZXRUb0Jsb2NrKHMsIG8ucG9zaXRpb25zLlNUQVJUKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2UgcGFzc2VkIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0gdGFyZ2V0QmxvY2sgLSB0byB3aGljaCBCbG9jayB3ZSB3YW50IHRvIG1lcmdlXG4gICAqIEBwYXJhbSBibG9ja1RvTWVyZ2UgLSB3aGF0IEJsb2NrIHdlIHdhbnQgdG8gbWVyZ2VcbiAgICovXG4gIG1lcmdlQmxvY2tzKGUsIHQpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbywgQ2FyZXQ6IGksIFRvb2xiYXI6IHMgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGkuY3JlYXRlU2hhZG93KGUubGFzdElucHV0KSwgby5tZXJnZUJsb2NrcyhlLCB0KS50aGVuKCgpID0+IHtcbiAgICAgIGkucmVzdG9yZUNhcmV0KGUucGx1Z2luc0NvbnRlbnQpLCBzLmNsb3NlKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSByaWdodCBhbmQgZG93biBrZXlib2FyZCBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYXJyb3dSaWdodEFuZERvd24oZSkge1xuICAgIGNvbnN0IHQgPSBsZS51c2VkS2V5cy5pbmNsdWRlcyhlLmtleUNvZGUpICYmICghZS5zaGlmdEtleSB8fCBlLmtleUNvZGUgPT09IHcuVEFCKTtcbiAgICBpZiAodGhpcy5FZGl0b3IuVUkuc29tZVRvb2xiYXJPcGVuZWQgJiYgdClcbiAgICAgIHJldHVybjtcbiAgICB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCk7XG4gICAgY29uc3QgeyBjdXJyZW50QmxvY2s6IG8gfSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlciwgcyA9ICgobyA9PSBudWxsID8gdm9pZCAwIDogby5jdXJyZW50SW5wdXQpICE9PSB2b2lkIDAgPyBBZShvLmN1cnJlbnRJbnB1dCkgOiB2b2lkIDApIHx8IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQ7XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgZS5rZXlDb2RlID09PSB3LkRPV04gJiYgcykge1xuICAgICAgdGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi50b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gdy5ET1dOIHx8IGUua2V5Q29kZSA9PT0gdy5SSUdIVCAmJiAhdGhpcy5pc1J0bCA/IHRoaXMuRWRpdG9yLkNhcmV0Lm5hdmlnYXRlTmV4dCgpIDogdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVQcmV2aW91cygpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIE9lKCgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgJiYgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKTtcbiAgICB9LCAyMCkoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBsZWZ0IGFuZCB1cCBrZXlib2FyZCBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYXJyb3dMZWZ0QW5kVXAoZSkge1xuICAgIGlmICh0aGlzLkVkaXRvci5VSS5zb21lVG9vbGJhck9wZW5lZCkge1xuICAgICAgaWYgKGxlLnVzZWRLZXlzLmluY2x1ZGVzKGUua2V5Q29kZSkgJiYgKCFlLnNoaWZ0S2V5IHx8IGUua2V5Q29kZSA9PT0gdy5UQUIpKVxuICAgICAgICByZXR1cm47XG4gICAgICB0aGlzLkVkaXRvci5VSS5jbG9zZUFsbFRvb2xiYXJzKCk7XG4gICAgfVxuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTtcbiAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogdCB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLCBpID0gKCh0ID09IG51bGwgPyB2b2lkIDAgOiB0LmN1cnJlbnRJbnB1dCkgIT09IHZvaWQgMCA/IE1lKHQuY3VycmVudElucHV0KSA6IHZvaWQgMCkgfHwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYW55QmxvY2tTZWxlY3RlZDtcbiAgICBpZiAoZS5zaGlmdEtleSAmJiBlLmtleUNvZGUgPT09IHcuVVAgJiYgaSkge1xuICAgICAgdGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi50b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoITEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZS5rZXlDb2RlID09PSB3LlVQIHx8IGUua2V5Q29kZSA9PT0gdy5MRUZUICYmICF0aGlzLmlzUnRsID8gdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVQcmV2aW91cygpIDogdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVOZXh0KCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2UoKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnVwZGF0ZUN1cnJlbnRJbnB1dCgpO1xuICAgIH0sIDIwKSgpLCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgfVxuICAvKipcbiAgICogQ2FzZXMgd2hlbiB3ZSBuZWVkIHRvIGNsb3NlIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBuZWVkVG9vbGJhckNsb3NpbmcoZSkge1xuICAgIGNvbnN0IHQgPSBlLmtleUNvZGUgPT09IHcuRU5URVIgJiYgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW5lZCwgbyA9IGUua2V5Q29kZSA9PT0gdy5FTlRFUiAmJiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCwgaSA9IGUua2V5Q29kZSA9PT0gdy5FTlRFUiAmJiB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLm9wZW5lZCwgcyA9IGUua2V5Q29kZSA9PT0gdy5UQUI7XG4gICAgcmV0dXJuICEoZS5zaGlmdEtleSB8fCBzIHx8IHQgfHwgbyB8fCBpKTtcbiAgfVxuICAvKipcbiAgICogSWYgVG9vbGJveCBpcyBub3Qgb3BlbiwgdGhlbiBqdXN0IG9wZW4gaXQgYW5kIHNob3cgcGx1cyBidXR0b25cbiAgICovXG4gIGFjdGl2YXRlVG9vbGJveCgpIHtcbiAgICB0aGlzLkVkaXRvci5Ub29sYmFyLm9wZW5lZCB8fCB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5vcGVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gVG9vbGJhciBhbmQgc2hvdyBCbG9ja1NldHRpbmdzIGJlZm9yZSBmbGlwcGluZyBUb29sc1xuICAgKi9cbiAgYWN0aXZhdGVCbG9ja1NldHRpbmdzKCkge1xuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIub3BlbmVkIHx8IHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgfHwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKCk7XG4gIH1cbn1cbmNsYXNzIFhlIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB3b3JraW5nQXJlYSDigJQgZWRpdG9yYHMgd29ya2luZyBub2RlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5ibG9ja3MgPSBbXSwgdGhpcy53b3JraW5nQXJlYSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBsZW5ndGggb2YgQmxvY2sgaW5zdGFuY2VzIGFycmF5XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2Nrcy5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBCbG9jayBpbnN0YW5jZXMgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrW119XG4gICAqL1xuICBnZXQgYXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYmxvY2tzIGh0bWwgZWxlbWVudHMgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50W119XG4gICAqL1xuICBnZXQgbm9kZXMoKSB7XG4gICAgcmV0dXJuIE10KHRoaXMud29ya2luZ0FyZWEuY2hpbGRyZW4pO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSB0cmFwIHRvIGltcGxlbWVudCBhcnJheS1saWtlIHNldHRlclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBibG9ja3NbMF0gPSBuZXcgQmxvY2soLi4uKVxuICAgKiBAcGFyYW0ge0Jsb2Nrc30gaW5zdGFuY2Ug4oCUIEJsb2NrcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBwcm9wZXJ0eSDigJQgYmxvY2sgaW5kZXggb3IgYW55IEJsb2NrcyBjbGFzcyBwcm9wZXJ0eSBrZXkgdG8gc2V0XG4gICAqIEBwYXJhbSB7QmxvY2t9IHZhbHVlIOKAlCB2YWx1ZSB0byBzZXRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgc2V0KGUsIHQsIG8pIHtcbiAgICByZXR1cm4gaXNOYU4oTnVtYmVyKHQpKSA/IChSZWZsZWN0LnNldChlLCB0LCBvKSwgITApIDogKGUuaW5zZXJ0KCt0LCBvKSwgITApO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSB0cmFwIHRvIGltcGxlbWVudCBhcnJheS1saWtlIGdldHRlclxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2Nrc30gaW5zdGFuY2Ug4oCUIEJsb2NrcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBwcm9wZXJ0eSDigJQgQmxvY2tzIGNsYXNzIHByb3BlcnR5IGtleVxuICAgKiBAcmV0dXJucyB7QmxvY2t8Kn1cbiAgICovXG4gIHN0YXRpYyBnZXQoZSwgdCkge1xuICAgIHJldHVybiBpc05hTihOdW1iZXIodCkpID8gUmVmbGVjdC5nZXQoZSwgdCkgOiBlLmdldCgrdCk7XG4gIH1cbiAgLyoqXG4gICAqIFB1c2ggbmV3IEJsb2NrIHRvIHRoZSBibG9ja3MgYXJyYXkgYW5kIGFwcGVuZCBpdCB0byB3b3JraW5nIGFyZWFcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBhZGRcbiAgICovXG4gIHB1c2goZSkge1xuICAgIHRoaXMuYmxvY2tzLnB1c2goZSksIHRoaXMuaW5zZXJ0VG9ET00oZSk7XG4gIH1cbiAgLyoqXG4gICAqIFN3YXBzIGJsb2NrcyB3aXRoIGluZGV4ZXMgZmlyc3QgYW5kIHNlY29uZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmlyc3QgLSBmaXJzdCBibG9jayBpbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kIC0gc2Vjb25kIGJsb2NrIGluZGV4XG4gICAqIEBkZXByZWNhdGVkIOKAlCB1c2UgJ21vdmUnIGluc3RlYWRcbiAgICovXG4gIHN3YXAoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmJsb2Nrc1t0XTtcbiAgICBkLnN3YXAodGhpcy5ibG9ja3NbZV0uaG9sZGVyLCBvLmhvbGRlciksIHRoaXMuYmxvY2tzW3RdID0gdGhpcy5ibG9ja3NbZV0sIHRoaXMuYmxvY2tzW2VdID0gbztcbiAgfVxuICAvKipcbiAgICogTW92ZSBhIGJsb2NrIGZyb20gb25lIHRvIGFub3RoZXIgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggLSBuZXcgaW5kZXggb2YgdGhlIGJsb2NrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBibG9jayB0byBtb3ZlXG4gICAqL1xuICBtb3ZlKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5ibG9ja3Muc3BsaWNlKHQsIDEpWzBdLCBpID0gZSAtIDEsIHMgPSBNYXRoLm1heCgwLCBpKSwgciA9IHRoaXMuYmxvY2tzW3NdO1xuICAgIGUgPiAwID8gdGhpcy5pbnNlcnRUb0RPTShvLCBcImFmdGVyZW5kXCIsIHIpIDogdGhpcy5pbnNlcnRUb0RPTShvLCBcImJlZm9yZWJlZ2luXCIsIHIpLCB0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgMCwgbyk7XG4gICAgY29uc3QgbCA9IHRoaXMuY29tcG9zZUJsb2NrRXZlbnQoXCJtb3ZlXCIsIHtcbiAgICAgIGZyb21JbmRleDogdCxcbiAgICAgIHRvSW5kZXg6IGVcbiAgICB9KTtcbiAgICBvLmNhbGwoSi5NT1ZFRCwgbCk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgQmxvY2sgYXQgcGFzc2VkIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDigJQgaW5kZXggdG8gaW5zZXJ0IEJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIOKAlCBCbG9jayB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtib29sZWFufSByZXBsYWNlIOKAlCBpdCB0cnVlLCByZXBsYWNlIGJsb2NrIG9uIGdpdmVuIGluZGV4XG4gICAqL1xuICBpbnNlcnQoZSwgdCwgbyA9ICExKSB7XG4gICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wdXNoKHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlID4gdGhpcy5sZW5ndGggJiYgKGUgPSB0aGlzLmxlbmd0aCksIG8gJiYgKHRoaXMuYmxvY2tzW2VdLmhvbGRlci5yZW1vdmUoKSwgdGhpcy5ibG9ja3NbZV0uY2FsbChKLlJFTU9WRUQpKTtcbiAgICBjb25zdCBpID0gbyA/IDEgOiAwO1xuICAgIGlmICh0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgaSwgdCksIGUgPiAwKSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5ibG9ja3NbZSAtIDFdO1xuICAgICAgdGhpcy5pbnNlcnRUb0RPTSh0LCBcImFmdGVyZW5kXCIsIHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzID0gdGhpcy5ibG9ja3NbZSArIDFdO1xuICAgICAgcyA/IHRoaXMuaW5zZXJ0VG9ET00odCwgXCJiZWZvcmViZWdpblwiLCBzKSA6IHRoaXMuaW5zZXJ0VG9ET00odCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyBibG9jayB1bmRlciBwYXNzZWQgaW5kZXggd2l0aCBwYXNzZWQgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggb2YgZXhpc3RlZCBibG9ja1xuICAgKiBAcGFyYW0gYmxvY2sgLSBuZXcgYmxvY2tcbiAgICovXG4gIHJlcGxhY2UoZSwgdCkge1xuICAgIGlmICh0aGlzLmJsb2Nrc1tlXSA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgRXJyb3IoXCJJbmNvcnJlY3QgaW5kZXhcIik7XG4gICAgdGhpcy5ibG9ja3NbZV0uaG9sZGVyLnJlcGxhY2VXaXRoKHQuaG9sZGVyKSwgdGhpcy5ibG9ja3NbZV0gPSB0O1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIHNldmVyYWwgYmxvY2tzIGF0IG9uY2VcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrcyAtIGJsb2NrcyB0byBpbnNlcnRcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggdG8gaW5zZXJ0IGJsb2NrcyBhdFxuICAgKi9cbiAgaW5zZXJ0TWFueShlLCB0KSB7XG4gICAgY29uc3QgbyA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgZm9yIChjb25zdCBpIG9mIGUpXG4gICAgICBvLmFwcGVuZENoaWxkKGkuaG9sZGVyKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgY29uc3QgaSA9IE1hdGgubWluKHQgLSAxLCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLmJsb2Nrc1tpXS5ob2xkZXIuYWZ0ZXIobyk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgdCA9PT0gMCAmJiB0aGlzLndvcmtpbmdBcmVhLnByZXBlbmQobyk7XG4gICAgICB0aGlzLmJsb2Nrcy5zcGxpY2UodCwgMCwgLi4uZSk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLmJsb2Nrcy5wdXNoKC4uLmUpLCB0aGlzLndvcmtpbmdBcmVhLmFwcGVuZENoaWxkKG8pO1xuICAgIGUuZm9yRWFjaCgoaSkgPT4gaS5jYWxsKEouUkVOREVSRUQpKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIEJsb2NrIHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlKGUpIHtcbiAgICBpc05hTihlKSAmJiAoZSA9IHRoaXMubGVuZ3RoIC0gMSksIHRoaXMuYmxvY2tzW2VdLmhvbGRlci5yZW1vdmUoKSwgdGhpcy5ibG9ja3NbZV0uY2FsbChKLlJFTU9WRUQpLCB0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgYmxvY2tzXG4gICAqL1xuICByZW1vdmVBbGwoKSB7XG4gICAgdGhpcy53b3JraW5nQXJlYS5pbm5lckhUTUwgPSBcIlwiLCB0aGlzLmJsb2Nrcy5mb3JFYWNoKChlKSA9PiBlLmNhbGwoSi5SRU1PVkVEKSksIHRoaXMuYmxvY2tzLmxlbmd0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBCbG9jayBhZnRlciBwYXNzZWQgdGFyZ2V0XG4gICAqXG4gICAqIEB0b2RvIGRlY2lkZSBpZiB0aGlzIG1ldGhvZCBpcyBuZWNlc3NhcnlcbiAgICogQHBhcmFtIHtCbG9ja30gdGFyZ2V0QmxvY2sg4oCUIHRhcmdldCBhZnRlciB3aGljaCBCbG9jayBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICogQHBhcmFtIHtCbG9ja30gbmV3QmxvY2sg4oCUIEJsb2NrIHRvIGluc2VydFxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXIoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmJsb2Nrcy5pbmRleE9mKGUpO1xuICAgIHRoaXMuaW5zZXJ0KG8gKyAxLCB0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrIGJ5IGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDigJQgQmxvY2sgaW5kZXhcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0KGUpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3NbZV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBpbmRleCBvZiBwYXNzZWQgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBmaW5kXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBpbmRleE9mKGUpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9jayBpbnRvIERPTVxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge0luc2VydFBvc2l0aW9ufSBwb3NpdGlvbiDigJQgaW5zZXJ0IHBvc2l0aW9uIChpZiBzZXQsIHdpbGwgdXNlIGluc2VydEFkamFjZW50RWxlbWVudClcbiAgICogQHBhcmFtIHtCbG9ja30gdGFyZ2V0IOKAlCBCbG9jayByZWxhdGVkIHRvIHBvc2l0aW9uXG4gICAqL1xuICBpbnNlcnRUb0RPTShlLCB0LCBvKSB7XG4gICAgdCA/IG8uaG9sZGVyLmluc2VydEFkamFjZW50RWxlbWVudCh0LCBlLmhvbGRlcikgOiB0aGlzLndvcmtpbmdBcmVhLmFwcGVuZENoaWxkKGUuaG9sZGVyKSwgZS5jYWxsKEouUkVOREVSRUQpO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb3NlcyBCbG9jayBldmVudCB3aXRoIHBhc3NlZCB0eXBlIGFuZCBkZXRhaWxzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGV0YWlsIC0gZXZlbnQgZGV0YWlsXG4gICAqL1xuICBjb21wb3NlQmxvY2tFdmVudChlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChlLCB7XG4gICAgICBkZXRhaWw6IHRcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgQnQgPSBcImJsb2NrLXJlbW92ZWRcIiwgVHQgPSBcImJsb2NrLWFkZGVkXCIsIEppID0gXCJibG9jay1tb3ZlZFwiLCBDdCA9IFwiYmxvY2stY2hhbmdlZFwiO1xuY2xhc3MgUWkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbXBsZXRlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgbmV3IHByb21pc2UgdG8gcXVldWVcbiAgICpcbiAgICogQHBhcmFtIG9wZXJhdGlvbiAtIHByb21pc2Ugc2hvdWxkIGJlIGFkZGVkIHRvIHF1ZXVlXG4gICAqL1xuICBhZGQoZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgodCwgbykgPT4ge1xuICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0aGlzLmNvbXBsZXRlZC50aGVuKGUpLnRoZW4odCkuY2F0Y2gobyk7XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIGVzIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuX2N1cnJlbnRCbG9ja0luZGV4ID0gLTEsIHRoaXMuX2Jsb2NrcyA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBCbG9jayBpbmRleFxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRCbG9ja0luZGV4KCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2tJbmRleDtcbiAgfVxuICAvKipcbiAgICogU2V0IGN1cnJlbnQgQmxvY2sgaW5kZXggYW5kIGZpcmUgQmxvY2sgbGlmZWN5Y2xlIGNhbGxiYWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBzZXQgYXMgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9ja0luZGV4KGUpIHtcbiAgICB0aGlzLl9jdXJyZW50QmxvY2tJbmRleCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgZmlyc3QgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0IGZpcnN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1swXTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJucyBsYXN0IEJsb2NrXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBsYXN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBjdXJyZW50QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja0luZGV4XTtcbiAgfVxuICAvKipcbiAgICogU2V0IHBhc3NlZCBCbG9jayBhcyBhIGN1cnJlbnRcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gYmxvY2sgdG8gc2V0IGFzIGEgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9jayhlKSB7XG4gICAgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuZ2V0QmxvY2tJbmRleChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBuZXh0IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja3xudWxsfVxuICAgKi9cbiAgZ2V0IG5leHRCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEgPyBudWxsIDogdGhpcy5fYmxvY2tzW3RoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IEJsb2NrIHdpdGggaW5wdXRzIGFmdGVyIGN1cnJlbnQgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0IG5leHRDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKHRoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCBCbG9jayB3aXRoIGlucHV0cyBiZWZvcmUgY3VycmVudCBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2sgfCB1bmRlZmluZWR9XG4gICAqL1xuICBnZXQgcHJldmlvdXNDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKDAsIHRoaXMuY3VycmVudEJsb2NrSW5kZXgpLnJldmVyc2UoKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcHJldmlvdXMgQmxvY2sgaW5zdGFuY2VcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfG51bGx9XG4gICAqL1xuICBnZXQgcHJldmlvdXNCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gMCA/IG51bGwgOiB0aGlzLl9ibG9ja3NbdGhpcy5jdXJyZW50QmxvY2tJbmRleCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYXJyYXkgb2YgQmxvY2sgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1tdfSB7QGxpbmsgQmxvY2tzI2FycmF5fVxuICAgKi9cbiAgZ2V0IGJsb2NrcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmFycmF5O1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBlYWNoIEJsb2NrIGlzIGVtcHR5XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRWRpdG9yRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLmV2ZXJ5KChlKSA9PiBlLmlzRW1wdHkpO1xuICB9XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGFmdGVyIEVkaXRvci5VSSBwcmVwYXJhdGlvblxuICAgKiBEZWZpbmUgdGhpcy5fYmxvY2tzIHByb3BlcnR5XG4gICAqL1xuICBwcmVwYXJlKCkge1xuICAgIGNvbnN0IGUgPSBuZXcgWGUodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IpO1xuICAgIHRoaXMuX2Jsb2NrcyA9IG5ldyBQcm94eShlLCB7XG4gICAgICBzZXQ6IFhlLnNldCxcbiAgICAgIGdldDogWGUuZ2V0XG4gICAgfSksIHRoaXMubGlzdGVuZXJzLm9uKFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBcImNvcHlcIixcbiAgICAgICh0KSA9PiB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5oYW5kbGVDb21tYW5kQyh0KVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogSWYgcmVhZE9ubHkgaXMgdHJ1ZTpcbiAgICogIC0gVW5iaW5kIGV2ZW50IGhhbmRsZXJzIGZyb20gY3JlYXRlZCBCbG9ja3NcbiAgICpcbiAgICogaWYgcmVhZE9ubHkgaXMgZmFsc2U6XG4gICAqICAtIEJpbmQgZXZlbnQgaGFuZGxlcnMgdG8gYWxsIGV4aXN0aW5nIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIFwicmVhZCBvbmx5XCIgc3RhdGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSA6IHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBCbG9jayBpbnN0YW5jZSBieSB0b29sIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBibG9jayBjcmVhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRvb2wgLSB0b29scyBwYXNzZWQgaW4gZWRpdG9yIGNvbmZpZyB7QGxpbmsgRWRpdG9yQ29uZmlnI3Rvb2xzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdIC0gdW5pcXVlIGlkIGZvciB0aGlzIGJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gW29wdGlvbnMuZGF0YV0gLSBjb25zdHJ1Y3RvciBwYXJhbXNcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgY29tcG9zZUJsb2NrKHtcbiAgICB0b29sOiBlLFxuICAgIGRhdGE6IHQgPSB7fSxcbiAgICBpZDogbyA9IHZvaWQgMCxcbiAgICB0dW5lczogaSA9IHt9XG4gIH0pIHtcbiAgICBjb25zdCBzID0gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkLCByID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSksIGwgPSBuZXcgRCh7XG4gICAgICBpZDogbyxcbiAgICAgIGRhdGE6IHQsXG4gICAgICB0b29sOiByLFxuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEksXG4gICAgICByZWFkT25seTogcyxcbiAgICAgIHR1bmVzRGF0YTogaVxuICAgIH0sIHRoaXMuZXZlbnRzRGlzcGF0Y2hlcik7XG4gICAgcmV0dXJuIHMgfHwgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5iaW5kQmxvY2tFdmVudHMobCk7XG4gICAgfSwgeyB0aW1lb3V0OiAyZTMgfSksIGw7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgYmxvY2sgaW50byBfYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gaW5zZXJ0IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmlkXSAtIGJsb2NrJ3MgdW5pcXVlIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b29sXSAtIHBsdWdpbiBuYW1lLCBieSBkZWZhdWx0IG1ldGhvZCBpbnNlcnRzIHRoZSBkZWZhdWx0IGJsb2NrIHR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmRhdGFdIC0gcGx1Z2luIGRhdGFcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmluZGV4XSAtIGluZGV4IHdoZXJlIHRvIGluc2VydCBuZXcgQmxvY2tcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uZWVkVG9Gb2N1c10gLSBmbGFnIHNob3dzIGlmIG5lZWRlZCB0byB1cGRhdGUgY3VycmVudCBCbG9jayBpbmRleFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlcGxhY2VdIC0gZmxhZyBzaG93cyBpZiBibG9jayBieSBwYXNzZWQgaW5kZXggc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggaW5zZXJ0ZWQgb25lXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGluc2VydCh7XG4gICAgaWQ6IGUgPSB2b2lkIDAsXG4gICAgdG9vbDogdCA9IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICBkYXRhOiBvID0ge30sXG4gICAgaW5kZXg6IGksXG4gICAgbmVlZFRvRm9jdXM6IHMgPSAhMCxcbiAgICByZXBsYWNlOiByID0gITEsXG4gICAgdHVuZXM6IGwgPSB7fVxuICB9ID0ge30pIHtcbiAgICBsZXQgYSA9IGk7XG4gICAgYSA9PT0gdm9pZCAwICYmIChhID0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCArIChyID8gMCA6IDEpKTtcbiAgICBjb25zdCBjID0gdGhpcy5jb21wb3NlQmxvY2soe1xuICAgICAgaWQ6IGUsXG4gICAgICB0b29sOiB0LFxuICAgICAgZGF0YTogbyxcbiAgICAgIHR1bmVzOiBsXG4gICAgfSk7XG4gICAgcmV0dXJuIHIgJiYgdGhpcy5ibG9ja0RpZE11dGF0ZWQoQnQsIHRoaXMuZ2V0QmxvY2tCeUluZGV4KGEpLCB7XG4gICAgICBpbmRleDogYVxuICAgIH0pLCB0aGlzLl9ibG9ja3MuaW5zZXJ0KGEsIGMsIHIpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChUdCwgYywge1xuICAgICAgaW5kZXg6IGFcbiAgICB9KSwgcyA/IHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSBhIDogYSA8PSB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ICYmIHRoaXMuY3VycmVudEJsb2NrSW5kZXgrKywgYztcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBzZXZlcmFsIGJsb2NrcyBhdCBvbmNlXG4gICAqXG4gICAqIEBwYXJhbSBibG9ja3MgLSBibG9ja3MgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSBpbmRleCAtIGluZGV4IHdoZXJlIHRvIGluc2VydFxuICAgKi9cbiAgaW5zZXJ0TWFueShlLCB0ID0gMCkge1xuICAgIHRoaXMuX2Jsb2Nrcy5pbnNlcnRNYW55KGUsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgQmxvY2sgZGF0YS5cbiAgICpcbiAgICogQ3VycmVudGx5IHdlIGRvbid0IGhhdmUgYW4gJ3VwZGF0ZScgbWV0aG9kIGluIHRoZSBUb29scyBBUEksIHNvIHdlIGp1c3QgY3JlYXRlIGEgbmV3IGJsb2NrIHdpdGggdGhlIHNhbWUgaWQgYW5kIHR5cGVcbiAgICogU2hvdWxkIG5vdCB0cmlnZ2VyICdibG9jay1yZW1vdmVkJyBvciAnYmxvY2stYWRkZWQnIGV2ZW50cy5cbiAgICpcbiAgICogSWYgbmVpdGhlciBkYXRhIG5vciB0dW5lcyBpcyBwcm92aWRlZCwgcmV0dXJuIHRoZSBwcm92aWRlZCBibG9jayBpbnN0ZWFkLlxuICAgKlxuICAgKiBAcGFyYW0gYmxvY2sgLSBibG9jayB0byB1cGRhdGVcbiAgICogQHBhcmFtIGRhdGEgLSAob3B0aW9uYWwpIG5ldyBkYXRhXG4gICAqIEBwYXJhbSB0dW5lcyAtIChvcHRpb25hbCkgdHVuZSBkYXRhXG4gICAqL1xuICBhc3luYyB1cGRhdGUoZSwgdCwgbykge1xuICAgIGlmICghdCAmJiAhbylcbiAgICAgIHJldHVybiBlO1xuICAgIGNvbnN0IGkgPSBhd2FpdCBlLmRhdGEsIHMgPSB0aGlzLmNvbXBvc2VCbG9jayh7XG4gICAgICBpZDogZS5pZCxcbiAgICAgIHRvb2w6IGUubmFtZSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGksIHQgPz8ge30pLFxuICAgICAgdHVuZXM6IG8gPz8gZS50dW5lc1xuICAgIH0pLCByID0gdGhpcy5nZXRCbG9ja0luZGV4KGUpO1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MucmVwbGFjZShyLCBzKSwgdGhpcy5ibG9ja0RpZE11dGF0ZWQoQ3QsIHMsIHtcbiAgICAgIGluZGV4OiByXG4gICAgfSksIHM7XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2UgcGFzc2VkIEJsb2NrIHdpdGggdGhlIG5ldyBvbmUgd2l0aCBzcGVjaWZpZWQgVG9vbCBhbmQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0gYmxvY2sgLSBibG9jayB0byByZXBsYWNlXG4gICAqIEBwYXJhbSBuZXdUb29sIC0gbmV3IFRvb2wgbmFtZVxuICAgKiBAcGFyYW0gZGF0YSAtIG5ldyBUb29sIGRhdGFcbiAgICovXG4gIHJlcGxhY2UoZSwgdCwgbykge1xuICAgIGNvbnN0IGkgPSB0aGlzLmdldEJsb2NrSW5kZXgoZSk7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0KHtcbiAgICAgIHRvb2w6IHQsXG4gICAgICBkYXRhOiBvLFxuICAgICAgaW5kZXg6IGksXG4gICAgICByZXBsYWNlOiAhMFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgcGFzdGVkIGNvbnRlbnQuIENhbGwgb25QYXN0ZSBjYWxsYmFjayBhZnRlciBpbnNlcnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b29sTmFtZSAtIG5hbWUgb2YgVG9vbCB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtQYXN0ZUV2ZW50fSBwYXN0ZUV2ZW50IC0gcGFzdGVkIGRhdGFcbiAgICogQHBhcmFtIHtib29sZWFufSByZXBsYWNlIC0gc2hvdWxkIHJlcGxhY2UgY3VycmVudCBibG9ja1xuICAgKi9cbiAgcGFzdGUoZSwgdCwgbyA9ICExKSB7XG4gICAgY29uc3QgaSA9IHRoaXMuaW5zZXJ0KHtcbiAgICAgIHRvb2w6IGUsXG4gICAgICByZXBsYWNlOiBvXG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgaS5jYWxsKEouT05fUEFTVEUsIHQpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAocykge1xuICAgICAgSShgJHtlfTogb25QYXN0ZSBjYWxsYmFjayBjYWxsIGlzIGZhaWxlZGAsIFwiZXJyb3JcIiwgcyk7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgbmV3IGRlZmF1bHQgYmxvY2sgYXQgcGFzc2VkIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGluZGV4IHdoZXJlIEJsb2NrIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5lZWRUb0ZvY3VzIC0gaWYgdHJ1ZSwgdXBkYXRlcyBjdXJyZW50IEJsb2NrIGluZGV4XG4gICAqXG4gICAqIFRPRE86IFJlbW92ZSBtZXRob2QgYW5kIHVzZSBpbnNlcnQoKSB3aXRoIGluZGV4IGluc3RlYWQgKD8pXG4gICAqIEByZXR1cm5zIHtCbG9ja30gaW5zZXJ0ZWQgQmxvY2tcbiAgICovXG4gIGluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgoZSwgdCA9ICExKSB7XG4gICAgY29uc3QgbyA9IHRoaXMuY29tcG9zZUJsb2NrKHsgdG9vbDogdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrIH0pO1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3NbZV0gPSBvLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChUdCwgbywge1xuICAgICAgaW5kZXg6IGVcbiAgICB9KSwgdCA/IHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSBlIDogZSA8PSB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ICYmIHRoaXMuY3VycmVudEJsb2NrSW5kZXgrKywgbztcbiAgfVxuICAvKipcbiAgICogQWx3YXlzIGluc2VydHMgYXQgdGhlIGVuZFxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAqL1xuICBpbnNlcnRBdEVuZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuYmxvY2tzLmxlbmd0aCAtIDEsIHRoaXMuaW5zZXJ0KCk7XG4gIH1cbiAgLyoqXG4gICAqIE1lcmdlIHR3byBibG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gdGFyZ2V0QmxvY2sgLSBwcmV2aW91cyBibG9jayB3aWxsIGJlIGFwcGVuZCB0byB0aGlzIGJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrVG9NZXJnZSAtIGJsb2NrIHRoYXQgd2lsbCBiZSBtZXJnZWQgd2l0aCB0YXJnZXQgYmxvY2tcbiAgICogQHJldHVybnMge1Byb21pc2V9IC0gdGhlIHNlcXVlbmNlIHRoYXQgY2FuIGJlIGNvbnRpbnVlZFxuICAgKi9cbiAgYXN5bmMgbWVyZ2VCbG9ja3MoZSwgdCkge1xuICAgIGxldCBvO1xuICAgIGlmIChlLm5hbWUgPT09IHQubmFtZSAmJiBlLm1lcmdlYWJsZSkge1xuICAgICAgY29uc3QgaSA9IGF3YWl0IHQuZGF0YTtcbiAgICAgIGlmIChWKGkpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgbWVyZ2UgQmxvY2suIEZhaWxlZCB0byBleHRyYWN0IG9yaWdpbmFsIEJsb2NrIGRhdGEuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBbc10gPSBvdChbaV0sIGUudG9vbC5zYW5pdGl6ZUNvbmZpZyk7XG4gICAgICBvID0gcztcbiAgICB9IGVsc2UgaWYgKGUubWVyZ2VhYmxlICYmIF9lKHQsIFwiZXhwb3J0XCIpICYmIF9lKGUsIFwiaW1wb3J0XCIpKSB7XG4gICAgICBjb25zdCBpID0gYXdhaXQgdC5leHBvcnREYXRhQXNTdHJpbmcoKSwgcyA9IHEoaSwgZS50b29sLnNhbml0aXplQ29uZmlnKTtcbiAgICAgIG8gPSB3dChzLCBlLnRvb2wuY29udmVyc2lvbkNvbmZpZyk7XG4gICAgfVxuICAgIG8gIT09IHZvaWQgMCAmJiAoYXdhaXQgZS5tZXJnZVdpdGgobyksIHRoaXMucmVtb3ZlQmxvY2sodCksIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0aGlzLl9ibG9ja3MuaW5kZXhPZihlKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBwYXNzZWQgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gQmxvY2sgdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSBhZGRMYXN0QmxvY2sgLSBpZiB0cnVlLCBhZGRzIG5ldyBkZWZhdWx0IGJsb2NrIGF0IHRoZSBlbmQuIEB0b2RvIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCB1c2UgZXZlbnQtYnVzIGluc3RlYWRcbiAgICovXG4gIHJlbW92ZUJsb2NrKGUsIHQgPSAhMCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgobykgPT4ge1xuICAgICAgY29uc3QgaSA9IHRoaXMuX2Jsb2Nrcy5pbmRleE9mKGUpO1xuICAgICAgaWYgKCF0aGlzLnZhbGlkYXRlSW5kZXgoaSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGZpbmQgYSBCbG9jayB0byByZW1vdmVcIik7XG4gICAgICBlLmRlc3Ryb3koKSwgdGhpcy5fYmxvY2tzLnJlbW92ZShpKSwgdGhpcy5ibG9ja0RpZE11dGF0ZWQoQnQsIGUsIHtcbiAgICAgICAgaW5kZXg6IGlcbiAgICAgIH0pLCB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID49IGkgJiYgdGhpcy5jdXJyZW50QmxvY2tJbmRleC0tLCB0aGlzLmJsb2Nrcy5sZW5ndGggPyBpID09PSAwICYmICh0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gMCkgOiAodGhpcy51bnNldEN1cnJlbnRCbG9jaygpLCB0ICYmIHRoaXMuaW5zZXJ0KCkpLCBvKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBvbmx5IHNlbGVjdGVkIEJsb2Nrc1xuICAgKiBhbmQgcmV0dXJucyBmaXJzdCBCbG9jayBpbmRleCB3aGVyZSBzdGFydGVkIHJlbW92aW5nLi4uXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8dW5kZWZpbmVkfVxuICAgKi9cbiAgcmVtb3ZlU2VsZWN0ZWRCbG9ja3MoKSB7XG4gICAgbGV0IGU7XG4gICAgZm9yIChsZXQgdCA9IHRoaXMuYmxvY2tzLmxlbmd0aCAtIDE7IHQgPj0gMDsgdC0tKVxuICAgICAgdGhpcy5ibG9ja3NbdF0uc2VsZWN0ZWQgJiYgKHRoaXMucmVtb3ZlQmxvY2sodGhpcy5ibG9ja3NbdF0pLCBlID0gdCk7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgLyoqXG4gICAqIEF0dGVudGlvbiFcbiAgICogQWZ0ZXIgcmVtb3ZpbmcgaW5zZXJ0IHRoZSBuZXcgZGVmYXVsdCB0eXBlZCBCbG9jayBhbmQgZm9jdXMgb24gaXRcbiAgICogUmVtb3ZlcyBhbGwgYmxvY2tzXG4gICAqL1xuICByZW1vdmVBbGxCbG9ja3MoKSB7XG4gICAgZm9yIChsZXQgZSA9IHRoaXMuYmxvY2tzLmxlbmd0aCAtIDE7IGUgPj0gMDsgZS0tKVxuICAgICAgdGhpcy5fYmxvY2tzLnJlbW92ZShlKTtcbiAgICB0aGlzLnVuc2V0Q3VycmVudEJsb2NrKCksIHRoaXMuaW5zZXJ0KCksIHRoaXMuY3VycmVudEJsb2NrLmZpcnN0SW5wdXQuZm9jdXMoKTtcbiAgfVxuICAvKipcbiAgICogU3BsaXQgY3VycmVudCBCbG9ja1xuICAgKiAxLiBFeHRyYWN0IGNvbnRlbnQgZnJvbSBDYXJldCBwb3NpdGlvbiB0byB0aGUgQmxvY2tgcyBlbmRcbiAgICogMi4gSW5zZXJ0IGEgbmV3IEJsb2NrIGJlbG93IGN1cnJlbnQgb25lIHdpdGggZXh0cmFjdGVkIGNvbnRlbnRcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgc3BsaXQoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuRWRpdG9yLkNhcmV0LmV4dHJhY3RGcmFnbWVudEZyb21DYXJldFBvc2l0aW9uKCksIHQgPSBkLm1ha2UoXCJkaXZcIik7XG4gICAgdC5hcHBlbmRDaGlsZChlKTtcbiAgICBjb25zdCBvID0ge1xuICAgICAgdGV4dDogZC5pc0VtcHR5KHQpID8gXCJcIiA6IHQuaW5uZXJIVE1MXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnQoeyBkYXRhOiBvIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEJsb2NrIGJ5IHBhc3NlZCBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCB0byBnZXQuIC0xIHRvIGdldCBsYXN0XG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldEJsb2NrQnlJbmRleChlKSB7XG4gICAgcmV0dXJuIGUgPT09IC0xICYmIChlID0gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEpLCB0aGlzLl9ibG9ja3NbZV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW5kZXggZm9yIHBhc3NlZCBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0gYmxvY2sgLSBibG9jayB0byBmaW5kIGluZGV4XG4gICAqL1xuICBnZXRCbG9ja0luZGV4KGUpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmluZGV4T2YoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIEJsb2NrIGJ5IHBhc3NlZCBpZFxuICAgKlxuICAgKiBAcGFyYW0gaWQgLSBpZCBvZiBibG9jayB0byBnZXRcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0QmxvY2tCeUlkKGUpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmFycmF5LmZpbmQoKHQpID0+IHQuaWQgPT09IGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgQmxvY2sgaW5zdGFuY2UgYnkgaHRtbCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gZWxlbWVudCAtIGh0bWwgZWxlbWVudCB0byBnZXQgQmxvY2sgYnlcbiAgICovXG4gIGdldEJsb2NrKGUpIHtcbiAgICBkLmlzRWxlbWVudChlKSB8fCAoZSA9IGUucGFyZW50Tm9kZSk7XG4gICAgY29uc3QgdCA9IHRoaXMuX2Jsb2Nrcy5ub2RlcywgbyA9IGUuY2xvc2VzdChgLiR7RC5DU1Mud3JhcHBlcn1gKSwgaSA9IHQuaW5kZXhPZihvKTtcbiAgICBpZiAoaSA+PSAwKVxuICAgICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1tpXTtcbiAgfVxuICAvKipcbiAgICogMSkgRmluZCBmaXJzdC1sZXZlbCBCbG9jayBmcm9tIHBhc3NlZCBjaGlsZCBOb2RlXG4gICAqIDIpIE1hcmsgaXQgYXMgY3VycmVudFxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkTm9kZSAtIGxvb2sgYWhlYWQgZnJvbSB0aGlzIG5vZGUuXG4gICAqIEByZXR1cm5zIHtCbG9jayB8IHVuZGVmaW5lZH0gY2FuIHJldHVybiB1bmRlZmluZWQgaW4gY2FzZSB3aGVuIHRoZSBwYXNzZWQgY2hpbGQgbm90ZSBpcyBub3QgYSBwYXJ0IG9mIHRoZSBjdXJyZW50IGVkaXRvciBpbnN0YW5jZVxuICAgKi9cbiAgc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZSkge1xuICAgIGQuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gZS5jbG9zZXN0KGAuJHtELkNTUy53cmFwcGVyfWApO1xuICAgIGlmICghdClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBvID0gdC5jbG9zZXN0KGAuJHt0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yV3JhcHBlcn1gKTtcbiAgICBpZiAobyAhPSBudWxsICYmIG8uaXNFcXVhbE5vZGUodGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlcikpXG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuX2Jsb2Nrcy5ub2Rlcy5pbmRleE9mKHQpLCB0aGlzLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKSwgdGhpcy5jdXJyZW50QmxvY2s7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBibG9jayB3aGljaCBjb250ZW50cyBwYXNzZWQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkTm9kZSAtIG5vZGUgdG8gZ2V0IEJsb2NrIGJ5XG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldEJsb2NrQnlDaGlsZE5vZGUoZSkge1xuICAgIGlmICghZSB8fCAhKGUgaW5zdGFuY2VvZiBOb2RlKSlcbiAgICAgIHJldHVybjtcbiAgICBkLmlzRWxlbWVudChlKSB8fCAoZSA9IGUucGFyZW50Tm9kZSk7XG4gICAgY29uc3QgdCA9IGUuY2xvc2VzdChgLiR7RC5DU1Mud3JhcHBlcn1gKTtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3MuZmluZCgobykgPT4gby5ob2xkZXIgPT09IHQpO1xuICB9XG4gIC8qKlxuICAgKiBTd2FwIEJsb2NrcyBQb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IC0gaW5kZXggb2YgZmlyc3QgYmxvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggLSBpbmRleCBvZiBzZWNvbmQgYmxvY2tcbiAgICogQGRlcHJlY2F0ZWQg4oCUIHVzZSAnbW92ZScgaW5zdGVhZFxuICAgKi9cbiAgc3dhcChlLCB0KSB7XG4gICAgdGhpcy5fYmxvY2tzLnN3YXAoZSwgdCksIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0O1xuICB9XG4gIC8qKlxuICAgKiBNb3ZlIGEgYmxvY2sgdG8gYSBuZXcgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggLSBpbmRleCB3aGVyZSB0byBtb3ZlIEJsb2NrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBtb3ZlXG4gICAqL1xuICBtb3ZlKGUsIHQgPSB0aGlzLmN1cnJlbnRCbG9ja0luZGV4KSB7XG4gICAgaWYgKGlzTmFOKGUpIHx8IGlzTmFOKHQpKSB7XG4gICAgICBJKFwiV2FybmluZyBkdXJpbmcgJ21vdmUnIGNhbGw6IGluY29ycmVjdCBpbmRpY2VzIHByb3ZpZGVkLlwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy52YWxpZGF0ZUluZGV4KGUpIHx8ICF0aGlzLnZhbGlkYXRlSW5kZXgodCkpIHtcbiAgICAgIEkoXCJXYXJuaW5nIGR1cmluZyAnbW92ZScgY2FsbDogaW5kaWNlcyBjYW5ub3QgYmUgbG93ZXIgdGhhbiAwIG9yIGdyZWF0ZXIgdGhhbiB0aGUgYW1vdW50IG9mIGJsb2Nrcy5cIiwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9ibG9ja3MubW92ZShlLCB0KSwgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IGUsIHRoaXMuYmxvY2tEaWRNdXRhdGVkKEppLCB0aGlzLmN1cnJlbnRCbG9jaywge1xuICAgICAgZnJvbUluZGV4OiB0LFxuICAgICAgdG9JbmRleDogZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBwYXNzZWQgQmxvY2sgdG8gdGhlIG5ldyBUb29sXG4gICAqIFVzZXMgQ29udmVyc2lvbiBDb25maWdcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrVG9Db252ZXJ0IC0gQmxvY2sgdGhhdCBzaG91bGQgYmUgY29udmVydGVkXG4gICAqIEBwYXJhbSB0YXJnZXRUb29sTmFtZSAtIG5hbWUgb2YgdGhlIFRvb2wgdG8gY29udmVydCB0b1xuICAgKiBAcGFyYW0gYmxvY2tEYXRhT3ZlcnJpZGVzIC0gb3B0aW9uYWwgbmV3IEJsb2NrIGRhdGEgb3ZlcnJpZGVzXG4gICAqL1xuICBhc3luYyBjb252ZXJ0KGUsIHQsIG8pIHtcbiAgICBpZiAoIWF3YWl0IGUuc2F2ZSgpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGNvbnZlcnQgQmxvY2suIEZhaWxlZCB0byBleHRyYWN0IG9yaWdpbmFsIEJsb2NrIGRhdGEuXCIpO1xuICAgIGNvbnN0IHMgPSB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLmdldCh0KTtcbiAgICBpZiAoIXMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBjb252ZXJ0IEJsb2NrLiBUb29sIMKrJHt0fcK7IG5vdCBmb3VuZC5gKTtcbiAgICBjb25zdCByID0gYXdhaXQgZS5leHBvcnREYXRhQXNTdHJpbmcoKSwgbCA9IHEoXG4gICAgICByLFxuICAgICAgcy5zYW5pdGl6ZUNvbmZpZ1xuICAgICk7XG4gICAgbGV0IGEgPSB3dChsLCBzLmNvbnZlcnNpb25Db25maWcpO1xuICAgIHJldHVybiBvICYmIChhID0gT2JqZWN0LmFzc2lnbihhLCBvKSksIHRoaXMucmVwbGFjZShlLCBzLm5hbWUsIGEpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgQmxvY2sgSW5kZXggLTEgd2hpY2ggbWVhbnMgdW5rbm93blxuICAgKiBhbmQgY2xlYXIgaGlnaGxpZ2h0c1xuICAgKi9cbiAgdW5zZXRDdXJyZW50QmxvY2soKSB7XG4gICAgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IC0xO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbmVlZFRvQWRkRGVmYXVsdEJsb2NrIC0gMSkgaW4gaW50ZXJuYWwgY2FsbHMgKGZvciBleGFtcGxlLCBpbiBhcGkuYmxvY2tzLnJlbmRlcilcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZSBkb24ndCBuZWVkIHRvIGFkZCBhbiBlbXB0eSBkZWZhdWx0IGJsb2NrXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIpIGluIGFwaS5ibG9ja3MuY2xlYXIgd2Ugc2hvdWxkIGFkZCBlbXB0eSBibG9ja1xuICAgKi9cbiAgYXN5bmMgY2xlYXIoZSA9ICExKSB7XG4gICAgY29uc3QgdCA9IG5ldyBRaSgpO1xuICAgIHRoaXMuYmxvY2tzLmZvckVhY2goKG8pID0+IHtcbiAgICAgIHQuYWRkKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVCbG9jayhvLCAhMSk7XG4gICAgICB9KTtcbiAgICB9KSwgYXdhaXQgdC5jb21wbGV0ZWQsIHRoaXMudW5zZXRDdXJyZW50QmxvY2soKSwgZSAmJiB0aGlzLmluc2VydCgpLCB0aGlzLkVkaXRvci5VSS5jaGVja0VtcHRpbmVzcygpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgYWxsIHRoZSBibG9jayB0b29scycgcmVzb3VyY2VzXG4gICAqIFRoaXMgaXMgY2FsbGVkIHdoZW4gZWRpdG9yIGlzIGRlc3Ryb3llZFxuICAgKi9cbiAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbCh0aGlzLmJsb2Nrcy5tYXAoKGUpID0+IGUuZGVzdHJveSgpKSk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmQgQmxvY2sgZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gQmxvY2sgdG8gd2hpY2ggZXZlbnQgc2hvdWxkIGJlIGJvdW5kXG4gICAqL1xuICBiaW5kQmxvY2tFdmVudHMoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tFdmVudHM6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUuaG9sZGVyLCBcImtleWRvd25cIiwgKG8pID0+IHtcbiAgICAgIHQua2V5ZG93bihvKTtcbiAgICB9KSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ob2xkZXIsIFwia2V5dXBcIiwgKG8pID0+IHtcbiAgICAgIHQua2V5dXAobyk7XG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUuaG9sZGVyLCBcImRyYWdvdmVyXCIsIChvKSA9PiB7XG4gICAgICB0LmRyYWdPdmVyKG8pO1xuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLmhvbGRlciwgXCJkcmFnbGVhdmVcIiwgKG8pID0+IHtcbiAgICAgIHQuZHJhZ0xlYXZlKG8pO1xuICAgIH0pLCBlLm9uKFwiZGlkTXV0YXRlZFwiLCAobykgPT4gdGhpcy5ibG9ja0RpZE11dGF0ZWQoQ3QsIG8sIHtcbiAgICAgIGluZGV4OiB0aGlzLmdldEJsb2NrSW5kZXgobylcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIERpc2FibGUgbXV0YWJsZSBoYW5kbGVycyBhbmQgYmluZGluZ3NcbiAgICovXG4gIGRpc2FibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5jbGVhckFsbCgpO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGVzIGFsbCBtb2R1bGUgaGFuZGxlcnMgYW5kIGJpbmRpbmdzIGZvciBhbGwgQmxvY2tzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihcbiAgICAgIGRvY3VtZW50LFxuICAgICAgXCJjdXRcIixcbiAgICAgIChlKSA9PiB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5oYW5kbGVDb21tYW5kWChlKVxuICAgICksIHRoaXMuYmxvY2tzLmZvckVhY2goKGUpID0+IHtcbiAgICAgIHRoaXMuYmluZEJsb2NrRXZlbnRzKGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgZ2l2ZW4gaW5kZXggaXMgbm90IGxvd2VyIHRoYW4gMCBvciBoaWdoZXIgdGhhbiB0aGUgYW1vdW50IG9mIGJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCBvZiBibG9ja3MgYXJyYXkgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB2YWxpZGF0ZUluZGV4KGUpIHtcbiAgICByZXR1cm4gIShlIDwgMCB8fCBlID49IHRoaXMuX2Jsb2Nrcy5sZW5ndGgpO1xuICB9XG4gIC8qKlxuICAgKiBCbG9jayBtdXRhdGlvbiBjYWxsYmFja1xuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb25UeXBlIC0gd2hhdCBoYXBwZW5lZCB3aXRoIGJsb2NrXG4gICAqIEBwYXJhbSBibG9jayAtIG11dGF0ZWQgYmxvY2tcbiAgICogQHBhcmFtIGRldGFpbERhdGEgLSBhZGRpdGlvbmFsIGRhdGEgdG8gcGFzcyB3aXRoIGNoYW5nZSBldmVudFxuICAgKi9cbiAgYmxvY2tEaWRNdXRhdGVkKGUsIHQsIG8pIHtcbiAgICBjb25zdCBpID0gbmV3IEN1c3RvbUV2ZW50KGUsIHtcbiAgICAgIGRldGFpbDoge1xuICAgICAgICB0YXJnZXQ6IG5ldyBHKHQpLFxuICAgICAgICAuLi5vXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KFB0LCB7XG4gICAgICBldmVudDogaVxuICAgIH0pLCB0O1xuICB9XG59XG5jbGFzcyB0cyBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmFueUJsb2NrU2VsZWN0ZWRDYWNoZSA9IG51bGwsIHRoaXMubmVlZFRvU2VsZWN0QWxsID0gITEsIHRoaXMubmF0aXZlSW5wdXRTZWxlY3RlZCA9ICExLCB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBTYW5pdGl6ZXIgQ29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtTYW5pdGl6ZXJDb25maWd9XG4gICAqL1xuICBnZXQgc2FuaXRpemVyQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwOiB7fSxcbiAgICAgIGgxOiB7fSxcbiAgICAgIGgyOiB7fSxcbiAgICAgIGgzOiB7fSxcbiAgICAgIGg0OiB7fSxcbiAgICAgIGg1OiB7fSxcbiAgICAgIGg2OiB7fSxcbiAgICAgIG9sOiB7fSxcbiAgICAgIHVsOiB7fSxcbiAgICAgIGxpOiB7fSxcbiAgICAgIGJyOiAhMCxcbiAgICAgIGltZzoge1xuICAgICAgICBzcmM6ICEwLFxuICAgICAgICB3aWR0aDogITAsXG4gICAgICAgIGhlaWdodDogITBcbiAgICAgIH0sXG4gICAgICBhOiB7XG4gICAgICAgIGhyZWY6ICEwXG4gICAgICB9LFxuICAgICAgYjoge30sXG4gICAgICBpOiB7fSxcbiAgICAgIHU6IHt9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRmxhZyB0aGF0IGlkZW50aWZpZXMgYWxsIEJsb2NrcyBzZWxlY3Rpb25cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgYWxsQmxvY2tzU2VsZWN0ZWQoKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHJldHVybiBlLmJsb2Nrcy5ldmVyeSgodCkgPT4gdC5zZWxlY3RlZCA9PT0gITApO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0ZWQgYWxsIGJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gc3RhdGUgdG8gc2V0XG4gICAqL1xuICBzZXQgYWxsQmxvY2tzU2VsZWN0ZWQoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0LmJsb2Nrcy5mb3JFYWNoKChvKSA9PiB7XG4gICAgICBvLnNlbGVjdGVkID0gZTtcbiAgICB9KSwgdGhpcy5jbGVhckNhY2hlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZsYWcgdGhhdCBpZGVudGlmaWVzIGFueSBCbG9jayBzZWxlY3Rpb25cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgYW55QmxvY2tTZWxlY3RlZCgpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgcmV0dXJuIHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlID09PSBudWxsICYmICh0aGlzLmFueUJsb2NrU2VsZWN0ZWRDYWNoZSA9IGUuYmxvY2tzLnNvbWUoKHQpID0+IHQuc2VsZWN0ZWQgPT09ICEwKSksIHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gc2VsZWN0ZWQgQmxvY2tzIGFycmF5XG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1tdfVxuICAgKi9cbiAgZ2V0IHNlbGVjdGVkQmxvY2tzKCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmZpbHRlcigoZSkgPT4gZS5zZWxlY3RlZCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBQcmVwYXJhdGlvblxuICAgKiBSZWdpc3RlcnMgU2hvcnRjdXRzIENNRCtBIGFuZCBDTUQrQ1xuICAgKiB0byBzZWxlY3QgYWxsIGFuZCBjb3B5IHRoZW1cbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgYigpLCBoZS5hZGQoe1xuICAgICAgbmFtZTogXCJDTUQrQVwiLFxuICAgICAgaGFuZGxlcjogKGUpID0+IHtcbiAgICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIFJlYWRPbmx5OiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICAgICAgaWYgKG8uaXNFbmFibGVkKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLnNlbGVjdEFsbEJsb2NrcygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0LmN1cnJlbnRCbG9jayAmJiB0aGlzLmhhbmRsZUNvbW1hbmRBKGUpO1xuICAgICAgfSxcbiAgICAgIG9uOiB0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvclxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGUgcmVhZC1vbmx5IHN0YXRlXG4gICAqXG4gICAqICAtIFJlbW92ZSBhbGwgcmFuZ2VzXG4gICAqICAtIFVuc2VsZWN0IGFsbCBCbG9ja3NcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KCkge1xuICAgIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksIHRoaXMuYWxsQmxvY2tzU2VsZWN0ZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHNlbGVjdGlvbiBvZiBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcj99IGluZGV4IC0gQmxvY2sgaW5kZXggYWNjb3JkaW5nIHRvIHRoZSBCbG9ja01hbmFnZXIncyBpbmRleGVzXG4gICAqL1xuICB1blNlbGVjdEJsb2NrQnlJbmRleChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGxldCBvO1xuICAgIGlzTmFOKGUpID8gbyA9IHQuY3VycmVudEJsb2NrIDogbyA9IHQuZ2V0QmxvY2tCeUluZGV4KGUpLCBvLnNlbGVjdGVkID0gITEsIHRoaXMuY2xlYXJDYWNoZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBzZWxlY3Rpb24gZnJvbSBCbG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gcmVhc29uIC0gZXZlbnQgY2F1c2VkIGNsZWFyIG9mIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlc3RvcmVTZWxlY3Rpb24gLSBpZiB0cnVlLCByZXN0b3JlIHNhdmVkIHNlbGVjdGlvblxuICAgKi9cbiAgY2xlYXJTZWxlY3Rpb24oZSwgdCA9ICExKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IG8sIENhcmV0OiBpLCBSZWN0YW5nbGVTZWxlY3Rpb246IHMgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMubmVlZFRvU2VsZWN0QWxsID0gITEsIHRoaXMubmF0aXZlSW5wdXRTZWxlY3RlZCA9ICExLCB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICExO1xuICAgIGNvbnN0IHIgPSBlICYmIGUgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50LCBsID0gciAmJiBJdChlLmtleUNvZGUpO1xuICAgIGlmICh0aGlzLmFueUJsb2NrU2VsZWN0ZWQgJiYgciAmJiBsICYmICFiLmlzU2VsZWN0aW9uRXhpc3RzKSB7XG4gICAgICBjb25zdCBhID0gby5yZW1vdmVTZWxlY3RlZEJsb2NrcygpO1xuICAgICAgby5pbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4KGEsICEwKSwgaS5zZXRUb0Jsb2NrKG8uY3VycmVudEJsb2NrKSwgT2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBjID0gZS5rZXk7XG4gICAgICAgIGkuaW5zZXJ0Q29udGVudEF0Q2FyZXRQb3NpdGlvbihjLmxlbmd0aCA+IDEgPyBcIlwiIDogYyk7XG4gICAgICB9LCAyMCkoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuRWRpdG9yLkNyb3NzQmxvY2tTZWxlY3Rpb24uY2xlYXIoZSksICF0aGlzLmFueUJsb2NrU2VsZWN0ZWQgfHwgcy5pc1JlY3RBY3RpdmF0ZWQoKSkge1xuICAgICAgdGhpcy5FZGl0b3IuUmVjdGFuZ2xlU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHQgJiYgdGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLmFsbEJsb2Nrc1NlbGVjdGVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFJlZHVjZSBlYWNoIEJsb2NrIGFuZCBjb3B5IGl0cyBjb250ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Q2xpcGJvYXJkRXZlbnR9IGUgLSBjb3B5L2N1dCBldmVudFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGNvcHlTZWxlY3RlZEJsb2NrcyhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHQgPSBkLm1ha2UoXCJkaXZcIik7XG4gICAgdGhpcy5zZWxlY3RlZEJsb2Nrcy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICBjb25zdCByID0gcShzLmhvbGRlci5pbm5lckhUTUwsIHRoaXMuc2FuaXRpemVyQ29uZmlnKSwgbCA9IGQubWFrZShcInBcIik7XG4gICAgICBsLmlubmVySFRNTCA9IHIsIHQuYXBwZW5kQ2hpbGQobCk7XG4gICAgfSk7XG4gICAgY29uc3QgbyA9IEFycmF5LmZyb20odC5jaGlsZE5vZGVzKS5tYXAoKHMpID0+IHMudGV4dENvbnRlbnQpLmpvaW4oYFxuXG5gKSwgaSA9IHQuaW5uZXJIVE1MO1xuICAgIHJldHVybiBlLmNsaXBib2FyZERhdGEuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgbyksIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dC9odG1sXCIsIGkpLCBQcm9taXNlLmFsbCh0aGlzLnNlbGVjdGVkQmxvY2tzLm1hcCgocykgPT4gcy5zYXZlKCkpKS50aGVuKChzKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSh0aGlzLkVkaXRvci5QYXN0ZS5NSU1FX1RZUEUsIEpTT04uc3RyaW5naWZ5KHMpKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3QgQmxvY2sgYnkgaXRzIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyP30gaW5kZXggLSBCbG9jayBpbmRleCBhY2NvcmRpbmcgdG8gdGhlIEJsb2NrTWFuYWdlcidzIGluZGV4ZXNcbiAgICovXG4gIHNlbGVjdEJsb2NrQnlJbmRleChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gdC5nZXRCbG9ja0J5SW5kZXgoZSk7XG4gICAgbyAhPT0gdm9pZCAwICYmIHRoaXMuc2VsZWN0QmxvY2sobyk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBwYXNzZWQgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBzZWxlY3RcbiAgICovXG4gIHNlbGVjdEJsb2NrKGUpIHtcbiAgICB0aGlzLnNlbGVjdGlvbi5zYXZlKCksIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksIGUuc2VsZWN0ZWQgPSAhMCwgdGhpcy5jbGVhckNhY2hlKCksIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHNlbGVjdGlvbiBmcm9tIHBhc3NlZCBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIHVuc2VsZWN0XG4gICAqL1xuICB1bnNlbGVjdEJsb2NrKGUpIHtcbiAgICBlLnNlbGVjdGVkID0gITEsIHRoaXMuY2xlYXJDYWNoZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBhbnlCbG9ja1NlbGVjdGVkIGNhY2hlXG4gICAqL1xuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIGRlc3RydWN0aW9uXG4gICAqIERlLXJlZ2lzdGVycyBTaG9ydGN1dCBDTUQrQVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBoZS5yZW1vdmUodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IsIFwiQ01EK0FcIik7XG4gIH1cbiAgLyoqXG4gICAqIEZpcnN0IENNRCtBIHNlbGVjdHMgYWxsIGlucHV0IGNvbnRlbnQgYnkgbmF0aXZlIGJlaGF2aW91cixcbiAgICogbmV4dCBDTUQrQSBrZXlwcmVzcyBzZWxlY3RzIGFsbCBibG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBoYW5kbGVDb21tYW5kQShlKSB7XG4gICAgaWYgKHRoaXMuRWRpdG9yLlJlY3RhbmdsZVNlbGVjdGlvbi5jbGVhclNlbGVjdGlvbigpLCBkLmlzTmF0aXZlSW5wdXQoZS50YXJnZXQpICYmICF0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbikge1xuICAgICAgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gPSAhMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9jayhlLnRhcmdldCksIG8gPSB0LmlucHV0cztcbiAgICBpZiAoby5sZW5ndGggPiAxICYmICF0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbikge1xuICAgICAgdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gPSAhMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG8ubGVuZ3RoID09PSAxICYmICF0aGlzLm5lZWRUb1NlbGVjdEFsbCkge1xuICAgICAgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPSAhMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPyAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLnNlbGVjdEFsbEJsb2NrcygpLCB0aGlzLm5lZWRUb1NlbGVjdEFsbCA9ICExLCB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICExKSA6IHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uICYmIChlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuc2VsZWN0QmxvY2sodCksIHRoaXMubmVlZFRvU2VsZWN0QWxsID0gITApO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3QgQWxsIEJsb2Nrc1xuICAgKiBFYWNoIEJsb2NrIGhhcyBzZWxlY3RlZCBzZXR0ZXIgdGhhdCBtYWtlcyBCbG9jayBjb3B5YWJsZVxuICAgKi9cbiAgc2VsZWN0QWxsQmxvY2tzKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgYi5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSwgdGhpcy5hbGxCbG9ja3NTZWxlY3RlZCA9ICEwLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gIH1cbn1cbmNsYXNzIFJlIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBBbGxvd2VkIGNhcmV0IHBvc2l0aW9ucyBpbiBpbnB1dFxuICAgKlxuICAgKiBAc3RhdGljXG4gICAqIEByZXR1cm5zIHt7U1RBUlQ6IHN0cmluZywgRU5EOiBzdHJpbmcsIERFRkFVTFQ6IHN0cmluZ319XG4gICAqL1xuICBnZXQgcG9zaXRpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBTVEFSVDogXCJzdGFydFwiLFxuICAgICAgRU5EOiBcImVuZFwiLFxuICAgICAgREVGQVVMVDogXCJkZWZhdWx0XCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBFbGVtZW50cyBzdHlsZXMgdGhhdCBjYW4gYmUgdXNlZnVsIGZvciBDYXJldCBNb2R1bGVcbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaGFkb3dDYXJldDogXCJjZHgtc2hhZG93LWNhcmV0XCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgZ2V0cyBCbG9jayBpbnN0YW5jZSBhbmQgcHV0cyBjYXJldCB0byB0aGUgdGV4dCBub2RlIHdpdGggb2Zmc2V0XG4gICAqIFRoZXJlIHR3byB3YXlzIHRoYXQgbWV0aG9kIGFwcGxpZXMgY2FyZXQgcG9zaXRpb246XG4gICAqICAgLSBmaXJzdCBmb3VuZCB0ZXh0IG5vZGU6IHNldHMgYXQgdGhlIGJlZ2lubmluZywgYnV0IHlvdSBjYW4gcGFzcyBhbiBvZmZzZXRcbiAgICogICAtIGxhc3QgZm91bmQgdGV4dCBub2RlOiBzZXRzIGF0IHRoZSBlbmQgb2YgdGhlIG5vZGUuIEFsc28sIHlvdSBjYW4gY3VzdG9taXplIHRoZSBiZWhhdmlvdXJcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayBjbGFzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9zaXRpb24gLSBwb3NpdGlvbiB3aGVyZSB0byBzZXQgY2FyZXQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGRlZmF1bHQgLSBsZWF2ZSBkZWZhdWx0IGJlaGF2aW91ciBhbmQgYXBwbHkgb2Zmc2V0IGlmIGl0J3MgcGFzc2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBjYXJldCBvZmZzZXQgcmVnYXJkaW5nIHRvIHRoZSB0ZXh0IG5vZGVcbiAgICovXG4gIHNldFRvQmxvY2soZSwgdCA9IHRoaXMucG9zaXRpb25zLkRFRkFVTFQsIG8gPSAwKSB7XG4gICAgdmFyIGM7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGksIEJsb2NrU2VsZWN0aW9uOiBzIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAocy5jbGVhclNlbGVjdGlvbigpLCAhZS5mb2N1c2FibGUpIHtcbiAgICAgIChjID0gd2luZG93LmdldFNlbGVjdGlvbigpKSA9PSBudWxsIHx8IGMucmVtb3ZlQWxsUmFuZ2VzKCksIHMuc2VsZWN0QmxvY2soZSksIGkuY3VycmVudEJsb2NrID0gZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHI7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIHRoaXMucG9zaXRpb25zLlNUQVJUOlxuICAgICAgICByID0gZS5maXJzdElucHV0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuRU5EOlxuICAgICAgICByID0gZS5sYXN0SW5wdXQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgciA9IGUuY3VycmVudElucHV0O1xuICAgIH1cbiAgICBpZiAoIXIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgbCA9IGQuZ2V0RGVlcGVzdE5vZGUociwgdCA9PT0gdGhpcy5wb3NpdGlvbnMuRU5EKSwgYSA9IGQuZ2V0Q29udGVudExlbmd0aChsKTtcbiAgICBzd2l0Y2ggKCEwKSB7XG4gICAgICBjYXNlIHQgPT09IHRoaXMucG9zaXRpb25zLlNUQVJUOlxuICAgICAgICBvID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHQgPT09IHRoaXMucG9zaXRpb25zLkVORDpcbiAgICAgIGNhc2UgbyA+IGE6XG4gICAgICAgIG8gPSBhO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy5zZXQobCwgbyksIGkuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZS5ob2xkZXIpLCBpLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQgPSByO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgY2FyZXQgdG8gdGhlIGN1cnJlbnQgaW5wdXQgb2YgY3VycmVudCBCbG9jay5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5wdXQgLSBpbnB1dCB3aGVyZSBjYXJldCBzaG91bGQgYmUgc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uIG9mIHRoZSBjYXJldC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgZGVmYXVsdCAtIGxlYXZlIGRlZmF1bHQgYmVoYXZpb3VyIGFuZCBhcHBseSBvZmZzZXQgaWYgaXQncyBwYXNzZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIGNhcmV0IG9mZnNldCByZWdhcmRpbmcgdG8gdGhlIHRleHQgbm9kZVxuICAgKi9cbiAgc2V0VG9JbnB1dChlLCB0ID0gdGhpcy5wb3NpdGlvbnMuREVGQVVMVCwgbyA9IDApIHtcbiAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLCBzID0gZC5nZXREZWVwZXN0Tm9kZShlKTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuU1RBUlQ6XG4gICAgICAgIHRoaXMuc2V0KHMsIDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuRU5EOlxuICAgICAgICB0aGlzLnNldChzLCBkLmdldENvbnRlbnRMZW5ndGgocykpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8gJiYgdGhpcy5zZXQocywgbyk7XG4gICAgfVxuICAgIGkuY3VycmVudElucHV0ID0gZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBEb2N1bWVudCBSYW5nZSBhbmQgc2V0cyBjYXJldCB0byB0aGUgZWxlbWVudCB3aXRoIG9mZnNldFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBvZmZzZXRcbiAgICovXG4gIHNldChlLCB0ID0gMCkge1xuICAgIGNvbnN0IHsgdG9wOiBpLCBib3R0b206IHMgfSA9IGIuc2V0Q3Vyc29yKGUsIHQpLCB7IGlubmVySGVpZ2h0OiByIH0gPSB3aW5kb3c7XG4gICAgaSA8IDAgPyB3aW5kb3cuc2Nyb2xsQnkoMCwgaSAtIDMwKSA6IHMgPiByICYmIHdpbmRvdy5zY3JvbGxCeSgwLCBzIC0gciArIDMwKTtcbiAgfVxuICAvKipcbiAgICogU2V0IENhcmV0IHRvIHRoZSBsYXN0IEJsb2NrXG4gICAqIElmIGxhc3QgYmxvY2sgaXMgbm90IGVtcHR5LCBhcHBlbmQgYW5vdGhlciBlbXB0eSBibG9ja1xuICAgKi9cbiAgc2V0VG9UaGVMYXN0QmxvY2soKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2s7XG4gICAgaWYgKGUpXG4gICAgICBpZiAoZS50b29sLmlzRGVmYXVsdCAmJiBlLmlzRW1wdHkpXG4gICAgICAgIHRoaXMuc2V0VG9CbG9jayhlKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydEF0RW5kKCk7XG4gICAgICAgIHRoaXMuc2V0VG9CbG9jayh0KTtcbiAgICAgIH1cbiAgfVxuICAvKipcbiAgICogRXh0cmFjdCBjb250ZW50IGZyYWdtZW50IG9mIGN1cnJlbnQgQmxvY2sgZnJvbSBDYXJldCBwb3NpdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBCbG9ja1xuICAgKi9cbiAgZXh0cmFjdEZyYWdtZW50RnJvbUNhcmV0UG9zaXRpb24oKSB7XG4gICAgY29uc3QgZSA9IGIuZ2V0KCk7XG4gICAgaWYgKGUucmFuZ2VDb3VudCkge1xuICAgICAgY29uc3QgdCA9IGUuZ2V0UmFuZ2VBdCgwKSwgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suY3VycmVudElucHV0O1xuICAgICAgaWYgKHQuZGVsZXRlQ29udGVudHMoKSwgbylcbiAgICAgICAgaWYgKGQuaXNOYXRpdmVJbnB1dChvKSkge1xuICAgICAgICAgIGNvbnN0IGkgPSBvLCBzID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCByID0gaS52YWx1ZS5zdWJzdHJpbmcoMCwgaS5zZWxlY3Rpb25TdGFydCksIGwgPSBpLnZhbHVlLnN1YnN0cmluZyhpLnNlbGVjdGlvblN0YXJ0KTtcbiAgICAgICAgICByZXR1cm4gcy50ZXh0Q29udGVudCA9IGwsIGkudmFsdWUgPSByLCBzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGkgPSB0LmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICByZXR1cm4gaS5zZWxlY3ROb2RlQ29udGVudHMobyksIGkuc2V0U3RhcnQodC5lbmRDb250YWluZXIsIHQuZW5kT2Zmc2V0KSwgaS5leHRyYWN0Q29udGVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0J3MgY2FyZXQgdG8gdGhlIG5leHQgQmxvY2sgb3IgVG9vbGBzIGlucHV0XG4gICAqIEJlZm9yZSBtb3ZpbmcgY2FyZXQsIHdlIHNob3VsZCBjaGVjayBpZiBjYXJldCBwb3NpdGlvbiBpcyBhdCB0aGUgZW5kIG9mIFBsdWdpbnMgbm9kZVxuICAgKiBVc2luZyB7QGxpbmsgRG9tI2dldERlZXBlc3ROb2RlfSB0byBnZXQgYSBsYXN0IG5vZGUgYW5kIG1hdGNoIHdpdGggY3VycmVudCBzZWxlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBmb3JjZSAtIHBhc3MgdHJ1ZSB0byBza2lwIGNoZWNrIGZvciBjYXJldCBwb3NpdGlvblxuICAgKi9cbiAgbmF2aWdhdGVOZXh0KGUgPSAhMSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0IH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IG8sIG5leHRCbG9jazogaSB9ID0gdDtcbiAgICBpZiAobyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHsgbmV4dElucHV0OiBzLCBjdXJyZW50SW5wdXQ6IHIgfSA9IG8sIGwgPSByICE9PSB2b2lkIDAgPyBBZShyKSA6IHZvaWQgMDtcbiAgICBsZXQgYSA9IGk7XG4gICAgY29uc3QgYyA9IGUgfHwgbCB8fCAhby5mb2N1c2FibGU7XG4gICAgaWYgKHMgJiYgYylcbiAgICAgIHJldHVybiB0aGlzLnNldFRvSW5wdXQocywgdGhpcy5wb3NpdGlvbnMuU1RBUlQpLCAhMDtcbiAgICBpZiAoYSA9PT0gbnVsbCkge1xuICAgICAgaWYgKG8udG9vbC5pc0RlZmF1bHQgfHwgIWMpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGEgPSB0Lmluc2VydEF0RW5kKCk7XG4gICAgfVxuICAgIHJldHVybiBjID8gKHRoaXMuc2V0VG9CbG9jayhhLCB0aGlzLnBvc2l0aW9ucy5TVEFSVCksICEwKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBTZXQncyBjYXJldCB0byB0aGUgcHJldmlvdXMgVG9vbGBzIGlucHV0IG9yIEJsb2NrXG4gICAqIEJlZm9yZSBtb3ZpbmcgY2FyZXQsIHdlIHNob3VsZCBjaGVjayBpZiBjYXJldCBwb3NpdGlvbiBpcyBzdGFydCBvZiB0aGUgUGx1Z2lucyBub2RlXG4gICAqIFVzaW5nIHtAbGluayBEb20jZ2V0RGVlcGVzdE5vZGV9IHRvIGdldCBhIGxhc3Qgbm9kZSBhbmQgbWF0Y2ggd2l0aCBjdXJyZW50IHNlbGVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIC0gcGFzcyB0cnVlIHRvIHNraXAgY2hlY2sgZm9yIGNhcmV0IHBvc2l0aW9uXG4gICAqL1xuICBuYXZpZ2F0ZVByZXZpb3VzKGUgPSAhMSkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiB0LCBwcmV2aW91c0Jsb2NrOiBvIH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHsgcHJldmlvdXNJbnB1dDogaSwgY3VycmVudElucHV0OiBzIH0gPSB0LCByID0gcyAhPT0gdm9pZCAwID8gTWUocykgOiB2b2lkIDAsIGwgPSBlIHx8IHIgfHwgIXQuZm9jdXNhYmxlO1xuICAgIHJldHVybiBpICYmIGwgPyAodGhpcy5zZXRUb0lucHV0KGksIHRoaXMucG9zaXRpb25zLkVORCksICEwKSA6IG8gIT09IG51bGwgJiYgbCA/ICh0aGlzLnNldFRvQmxvY2sobywgdGhpcy5wb3NpdGlvbnMuRU5EKSwgITApIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgc2hhZG93IGVsZW1lbnQgYWZ0ZXIgcGFzc2VkIGVsZW1lbnQgd2hlcmUgY2FyZXQgY2FuIGJlIHBsYWNlZFxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IGFmdGVyIHdoaWNoIHNoYWRvdyBjYXJldCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICovXG4gIGNyZWF0ZVNoYWRvdyhlKSB7XG4gICAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIHQuY2xhc3NMaXN0LmFkZChSZS5DU1Muc2hhZG93Q2FyZXQpLCBlLmluc2VydEFkamFjZW50RWxlbWVudChcImJlZm9yZWVuZFwiLCB0KTtcbiAgfVxuICAvKipcbiAgICogUmVzdG9yZXMgY2FyZXQgcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgd2hlcmUgY2FyZXQgc2hvdWxkIGJlIHJlc3RvcmVkXG4gICAqL1xuICByZXN0b3JlQ2FyZXQoZSkge1xuICAgIGNvbnN0IHQgPSBlLnF1ZXJ5U2VsZWN0b3IoYC4ke1JlLkNTUy5zaGFkb3dDYXJldH1gKTtcbiAgICBpZiAoIXQpXG4gICAgICByZXR1cm47XG4gICAgbmV3IGIoKS5leHBhbmRUb1RhZyh0KTtcbiAgICBjb25zdCBpID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBpLnNlbGVjdE5vZGUodCksIGkuZXh0cmFjdENvbnRlbnRzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgcGFzc2VkIGNvbnRlbnQgYXQgY2FyZXQgcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSBjb250ZW50IHRvIGluc2VydFxuICAgKi9cbiAgaW5zZXJ0Q29udGVudEF0Q2FyZXRQb3NpdGlvbihlKSB7XG4gICAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSwgbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIGkgPSBiLmdldCgpLCBzID0gYi5yYW5nZTtcbiAgICBvLmlubmVySFRNTCA9IGUsIEFycmF5LmZyb20oby5jaGlsZE5vZGVzKS5mb3JFYWNoKChjKSA9PiB0LmFwcGVuZENoaWxkKGMpKSwgdC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMCAmJiB0LmFwcGVuZENoaWxkKG5ldyBUZXh0KCkpO1xuICAgIGNvbnN0IHIgPSB0Lmxhc3RDaGlsZDtcbiAgICBzLmRlbGV0ZUNvbnRlbnRzKCksIHMuaW5zZXJ0Tm9kZSh0KTtcbiAgICBjb25zdCBsID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSwgYSA9IHIubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFID8gciA6IHIuZmlyc3RDaGlsZDtcbiAgICBhICE9PSBudWxsICYmIGEudGV4dENvbnRlbnQgIT09IG51bGwgJiYgbC5zZXRTdGFydChhLCBhLnRleHRDb250ZW50Lmxlbmd0aCksIGkucmVtb3ZlQWxsUmFuZ2VzKCksIGkuYWRkUmFuZ2UobCk7XG4gIH1cbn1cbmNsYXNzIG9zIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMub25Nb3VzZVVwID0gKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LCBcIm1vdXNlb3ZlclwiLCB0aGlzLm9uTW91c2VPdmVyKSwgdGhpcy5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LCBcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIH0sIHRoaXMub25Nb3VzZU92ZXIgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgPT09IG51bGwgJiYgZS50YXJnZXQgPT09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGkgPSB0LmdldEJsb2NrQnlDaGlsZE5vZGUoZS5yZWxhdGVkVGFyZ2V0KSB8fCB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrLCBzID0gdC5nZXRCbG9ja0J5Q2hpbGROb2RlKGUudGFyZ2V0KTtcbiAgICAgIGlmICghKCFpIHx8ICFzKSAmJiBzICE9PSBpKSB7XG4gICAgICAgIGlmIChpID09PSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaykge1xuICAgICAgICAgIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksIGkuc2VsZWN0ZWQgPSAhMCwgcy5zZWxlY3RlZCA9ICEwLCBvLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMgPT09IHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrKSB7XG4gICAgICAgICAgaS5zZWxlY3RlZCA9ICExLCBzLnNlbGVjdGVkID0gITEsIG8uY2xlYXJDYWNoZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksIHRoaXMudG9nZ2xlQmxvY2tzU2VsZWN0ZWRTdGF0ZShpLCBzKSwgdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayA9IHM7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIHByZXBhcmF0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZW5hYmxlQ3Jvc3NCbG9ja1NlbGVjdGlvbihlKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB1cCBsaXN0ZW5lcnNcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIG1vdXNlIGRvd24gZXZlbnRcbiAgICovXG4gIHdhdGNoU2VsZWN0aW9uKGUpIHtcbiAgICBpZiAoZS5idXR0b24gIT09IHdvLkxFRlQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrID0gdC5nZXRCbG9jayhlLnRhcmdldCksIHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaywgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQsIFwibW91c2VvdmVyXCIsIHRoaXMub25Nb3VzZU92ZXIpLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGJvb2xlYW4gaXMgY3Jvc3MgYmxvY2sgc2VsZWN0aW9uIHN0YXJ0ZWQ6XG4gICAqIHRoZXJlIHNob3VsZCBiZSBhdCBsZWFzdCAyIHNlbGVjdGVkIGJsb2Nrc1xuICAgKi9cbiAgZ2V0IGlzQ3Jvc3NCbG9ja1NlbGVjdGlvblN0YXJ0ZWQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5maXJzdFNlbGVjdGVkQmxvY2sgJiYgISF0aGlzLmxhc3RTZWxlY3RlZEJsb2NrICYmIHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrICE9PSB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2Ugc2VsZWN0aW9uIHN0YXRlIG9mIHRoZSBuZXh0IEJsb2NrXG4gICAqIFVzZWQgZm9yIENCUyB2aWEgU2hpZnQgKyBhcnJvdyBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gbmV4dCAtIGlmIHRydWUsIHRvZ2dsZSBuZXh0IGJsb2NrLiBQcmV2aW91cyBvdGhlcndpc2VcbiAgICovXG4gIHRvZ2dsZUJsb2NrU2VsZWN0ZWRTdGF0ZShlID0gITApIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQmxvY2tTZWxlY3Rpb246IG8gfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgfHwgKHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayA9IHQuY3VycmVudEJsb2NrKSwgdGhpcy5maXJzdFNlbGVjdGVkQmxvY2sgPT09IHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgJiYgKHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrLnNlbGVjdGVkID0gITAsIG8uY2xlYXJDYWNoZSgpLCBiLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpKTtcbiAgICBjb25zdCBpID0gdC5ibG9ja3MuaW5kZXhPZih0aGlzLmxhc3RTZWxlY3RlZEJsb2NrKSArIChlID8gMSA6IC0xKSwgcyA9IHQuYmxvY2tzW2ldO1xuICAgIHMgJiYgKHRoaXMubGFzdFNlbGVjdGVkQmxvY2suc2VsZWN0ZWQgIT09IHMuc2VsZWN0ZWQgPyAocy5zZWxlY3RlZCA9ICEwLCBvLmNsZWFyQ2FjaGUoKSkgOiAodGhpcy5sYXN0U2VsZWN0ZWRCbG9jay5zZWxlY3RlZCA9ICExLCBvLmNsZWFyQ2FjaGUoKSksIHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSBzLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksIHMuaG9sZGVyLnNjcm9sbEludG9WaWV3KHtcbiAgICAgIGJsb2NrOiBcIm5lYXJlc3RcIlxuICAgIH0pKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgc2F2ZWQgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gcmVhc29uIC0gZXZlbnQgY2F1c2VkIGNsZWFyIG9mIHNlbGVjdGlvblxuICAgKi9cbiAgY2xlYXIoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbywgQ2FyZXQ6IGkgfSA9IHRoaXMuRWRpdG9yLCBzID0gdC5ibG9ja3MuaW5kZXhPZih0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayksIHIgPSB0LmJsb2Nrcy5pbmRleE9mKHRoaXMubGFzdFNlbGVjdGVkQmxvY2spO1xuICAgIGlmIChvLmFueUJsb2NrU2VsZWN0ZWQgJiYgcyA+IC0xICYmIHIgPiAtMSAmJiBlICYmIGUgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50KVxuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSB3LkRPV046XG4gICAgICAgIGNhc2Ugdy5SSUdIVDpcbiAgICAgICAgICBpLnNldFRvQmxvY2sodC5ibG9ja3NbTWF0aC5tYXgocywgcildLCBpLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHcuVVA6XG4gICAgICAgIGNhc2Ugdy5MRUZUOlxuICAgICAgICAgIGkuc2V0VG9CbG9jayh0LmJsb2Nrc1tNYXRoLm1pbihzLCByKV0sIGkucG9zaXRpb25zLlNUQVJUKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpLnNldFRvQmxvY2sodC5ibG9ja3NbTWF0aC5tYXgocywgcildLCBpLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgfVxuICAgIHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrID0gdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgQ3Jvc3MgQmxvY2sgU2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBtb3VzZSBkb3duIGV2ZW50XG4gICAqL1xuICBlbmFibGVDcm9zc0Jsb2NrU2VsZWN0aW9uKGUpIHtcbiAgICBjb25zdCB7IFVJOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICBiLmlzQ29sbGFwc2VkIHx8IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKGUpLCB0Lm5vZGVzLnJlZGFjdG9yLmNvbnRhaW5zKGUudGFyZ2V0KSA/IHRoaXMud2F0Y2hTZWxlY3Rpb24oZSkgOiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgfVxuICAvKipcbiAgICogQ2hhbmdlIGJsb2NrcyBzZWxlY3Rpb24gc3RhdGUgYmV0d2VlbiBwYXNzZWQgdHdvIGJsb2Nrcy5cbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gZmlyc3RCbG9jayAtIGZpcnN0IGJsb2NrIGluIHJhbmdlXG4gICAqIEBwYXJhbSB7QmxvY2t9IGxhc3RCbG9jayAtIGxhc3QgYmxvY2sgaW4gcmFuZ2VcbiAgICovXG4gIHRvZ2dsZUJsb2Nrc1NlbGVjdGVkU3RhdGUoZSwgdCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBvLCBCbG9ja1NlbGVjdGlvbjogaSB9ID0gdGhpcy5FZGl0b3IsIHMgPSBvLmJsb2Nrcy5pbmRleE9mKGUpLCByID0gby5ibG9ja3MuaW5kZXhPZih0KSwgbCA9IGUuc2VsZWN0ZWQgIT09IHQuc2VsZWN0ZWQ7XG4gICAgZm9yIChsZXQgYSA9IE1hdGgubWluKHMsIHIpOyBhIDw9IE1hdGgubWF4KHMsIHIpOyBhKyspIHtcbiAgICAgIGNvbnN0IGMgPSBvLmJsb2Nrc1thXTtcbiAgICAgIGMgIT09IHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrICYmIGMgIT09IChsID8gZSA6IHQpICYmIChvLmJsb2Nrc1thXS5zZWxlY3RlZCA9ICFvLmJsb2Nrc1thXS5zZWxlY3RlZCwgaS5jbGVhckNhY2hlKCkpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgaXMgZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5pc1N0YXJ0ZWRBdEVkaXRvciA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGUgcmVhZC1vbmx5IHN0YXRlXG4gICAqXG4gICAqIGlmIHN0YXRlIGlzIHRydWU6XG4gICAqICAtIGRpc2FibGUgYWxsIGRyYWctbi1kcm9wIGV2ZW50IGhhbmRsZXJzXG4gICAqXG4gICAqIGlmIHN0YXRlIGlzIGZhbHNlOlxuICAgKiAgLSByZXN0b3JlIGRyYWctbi1kcm9wIGV2ZW50IGhhbmRsZXJzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVhZE9ubHlFbmFibGVkIC0gXCJyZWFkIG9ubHlcIiBzdGF0ZVxuICAgKi9cbiAgdG9nZ2xlUmVhZE9ubHkoZSkge1xuICAgIGUgPyB0aGlzLmRpc2FibGVNb2R1bGVCaW5kaW5ncygpIDogdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgZHJhZyBldmVudHMgbGlzdGVuZXJzIHRvIGVkaXRvciB6b25lXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICBjb25zdCB7IFVJOiBlIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLm5vZGVzLmhvbGRlciwgXCJkcm9wXCIsIGFzeW5jICh0KSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLnByb2Nlc3NEcm9wKHQpO1xuICAgIH0sICEwKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ub2Rlcy5ob2xkZXIsIFwiZHJhZ3N0YXJ0XCIsICgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc0RyYWdTdGFydCgpO1xuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLm5vZGVzLmhvbGRlciwgXCJkcmFnb3ZlclwiLCAodCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzRHJhZ092ZXIodCk7XG4gICAgfSwgITApO1xuICB9XG4gIC8qKlxuICAgKiBVbmJpbmQgZHJhZy1uLWRyb3AgZXZlbnQgaGFuZGxlcnNcbiAgICovXG4gIGRpc2FibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5jbGVhckFsbCgpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgZHJvcCBldmVudFxuICAgKlxuICAgKiBAcGFyYW0ge0RyYWdFdmVudH0gZHJvcEV2ZW50IC0gZHJvcCBldmVudFxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0Ryb3AoZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIEJsb2NrTWFuYWdlcjogdCxcbiAgICAgIFBhc3RlOiBvLFxuICAgICAgQ2FyZXQ6IGlcbiAgICB9ID0gdGhpcy5FZGl0b3I7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpLCB0LmJsb2Nrcy5mb3JFYWNoKChyKSA9PiB7XG4gICAgICByLmRyb3BUYXJnZXQgPSAhMTtcbiAgICB9KSwgYi5pc0F0RWRpdG9yICYmICFiLmlzQ29sbGFwc2VkICYmIHRoaXMuaXNTdGFydGVkQXRFZGl0b3IgJiYgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJkZWxldGVcIiksIHRoaXMuaXNTdGFydGVkQXRFZGl0b3IgPSAhMTtcbiAgICBjb25zdCBzID0gdC5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShlLnRhcmdldCk7XG4gICAgaWYgKHMpXG4gICAgICB0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHMsIGkucG9zaXRpb25zLkVORCk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCByID0gdC5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZSh0Lmxhc3RCbG9jay5ob2xkZXIpO1xuICAgICAgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhyLCBpLnBvc2l0aW9ucy5FTkQpO1xuICAgIH1cbiAgICBhd2FpdCBvLnByb2Nlc3NEYXRhVHJhbnNmZXIoZS5kYXRhVHJhbnNmZXIsICEwKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGRyYWcgc3RhcnQgZXZlbnRcbiAgICovXG4gIHByb2Nlc3NEcmFnU3RhcnQoKSB7XG4gICAgYi5pc0F0RWRpdG9yICYmICFiLmlzQ29sbGFwc2VkICYmICh0aGlzLmlzU3RhcnRlZEF0RWRpdG9yID0gITApLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBkcmFnRXZlbnQgLSBkcmFnIGV2ZW50XG4gICAqL1xuICBwcm9jZXNzRHJhZ092ZXIoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxufVxuY29uc3Qgc3MgPSAxODAsIG5zID0gNDAwO1xuY2xhc3MgcnMgZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIFByZXBhcmUgdGhlIG1vZHVsZVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIG9wdGlvbnMgdXNlZCBieSB0aGUgbW9kaWZpY2F0aW9uIG9ic2VydmVyIG1vZHVsZVxuICAgKiBAcGFyYW0gb3B0aW9ucy5jb25maWcgLSBFZGl0b3IgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICogQHBhcmFtIG9wdGlvbnMuZXZlbnRzRGlzcGF0Y2hlciAtIGNvbW1vbiBFZGl0b3IgZXZlbnQgYnVzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogZSwgZXZlbnRzRGlzcGF0Y2hlcjogdCB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY29uZmlnOiBlLFxuICAgICAgZXZlbnRzRGlzcGF0Y2hlcjogdFxuICAgIH0pLCB0aGlzLmRpc2FibGVkID0gITEsIHRoaXMuYmF0Y2hpbmdUaW1lb3V0ID0gbnVsbCwgdGhpcy5iYXRjaGluZ09uQ2hhbmdlUXVldWUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLCB0aGlzLmJhdGNoVGltZSA9IG5zLCB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobykgPT4ge1xuICAgICAgdGhpcy5yZWRhY3RvckNoYW5nZWQobyk7XG4gICAgfSksIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5vbihQdCwgKG8pID0+IHtcbiAgICAgIHRoaXMucGFydGljdWxhckJsb2NrQ2hhbmdlZChvLmV2ZW50KTtcbiAgICB9KSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKER0LCAoKSA9PiB7XG4gICAgICB0aGlzLmRpc2FibGUoKTtcbiAgICB9KSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKFJ0LCAoKSA9PiB7XG4gICAgICB0aGlzLmVuYWJsZSgpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGVzIG9uQ2hhbmdlIGV2ZW50XG4gICAqL1xuICBlbmFibGUoKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUoXG4gICAgICB0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIHtcbiAgICAgICAgY2hpbGRMaXN0OiAhMCxcbiAgICAgICAgc3VidHJlZTogITAsXG4gICAgICAgIGNoYXJhY3RlckRhdGE6ICEwLFxuICAgICAgICBhdHRyaWJ1dGVzOiAhMFxuICAgICAgfVxuICAgICksIHRoaXMuZGlzYWJsZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgb25DaGFuZ2UgZXZlbnRcbiAgICovXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKSwgdGhpcy5kaXNhYmxlZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIG9uQ2hhbmdlIGV2ZW50IHBhc3NlZCB0byBFZGl0b3IuanMgY29uZmlndXJhdGlvblxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBzb21lIG9mIG91ciBjdXN0b20gY2hhbmdlIGV2ZW50c1xuICAgKi9cbiAgcGFydGljdWxhckJsb2NrQ2hhbmdlZChlKSB7XG4gICAgdGhpcy5kaXNhYmxlZCB8fCAhTyh0aGlzLmNvbmZpZy5vbkNoYW5nZSkgfHwgKHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnNldChgYmxvY2s6JHtlLmRldGFpbC50YXJnZXQuaWR9OmV2ZW50OiR7ZS50eXBlfWAsIGUpLCB0aGlzLmJhdGNoaW5nVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5iYXRjaGluZ1RpbWVvdXQpLCB0aGlzLmJhdGNoaW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgbGV0IHQ7XG4gICAgICB0aGlzLmJhdGNoaW5nT25DaGFuZ2VRdWV1ZS5zaXplID09PSAxID8gdCA9IHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnZhbHVlcygpLm5leHQoKS52YWx1ZSA6IHQgPSBBcnJheS5mcm9tKHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnZhbHVlcygpKSwgdGhpcy5jb25maWcub25DaGFuZ2UgJiYgdGhpcy5jb25maWcub25DaGFuZ2UodGhpcy5FZGl0b3IuQVBJLm1ldGhvZHMsIHQpLCB0aGlzLmJhdGNoaW5nT25DaGFuZ2VRdWV1ZS5jbGVhcigpO1xuICAgIH0sIHRoaXMuYmF0Y2hUaW1lKSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcmVkIG9uIGV2ZXJ5IGJsb2NrcyB3cmFwcGVyIGRvbSBjaGFuZ2VcbiAgICpcbiAgICogQHBhcmFtIG11dGF0aW9ucyAtIG11dGF0aW9ucyBoYXBwZW5lZFxuICAgKi9cbiAgcmVkYWN0b3JDaGFuZ2VkKGUpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChKZSwge1xuICAgICAgbXV0YXRpb25zOiBlXG4gICAgfSk7XG4gIH1cbn1cbmNvbnN0IHJvID0gY2xhc3MgbG8gZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5NSU1FX1RZUEUgPSBcImFwcGxpY2F0aW9uL3gtZWRpdG9yLWpzXCIsIHRoaXMudG9vbHNUYWdzID0ge30sIHRoaXMudGFnc0J5VG9vbCA9IHt9LCB0aGlzLnRvb2xzUGF0dGVybnMgPSBbXSwgdGhpcy50b29sc0ZpbGVzID0ge30sIHRoaXMuZXhjZXB0aW9uTGlzdCA9IFtdLCB0aGlzLnByb2Nlc3NUb29sID0gKGUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHQgPSBlLmNyZWF0ZSh7fSwge30sICExKTtcbiAgICAgICAgaWYgKGUucGFzdGVDb25maWcgPT09ICExKSB7XG4gICAgICAgICAgdGhpcy5leGNlcHRpb25MaXN0LnB1c2goZS5uYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFPKHQub25QYXN0ZSkpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmdldFRhZ3NDb25maWcoZSksIHRoaXMuZ2V0RmlsZXNDb25maWcoZSksIHRoaXMuZ2V0UGF0dGVybnNDb25maWcoZSk7XG4gICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgIEkoXG4gICAgICAgICAgYFBhc3RlIGhhbmRsaW5nIGZvciDCqyR7ZS5uYW1lfcK7IFRvb2wgaGFzbid0IGJlZW4gc2V0IHVwIGJlY2F1c2Ugb2YgdGhlIGVycm9yYCxcbiAgICAgICAgICBcIndhcm5cIixcbiAgICAgICAgICB0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSwgdGhpcy5oYW5kbGVQYXN0ZUV2ZW50ID0gYXN5bmMgKGUpID0+IHtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBUb29sYmFyOiBvIH0gPSB0aGlzLkVkaXRvciwgaSA9IHQuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgICAgIWkgfHwgdGhpcy5pc05hdGl2ZUJlaGF2aW91cihlLnRhcmdldCkgJiYgIWUuY2xpcGJvYXJkRGF0YS50eXBlcy5pbmNsdWRlcyhcIkZpbGVzXCIpIHx8IGkgJiYgdGhpcy5leGNlcHRpb25MaXN0LmluY2x1ZGVzKGkubmFtZSkgfHwgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5wcm9jZXNzRGF0YVRyYW5zZmVyKGUuY2xpcGJvYXJkRGF0YSksIG8uY2xvc2UoKSk7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2V0IG9uUGFzdGUgY2FsbGJhY2sgYW5kIGNvbGxlY3QgdG9vbHNgIHBhc3RlIGNvbmZpZ3VyYXRpb25zXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKCkge1xuICAgIHRoaXMucHJvY2Vzc1Rvb2xzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWFkT25seUVuYWJsZWQgLSByZWFkIG9ubHkgZmxhZyB2YWx1ZVxuICAgKi9cbiAgdG9nZ2xlUmVhZE9ubHkoZSkge1xuICAgIGUgPyB0aGlzLnVuc2V0Q2FsbGJhY2soKSA6IHRoaXMuc2V0Q2FsbGJhY2soKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHBhc3RlZCBvciBkcm9wcGVkIGRhdGEgdHJhbnNmZXIgb2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7RGF0YVRyYW5zZmVyfSBkYXRhVHJhbnNmZXIgLSBwYXN0ZWQgb3IgZHJvcHBlZCBkYXRhIHRyYW5zZmVyIG9iamVjdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzRHJhZ05Ecm9wIC0gdHJ1ZSBpZiBkYXRhIHRyYW5zZmVyIGNvbWVzIGZyb20gZHJhZyduJ2Ryb3AgZXZlbnRzXG4gICAqL1xuICBhc3luYyBwcm9jZXNzRGF0YVRyYW5zZmVyKGUsIHQgPSAhMSkge1xuICAgIGNvbnN0IHsgVG9vbHM6IG8gfSA9IHRoaXMuRWRpdG9yLCBpID0gZS50eXBlcztcbiAgICBpZiAoKGkuaW5jbHVkZXMgPyBpLmluY2x1ZGVzKFwiRmlsZXNcIikgOiBpLmNvbnRhaW5zKFwiRmlsZXNcIikpICYmICFWKHRoaXMudG9vbHNGaWxlcykpIHtcbiAgICAgIGF3YWl0IHRoaXMucHJvY2Vzc0ZpbGVzKGUuZmlsZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByID0gZS5nZXREYXRhKHRoaXMuTUlNRV9UWVBFKSwgbCA9IGUuZ2V0RGF0YShcInRleHQvcGxhaW5cIik7XG4gICAgbGV0IGEgPSBlLmdldERhdGEoXCJ0ZXh0L2h0bWxcIik7XG4gICAgaWYgKHIpXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmluc2VydEVkaXRvckpTRGF0YShKU09OLnBhcnNlKHIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICB9XG4gICAgdCAmJiBsLnRyaW0oKSAmJiBhLnRyaW0oKSAmJiAoYSA9IFwiPHA+XCIgKyAoYS50cmltKCkgPyBhIDogbCkgKyBcIjwvcD5cIik7XG4gICAgY29uc3QgYyA9IE9iamVjdC5rZXlzKHRoaXMudG9vbHNUYWdzKS5yZWR1Y2UoKHAsIGcpID0+IChwW2cudG9Mb3dlckNhc2UoKV0gPSB0aGlzLnRvb2xzVGFnc1tnXS5zYW5pdGl6YXRpb25Db25maWcgPz8ge30sIHApLCB7fSksIHUgPSBPYmplY3QuYXNzaWduKHt9LCBjLCBvLmdldEFsbElubGluZVRvb2xzU2FuaXRpemVDb25maWcoKSwgeyBicjoge30gfSksIGggPSBxKGEsIHUpO1xuICAgICFoLnRyaW0oKSB8fCBoLnRyaW0oKSA9PT0gbCB8fCAhZC5pc0hUTUxTdHJpbmcoaCkgPyBhd2FpdCB0aGlzLnByb2Nlc3NUZXh0KGwpIDogYXdhaXQgdGhpcy5wcm9jZXNzVGV4dChoLCAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3MgcGFzdGVkIHRleHQgYW5kIGRpdmlkZSB0aGVtIGludG8gQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIC0gdGV4dCB0byBwcm9jZXNzLiBDYW4gYmUgSFRNTCBvciBwbGFpbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0hUTUwgLSBpZiBwYXNzZWQgc3RyaW5nIGlzIEhUTUwsIHRoaXMgcGFyYW1ldGVyIHNob3VsZCBiZSB0cnVlXG4gICAqL1xuICBhc3luYyBwcm9jZXNzVGV4dChlLCB0ID0gITEpIHtcbiAgICBjb25zdCB7IENhcmV0OiBvLCBCbG9ja01hbmFnZXI6IGkgfSA9IHRoaXMuRWRpdG9yLCBzID0gdCA/IHRoaXMucHJvY2Vzc0hUTUwoZSkgOiB0aGlzLnByb2Nlc3NQbGFpbihlKTtcbiAgICBpZiAoIXMubGVuZ3RoKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgc1swXS5pc0Jsb2NrID8gdGhpcy5wcm9jZXNzU2luZ2xlQmxvY2socy5wb3AoKSkgOiB0aGlzLnByb2Nlc3NJbmxpbmVQYXN0ZShzLnBvcCgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbCA9IGkuY3VycmVudEJsb2NrICYmIGkuY3VycmVudEJsb2NrLnRvb2wuaXNEZWZhdWx0ICYmIGkuY3VycmVudEJsb2NrLmlzRW1wdHk7XG4gICAgcy5tYXAoXG4gICAgICBhc3luYyAoYSwgYykgPT4gdGhpcy5pbnNlcnRCbG9jayhhLCBjID09PSAwICYmIGwpXG4gICAgKSwgaS5jdXJyZW50QmxvY2sgJiYgby5zZXRUb0Jsb2NrKGkuY3VycmVudEJsb2NrLCBvLnBvc2l0aW9ucy5FTkQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgb25QYXN0ZSBjYWxsYmFjayBoYW5kbGVyXG4gICAqL1xuICBzZXRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vbih0aGlzLkVkaXRvci5VSS5ub2Rlcy5ob2xkZXIsIFwicGFzdGVcIiwgdGhpcy5oYW5kbGVQYXN0ZUV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogVW5zZXQgb25QYXN0ZSBjYWxsYmFjayBoYW5kbGVyXG4gICAqL1xuICB1bnNldENhbGxiYWNrKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm9mZih0aGlzLkVkaXRvci5VSS5ub2Rlcy5ob2xkZXIsIFwicGFzdGVcIiwgdGhpcy5oYW5kbGVQYXN0ZUV2ZW50KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFuZCBwcm9jZXNzIHRvb2xgcyBwYXN0ZSBjb25maWdzXG4gICAqL1xuICBwcm9jZXNzVG9vbHMoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuRWRpdG9yLlRvb2xzLmJsb2NrVG9vbHM7XG4gICAgQXJyYXkuZnJvbShlLnZhbHVlcygpKS5mb3JFYWNoKHRoaXMucHJvY2Vzc1Rvb2wpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGFncyBuYW1lIGxpc3QgZnJvbSBlaXRoZXIgdGFnIG5hbWUgb3Igc2FuaXRpemF0aW9uIGNvbmZpZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBvYmplY3R9IHRhZ09yU2FuaXRpemVDb25maWcgLSB0YWcgbmFtZSBvciBzYW5pdGl6ZSBjb25maWcgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119IGFycmF5IG9mIHRhZ3MuXG4gICAqL1xuICBjb2xsZWN0VGFnTmFtZXMoZSkge1xuICAgIHJldHVybiBRKGUpID8gW2VdIDogUihlKSA/IE9iamVjdC5rZXlzKGUpIDogW107XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0YWdzIHRvIHN1YnN0aXR1dGUgYnkgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIEJsb2NrVG9vbCBvYmplY3RcbiAgICovXG4gIGdldFRhZ3NDb25maWcoZSkge1xuICAgIGlmIChlLnBhc3RlQ29uZmlnID09PSAhMSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0ID0gZS5wYXN0ZUNvbmZpZy50YWdzIHx8IFtdLCBvID0gW107XG4gICAgdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBjb25zdCBzID0gdGhpcy5jb2xsZWN0VGFnTmFtZXMoaSk7XG4gICAgICBvLnB1c2goLi4ucyksIHMuZm9yRWFjaCgocikgPT4ge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMudG9vbHNUYWdzLCByKSkge1xuICAgICAgICAgIEkoXG4gICAgICAgICAgICBgUGFzdGUgaGFuZGxlciBmb3Igwqske2UubmFtZX3CuyBUb29sIG9uIMKrJHtyfcK7IHRhZyBpcyBza2lwcGVkIGJlY2F1c2UgaXQgaXMgYWxyZWFkeSB1c2VkIGJ5IMKrJHt0aGlzLnRvb2xzVGFnc1tyXS50b29sLm5hbWV9wrsgVG9vbC5gLFxuICAgICAgICAgICAgXCJ3YXJuXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsID0gUihpKSA/IGlbcl0gOiBudWxsO1xuICAgICAgICB0aGlzLnRvb2xzVGFnc1tyLnRvVXBwZXJDYXNlKCldID0ge1xuICAgICAgICAgIHRvb2w6IGUsXG4gICAgICAgICAgc2FuaXRpemF0aW9uQ29uZmlnOiBsXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KSwgdGhpcy50YWdzQnlUb29sW2UubmFtZV0gPSBvLm1hcCgoaSkgPT4gaS50b1VwcGVyQ2FzZSgpKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGZpbGVzYCB0eXBlcyBhbmQgZXh0ZW5zaW9ucyB0byBzdWJzdGl0dXRlIGJ5IFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBCbG9ja1Rvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRGaWxlc0NvbmZpZyhlKSB7XG4gICAgaWYgKGUucGFzdGVDb25maWcgPT09ICExKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgZmlsZXM6IHQgPSB7fSB9ID0gZS5wYXN0ZUNvbmZpZztcbiAgICBsZXQgeyBleHRlbnNpb25zOiBvLCBtaW1lVHlwZXM6IGkgfSA9IHQ7XG4gICAgIW8gJiYgIWkgfHwgKG8gJiYgIUFycmF5LmlzQXJyYXkobykgJiYgKEkoYMKrZXh0ZW5zaW9uc8K7IHByb3BlcnR5IG9mIHRoZSBvbkRyb3AgY29uZmlnIGZvciDCqyR7ZS5uYW1lfcK7IFRvb2wgc2hvdWxkIGJlIGFuIGFycmF5YCksIG8gPSBbXSksIGkgJiYgIUFycmF5LmlzQXJyYXkoaSkgJiYgKEkoYMKrbWltZVR5cGVzwrsgcHJvcGVydHkgb2YgdGhlIG9uRHJvcCBjb25maWcgZm9yIMKrJHtlLm5hbWV9wrsgVG9vbCBzaG91bGQgYmUgYW4gYXJyYXlgKSwgaSA9IFtdKSwgaSAmJiAoaSA9IGkuZmlsdGVyKChzKSA9PiBUbyhzKSA/ICEwIDogKEkoYE1JTUUgdHlwZSB2YWx1ZSDCqyR7c33CuyBmb3IgdGhlIMKrJHtlLm5hbWV9wrsgVG9vbCBpcyBub3QgYSB2YWxpZCBNSU1FIHR5cGVgLCBcIndhcm5cIiksICExKSkpLCB0aGlzLnRvb2xzRmlsZXNbZS5uYW1lXSA9IHtcbiAgICAgIGV4dGVuc2lvbnM6IG8gfHwgW10sXG4gICAgICBtaW1lVHlwZXM6IGkgfHwgW11cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogR2V0IFJlZ0V4cCBwYXR0ZXJucyB0byBzdWJzdGl0dXRlIGJ5IFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBCbG9ja1Rvb2wgb2JqZWN0XG4gICAqL1xuICBnZXRQYXR0ZXJuc0NvbmZpZyhlKSB7XG4gICAgZS5wYXN0ZUNvbmZpZyA9PT0gITEgfHwgIWUucGFzdGVDb25maWcucGF0dGVybnMgfHwgVihlLnBhc3RlQ29uZmlnLnBhdHRlcm5zKSB8fCBPYmplY3QuZW50cmllcyhlLnBhc3RlQ29uZmlnLnBhdHRlcm5zKS5mb3JFYWNoKChbdCwgb10pID0+IHtcbiAgICAgIG8gaW5zdGFuY2VvZiBSZWdFeHAgfHwgSShcbiAgICAgICAgYFBhdHRlcm4gJHtvfSBmb3Igwqske2UubmFtZX3CuyBUb29sIGlzIHNraXBwZWQgYmVjYXVzZSBpdCBzaG91bGQgYmUgYSBSZWdleHAgaW5zdGFuY2UuYCxcbiAgICAgICAgXCJ3YXJuXCJcbiAgICAgICksIHRoaXMudG9vbHNQYXR0ZXJucy5wdXNoKHtcbiAgICAgICAga2V5OiB0LFxuICAgICAgICBwYXR0ZXJuOiBvLFxuICAgICAgICB0b29sOiBlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYnJvd3NlciBiZWhhdmlvciBzdWl0cyBiZXR0ZXJcbiAgICpcbiAgICogQHBhcmFtIHtFdmVudFRhcmdldH0gZWxlbWVudCAtIGVsZW1lbnQgd2hlcmUgY29udGVudCBoYXMgYmVlbiBwYXN0ZWRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBpc05hdGl2ZUJlaGF2aW91cihlKSB7XG4gICAgcmV0dXJuIGQuaXNOYXRpdmVJbnB1dChlKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGZpbGVzIGZyb20gZGF0YSB0cmFuc2ZlciBvYmplY3QgYW5kIGluc2VydCByZWxhdGVkIFRvb2xzXG4gICAqXG4gICAqIEBwYXJhbSB7RmlsZUxpc3R9IGl0ZW1zIC0gcGFzdGVkIG9yIGRyb3BwZWQgaXRlbXNcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NGaWxlcyhlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGxldCBvO1xuICAgIG8gPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIEFycmF5LmZyb20oZSkubWFwKChyKSA9PiB0aGlzLnByb2Nlc3NGaWxlKHIpKVxuICAgICksIG8gPSBvLmZpbHRlcigocikgPT4gISFyKTtcbiAgICBjb25zdCBzID0gdC5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgdC5jdXJyZW50QmxvY2suaXNFbXB0eTtcbiAgICBvLmZvckVhY2goXG4gICAgICAociwgbCkgPT4ge1xuICAgICAgICB0LnBhc3RlKHIudHlwZSwgci5ldmVudCwgbCA9PT0gMCAmJiBzKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5mb3JtYXRpb24gYWJvdXQgZmlsZSBhbmQgZmluZCBUb29sIHRvIGhhbmRsZSBpdFxuICAgKlxuICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgLSBmaWxlIHRvIHByb2Nlc3NcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NGaWxlKGUpIHtcbiAgICBjb25zdCB0ID0gQm8oZSksIG8gPSBPYmplY3QuZW50cmllcyh0aGlzLnRvb2xzRmlsZXMpLmZpbmQoKFtyLCB7IG1pbWVUeXBlczogbCwgZXh0ZW5zaW9uczogYSB9XSkgPT4ge1xuICAgICAgY29uc3QgW2MsIHVdID0gZS50eXBlLnNwbGl0KFwiL1wiKSwgaCA9IGEuZmluZCgoZykgPT4gZy50b0xvd2VyQ2FzZSgpID09PSB0LnRvTG93ZXJDYXNlKCkpLCBwID0gbC5maW5kKChnKSA9PiB7XG4gICAgICAgIGNvbnN0IFtmLCBrXSA9IGcuc3BsaXQoXCIvXCIpO1xuICAgICAgICByZXR1cm4gZiA9PT0gYyAmJiAoayA9PT0gdSB8fCBrID09PSBcIipcIik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIWggfHwgISFwO1xuICAgIH0pO1xuICAgIGlmICghbylcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBbaV0gPSBvO1xuICAgIHJldHVybiB7XG4gICAgICBldmVudDogdGhpcy5jb21wb3NlUGFzdGVFdmVudChcImZpbGVcIiwge1xuICAgICAgICBmaWxlOiBlXG4gICAgICB9KSxcbiAgICAgIHR5cGU6IGlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCBIVE1MIHN0cmluZyB0byBibG9ja3MgYW5kIHJldHVybiBpdCBhcyBhcnJheSBvZiBCbG9jayBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbm5lckhUTUwgLSBodG1sIHN0cmluZyB0byBwcm9jZXNzXG4gICAqIEByZXR1cm5zIHtQYXN0ZURhdGFbXX1cbiAgICovXG4gIHByb2Nlc3NIVE1MKGUpIHtcbiAgICBjb25zdCB7IFRvb2xzOiB0IH0gPSB0aGlzLkVkaXRvciwgbyA9IGQubWFrZShcIkRJVlwiKTtcbiAgICByZXR1cm4gby5pbm5lckhUTUwgPSBlLCB0aGlzLmdldE5vZGVzKG8pLm1hcCgocykgPT4ge1xuICAgICAgbGV0IHIsIGwgPSB0LmRlZmF1bHRUb29sLCBhID0gITE7XG4gICAgICBzd2l0Y2ggKHMubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREU6XG4gICAgICAgICAgciA9IGQubWFrZShcImRpdlwiKSwgci5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICByID0gcywgYSA9ICEwLCB0aGlzLnRvb2xzVGFnc1tyLnRhZ05hbWVdICYmIChsID0gdGhpcy50b29sc1RhZ3Nbci50YWdOYW1lXS50b29sKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgdGFnczogYyB9ID0gbC5wYXN0ZUNvbmZpZyB8fCB7IHRhZ3M6IFtdIH0sIHUgPSBjLnJlZHVjZSgoZywgZikgPT4gKHRoaXMuY29sbGVjdFRhZ05hbWVzKGYpLmZvckVhY2goKEMpID0+IHtcbiAgICAgICAgY29uc3QgUyA9IFIoZikgPyBmW0NdIDogbnVsbDtcbiAgICAgICAgZ1tDLnRvTG93ZXJDYXNlKCldID0gUyB8fCB7fTtcbiAgICAgIH0pLCBnKSwge30pLCBoID0gT2JqZWN0LmFzc2lnbih7fSwgdSwgbC5iYXNlU2FuaXRpemVDb25maWcpO1xuICAgICAgaWYgKHIudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInRhYmxlXCIpIHtcbiAgICAgICAgY29uc3QgZyA9IHEoci5vdXRlckhUTUwsIGgpO1xuICAgICAgICByID0gZC5tYWtlKFwiZGl2XCIsIHZvaWQgMCwge1xuICAgICAgICAgIGlubmVySFRNTDogZ1xuICAgICAgICB9KS5maXJzdENoaWxkO1xuICAgICAgfSBlbHNlXG4gICAgICAgIHIuaW5uZXJIVE1MID0gcShyLmlubmVySFRNTCwgaCk7XG4gICAgICBjb25zdCBwID0gdGhpcy5jb21wb3NlUGFzdGVFdmVudChcInRhZ1wiLCB7XG4gICAgICAgIGRhdGE6IHJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogcixcbiAgICAgICAgaXNCbG9jazogYSxcbiAgICAgICAgdG9vbDogbC5uYW1lLFxuICAgICAgICBldmVudDogcFxuICAgICAgfTtcbiAgICB9KS5maWx0ZXIoKHMpID0+IHtcbiAgICAgIGNvbnN0IHIgPSBkLmlzRW1wdHkocy5jb250ZW50KSwgbCA9IGQuaXNTaW5nbGVUYWcocy5jb250ZW50KTtcbiAgICAgIHJldHVybiAhciB8fCBsO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCBwbGFpbiB0ZXh0IGJ5IG5ldyBsaW5lIHN5bWJvbHMgYW5kIHJldHVybiBpdCBhcyBhcnJheSBvZiBCbG9jayBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwbGFpbiAtIHN0cmluZyB0byBwcm9jZXNzXG4gICAqIEByZXR1cm5zIHtQYXN0ZURhdGFbXX1cbiAgICovXG4gIHByb2Nlc3NQbGFpbihlKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0QmxvY2s6IHQgfSA9IHRoaXMuY29uZmlnO1xuICAgIGlmICghZSlcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCBvID0gdDtcbiAgICByZXR1cm4gZS5zcGxpdCgvXFxyP1xcbi8pLmZpbHRlcigoaSkgPT4gaS50cmltKCkpLm1hcCgoaSkgPT4ge1xuICAgICAgY29uc3QgcyA9IGQubWFrZShcImRpdlwiKTtcbiAgICAgIHMudGV4dENvbnRlbnQgPSBpO1xuICAgICAgY29uc3QgciA9IHRoaXMuY29tcG9zZVBhc3RlRXZlbnQoXCJ0YWdcIiwge1xuICAgICAgICBkYXRhOiBzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnQ6IHMsXG4gICAgICAgIHRvb2w6IG8sXG4gICAgICAgIGlzQmxvY2s6ICExLFxuICAgICAgICBldmVudDogclxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyBwYXN0ZSBvZiBzaW5nbGUgQmxvY2sgdG9vbCBjb250ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVEYXRhfSBkYXRhVG9JbnNlcnQgLSBkYXRhIG9mIEJsb2NrIHRvIGluc2VydFxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc1NpbmdsZUJsb2NrKGUpIHtcbiAgICBjb25zdCB7IENhcmV0OiB0LCBCbG9ja01hbmFnZXI6IG8gfSA9IHRoaXMuRWRpdG9yLCB7IGN1cnJlbnRCbG9jazogaSB9ID0gbztcbiAgICBpZiAoIWkgfHwgZS50b29sICE9PSBpLm5hbWUgfHwgIWQuY29udGFpbnNPbmx5SW5saW5lRWxlbWVudHMoZS5jb250ZW50LmlubmVySFRNTCkpIHtcbiAgICAgIHRoaXMuaW5zZXJ0QmxvY2soZSwgKGkgPT0gbnVsbCA/IHZvaWQgMCA6IGkudG9vbC5pc0RlZmF1bHQpICYmIGkuaXNFbXB0eSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHQuaW5zZXJ0Q29udGVudEF0Q2FyZXRQb3NpdGlvbihlLmNvbnRlbnQuaW5uZXJIVE1MKTtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyBwYXN0ZSB0byBzaW5nbGUgQmxvY2s6XG4gICAqIDEuIEZpbmQgcGF0dGVybnNgIG1hdGNoZXNcbiAgICogMi4gSW5zZXJ0IG5ldyBibG9jayBpZiBpdCBpcyBub3QgdGhlIHNhbWUgdHlwZSBhcyBjdXJyZW50IG9uZVxuICAgKiAzLiBKdXN0IGluc2VydCB0ZXh0IGlmIHRoZXJlIGlzIG5vIHN1YnN0aXR1dGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtQYXN0ZURhdGF9IGRhdGFUb0luc2VydCAtIGRhdGEgb2YgQmxvY2sgdG8gaW5zZXJ0XG4gICAqL1xuICBhc3luYyBwcm9jZXNzSW5saW5lUGFzdGUoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIHsgY29udGVudDogaSB9ID0gZTtcbiAgICBpZiAodC5jdXJyZW50QmxvY2sgJiYgdC5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgaS50ZXh0Q29udGVudC5sZW5ndGggPCBsby5QQVRURVJOX1BST0NFU1NJTkdfTUFYX0xFTkdUSCkge1xuICAgICAgY29uc3QgciA9IGF3YWl0IHRoaXMucHJvY2Vzc1BhdHRlcm4oaS50ZXh0Q29udGVudCk7XG4gICAgICBpZiAocikge1xuICAgICAgICBjb25zdCBsID0gdC5jdXJyZW50QmxvY2sgJiYgdC5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgdC5jdXJyZW50QmxvY2suaXNFbXB0eSwgYSA9IHQucGFzdGUoci50b29sLCByLmV2ZW50LCBsKTtcbiAgICAgICAgby5zZXRUb0Jsb2NrKGEsIG8ucG9zaXRpb25zLkVORCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHQuY3VycmVudEJsb2NrICYmIHQuY3VycmVudEJsb2NrLmN1cnJlbnRJbnB1dCkge1xuICAgICAgY29uc3QgciA9IHQuY3VycmVudEJsb2NrLnRvb2wuYmFzZVNhbml0aXplQ29uZmlnO1xuICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXG4gICAgICAgIFwiaW5zZXJ0SFRNTFwiLFxuICAgICAgICAhMSxcbiAgICAgICAgcShpLmlubmVySFRNTCwgcilcbiAgICAgICk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLmluc2VydEJsb2NrKGUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgcGF0dGVybnNgIG1hdGNoZXNcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0ZXh0IHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Byb21pc2U8e2V2ZW50OiBQYXN0ZUV2ZW50LCB0b29sOiBzdHJpbmd9Pn1cbiAgICovXG4gIGFzeW5jIHByb2Nlc3NQYXR0ZXJuKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy50b29sc1BhdHRlcm5zLmZpbmQoKGkpID0+IHtcbiAgICAgIGNvbnN0IHMgPSBpLnBhdHRlcm4uZXhlYyhlKTtcbiAgICAgIHJldHVybiBzID8gZSA9PT0gcy5zaGlmdCgpIDogITE7XG4gICAgfSk7XG4gICAgcmV0dXJuIHQgPyB7XG4gICAgICBldmVudDogdGhpcy5jb21wb3NlUGFzdGVFdmVudChcInBhdHRlcm5cIiwge1xuICAgICAgICBrZXk6IHQua2V5LFxuICAgICAgICBkYXRhOiBlXG4gICAgICB9KSxcbiAgICAgIHRvb2w6IHQudG9vbC5uYW1lXG4gICAgfSA6IHZvaWQgMDtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHBhc3RlZCBCbG9jayBjb250ZW50IHRvIEVkaXRvclxuICAgKlxuICAgKiBAcGFyYW0ge1Bhc3RlRGF0YX0gZGF0YSAtIGRhdGEgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2FuUmVwbGFjZUN1cnJlbnRCbG9jayAtIGlmIHRydWUgYW5kIGlzIGN1cnJlbnQgQmxvY2sgaXMgZW1wdHksIHdpbGwgcmVwbGFjZSBjdXJyZW50IEJsb2NrXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaW5zZXJ0QmxvY2soZSwgdCA9ICExKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IG8sIENhcmV0OiBpIH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IHMgfSA9IG87XG4gICAgbGV0IHI7XG4gICAgaWYgKHQgJiYgcyAmJiBzLmlzRW1wdHkpIHtcbiAgICAgIHIgPSBvLnBhc3RlKGUudG9vbCwgZS5ldmVudCwgITApLCBpLnNldFRvQmxvY2sociwgaS5wb3NpdGlvbnMuRU5EKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgciA9IG8ucGFzdGUoZS50b29sLCBlLmV2ZW50KSwgaS5zZXRUb0Jsb2NrKHIsIGkucG9zaXRpb25zLkVORCk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBkYXRhIHBhc3NlZCBhcyBhcHBsaWNhdGlvbi94LWVkaXRvci1qcyBKU09OXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGJsb2NrcyDigJQgQmxvY2tzJyBkYXRhIHRvIGluc2VydFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGluc2VydEVkaXRvckpTRGF0YShlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIENhcmV0OiBvLCBUb29sczogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgb3QoXG4gICAgICBlLFxuICAgICAgKHIpID0+IGkuYmxvY2tUb29scy5nZXQocikuc2FuaXRpemVDb25maWdcbiAgICApLmZvckVhY2goKHsgdG9vbDogciwgZGF0YTogbCB9LCBhKSA9PiB7XG4gICAgICBsZXQgYyA9ICExO1xuICAgICAgYSA9PT0gMCAmJiAoYyA9IHQuY3VycmVudEJsb2NrICYmIHQuY3VycmVudEJsb2NrLnRvb2wuaXNEZWZhdWx0ICYmIHQuY3VycmVudEJsb2NrLmlzRW1wdHkpO1xuICAgICAgY29uc3QgdSA9IHQuaW5zZXJ0KHtcbiAgICAgICAgdG9vbDogcixcbiAgICAgICAgZGF0YTogbCxcbiAgICAgICAgcmVwbGFjZTogY1xuICAgICAgfSk7XG4gICAgICBvLnNldFRvQmxvY2sodSwgby5wb3NpdGlvbnMuRU5EKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRmV0Y2ggbm9kZXMgZnJvbSBFbGVtZW50IG5vZGVcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gY3VycmVudCBub2RlXG4gICAqIEBwYXJhbSB7Tm9kZVtdfSBub2RlcyAtIHByb2Nlc3NlZCBub2Rlc1xuICAgKiBAcGFyYW0ge05vZGV9IGRlc3ROb2RlIC0gZGVzdGluYXRpb24gbm9kZVxuICAgKi9cbiAgcHJvY2Vzc0VsZW1lbnROb2RlKGUsIHQsIG8pIHtcbiAgICBjb25zdCBpID0gT2JqZWN0LmtleXModGhpcy50b29sc1RhZ3MpLCBzID0gZSwgeyB0b29sOiByIH0gPSB0aGlzLnRvb2xzVGFnc1tzLnRhZ05hbWVdIHx8IHt9LCBsID0gdGhpcy50YWdzQnlUb29sW3IgPT0gbnVsbCA/IHZvaWQgMCA6IHIubmFtZV0gfHwgW10sIGEgPSBpLmluY2x1ZGVzKHMudGFnTmFtZSksIGMgPSBkLmJsb2NrRWxlbWVudHMuaW5jbHVkZXMocy50YWdOYW1lLnRvTG93ZXJDYXNlKCkpLCB1ID0gQXJyYXkuZnJvbShzLmNoaWxkcmVuKS5zb21lKFxuICAgICAgKHsgdGFnTmFtZTogcCB9KSA9PiBpLmluY2x1ZGVzKHApICYmICFsLmluY2x1ZGVzKHApXG4gICAgKSwgaCA9IEFycmF5LmZyb20ocy5jaGlsZHJlbikuc29tZShcbiAgICAgICh7IHRhZ05hbWU6IHAgfSkgPT4gZC5ibG9ja0VsZW1lbnRzLmluY2x1ZGVzKHAudG9Mb3dlckNhc2UoKSlcbiAgICApO1xuICAgIGlmICghYyAmJiAhYSAmJiAhdSlcbiAgICAgIHJldHVybiBvLmFwcGVuZENoaWxkKHMpLCBbLi4udCwgb107XG4gICAgaWYgKGEgJiYgIXUgfHwgYyAmJiAhaCAmJiAhdSlcbiAgICAgIHJldHVybiBbLi4udCwgbywgc107XG4gIH1cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZWx5IGRpdmlkZSBIVE1MIHN0cmluZyB0byB0d28gdHlwZXMgb2Ygbm9kZXM6XG4gICAqIDEuIEJsb2NrIGVsZW1lbnRcbiAgICogMi4gRG9jdW1lbnQgRnJhZ21lbnRzIGNvbnRhaW5lZCB0ZXh0IGFuZCBtYXJrdXAgdGFncyBsaWtlIGEsIGIsIGkgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IHdyYXBwZXIgLSB3cmFwcGVyIG9mIHBhc3RlciBIVE1MIGNvbnRlbnRcbiAgICogQHJldHVybnMge05vZGVbXX1cbiAgICovXG4gIGdldE5vZGVzKGUpIHtcbiAgICBjb25zdCB0ID0gQXJyYXkuZnJvbShlLmNoaWxkTm9kZXMpO1xuICAgIGxldCBvO1xuICAgIGNvbnN0IGkgPSAocywgcikgPT4ge1xuICAgICAgaWYgKGQuaXNFbXB0eShyKSAmJiAhZC5pc1NpbmdsZVRhZyhyKSlcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICBjb25zdCBsID0gc1tzLmxlbmd0aCAtIDFdO1xuICAgICAgbGV0IGEgPSBuZXcgRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgc3dpdGNoIChsICYmIGQuaXNGcmFnbWVudChsKSAmJiAoYSA9IHMucG9wKCkpLCByLm5vZGVUeXBlKSB7XG4gICAgICAgIGNhc2UgTm9kZS5FTEVNRU5UX05PREU6XG4gICAgICAgICAgaWYgKG8gPSB0aGlzLnByb2Nlc3NFbGVtZW50Tm9kZShyLCBzLCBhKSwgbylcbiAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGUuVEVYVF9OT0RFOlxuICAgICAgICAgIHJldHVybiBhLmFwcGVuZENoaWxkKHIpLCBbLi4ucywgYV07XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIFsuLi5zLCBhXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbLi4ucywgLi4uQXJyYXkuZnJvbShyLmNoaWxkTm9kZXMpLnJlZHVjZShpLCBbXSldO1xuICAgIH07XG4gICAgcmV0dXJuIHQucmVkdWNlKGksIFtdKTtcbiAgfVxuICAvKipcbiAgICogQ29tcG9zZSBwYXN0ZSBldmVudCB3aXRoIHBhc3NlZCB0eXBlIGFuZCBkZXRhaWxcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudERldGFpbH0gZGV0YWlsIC0gZXZlbnQgZGV0YWlsXG4gICAqL1xuICBjb21wb3NlUGFzdGVFdmVudChlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChlLCB7XG4gICAgICBkZXRhaWw6IHRcbiAgICB9KTtcbiAgfVxufTtcbnJvLlBBVFRFUk5fUFJPQ0VTU0lOR19NQVhfTEVOR1RIID0gNDUwO1xubGV0IGxzID0gcm87XG5jbGFzcyBhcyBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seSA9IFtdLCB0aGlzLnJlYWRPbmx5RW5hYmxlZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHN0YXRlIG9mIHJlYWQgb25seSBtb2RlXG4gICAqL1xuICBnZXQgaXNFbmFibGVkKCkge1xuICAgIHJldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZDtcbiAgfVxuICAvKipcbiAgICogU2V0IGluaXRpYWwgc3RhdGVcbiAgICovXG4gIGFzeW5jIHByZXBhcmUoKSB7XG4gICAgY29uc3QgeyBUb29sczogZSB9ID0gdGhpcy5FZGl0b3IsIHsgYmxvY2tUb29sczogdCB9ID0gZSwgbyA9IFtdO1xuICAgIEFycmF5LmZyb20odC5lbnRyaWVzKCkpLmZvckVhY2goKFtpLCBzXSkgPT4ge1xuICAgICAgcy5pc1JlYWRPbmx5U3VwcG9ydGVkIHx8IG8ucHVzaChpKTtcbiAgICB9KSwgdGhpcy50b29sc0RvbnRTdXBwb3J0UmVhZE9ubHkgPSBvLCB0aGlzLmNvbmZpZy5yZWFkT25seSAmJiBvLmxlbmd0aCA+IDAgJiYgdGhpcy50aHJvd0NyaXRpY2FsRXJyb3IoKSwgdGhpcy50b2dnbGUodGhpcy5jb25maWcucmVhZE9ubHksICEwKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHJlYWQtb25seSBtb2RlIG9yIHRvZ2dsZSBjdXJyZW50IHN0YXRlXG4gICAqIENhbGwgYWxsIE1vZHVsZXMgYHRvZ2dsZVJlYWRPbmx5YCBtZXRob2QgYW5kIHJlLXJlbmRlciBFZGl0b3JcbiAgICpcbiAgICogQHBhcmFtIHN0YXRlIC0gKG9wdGlvbmFsKSByZWFkLW9ubHkgc3RhdGUgb3IgdG9nZ2xlXG4gICAqIEBwYXJhbSBpc0luaXRpYWwgLSAob3B0aW9uYWwpIHRydWUgd2hlbiBlZGl0b3IgaXMgaW5pdGlhbGl6aW5nXG4gICAqL1xuICBhc3luYyB0b2dnbGUoZSA9ICF0aGlzLnJlYWRPbmx5RW5hYmxlZCwgdCA9ICExKSB7XG4gICAgZSAmJiB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5sZW5ndGggPiAwICYmIHRoaXMudGhyb3dDcml0aWNhbEVycm9yKCk7XG4gICAgY29uc3QgbyA9IHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICAgIHRoaXMucmVhZE9ubHlFbmFibGVkID0gZTtcbiAgICBmb3IgKGNvbnN0IHMgaW4gdGhpcy5FZGl0b3IpXG4gICAgICB0aGlzLkVkaXRvcltzXS50b2dnbGVSZWFkT25seSAmJiB0aGlzLkVkaXRvcltzXS50b2dnbGVSZWFkT25seShlKTtcbiAgICBpZiAobyA9PT0gZSlcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZDtcbiAgICBpZiAodClcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZDtcbiAgICB0aGlzLkVkaXRvci5Nb2RpZmljYXRpb25zT2JzZXJ2ZXIuZGlzYWJsZSgpO1xuICAgIGNvbnN0IGkgPSBhd2FpdCB0aGlzLkVkaXRvci5TYXZlci5zYXZlKCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jbGVhcigpLCBhd2FpdCB0aGlzLkVkaXRvci5SZW5kZXJlci5yZW5kZXIoaS5ibG9ja3MpLCB0aGlzLkVkaXRvci5Nb2RpZmljYXRpb25zT2JzZXJ2ZXIuZW5hYmxlKCksIHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICB9XG4gIC8qKlxuICAgKiBUaHJvd3MgYW4gZXJyb3IgYWJvdXQgdG9vbHMgd2hpY2ggZG9uJ3Qgc3VwcG9ydCByZWFkLW9ubHkgbW9kZVxuICAgKi9cbiAgdGhyb3dDcml0aWNhbEVycm9yKCkge1xuICAgIHRocm93IG5ldyBOdChcbiAgICAgIGBUbyBlbmFibGUgcmVhZC1vbmx5IG1vZGUgYWxsIGNvbm5lY3RlZCB0b29scyBzaG91bGQgc3VwcG9ydCBpdC4gVG9vbHMgJHt0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5qb2luKFwiLCBcIil9IGRvbid0IHN1cHBvcnQgcmVhZC1vbmx5IG1vZGUuYFxuICAgICk7XG4gIH1cbn1cbmNsYXNzIHhlIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkID0gITEsIHRoaXMuU0NST0xMX1NQRUVEID0gMywgdGhpcy5IRUlHSFRfT0ZfU0NST0xMX1pPTkUgPSA0MCwgdGhpcy5CT1RUT01fU0NST0xMX1pPTkUgPSAxLCB0aGlzLlRPUF9TQ1JPTExfWk9ORSA9IDIsIHRoaXMuTUFJTl9NT1VTRV9CVVRUT04gPSAwLCB0aGlzLm1vdXNlZG93biA9ICExLCB0aGlzLmlzU2Nyb2xsaW5nID0gITEsIHRoaXMuaW5TY3JvbGxab25lID0gbnVsbCwgdGhpcy5zdGFydFggPSAwLCB0aGlzLnN0YXJ0WSA9IDAsIHRoaXMubW91c2VYID0gMCwgdGhpcy5tb3VzZVkgPSAwLCB0aGlzLnN0YWNrT2ZTZWxlY3RlZCA9IFtdLCB0aGlzLmxpc3RlbmVySWRzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIENTUyBjbGFzc2VzIGZvciB0aGUgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge3t3cmFwcGVyOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3ZlcmxheTogXCJjb2RleC1lZGl0b3Itb3ZlcmxheVwiLFxuICAgICAgb3ZlcmxheUNvbnRhaW5lcjogXCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fY29udGFpbmVyXCIsXG4gICAgICByZWN0OiBcImNvZGV4LWVkaXRvci1vdmVybGF5X19yZWN0YW5nbGVcIixcbiAgICAgIHRvcFNjcm9sbFpvbmU6IFwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3Njcm9sbC16b25lLS10b3BcIixcbiAgICAgIGJvdHRvbVNjcm9sbFpvbmU6IFwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3Njcm9sbC16b25lLS1ib3R0b21cIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBQcmVwYXJhdGlvblxuICAgKiBDcmVhdGluZyByZWN0IGFuZCBoYW5nIGhhbmRsZXJzXG4gICAqL1xuICBwcmVwYXJlKCkge1xuICAgIHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogSW5pdCByZWN0IHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gcGFnZVggLSBYIGNvb3JkIG9mIG1vdXNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlWSAtIFkgY29vcmQgb2YgbW91c2VcbiAgICovXG4gIHN0YXJ0U2VsZWN0aW9uKGUsIHQpIHtcbiAgICBjb25zdCBvID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChlIC0gd2luZG93LnBhZ2VYT2Zmc2V0LCB0IC0gd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICBvLmNsb3Nlc3QoYC4ke3RoaXMuRWRpdG9yLlRvb2xiYXIuQ1NTLnRvb2xiYXJ9YCkgfHwgKHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFsbEJsb2Nrc1NlbGVjdGVkID0gITEsIHRoaXMuY2xlYXJTZWxlY3Rpb24oKSwgdGhpcy5zdGFja09mU2VsZWN0ZWQgPSBbXSk7XG4gICAgY29uc3QgcyA9IFtcbiAgICAgIGAuJHtELkNTUy5jb250ZW50fWAsXG4gICAgICBgLiR7dGhpcy5FZGl0b3IuVG9vbGJhci5DU1MudG9vbGJhcn1gLFxuICAgICAgYC4ke3RoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuQ1NTLmlubGluZVRvb2xiYXJ9YFxuICAgIF0sIHIgPSBvLmNsb3Nlc3QoXCIuXCIgKyB0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yV3JhcHBlciksIGwgPSBzLnNvbWUoKGEpID0+ICEhby5jbG9zZXN0KGEpKTtcbiAgICAhciB8fCBsIHx8ICh0aGlzLm1vdXNlZG93biA9ICEwLCB0aGlzLnN0YXJ0WCA9IGUsIHRoaXMuc3RhcnRZID0gdCk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBwYXJhbXMgdG8gZW5kIHNlbGVjdGlvblxuICAgKi9cbiAgZW5kU2VsZWN0aW9uKCkge1xuICAgIHRoaXMubW91c2Vkb3duID0gITEsIHRoaXMuc3RhcnRYID0gMCwgdGhpcy5zdGFydFkgPSAwLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICB9XG4gIC8qKlxuICAgKiBpcyBSZWN0U2VsZWN0aW9uIEFjdGl2YXRlZFxuICAgKi9cbiAgaXNSZWN0QWN0aXZhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZDtcbiAgfVxuICAvKipcbiAgICogTWFyayB0aGF0IHNlbGVjdGlvbiBpcyBlbmRcbiAgICovXG4gIGNsZWFyU2VsZWN0aW9uKCkge1xuICAgIHRoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgTW9kdWxlIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVyc1xuICAgKi9cbiAgZW5hYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgY29uc3QgeyBjb250YWluZXI6IGUgfSA9IHRoaXMuZ2VuSFRNTCgpO1xuICAgIHRoaXMubGlzdGVuZXJzLm9uKGUsIFwibW91c2Vkb3duXCIsICh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NNb3VzZURvd24odCk7XG4gICAgfSwgITEpLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudC5ib2R5LCBcIm1vdXNlbW92ZVwiLCBWZSgodCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTW91c2VNb3ZlKHQpO1xuICAgIH0sIDEwKSwge1xuICAgICAgcGFzc2l2ZTogITBcbiAgICB9KSwgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQuYm9keSwgXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc01vdXNlTGVhdmUoKTtcbiAgICB9KSwgdGhpcy5saXN0ZW5lcnMub24od2luZG93LCBcInNjcm9sbFwiLCBWZSgodCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzU2Nyb2xsKHQpO1xuICAgIH0sIDEwKSwge1xuICAgICAgcGFzc2l2ZTogITBcbiAgICB9KSwgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQuYm9keSwgXCJtb3VzZXVwXCIsICgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc01vdXNlVXAoKTtcbiAgICB9LCAhMSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBkb3duIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IG1vdXNlRXZlbnQgLSBtb3VzZSBldmVudCBwYXlsb2FkXG4gICAqL1xuICBwcm9jZXNzTW91c2VEb3duKGUpIHtcbiAgICBpZiAoZS5idXR0b24gIT09IHRoaXMuTUFJTl9NT1VTRV9CVVRUT04pXG4gICAgICByZXR1cm47XG4gICAgZS50YXJnZXQuY2xvc2VzdChkLmFsbElucHV0c1NlbGVjdG9yKSAhPT0gbnVsbCB8fCB0aGlzLnN0YXJ0U2VsZWN0aW9uKGUucGFnZVgsIGUucGFnZVkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2UgbW92ZSBldmVudHNcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBtb3VzZUV2ZW50IC0gbW91c2UgZXZlbnQgcGF5bG9hZFxuICAgKi9cbiAgcHJvY2Vzc01vdXNlTW92ZShlKSB7XG4gICAgdGhpcy5jaGFuZ2luZ1JlY3RhbmdsZShlKSwgdGhpcy5zY3JvbGxCeVpvbmVzKGUuY2xpZW50WSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBsZWF2ZVxuICAgKi9cbiAgcHJvY2Vzc01vdXNlTGVhdmUoKSB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpLCB0aGlzLmVuZFNlbGVjdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IG1vdXNlRXZlbnQgLSBtb3VzZSBldmVudCBwYXlsb2FkXG4gICAqL1xuICBwcm9jZXNzU2Nyb2xsKGUpIHtcbiAgICB0aGlzLmNoYW5naW5nUmVjdGFuZ2xlKGUpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgbW91c2UgdXBcbiAgICovXG4gIHByb2Nlc3NNb3VzZVVwKCkge1xuICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKSwgdGhpcy5lbmRTZWxlY3Rpb24oKTtcbiAgfVxuICAvKipcbiAgICogU2Nyb2xsIElmIG1vdXNlIGluIHNjcm9sbCB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjbGllbnRZIC0gWSBjb29yZCBvZiBtb3VzZVxuICAgKi9cbiAgc2Nyb2xsQnlab25lcyhlKSB7XG4gICAgaWYgKHRoaXMuaW5TY3JvbGxab25lID0gbnVsbCwgZSA8PSB0aGlzLkhFSUdIVF9PRl9TQ1JPTExfWk9ORSAmJiAodGhpcy5pblNjcm9sbFpvbmUgPSB0aGlzLlRPUF9TQ1JPTExfWk9ORSksIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLSBlIDw9IHRoaXMuSEVJR0hUX09GX1NDUk9MTF9aT05FICYmICh0aGlzLmluU2Nyb2xsWm9uZSA9IHRoaXMuQk9UVE9NX1NDUk9MTF9aT05FKSwgIXRoaXMuaW5TY3JvbGxab25lKSB7XG4gICAgICB0aGlzLmlzU2Nyb2xsaW5nID0gITE7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuaXNTY3JvbGxpbmcgfHwgKHRoaXMuc2Nyb2xsVmVydGljYWwodGhpcy5pblNjcm9sbFpvbmUgPT09IHRoaXMuVE9QX1NDUk9MTF9aT05FID8gLXRoaXMuU0NST0xMX1NQRUVEIDogdGhpcy5TQ1JPTExfU1BFRUQpLCB0aGlzLmlzU2Nyb2xsaW5nID0gITApO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcmVxdWlyZWQgSFRNTCBlbGVtZW50c1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgRWxlbWVudD59XG4gICAqL1xuICBnZW5IVE1MKCkge1xuICAgIGNvbnN0IHsgVUk6IGUgfSA9IHRoaXMuRWRpdG9yLCB0ID0gZS5ub2Rlcy5ob2xkZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIGUuQ1NTLmVkaXRvcldyYXBwZXIpLCBvID0gZC5tYWtlKFwiZGl2XCIsIHhlLkNTUy5vdmVybGF5LCB7fSksIGkgPSBkLm1ha2UoXCJkaXZcIiwgeGUuQ1NTLm92ZXJsYXlDb250YWluZXIsIHt9KSwgcyA9IGQubWFrZShcImRpdlwiLCB4ZS5DU1MucmVjdCwge30pO1xuICAgIHJldHVybiBpLmFwcGVuZENoaWxkKHMpLCBvLmFwcGVuZENoaWxkKGkpLCB0LmFwcGVuZENoaWxkKG8pLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUgPSBzLCB7XG4gICAgICBjb250YWluZXI6IHQsXG4gICAgICBvdmVybGF5OiBvXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZhdGVzIHNjcm9sbGluZyBpZiBibG9ja1NlbGVjdGlvbiBpcyBhY3RpdmUgYW5kIG1vdXNlIGlzIGluIHNjcm9sbCB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZCAtIHNwZWVkIG9mIHNjcm9sbGluZ1xuICAgKi9cbiAgc2Nyb2xsVmVydGljYWwoZSkge1xuICAgIGlmICghKHRoaXMuaW5TY3JvbGxab25lICYmIHRoaXMubW91c2Vkb3duKSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB0ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgIHdpbmRvdy5zY3JvbGxCeSgwLCBlKSwgdGhpcy5tb3VzZVkgKz0gd2luZG93LnBhZ2VZT2Zmc2V0IC0gdCwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnNjcm9sbFZlcnRpY2FsKGUpO1xuICAgIH0sIDApO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIHRoZSBjaGFuZ2UgaW4gdGhlIHJlY3RhbmdsZSBhbmQgaXRzIGVmZmVjdFxuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gbW91c2UgZXZlbnRcbiAgICovXG4gIGNoYW5naW5nUmVjdGFuZ2xlKGUpIHtcbiAgICBpZiAoIXRoaXMubW91c2Vkb3duKVxuICAgICAgcmV0dXJuO1xuICAgIGUucGFnZVkgIT09IHZvaWQgMCAmJiAodGhpcy5tb3VzZVggPSBlLnBhZ2VYLCB0aGlzLm1vdXNlWSA9IGUucGFnZVkpO1xuICAgIGNvbnN0IHsgcmlnaHRQb3M6IHQsIGxlZnRQb3M6IG8sIGluZGV4OiBpIH0gPSB0aGlzLmdlbkluZm9Gb3JNb3VzZVNlbGVjdGlvbigpLCBzID0gdGhpcy5zdGFydFggPiB0ICYmIHRoaXMubW91c2VYID4gdCwgciA9IHRoaXMuc3RhcnRYIDwgbyAmJiB0aGlzLm1vdXNlWCA8IG87XG4gICAgdGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyA9ICEocyB8fCByKSwgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgfHwgKHRoaXMucmVjdENyb3NzZXNCbG9ja3MgPSAhMSwgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgPSAhMCwgdGhpcy5zaHJpbmtSZWN0YW5nbGVUb1BvaW50KCksIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiKSwgdGhpcy51cGRhdGVSZWN0YW5nbGVTaXplKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSwgaSAhPT0gdm9pZCAwICYmICh0aGlzLnRyeVNlbGVjdE5leHRCbG9jayhpKSwgdGhpcy5pbnZlcnNlU2VsZWN0aW9uKCksIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCkpO1xuICB9XG4gIC8qKlxuICAgKiBTaHJpbmsgcmVjdCB0byBzaW5ndWxhciBwb2ludFxuICAgKi9cbiAgc2hyaW5rUmVjdGFuZ2xlVG9Qb2ludCgpIHtcbiAgICB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUubGVmdCA9IGAke3RoaXMuc3RhcnRYIC0gd2luZG93LnBhZ2VYT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcCA9IGAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbSA9IGBjYWxjKDEwMCUgLSAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnJpZ2h0ID0gYGNhbGMoMTAwJSAtICR7dGhpcy5zdGFydFggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3Qgb3IgdW5zZWxlY3QgYWxsIG9mIGJsb2NrcyBpbiBhcnJheSBpZiByZWN0IGlzIG91dCBvciBpbiBzZWxlY3RhYmxlIGFyZWFcbiAgICovXG4gIGludmVyc2VTZWxlY3Rpb24oKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SW5kZXgodGhpcy5zdGFja09mU2VsZWN0ZWRbMF0pLnNlbGVjdGVkO1xuICAgIGlmICh0aGlzLnJlY3RDcm9zc2VzQmxvY2tzICYmICF0KVxuICAgICAgZm9yIChjb25zdCBvIG9mIHRoaXMuc3RhY2tPZlNlbGVjdGVkKVxuICAgICAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5zZWxlY3RCbG9ja0J5SW5kZXgobyk7XG4gICAgaWYgKCF0aGlzLnJlY3RDcm9zc2VzQmxvY2tzICYmIHQpXG4gICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5zdGFja09mU2VsZWN0ZWQpXG4gICAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnVuU2VsZWN0QmxvY2tCeUluZGV4KG8pO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIHNpemUgb2YgcmVjdGFuZ2xlXG4gICAqL1xuICB1cGRhdGVSZWN0YW5nbGVTaXplKCkge1xuICAgIHRoaXMubW91c2VZID49IHRoaXMuc3RhcnRZID8gKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS50b3AgPSBgJHt0aGlzLnN0YXJ0WSAtIHdpbmRvdy5wYWdlWU9mZnNldH1weGAsIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5ib3R0b20gPSBgY2FsYygxMDAlIC0gJHt0aGlzLm1vdXNlWSAtIHdpbmRvdy5wYWdlWU9mZnNldH1weGApIDogKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5ib3R0b20gPSBgY2FsYygxMDAlIC0gJHt0aGlzLnN0YXJ0WSAtIHdpbmRvdy5wYWdlWU9mZnNldH1weGAsIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS50b3AgPSBgJHt0aGlzLm1vdXNlWSAtIHdpbmRvdy5wYWdlWU9mZnNldH1weGApLCB0aGlzLm1vdXNlWCA+PSB0aGlzLnN0YXJ0WCA/ICh0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUubGVmdCA9IGAke3RoaXMuc3RhcnRYIC0gd2luZG93LnBhZ2VYT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnJpZ2h0ID0gYGNhbGMoMTAwJSAtICR7dGhpcy5tb3VzZVggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgKSA6ICh0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUucmlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLnN0YXJ0WCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGAsIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5tb3VzZVggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgKTtcbiAgfVxuICAvKipcbiAgICogQ29sbGVjdHMgaW5mb3JtYXRpb24gbmVlZGVkIHRvIGRldGVybWluZSB0aGUgYmVoYXZpb3Igb2YgdGhlIHJlY3RhbmdsZVxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBpbmRleCAtIGluZGV4IG5leHQgQmxvY2ssIGxlZnRQb3MgLSBzdGFydCBvZiBsZWZ0IGJvcmRlciBvZiBCbG9jaywgcmlnaHRQb3MgLSByaWdodCBib3JkZXJcbiAgICovXG4gIGdlbkluZm9Gb3JNb3VzZVNlbGVjdGlvbigpIHtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAvIDIsIG8gPSB0aGlzLm1vdXNlWSAtIHdpbmRvdy5wYWdlWU9mZnNldCwgaSA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQodCwgbyksIHMgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUNoaWxkTm9kZShpKTtcbiAgICBsZXQgcjtcbiAgICBzICE9PSB2b2lkIDAgJiYgKHIgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmZpbmRJbmRleCgoaCkgPT4gaC5ob2xkZXIgPT09IHMuaG9sZGVyKSk7XG4gICAgY29uc3QgbCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2suaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBELkNTUy5jb250ZW50KSwgYSA9IE51bWJlci5wYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShsKS53aWR0aCwgMTApIC8gMiwgYyA9IHQgLSBhLCB1ID0gdCArIGE7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiByLFxuICAgICAgbGVmdFBvczogYyxcbiAgICAgIHJpZ2h0UG9zOiB1XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0IGJsb2NrIHdpdGggaW5kZXggaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggb2YgYmxvY2sgaW4gcmVkYWN0b3JcbiAgICovXG4gIGFkZEJsb2NrSW5TZWxlY3Rpb24oZSkge1xuICAgIHRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0QmxvY2tCeUluZGV4KGUpLCB0aGlzLnN0YWNrT2ZTZWxlY3RlZC5wdXNoKGUpO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgYmxvY2sgdG8gdGhlIHNlbGVjdGlvbiBhbmQgZGV0ZXJtaW5lcyB3aGljaCBibG9ja3Mgc2hvdWxkIGJlIHNlbGVjdGVkXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmRleCAtIGluZGV4IG9mIG5ldyBibG9jayBpbiB0aGUgcmVhY3RvclxuICAgKi9cbiAgdHJ5U2VsZWN0TmV4dEJsb2NrKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5zdGFja09mU2VsZWN0ZWRbdGhpcy5zdGFja09mU2VsZWN0ZWQubGVuZ3RoIC0gMV0gPT09IGUsIG8gPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZC5sZW5ndGgsIGkgPSAxLCBzID0gLTEsIHIgPSAwO1xuICAgIGlmICh0KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGwgPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gLSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMl0gPiAwO1xuICAgIGxldCBhID0gcjtcbiAgICBvID4gMSAmJiAoYSA9IGwgPyBpIDogcyk7XG4gICAgY29uc3QgYyA9IGUgPiB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gJiYgYSA9PT0gaSwgdSA9IGUgPCB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gJiYgYSA9PT0gcywgcCA9ICEoYyB8fCB1IHx8IGEgPT09IHIpO1xuICAgIGlmICghcCAmJiAoZSA+IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSB8fCB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gPT09IHZvaWQgMCkpIHtcbiAgICAgIGxldCBrID0gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdICsgMSB8fCBlO1xuICAgICAgZm9yIChrOyBrIDw9IGU7IGsrKylcbiAgICAgICAgdGhpcy5hZGRCbG9ja0luU2VsZWN0aW9uKGspO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXAgJiYgZSA8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSkge1xuICAgICAgZm9yIChsZXQgayA9IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAtIDE7IGsgPj0gZTsgay0tKVxuICAgICAgICB0aGlzLmFkZEJsb2NrSW5TZWxlY3Rpb24oayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcClcbiAgICAgIHJldHVybjtcbiAgICBsZXQgZyA9IG8gLSAxLCBmO1xuICAgIGZvciAoZSA+IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSA/IGYgPSAoKSA9PiBlID4gdGhpcy5zdGFja09mU2VsZWN0ZWRbZ10gOiBmID0gKCkgPT4gZSA8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW2ddOyBmKCk7IClcbiAgICAgIHRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24udW5TZWxlY3RCbG9ja0J5SW5kZXgodGhpcy5zdGFja09mU2VsZWN0ZWRbZ10pLCB0aGlzLnN0YWNrT2ZTZWxlY3RlZC5wb3AoKSwgZy0tO1xuICB9XG59XG5jbGFzcyBjcyBleHRlbmRzIHkge1xuICAvKipcbiAgICogUmVuZGVycyBwYXNzZWQgYmxvY2tzIGFzIG9uZSBiYXRjaFxuICAgKlxuICAgKiBAcGFyYW0gYmxvY2tzRGF0YSAtIGJsb2NrcyB0byByZW5kZXJcbiAgICovXG4gIGFzeW5jIHJlbmRlcihlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCh0KSA9PiB7XG4gICAgICBjb25zdCB7IFRvb2xzOiBvLCBCbG9ja01hbmFnZXI6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgICAgaWYgKGUubGVuZ3RoID09PSAwKVxuICAgICAgICBpLmluc2VydCgpO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHMgPSBlLm1hcCgoeyB0eXBlOiByLCBkYXRhOiBsLCB0dW5lczogYSwgaWQ6IGMgfSkgPT4ge1xuICAgICAgICAgIG8uYXZhaWxhYmxlLmhhcyhyKSA9PT0gITEgJiYgKFgoYFRvb2wgwqske3J9wrsgaXMgbm90IGZvdW5kLiBDaGVjayAndG9vbHMnIHByb3BlcnR5IGF0IHRoZSBFZGl0b3IuanMgY29uZmlnLmAsIFwid2FyblwiKSwgbCA9IHRoaXMuY29tcG9zZVN0dWJEYXRhRm9yVG9vbChyLCBsLCBjKSwgciA9IG8uc3R1YlRvb2wpO1xuICAgICAgICAgIGxldCB1O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB1ID0gaS5jb21wb3NlQmxvY2soe1xuICAgICAgICAgICAgICBpZDogYyxcbiAgICAgICAgICAgICAgdG9vbDogcixcbiAgICAgICAgICAgICAgZGF0YTogbCxcbiAgICAgICAgICAgICAgdHVuZXM6IGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2ggKGgpIHtcbiAgICAgICAgICAgIEkoYEJsb2NrIMKrJHtyfcK7IHNraXBwZWQgYmVjYXVzZSBvZiBwbHVnaW5zIGVycm9yYCwgXCJlcnJvclwiLCB7XG4gICAgICAgICAgICAgIGRhdGE6IGwsXG4gICAgICAgICAgICAgIGVycm9yOiBoXG4gICAgICAgICAgICB9KSwgbCA9IHRoaXMuY29tcG9zZVN0dWJEYXRhRm9yVG9vbChyLCBsLCBjKSwgciA9IG8uc3R1YlRvb2wsIHUgPSBpLmNvbXBvc2VCbG9jayh7XG4gICAgICAgICAgICAgIGlkOiBjLFxuICAgICAgICAgICAgICB0b29sOiByLFxuICAgICAgICAgICAgICBkYXRhOiBsLFxuICAgICAgICAgICAgICB0dW5lczogYVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICB9KTtcbiAgICAgICAgaS5pbnNlcnRNYW55KHMpO1xuICAgICAgfVxuICAgICAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgICB0KCk7XG4gICAgICB9LCB7IHRpbWVvdXQ6IDJlMyB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGRhdGEgZm9yIHRoZSBTdHViIFRvb2wgdGhhdCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB1bmF2YWlsYWJsZSB0b29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIC0gdW5hdmFpbGFibGUgdG9vbCBuYW1lIHRvIHN0dWJcbiAgICogQHBhcmFtIGRhdGEgLSBkYXRhIG9mIHVuYXZhaWxhYmxlIGJsb2NrXG4gICAqIEBwYXJhbSBbaWRdIC0gaWQgb2YgdW5hdmFpbGFibGUgYmxvY2tcbiAgICovXG4gIGNvbXBvc2VTdHViRGF0YUZvclRvb2woZSwgdCwgbykge1xuICAgIGNvbnN0IHsgVG9vbHM6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGxldCBzID0gZTtcbiAgICBpZiAoaS51bmF2YWlsYWJsZS5oYXMoZSkpIHtcbiAgICAgIGNvbnN0IHIgPSBpLnVuYXZhaWxhYmxlLmdldChlKS50b29sYm94O1xuICAgICAgciAhPT0gdm9pZCAwICYmIHJbMF0udGl0bGUgIT09IHZvaWQgMCAmJiAocyA9IHJbMF0udGl0bGUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2F2ZWREYXRhOiB7XG4gICAgICAgIGlkOiBvLFxuICAgICAgICB0eXBlOiBlLFxuICAgICAgICBkYXRhOiB0XG4gICAgICB9LFxuICAgICAgdGl0bGU6IHNcbiAgICB9O1xuICB9XG59XG5jbGFzcyBkcyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQ29tcG9zZXMgbmV3IGNoYWluIG9mIFByb21pc2VzIHRvIGZpcmUgdGhlbSBhbHRlcm5hdGVsbHlcbiAgICpcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlLCBUb29sczogdCB9ID0gdGhpcy5FZGl0b3IsIG8gPSBlLmJsb2NrcywgaSA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBvLmZvckVhY2goKGwpID0+IHtcbiAgICAgICAgaS5wdXNoKHRoaXMuZ2V0U2F2ZWREYXRhKGwpKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3QgcyA9IGF3YWl0IFByb21pc2UuYWxsKGkpLCByID0gYXdhaXQgb3QocywgKGwpID0+IHQuYmxvY2tUb29scy5nZXQobCkuc2FuaXRpemVDb25maWcpO1xuICAgICAgcmV0dXJuIHRoaXMubWFrZU91dHB1dChyKTtcbiAgICB9IGNhdGNoIChzKSB7XG4gICAgICBYKFwiU2F2aW5nIGZhaWxlZCBkdWUgdG8gdGhlIEVycm9yICVvXCIsIFwiZXJyb3JcIiwgcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTYXZlcyBhbmQgdmFsaWRhdGVzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gRWRpdG9yJ3MgVG9vbFxuICAgKiBAcmV0dXJucyB7VmFsaWRhdGVkRGF0YX0gLSBUb29sJ3MgdmFsaWRhdGVkIGRhdGFcbiAgICovXG4gIGFzeW5jIGdldFNhdmVkRGF0YShlKSB7XG4gICAgY29uc3QgdCA9IGF3YWl0IGUuc2F2ZSgpLCBvID0gdCAmJiBhd2FpdCBlLnZhbGlkYXRlKHQuZGF0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnQsXG4gICAgICBpc1ZhbGlkOiBvXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBvdXRwdXQgb2JqZWN0IHdpdGggc2F2ZWQgZGF0YSwgdGltZSBhbmQgdmVyc2lvbiBvZiBlZGl0b3JcbiAgICpcbiAgICogQHBhcmFtIHtWYWxpZGF0ZWREYXRhfSBhbGxFeHRyYWN0ZWREYXRhIC0gZGF0YSBleHRyYWN0ZWQgZnJvbSBCbG9ja3NcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBtYWtlT3V0cHV0KGUpIHtcbiAgICBjb25zdCB0ID0gW107XG4gICAgcmV0dXJuIGUuZm9yRWFjaCgoeyBpZDogbywgdG9vbDogaSwgZGF0YTogcywgdHVuZXM6IHIsIGlzVmFsaWQ6IGwgfSkgPT4ge1xuICAgICAgaWYgKCFsKSB7XG4gICAgICAgIEkoYEJsb2NrIMKrJHtpfcK7IHNraXBwZWQgYmVjYXVzZSBzYXZlZCBkYXRhIGlzIGludmFsaWRgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGkgPT09IHRoaXMuRWRpdG9yLlRvb2xzLnN0dWJUb29sKSB7XG4gICAgICAgIHQucHVzaChzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgYSA9IHtcbiAgICAgICAgaWQ6IG8sXG4gICAgICAgIHR5cGU6IGksXG4gICAgICAgIGRhdGE6IHMsXG4gICAgICAgIC4uLiFWKHIpICYmIHtcbiAgICAgICAgICB0dW5lczogclxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdC5wdXNoKGEpO1xuICAgIH0pLCB7XG4gICAgICB0aW1lOiArLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCksXG4gICAgICBibG9ja3M6IHQsXG4gICAgICB2ZXJzaW9uOiBcIjIuMzAuNVwiXG4gICAgfTtcbiAgfVxufVxuKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPCBcInVcIikge1xuICAgICAgdmFyIG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICBuLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLmNlLXBhcmFncmFwaHtsaW5lLWhlaWdodDoxLjZlbTtvdXRsaW5lOm5vbmV9LmNlLWJsb2NrOm9ubHktb2YtdHlwZSAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXItYWN0aXZlXTplbXB0eTpiZWZvcmUsLmNlLWJsb2NrOm9ubHktb2YtdHlwZSAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXItYWN0aXZlXVtkYXRhLWVtcHR5PXRydWVdOmJlZm9yZXtjb250ZW50OmF0dHIoZGF0YS1wbGFjZWhvbGRlci1hY3RpdmUpfS5jZS1wYXJhZ3JhcGggcDpmaXJzdC1vZi10eXBle21hcmdpbi10b3A6MH0uY2UtcGFyYWdyYXBoIHA6bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206MH1cIikpLCBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKG4pO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIiwgZSk7XG4gIH1cbn0pKCk7XG5jb25zdCBocyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOCA5VjcuMkM4IDcuMDg5NTQgOC4wODk1NCA3IDguMiA3TDEyIDdNMTYgOVY3LjJDMTYgNy4wODk1NCAxNS45MTA1IDcgMTUuOCA3TDEyIDdNMTIgN0wxMiAxN00xMiAxN0gxME0xMiAxN0gxNFwiLz48L3N2Zz4nO1xuZnVuY3Rpb24gdXMobikge1xuICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZS5pbm5lckhUTUwgPSBuLnRyaW0oKTtcbiAgY29uc3QgdCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgcmV0dXJuIHQuYXBwZW5kKC4uLkFycmF5LmZyb20oZS5jaGlsZE5vZGVzKSksIHQ7XG59XG4vKipcbiAqIEJhc2UgUGFyYWdyYXBoIEJsb2NrIGZvciB0aGUgRWRpdG9yLmpzLlxuICogUmVwcmVzZW50cyBhIHJlZ3VsYXIgdGV4dCBibG9ja1xuICpcbiAqIEBhdXRob3IgQ29kZVggKHRlYW1AY29kZXguc28pXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG5jbGFzcyBkdCB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHBsYWNlaG9sZGVyIGZvciBQYXJhZ3JhcGggVG9vbFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAY2xhc3NcbiAgICovXG4gIHN0YXRpYyBnZXQgREVGQVVMVF9QTEFDRUhPTERFUigpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIHBsdWdpbmBzIG1haW4gRWxlbWVudCBhbmQgZmlsbCBpdCB3aXRoIHNhdmVkIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIGNvbnN0cnVjdG9yIHBhcmFtc1xuICAgKiBAcGFyYW0ge1BhcmFncmFwaERhdGF9IHBhcmFtcy5kYXRhIC0gcHJldmlvdXNseSBzYXZlZCBkYXRhXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoQ29uZmlnfSBwYXJhbXMuY29uZmlnIC0gdXNlciBjb25maWcgZm9yIFRvb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy5hcGkgLSBlZGl0b3IuanMgYXBpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVhZE9ubHkgLSByZWFkIG9ubHkgbW9kZSBmbGFnXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IGUsIGNvbmZpZzogdCwgYXBpOiBvLCByZWFkT25seTogaSB9KSB7XG4gICAgdGhpcy5hcGkgPSBvLCB0aGlzLnJlYWRPbmx5ID0gaSwgdGhpcy5fQ1NTID0ge1xuICAgICAgYmxvY2s6IHRoaXMuYXBpLnN0eWxlcy5ibG9jayxcbiAgICAgIHdyYXBwZXI6IFwiY2UtcGFyYWdyYXBoXCJcbiAgICB9LCB0aGlzLnJlYWRPbmx5IHx8ICh0aGlzLm9uS2V5VXAgPSB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKSksIHRoaXMuX3BsYWNlaG9sZGVyID0gdC5wbGFjZWhvbGRlciA/IHQucGxhY2Vob2xkZXIgOiBkdC5ERUZBVUxUX1BMQUNFSE9MREVSLCB0aGlzLl9kYXRhID0gZSA/PyB7fSwgdGhpcy5fZWxlbWVudCA9IG51bGwsIHRoaXMuX3ByZXNlcnZlQmxhbmsgPSB0LnByZXNlcnZlQmxhbmsgPz8gITE7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRleHQgY29udGVudCBpcyBlbXB0eSBhbmQgc2V0IGVtcHR5IHN0cmluZyB0byBpbm5lciBodG1sLlxuICAgKiBXZSBuZWVkIHRoaXMgYmVjYXVzZSBzb21lIGJyb3dzZXJzIChlLmcuIFNhZmFyaSkgaW5zZXJ0IDxicj4gaW50byBlbXB0eSBjb250ZW50ZWRpdGFubGUgZWxlbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlIC0ga2V5IHVwIGV2ZW50XG4gICAqL1xuICBvbktleVVwKGUpIHtcbiAgICBpZiAoZS5jb2RlICE9PSBcIkJhY2tzcGFjZVwiICYmIGUuY29kZSAhPT0gXCJEZWxldGVcIiB8fCAhdGhpcy5fZWxlbWVudClcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCB7IHRleHRDb250ZW50OiB0IH0gPSB0aGlzLl9lbGVtZW50O1xuICAgIHQgPT09IFwiXCIgJiYgKHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBUb29sJ3Mgdmlld1xuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkcmF3VmlldygpIHtcbiAgICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtcbiAgICByZXR1cm4gZS5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy53cmFwcGVyLCB0aGlzLl9DU1MuYmxvY2spLCBlLmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIiwgZS5kYXRhc2V0LnBsYWNlaG9sZGVyQWN0aXZlID0gdGhpcy5hcGkuaTE4bi50KHRoaXMuX3BsYWNlaG9sZGVyKSwgdGhpcy5fZGF0YS50ZXh0ICYmIChlLmlubmVySFRNTCA9IHRoaXMuX2RhdGEudGV4dCksIHRoaXMucmVhZE9ubHkgfHwgKGUuY29udGVudEVkaXRhYmxlID0gXCJ0cnVlXCIsIGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIHRoaXMub25LZXlVcCkpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gVG9vbCdzIHZpZXdcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxEaXZFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50ID0gdGhpcy5kcmF3VmlldygpLCB0aGlzLl9lbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBzcGVjaWZpZWQgaG93IHRvIG1lcmdlIHR3byBUZXh0IGJsb2Nrcy5cbiAgICogQ2FsbGVkIGJ5IEVkaXRvci5qcyBieSBiYWNrc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtQYXJhZ3JhcGhEYXRhfSBkYXRhXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG1lcmdlKGUpIHtcbiAgICBpZiAoIXRoaXMuX2VsZW1lbnQpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5fZGF0YS50ZXh0ICs9IGUudGV4dDtcbiAgICBjb25zdCB0ID0gdXMoZS50ZXh0KTtcbiAgICB0aGlzLl9lbGVtZW50LmFwcGVuZENoaWxkKHQpLCB0aGlzLl9lbGVtZW50Lm5vcm1hbGl6ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBQYXJhZ3JhcGggYmxvY2sgZGF0YTpcbiAgICogLSBjaGVjayBmb3IgZW1wdGluZXNzXG4gICAqXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoRGF0YX0gc2F2ZWREYXRhIOKAlCBkYXRhIHJlY2VpdmVkIGFmdGVyIHNhdmluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gZmFsc2UgaWYgc2F2ZWQgZGF0YSBpcyBub3QgY29ycmVjdCwgb3RoZXJ3aXNlIHRydWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdmFsaWRhdGUoZSkge1xuICAgIHJldHVybiAhKGUudGV4dC50cmltKCkgPT09IFwiXCIgJiYgIXRoaXMuX3ByZXNlcnZlQmxhbmspO1xuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0IFRvb2wncyBkYXRhIGZyb20gdGhlIHZpZXdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHNDb250ZW50IC0gUGFyYWdyYXBoIHRvb2xzIHJlbmRlcmVkIHZpZXdcbiAgICogQHJldHVybnMge1BhcmFncmFwaERhdGF9IC0gc2F2ZWQgZGF0YVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzYXZlKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogZS5pbm5lckhUTUxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPbiBwYXN0ZSBjYWxsYmFjayBmaXJlZCBmcm9tIEVkaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MUGFzdGVFdmVudH0gZXZlbnQgLSBldmVudCB3aXRoIHBhc3RlZCBkYXRhXG4gICAqL1xuICBvblBhc3RlKGUpIHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgdGV4dDogZS5kZXRhaWwuZGF0YS5pbm5lckhUTUxcbiAgICB9O1xuICAgIHRoaXMuX2RhdGEgPSB0LCB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgJiYgKHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fZGF0YS50ZXh0IHx8IFwiXCIpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgQ29udmVyc2lvbiBUb29sYmFyLiBQYXJhZ3JhcGggY2FuIGJlIGNvbnZlcnRlZCB0by9mcm9tIG90aGVyIHRvb2xzXG4gICAqIEByZXR1cm5zIHtDb252ZXJzaW9uQ29uZmlnfVxuICAgKi9cbiAgc3RhdGljIGdldCBjb252ZXJzaW9uQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBleHBvcnQ6IFwidGV4dFwiLFxuICAgICAgLy8gdG8gY29udmVydCBQYXJhZ3JhcGggdG8gb3RoZXIgYmxvY2ssIHVzZSAndGV4dCcgcHJvcGVydHkgb2Ygc2F2ZWQgZGF0YVxuICAgICAgaW1wb3J0OiBcInRleHRcIlxuICAgICAgLy8gdG8gY292ZXJ0IG90aGVyIGJsb2NrJ3MgZXhwb3J0ZWQgc3RyaW5nIHRvIFBhcmFncmFwaCwgZmlsbCAndGV4dCcgcHJvcGVydHkgb2YgdG9vbCBkYXRhXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIHJ1bGVzXG4gICAqIEByZXR1cm5zIHtTYW5pdGl6ZXJDb25maWd9IC0gRWR0aW9yLmpzIHNhbml0aXplciBjb25maWdcbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IHtcbiAgICAgICAgYnI6ICEwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIHRvIG5vdGlmeSB0aGUgY29yZSB0aGF0IHJlYWQtb25seSBtb2RlIGlzIHN1cHBvcnRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgaXNSZWFkT25seVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIFVzZWQgYnkgRWRpdG9yIHBhc3RlIGhhbmRsaW5nIEFQSS5cbiAgICogUHJvdmlkZXMgY29uZmlndXJhdGlvbiB0byBoYW5kbGUgUCB0YWdzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UGFzdGVDb25maWd9IC0gUGFyYWdyYXBoIFBhc3RlIFNldHRpbmdcbiAgICovXG4gIHN0YXRpYyBnZXQgcGFzdGVDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhZ3M6IFtcIlBcIl1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJY29uIGFuZCB0aXRsZSBmb3IgZGlzcGxheWluZyBhdCB0aGUgVG9vbGJveFxuICAgKlxuICAgKiBAcmV0dXJucyB7VG9vbGJveENvbmZpZ30gLSBQYXJhZ3JhcGggVG9vbGJveCBTZXR0aW5nXG4gICAqL1xuICBzdGF0aWMgZ2V0IHRvb2xib3goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IGhzLFxuICAgICAgdGl0bGU6IFwiVGV4dFwiXG4gICAgfTtcbiAgfVxufVxuY2xhc3MgaHQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbW1hbmROYW1lID0gXCJib2xkXCI7XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBSdWxlXG4gICAqIExlYXZlIDxiPiB0YWdzXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBiOiB7fVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBidXR0b24gZm9yIElubGluZSBUb29sYmFyXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IGJpLFxuICAgICAgbmFtZTogXCJib2xkXCIsXG4gICAgICBvbkFjdGl2YXRlOiAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZE5hbWUpO1xuICAgICAgfSxcbiAgICAgIGlzQWN0aXZlOiAoKSA9PiBkb2N1bWVudC5xdWVyeUNvbW1hbmRTdGF0ZSh0aGlzLmNvbW1hbmROYW1lKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNldCBhIHNob3J0Y3V0XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IHNob3J0Y3V0KCkge1xuICAgIHJldHVybiBcIkNNRCtCXCI7XG4gIH1cbn1cbmh0LmlzSW5saW5lID0gITA7XG5odC50aXRsZSA9IFwiQm9sZFwiO1xuY2xhc3MgdXQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbW1hbmROYW1lID0gXCJpdGFsaWNcIiwgdGhpcy5DU1MgPSB7XG4gICAgICBidXR0b246IFwiY2UtaW5saW5lLXRvb2xcIixcbiAgICAgIGJ1dHRvbkFjdGl2ZTogXCJjZS1pbmxpbmUtdG9vbC0tYWN0aXZlXCIsXG4gICAgICBidXR0b25Nb2RpZmllcjogXCJjZS1pbmxpbmUtdG9vbC0taXRhbGljXCJcbiAgICB9LCB0aGlzLm5vZGVzID0ge1xuICAgICAgYnV0dG9uOiBudWxsXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIFJ1bGVcbiAgICogTGVhdmUgPGk+IHRhZ3NcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGk6IHt9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGJ1dHRvbiBmb3IgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLCB0aGlzLm5vZGVzLmJ1dHRvbi50eXBlID0gXCJidXR0b25cIiwgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5idXR0b24sIHRoaXMuQ1NTLmJ1dHRvbk1vZGlmaWVyKSwgdGhpcy5ub2Rlcy5idXR0b24uaW5uZXJIVE1MID0gQmksIHRoaXMubm9kZXMuYnV0dG9uO1xuICB9XG4gIC8qKlxuICAgKiBXcmFwIHJhbmdlIHdpdGggPGk+IHRhZ1xuICAgKi9cbiAgc3Vycm91bmQoKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIHNlbGVjdGlvbiBhbmQgc2V0IGFjdGl2YXRlZCBzdGF0ZSB0byBidXR0b24gaWYgdGhlcmUgYXJlIDxpPiB0YWdcbiAgICovXG4gIGNoZWNrU3RhdGUoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZE5hbWUpO1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSwgZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBhIHNob3J0Y3V0XG4gICAqL1xuICBnZXQgc2hvcnRjdXQoKSB7XG4gICAgcmV0dXJuIFwiQ01EK0lcIjtcbiAgfVxufVxudXQuaXNJbmxpbmUgPSAhMDtcbnV0LnRpdGxlID0gXCJJdGFsaWNcIjtcbmNsYXNzIHB0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5jb21tYW5kTGluayA9IFwiY3JlYXRlTGlua1wiLCB0aGlzLmNvbW1hbmRVbmxpbmsgPSBcInVubGlua1wiLCB0aGlzLkVOVEVSX0tFWSA9IDEzLCB0aGlzLkNTUyA9IHtcbiAgICAgIGJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgYnV0dG9uQWN0aXZlOiBcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixcbiAgICAgIGJ1dHRvbk1vZGlmaWVyOiBcImNlLWlubGluZS10b29sLS1saW5rXCIsXG4gICAgICBidXR0b25Vbmxpbms6IFwiY2UtaW5saW5lLXRvb2wtLXVubGlua1wiLFxuICAgICAgaW5wdXQ6IFwiY2UtaW5saW5lLXRvb2wtaW5wdXRcIixcbiAgICAgIGlucHV0U2hvd2VkOiBcImNlLWlubGluZS10b29sLWlucHV0LS1zaG93ZWRcIlxuICAgIH0sIHRoaXMubm9kZXMgPSB7XG4gICAgICBidXR0b246IG51bGwsXG4gICAgICBpbnB1dDogbnVsbFxuICAgIH0sIHRoaXMuaW5wdXRPcGVuZWQgPSAhMSwgdGhpcy50b29sYmFyID0gZS50b29sYmFyLCB0aGlzLmlubGluZVRvb2xiYXIgPSBlLmlubGluZVRvb2xiYXIsIHRoaXMubm90aWZpZXIgPSBlLm5vdGlmaWVyLCB0aGlzLmkxOG4gPSBlLmkxOG4sIHRoaXMuc2VsZWN0aW9uID0gbmV3IGIoKTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIFJ1bGVcbiAgICogTGVhdmUgPGE+IHRhZ3NcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IHtcbiAgICAgICAgaHJlZjogITAsXG4gICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgcmVsOiBcIm5vZm9sbG93XCJcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYnV0dG9uIGZvciBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHRoaXMubm9kZXMuYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbiwgdGhpcy5DU1MuYnV0dG9uTW9kaWZpZXIpLCB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSB4dCwgdGhpcy5ub2Rlcy5idXR0b247XG4gIH1cbiAgLyoqXG4gICAqIElucHV0IGZvciB0aGUgbGlua1xuICAgKi9cbiAgcmVuZGVyQWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgdGhpcy5ub2Rlcy5pbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuaTE4bi50KFwiQWRkIGEgbGlua1wiKSwgdGhpcy5ub2Rlcy5pbnB1dC5lbnRlcktleUhpbnQgPSBcImRvbmVcIiwgdGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlucHV0KSwgdGhpcy5ub2Rlcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgZS5rZXlDb2RlID09PSB0aGlzLkVOVEVSX0tFWSAmJiB0aGlzLmVudGVyUHJlc3NlZChlKTtcbiAgICB9KSwgdGhpcy5ub2Rlcy5pbnB1dDtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGNsaWNrcyBvbiB0aGUgSW5saW5lIFRvb2xiYXIgaWNvblxuICAgKlxuICAgKiBAcGFyYW0ge1JhbmdlfSByYW5nZSAtIHJhbmdlIHRvIHdyYXAgd2l0aCBsaW5rXG4gICAqL1xuICBzdXJyb3VuZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMuaW5wdXRPcGVuZWQgPyAodGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLnNlbGVjdGlvbi5yZW1vdmVGYWtlQmFja2dyb3VuZCgpKSA6ICh0aGlzLnNlbGVjdGlvbi5zZXRGYWtlQmFja2dyb3VuZCgpLCB0aGlzLnNlbGVjdGlvbi5zYXZlKCkpO1xuICAgICAgY29uc3QgdCA9IHRoaXMuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcoXCJBXCIpO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uZXhwYW5kVG9UYWcodCksIHRoaXMudW5saW5rKCksIHRoaXMuY2xvc2VBY3Rpb25zKCksIHRoaXMuY2hlY2tTdGF0ZSgpLCB0aGlzLnRvb2xiYXIuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRvZ2dsZUFjdGlvbnMoKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgc2VsZWN0aW9uIGFuZCBzZXQgYWN0aXZhdGVkIHN0YXRlIHRvIGJ1dHRvbiBpZiB0aGVyZSBhcmUgPGE+IHRhZ1xuICAgKi9cbiAgY2hlY2tTdGF0ZSgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7XG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IElpLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvblVubGluayksIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uQWN0aXZlKSwgdGhpcy5vcGVuQWN0aW9ucygpO1xuICAgICAgY29uc3QgdCA9IGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSB0ICE9PSBcIm51bGxcIiA/IHQgOiBcIlwiLCB0aGlzLnNlbGVjdGlvbi5zYXZlKCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSB4dCwgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5idXR0b25VbmxpbmspLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSk7XG4gICAgcmV0dXJuICEhZTtcbiAgfVxuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdpdGggSW5saW5lIFRvb2xiYXIgY2xvc2luZ1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5jbG9zZUFjdGlvbnMoKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgc2hvcnRjdXRcbiAgICovXG4gIGdldCBzaG9ydGN1dCgpIHtcbiAgICByZXR1cm4gXCJDTUQrS1wiO1xuICB9XG4gIC8qKlxuICAgKiBTaG93L2Nsb3NlIGxpbmsgaW5wdXRcbiAgICovXG4gIHRvZ2dsZUFjdGlvbnMoKSB7XG4gICAgdGhpcy5pbnB1dE9wZW5lZCA/IHRoaXMuY2xvc2VBY3Rpb25zKCExKSA6IHRoaXMub3BlbkFjdGlvbnMoITApO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5lZWRGb2N1cyAtIG9uIGxpbmsgY3JlYXRpb24gd2UgbmVlZCB0byBmb2N1cyBpbnB1dC4gT24gZWRpdGluZyAtIG5vcGUuXG4gICAqL1xuICBvcGVuQWN0aW9ucyhlID0gITEpIHtcbiAgICB0aGlzLm5vZGVzLmlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuaW5wdXRTaG93ZWQpLCBlICYmIHRoaXMubm9kZXMuaW5wdXQuZm9jdXMoKSwgdGhpcy5pbnB1dE9wZW5lZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBpbnB1dFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyU2F2ZWRTZWxlY3Rpb24g4oCUIHdlIGRvbid0IG5lZWQgdG8gY2xlYXIgc2F2ZWQgc2VsZWN0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHRvZ2dsZS1jbGlja3Mgb24gdGhlIGljb24gb2Ygb3BlbmVkIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlQWN0aW9ucyhlID0gITApIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IHQgPSBuZXcgYigpO1xuICAgICAgdC5zYXZlKCksIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy5zZWxlY3Rpb24ucmVtb3ZlRmFrZUJhY2tncm91bmQoKSwgdC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIHRoaXMubm9kZXMuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5pbnB1dFNob3dlZCksIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSBcIlwiLCBlICYmIHRoaXMuc2VsZWN0aW9uLmNsZWFyU2F2ZWQoKSwgdGhpcy5pbnB1dE9wZW5lZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBFbnRlciBwcmVzc2VkIG9uIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBlbnRlciBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBlbnRlclByZXNzZWQoZSkge1xuICAgIGxldCB0ID0gdGhpcy5ub2Rlcy5pbnB1dC52YWx1ZSB8fCBcIlwiO1xuICAgIGlmICghdC50cmltKCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy51bmxpbmsoKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmNsb3NlQWN0aW9ucygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMudmFsaWRhdGVVUkwodCkpIHtcbiAgICAgIHRoaXMubm90aWZpZXIuc2hvdyh7XG4gICAgICAgIG1lc3NhZ2U6IFwiUGFzdGVkIGxpbmsgaXMgbm90IHZhbGlkLlwiLFxuICAgICAgICBzdHlsZTogXCJlcnJvclwiXG4gICAgICB9KSwgSShcIkluY29ycmVjdCBMaW5rIHBhc3RlZFwiLCBcIndhcm5cIiwgdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHQgPSB0aGlzLnByZXBhcmVMaW5rKHQpLCB0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuc2VsZWN0aW9uLnJlbW92ZUZha2VCYWNrZ3JvdW5kKCksIHRoaXMuaW5zZXJ0TGluayh0KSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0aGlzLnNlbGVjdGlvbi5jb2xsYXBzZVRvRW5kKCksIHRoaXMuaW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlY3RzIGlmIHBhc3NlZCBzdHJpbmcgaXMgVVJMXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBzdHJpbmcgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB2YWxpZGF0ZVVSTChlKSB7XG4gICAgcmV0dXJuICEvXFxzLy50ZXN0KGUpO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIGxpbmsgYmVmb3JlIGluamVjdGlvblxuICAgKiAtIHNhbml0aXplXG4gICAqIC0gYWRkIHByb3RvY29sIGZvciBsaW5rcyBsaWtlICdnb29nbGUuY29tJ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIHJhdyB1c2VyIGlucHV0XG4gICAqL1xuICBwcmVwYXJlTGluayhlKSB7XG4gICAgcmV0dXJuIGUgPSBlLnRyaW0oKSwgZSA9IHRoaXMuYWRkUHJvdG9jb2woZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCAnaHR0cCcgcHJvdG9jb2wgdG8gdGhlIGxpbmtzIGxpa2UgJ3ZjLnJ1JywgJ2dvb2dsZS5jb20nXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gc3RyaW5nIHRvIHByb2Nlc3NcbiAgICovXG4gIGFkZFByb3RvY29sKGUpIHtcbiAgICBpZiAoL14oXFx3Kyk6KFxcL1xcLyk/Ly50ZXN0KGUpKVxuICAgICAgcmV0dXJuIGU7XG4gICAgY29uc3QgdCA9IC9eXFwvW14vXFxzXS8udGVzdChlKSwgbyA9IGUuc3Vic3RyaW5nKDAsIDEpID09PSBcIiNcIiwgaSA9IC9eXFwvXFwvW14vXFxzXS8udGVzdChlKTtcbiAgICByZXR1cm4gIXQgJiYgIW8gJiYgIWkgJiYgKGUgPSBcImh0dHA6Ly9cIiArIGUpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIDxhPiB0YWcgd2l0aCBcImhyZWZcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIFwiaHJlZlwiIHZhbHVlXG4gICAqL1xuICBpbnNlcnRMaW5rKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7XG4gICAgdCAmJiB0aGlzLnNlbGVjdGlvbi5leHBhbmRUb1RhZyh0KSwgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kTGluaywgITEsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIDxhPiB0YWdcbiAgICovXG4gIHVubGluaygpIHtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRVbmxpbmspO1xuICB9XG59XG5wdC5pc0lubGluZSA9ICEwO1xucHQudGl0bGUgPSBcIkxpbmtcIjtcbmNsYXNzIGFvIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5pMThuQVBJID0gZS5pMThuLCB0aGlzLmJsb2Nrc0FQSSA9IGUuYmxvY2tzLCB0aGlzLnNlbGVjdGlvbkFQSSA9IGUuc2VsZWN0aW9uLCB0aGlzLnRvb2xzQVBJID0gZS50b29scywgdGhpcy5jYXJldEFQSSA9IGUuY2FyZXQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdG9vbCdzIFVJIGNvbmZpZ1xuICAgKi9cbiAgYXN5bmMgcmVuZGVyKCkge1xuICAgIGNvbnN0IGUgPSBiLmdldCgpLCB0ID0gdGhpcy5ibG9ja3NBUEkuZ2V0QmxvY2tCeUVsZW1lbnQoZS5hbmNob3JOb2RlKTtcbiAgICBpZiAodCA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IG8gPSB0aGlzLnRvb2xzQVBJLmdldEJsb2NrVG9vbHMoKSwgaSA9IGF3YWl0IHp0KHQsIG8pO1xuICAgIGlmIChpLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCBzID0gaS5yZWR1Y2UoKGMsIHUpID0+IHtcbiAgICAgIHZhciBoO1xuICAgICAgcmV0dXJuIChoID0gdS50b29sYm94KSA9PSBudWxsIHx8IGguZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICBjLnB1c2goe1xuICAgICAgICAgIGljb246IHAuaWNvbixcbiAgICAgICAgICB0aXRsZTogei50KEsudG9vbE5hbWVzLCBwLnRpdGxlKSxcbiAgICAgICAgICBuYW1lOiB1Lm5hbWUsXG4gICAgICAgICAgY2xvc2VPbkFjdGl2YXRlOiAhMCxcbiAgICAgICAgICBvbkFjdGl2YXRlOiBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBnID0gYXdhaXQgdGhpcy5ibG9ja3NBUEkuY29udmVydCh0LmlkLCB1Lm5hbWUsIHAuZGF0YSk7XG4gICAgICAgICAgICB0aGlzLmNhcmV0QVBJLnNldFRvQmxvY2soZywgXCJlbmRcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pLCBjO1xuICAgIH0sIFtdKSwgciA9IGF3YWl0IHQuZ2V0QWN0aXZlVG9vbGJveEVudHJ5KCksIGwgPSByICE9PSB2b2lkIDAgPyByLmljb24gOiBLdCwgYSA9ICFwZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBsLFxuICAgICAgbmFtZTogXCJjb252ZXJ0LXRvXCIsXG4gICAgICBoaW50OiB7XG4gICAgICAgIHRpdGxlOiB0aGlzLmkxOG5BUEkudChcIkNvbnZlcnQgdG9cIilcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBzZWFyY2hhYmxlOiBhLFxuICAgICAgICBpdGVtczogcyxcbiAgICAgICAgb25PcGVuOiAoKSA9PiB7XG4gICAgICAgICAgYSAmJiAodGhpcy5zZWxlY3Rpb25BUEkuc2V0RmFrZUJhY2tncm91bmQoKSwgdGhpcy5zZWxlY3Rpb25BUEkuc2F2ZSgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25DbG9zZTogKCkgPT4ge1xuICAgICAgICAgIGEgJiYgKHRoaXMuc2VsZWN0aW9uQVBJLnJlc3RvcmUoKSwgdGhpcy5zZWxlY3Rpb25BUEkucmVtb3ZlRmFrZUJhY2tncm91bmQoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5hby5pc0lubGluZSA9ICEwO1xuY2xhc3MgY28ge1xuICAvKipcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBjb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmRhdGEgLSBzdHViIHRvb2wgZGF0YVxuICAgKiBAcGFyYW0gb3B0aW9ucy5hcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IGUsIGFwaTogdCB9KSB7XG4gICAgdGhpcy5DU1MgPSB7XG4gICAgICB3cmFwcGVyOiBcImNlLXN0dWJcIixcbiAgICAgIGluZm86IFwiY2Utc3R1Yl9faW5mb1wiLFxuICAgICAgdGl0bGU6IFwiY2Utc3R1Yl9fdGl0bGVcIixcbiAgICAgIHN1YnRpdGxlOiBcImNlLXN0dWJfX3N1YnRpdGxlXCJcbiAgICB9LCB0aGlzLmFwaSA9IHQsIHRoaXMudGl0bGUgPSBlLnRpdGxlIHx8IHRoaXMuYXBpLmkxOG4udChcIkVycm9yXCIpLCB0aGlzLnN1YnRpdGxlID0gdGhpcy5hcGkuaTE4bi50KFwiVGhlIGJsb2NrIGNhbiBub3QgYmUgZGlzcGxheWVkIGNvcnJlY3RseS5cIiksIHRoaXMuc2F2ZWREYXRhID0gZS5zYXZlZERhdGEsIHRoaXMud3JhcHBlciA9IHRoaXMubWFrZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHN0dWIgaG9sZGVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gb3JpZ2luYWwgVG9vbCBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1Rvb2xEYXRhfVxuICAgKi9cbiAgc2F2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlZERhdGE7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBUb29sIGh0bWwgbWFya3VwXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIG1ha2UoKSB7XG4gICAgY29uc3QgZSA9IGQubWFrZShcImRpdlwiLCB0aGlzLkNTUy53cmFwcGVyKSwgdCA9IE1pLCBvID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmluZm8pLCBpID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnRpdGxlLCB7XG4gICAgICB0ZXh0Q29udGVudDogdGhpcy50aXRsZVxuICAgIH0pLCBzID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnN1YnRpdGxlLCB7XG4gICAgICB0ZXh0Q29udGVudDogdGhpcy5zdWJ0aXRsZVxuICAgIH0pO1xuICAgIHJldHVybiBlLmlubmVySFRNTCA9IHQsIG8uYXBwZW5kQ2hpbGQoaSksIG8uYXBwZW5kQ2hpbGQocyksIGUuYXBwZW5kQ2hpbGQobyksIGU7XG4gIH1cbn1cbmNvLmlzUmVhZE9ubHlTdXBwb3J0ZWQgPSAhMDtcbmNsYXNzIHBzIGV4dGVuZHMgY3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnR5cGUgPSBuZS5JbmxpbmU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGl0bGUgZm9yIElubGluZSBUb29sIGlmIHNwZWNpZmllZCBieSB1c2VyXG4gICAqL1xuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZVthdC5UaXRsZV07XG4gIH1cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgbmV3IElubGluZVRvb2wgaW5zdGFuY2UgZnJvbSBjb25zdHJ1Y3RhYmxlXG4gICAqL1xuICBjcmVhdGUoKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdGFibGUoe1xuICAgICAgYXBpOiB0aGlzLmFwaSxcbiAgICAgIGNvbmZpZzogdGhpcy5zZXR0aW5nc1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBmcyBleHRlbmRzIGN0IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy50eXBlID0gbmUuVHVuZTtcbiAgfVxuICAvKipcbiAgICogQ29uc3RydWN0cyBuZXcgQmxvY2tUdW5lIGluc3RhbmNlIGZyb20gY29uc3RydWN0YWJsZVxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFR1bmUgZGF0YVxuICAgKiBAcGFyYW0gYmxvY2sgLSBCbG9jayBBUEkgb2JqZWN0XG4gICAqL1xuICBjcmVhdGUoZSwgdCkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RhYmxlKHtcbiAgICAgIGFwaTogdGhpcy5hcGksXG4gICAgICBjb25maWc6IHRoaXMuc2V0dGluZ3MsXG4gICAgICBibG9jazogdCxcbiAgICAgIGRhdGE6IGVcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgRiBleHRlbmRzIE1hcCB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIEJsb2NrIFRvb2xzIGNvbGxlY3Rpb25cbiAgICovXG4gIGdldCBibG9ja1Rvb2xzKCkge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKS5maWx0ZXIoKFssIHRdKSA9PiB0LmlzQmxvY2soKSk7XG4gICAgcmV0dXJuIG5ldyBGKGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIElubGluZSBUb29scyBjb2xsZWN0aW9uXG4gICAqL1xuICBnZXQgaW5saW5lVG9vbHMoKSB7XG4gICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5lbnRyaWVzKCkpLmZpbHRlcigoWywgdF0pID0+IHQuaXNJbmxpbmUoKSk7XG4gICAgcmV0dXJuIG5ldyBGKGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIEJsb2NrIFR1bmVzIGNvbGxlY3Rpb25cbiAgICovXG4gIGdldCBibG9ja1R1bmVzKCkge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKS5maWx0ZXIoKFssIHRdKSA9PiB0LmlzVHVuZSgpKTtcbiAgICByZXR1cm4gbmV3IEYoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaW50ZXJuYWwgVG9vbHMgY29sbGVjdGlvblxuICAgKi9cbiAgZ2V0IGludGVybmFsVG9vbHMoKSB7XG4gICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5lbnRyaWVzKCkpLmZpbHRlcigoWywgdF0pID0+IHQuaXNJbnRlcm5hbCk7XG4gICAgcmV0dXJuIG5ldyBGKGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2xzIGNvbGxlY3Rpb24gcHJvdmlkZWQgYnkgdXNlclxuICAgKi9cbiAgZ2V0IGV4dGVybmFsVG9vbHMoKSB7XG4gICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5lbnRyaWVzKCkpLmZpbHRlcigoWywgdF0pID0+ICF0LmlzSW50ZXJuYWwpO1xuICAgIHJldHVybiBuZXcgRihlKTtcbiAgfVxufVxudmFyIGdzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBtcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIGhvID0gKG4sIGUsIHQsIG8pID0+IHtcbiAgZm9yICh2YXIgaSA9IG8gPiAxID8gdm9pZCAwIDogbyA/IG1zKGUsIHQpIDogZSwgcyA9IG4ubGVuZ3RoIC0gMSwgcjsgcyA+PSAwOyBzLS0pXG4gICAgKHIgPSBuW3NdKSAmJiAoaSA9IChvID8gcihlLCB0LCBpKSA6IHIoaSkpIHx8IGkpO1xuICByZXR1cm4gbyAmJiBpICYmIGdzKGUsIHQsIGkpLCBpO1xufTtcbmNsYXNzIGZ0IGV4dGVuZHMgY3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLnR5cGUgPSBuZS5CbG9jaywgdGhpcy5pbmxpbmVUb29scyA9IG5ldyBGKCksIHRoaXMudHVuZXMgPSBuZXcgRigpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBUb29sIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gVG9vbCBkYXRhXG4gICAqIEBwYXJhbSBibG9jayAtIEJsb2NrQVBJIGZvciBjdXJyZW50IEJsb2NrXG4gICAqIEBwYXJhbSByZWFkT25seSAtIFRydWUgaWYgRWRpdG9yIGlzIGluIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICBjcmVhdGUoZSwgdCwgbykge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RhYmxlKHtcbiAgICAgIGRhdGE6IGUsXG4gICAgICBibG9jazogdCxcbiAgICAgIHJlYWRPbmx5OiBvLFxuICAgICAgYXBpOiB0aGlzLmFwaSxcbiAgICAgIGNvbmZpZzogdGhpcy5zZXR0aW5nc1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgcmVhZC1vbmx5IG1vZGUgaXMgc3VwcG9ydGVkIGJ5IFRvb2xcbiAgICovXG4gIGdldCBpc1JlYWRPbmx5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGVbY2UuSXNSZWFkT25seVN1cHBvcnRlZF0gPT09ICEwO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgVG9vbCBzdXBwb3J0cyBsaW5lYnJlYWtzXG4gICAqL1xuICBnZXQgaXNMaW5lQnJlYWtzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlW2NlLklzRW5hYmxlZExpbmVCcmVha3NdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFRvb2wgdG9vbGJveCBjb25maWd1cmF0aW9uIChpbnRlcm5hbCBvciB1c2VyLXNwZWNpZmllZCkuXG4gICAqXG4gICAqIE1lcmdlcyBpbnRlcm5hbCBhbmQgdXNlci1kZWZpbmVkIHRvb2xib3ggY29uZmlncyBiYXNlZCBvbiB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuICAgKlxuICAgKiAtIElmIGJvdGggaW50ZXJuYWwgYW5kIHVzZXItZGVmaW5lZCB0b29sYm94IGNvbmZpZ3MgYXJlIGFycmF5cyB0aGVpciBpdGVtcyBhcmUgbWVyZ2VkLlxuICAgKiBMZW5ndGggb2YgdGhlIHNlY29uZCBvbmUgaXMga2VwdC5cbiAgICpcbiAgICogLSBJZiBib3RoIGFyZSBvYmplY3RzIHRoZWlyIHByb3BlcnRpZXMgYXJlIG1lcmdlZC5cbiAgICpcbiAgICogLSBJZiBvbmUgaXMgYW4gb2JqZWN0IGFuZCBhbm90aGVyIGlzIGFuIGFycmF5IHRoYW4gaW50ZXJuYWwgY29uZmlnIGlzIHJlcGxhY2VkIHdpdGggdXNlci1kZWZpbmVkXG4gICAqIGNvbmZpZy4gVGhpcyBpcyBtYWRlIHRvIGFsbG93IHVzZXIgdG8gb3ZlcnJpZGUgZGVmYXVsdCB0b29sJ3MgdG9vbGJveCByZXByZXNlbnRhdGlvbiAoc2luZ2xlL211bHRpcGxlIGVudHJpZXMpXG4gICAqL1xuICBnZXQgdG9vbGJveCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5jb25zdHJ1Y3RhYmxlW2NlLlRvb2xib3hdLCB0ID0gdGhpcy5jb25maWdbSWUuVG9vbGJveF07XG4gICAgaWYgKCFWKGUpICYmIHQgIT09ICExKVxuICAgICAgcmV0dXJuIHQgPyBBcnJheS5pc0FycmF5KGUpID8gQXJyYXkuaXNBcnJheSh0KSA/IHQubWFwKChvLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHMgPSBlW2ldO1xuICAgICAgICByZXR1cm4gcyA/IHtcbiAgICAgICAgICAuLi5zLFxuICAgICAgICAgIC4uLm9cbiAgICAgICAgfSA6IG87XG4gICAgICB9KSA6IFt0XSA6IEFycmF5LmlzQXJyYXkodCkgPyB0IDogW1xuICAgICAgICB7XG4gICAgICAgICAgLi4uZSxcbiAgICAgICAgICAuLi50XG4gICAgICAgIH1cbiAgICAgIF0gOiBBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIGNvbnZlcnNpb24gY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IGNvbnZlcnNpb25Db25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZVtjZS5Db252ZXJzaW9uQ29uZmlnXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBlbmFibGVkIGlubGluZSB0b29scyBmb3IgVG9vbFxuICAgKi9cbiAgZ2V0IGVuYWJsZWRJbmxpbmVUb29scygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWdbSWUuRW5hYmxlZElubGluZVRvb2xzXSB8fCAhMTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBlbmFibGVkIHR1bmVzIGZvciBUb29sXG4gICAqL1xuICBnZXQgZW5hYmxlZEJsb2NrVHVuZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnW0llLkVuYWJsZWRCbG9ja1R1bmVzXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIHBhc3RlIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlW2NlLlBhc3RlQ29uZmlnXSA/PyB7fTtcbiAgfVxuICBnZXQgc2FuaXRpemVDb25maWcoKSB7XG4gICAgY29uc3QgZSA9IHN1cGVyLnNhbml0aXplQ29uZmlnLCB0ID0gdGhpcy5iYXNlU2FuaXRpemVDb25maWc7XG4gICAgaWYgKFYoZSkpXG4gICAgICByZXR1cm4gdDtcbiAgICBjb25zdCBvID0ge307XG4gICAgZm9yIChjb25zdCBpIGluIGUpXG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIGkpKSB7XG4gICAgICAgIGNvbnN0IHMgPSBlW2ldO1xuICAgICAgICBSKHMpID8gb1tpXSA9IE9iamVjdC5hc3NpZ24oe30sIHQsIHMpIDogb1tpXSA9IHM7XG4gICAgICB9XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgZ2V0IGJhc2VTYW5pdGl6ZUNvbmZpZygpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5pbmxpbmVUb29scy52YWx1ZXMoKSkuZm9yRWFjaCgodCkgPT4gT2JqZWN0LmFzc2lnbihlLCB0LnNhbml0aXplQ29uZmlnKSksIEFycmF5LmZyb20odGhpcy50dW5lcy52YWx1ZXMoKSkuZm9yRWFjaCgodCkgPT4gT2JqZWN0LmFzc2lnbihlLCB0LnNhbml0aXplQ29uZmlnKSksIGU7XG4gIH1cbn1cbmhvKFtcbiAgdWVcbl0sIGZ0LnByb3RvdHlwZSwgXCJzYW5pdGl6ZUNvbmZpZ1wiLCAxKTtcbmhvKFtcbiAgdWVcbl0sIGZ0LnByb3RvdHlwZSwgXCJiYXNlU2FuaXRpemVDb25maWdcIiwgMSk7XG5jbGFzcyBicyB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIGNvbmZpZyAtIHRvb2xzIGNvbmZpZ1xuICAgKiBAcGFyYW0gZWRpdG9yQ29uZmlnIC0gRWRpdG9ySlMgY29uZmlnXG4gICAqIEBwYXJhbSBhcGkgLSBFZGl0b3JKUyBBUEkgbW9kdWxlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlLCB0LCBvKSB7XG4gICAgdGhpcy5hcGkgPSBvLCB0aGlzLmNvbmZpZyA9IGUsIHRoaXMuZWRpdG9yQ29uZmlnID0gdDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIG9iamVjdCBiYXNlZCBvbiBpdCdzIHR5cGVcbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSB0b29sIG5hbWVcbiAgICovXG4gIGdldChlKSB7XG4gICAgY29uc3QgeyBjbGFzczogdCwgaXNJbnRlcm5hbDogbyA9ICExLCAuLi5pIH0gPSB0aGlzLmNvbmZpZ1tlXSwgcyA9IHRoaXMuZ2V0Q29uc3RydWN0b3IodCksIHIgPSB0W1FlLklzVHVuZV07XG4gICAgcmV0dXJuIG5ldyBzKHtcbiAgICAgIG5hbWU6IGUsXG4gICAgICBjb25zdHJ1Y3RhYmxlOiB0LFxuICAgICAgY29uZmlnOiBpLFxuICAgICAgYXBpOiB0aGlzLmFwaS5nZXRNZXRob2RzRm9yVG9vbChlLCByKSxcbiAgICAgIGlzRGVmYXVsdDogZSA9PT0gdGhpcy5lZGl0b3JDb25maWcuZGVmYXVsdEJsb2NrLFxuICAgICAgZGVmYXVsdFBsYWNlaG9sZGVyOiB0aGlzLmVkaXRvckNvbmZpZy5wbGFjZWhvbGRlcixcbiAgICAgIGlzSW50ZXJuYWw6IG9cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhcHByb3ByaWF0ZSBUb29sIG9iamVjdCBjb25zdHJ1Y3RvciBmb3IgVG9vbCBjb25zdHJ1Y3RhYmxlXG4gICAqXG4gICAqIEBwYXJhbSBjb25zdHJ1Y3RhYmxlIC0gVG9vbHMgY29uc3RydWN0YWJsZVxuICAgKi9cbiAgZ2V0Q29uc3RydWN0b3IoZSkge1xuICAgIHN3aXRjaCAoITApIHtcbiAgICAgIGNhc2UgZVthdC5Jc0lubGluZV06XG4gICAgICAgIHJldHVybiBwcztcbiAgICAgIGNhc2UgZVtRZS5Jc1R1bmVdOlxuICAgICAgICByZXR1cm4gZnM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZnQ7XG4gICAgfVxuICB9XG59XG5jbGFzcyB1byB7XG4gIC8qKlxuICAgKiBNb3ZlRG93blR1bmUgY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHtBUEl9IGFwaSDigJQgRWRpdG9yJ3MgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5DU1MgPSB7XG4gICAgICBhbmltYXRpb246IFwid29iYmxlXCJcbiAgICB9LCB0aGlzLmFwaSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFR1bmUncyBhcHBlYXJhbmNlIGluIGJsb2NrIHNldHRpbmdzIG1lbnVcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjoga2ksXG4gICAgICB0aXRsZTogdGhpcy5hcGkuaTE4bi50KFwiTW92ZSBkb3duXCIpLFxuICAgICAgb25BY3RpdmF0ZTogKCkgPT4gdGhpcy5oYW5kbGVDbGljaygpLFxuICAgICAgbmFtZTogXCJtb3ZlLWRvd25cIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBjbGlja3Mgb24gJ21vdmUgZG93bicgYnV0dG9uXG4gICAqL1xuICBoYW5kbGVDbGljaygpIHtcbiAgICBjb25zdCBlID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksIHQgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KGUgKyAxKTtcbiAgICBpZiAoIXQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gbW92ZSBCbG9jayBkb3duIHNpbmNlIGl0IGlzIGFscmVhZHkgdGhlIGxhc3RcIik7XG4gICAgY29uc3QgbyA9IHQuaG9sZGVyLCBpID0gby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBsZXQgcyA9IE1hdGguYWJzKHdpbmRvdy5pbm5lckhlaWdodCAtIG8ub2Zmc2V0SGVpZ2h0KTtcbiAgICBpLnRvcCA8IHdpbmRvdy5pbm5lckhlaWdodCAmJiAocyA9IHdpbmRvdy5zY3JvbGxZICsgby5vZmZzZXRIZWlnaHQpLCB3aW5kb3cuc2Nyb2xsVG8oMCwgcyksIHRoaXMuYXBpLmJsb2Nrcy5tb3ZlKGUgKyAxKSwgdGhpcy5hcGkudG9vbGJhci50b2dnbGVCbG9ja1NldHRpbmdzKCEwKTtcbiAgfVxufVxudW8uaXNUdW5lID0gITA7XG5jbGFzcyBwbyB7XG4gIC8qKlxuICAgKiBEZWxldGVUdW5lIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7QVBJfSBhcGkgLSBFZGl0b3IncyBBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBlIH0pIHtcbiAgICB0aGlzLmFwaSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFR1bmUncyBhcHBlYXJhbmNlIGluIGJsb2NrIHNldHRpbmdzIG1lbnVcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogeWksXG4gICAgICB0aXRsZTogdGhpcy5hcGkuaTE4bi50KFwiRGVsZXRlXCIpLFxuICAgICAgbmFtZTogXCJkZWxldGVcIixcbiAgICAgIGNvbmZpcm1hdGlvbjoge1xuICAgICAgICB0aXRsZTogdGhpcy5hcGkuaTE4bi50KFwiQ2xpY2sgdG8gZGVsZXRlXCIpLFxuICAgICAgICBvbkFjdGl2YXRlOiAoKSA9PiB0aGlzLmhhbmRsZUNsaWNrKClcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYmxvY2sgY29uZGl0aW9ucyBwYXNzZWRcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIHRoaXMuYXBpLmJsb2Nrcy5kZWxldGUoKTtcbiAgfVxufVxucG8uaXNUdW5lID0gITA7XG5jbGFzcyBmbyB7XG4gIC8qKlxuICAgKiBNb3ZlVXBUdW5lIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7QVBJfSBhcGkgLSBFZGl0b3IncyBBUElcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBlIH0pIHtcbiAgICB0aGlzLkNTUyA9IHtcbiAgICAgIGFuaW1hdGlvbjogXCJ3b2JibGVcIlxuICAgIH0sIHRoaXMuYXBpID0gZTtcbiAgfVxuICAvKipcbiAgICogVHVuZSdzIGFwcGVhcmFuY2UgaW4gYmxvY2sgc2V0dGluZ3MgbWVudVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiB4aSxcbiAgICAgIHRpdGxlOiB0aGlzLmFwaS5pMThuLnQoXCJNb3ZlIHVwXCIpLFxuICAgICAgb25BY3RpdmF0ZTogKCkgPT4gdGhpcy5oYW5kbGVDbGljaygpLFxuICAgICAgbmFtZTogXCJtb3ZlLXVwXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNb3ZlIGN1cnJlbnQgYmxvY2sgdXBcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSwgdCA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgoZSksIG8gPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KGUgLSAxKTtcbiAgICBpZiAoZSA9PT0gMCB8fCAhdCB8fCAhbylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBtb3ZlIEJsb2NrIHVwIHNpbmNlIGl0IGlzIGFscmVhZHkgdGhlIGZpcnN0XCIpO1xuICAgIGNvbnN0IGkgPSB0LmhvbGRlciwgcyA9IG8uaG9sZGVyLCByID0gaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbCA9IHMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IGE7XG4gICAgbC50b3AgPiAwID8gYSA9IE1hdGguYWJzKHIudG9wKSAtIE1hdGguYWJzKGwudG9wKSA6IGEgPSBNYXRoLmFicyhyLnRvcCkgKyBsLmhlaWdodCwgd2luZG93LnNjcm9sbEJ5KDAsIC0xICogYSksIHRoaXMuYXBpLmJsb2Nrcy5tb3ZlKGUgLSAxKSwgdGhpcy5hcGkudG9vbGJhci50b2dnbGVCbG9ja1NldHRpbmdzKCEwKTtcbiAgfVxufVxuZm8uaXNUdW5lID0gITA7XG52YXIga3MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIHZzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgd3MgPSAobiwgZSwgdCwgbykgPT4ge1xuICBmb3IgKHZhciBpID0gbyA+IDEgPyB2b2lkIDAgOiBvID8gdnMoZSwgdCkgOiBlLCBzID0gbi5sZW5ndGggLSAxLCByOyBzID49IDA7IHMtLSlcbiAgICAociA9IG5bc10pICYmIChpID0gKG8gPyByKGUsIHQsIGkpIDogcihpKSkgfHwgaSk7XG4gIHJldHVybiBvICYmIGkgJiYga3MoZSwgdCwgaSksIGk7XG59O1xuY2xhc3MgZ28gZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5zdHViVG9vbCA9IFwic3R1YlwiLCB0aGlzLnRvb2xzQXZhaWxhYmxlID0gbmV3IEYoKSwgdGhpcy50b29sc1VuYXZhaWxhYmxlID0gbmV3IEYoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhdmFpbGFibGUgVG9vbHNcbiAgICovXG4gIGdldCBhdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHNBdmFpbGFibGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdW5hdmFpbGFibGUgVG9vbHNcbiAgICovXG4gIGdldCB1bmF2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sc1VuYXZhaWxhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gVG9vbHMgZm9yIHRoZSBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgZ2V0IGlubGluZVRvb2xzKCkge1xuICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZS5pbmxpbmVUb29scztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGVkaXRvciBibG9jayB0b29sc1xuICAgKi9cbiAgZ2V0IGJsb2NrVG9vbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlLmJsb2NrVG9vbHM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhdmFpbGFibGUgQmxvY2sgVHVuZXNcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gLSBvYmplY3Qgb2YgSW5saW5lIFRvb2wncyBjbGFzc2VzXG4gICAqL1xuICBnZXQgYmxvY2tUdW5lcygpIHtcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGUuYmxvY2tUdW5lcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBkZWZhdWx0IFRvb2wgb2JqZWN0XG4gICAqL1xuICBnZXQgZGVmYXVsdFRvb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tUb29scy5nZXQodGhpcy5jb25maWcuZGVmYXVsdEJsb2NrKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbnRlcm5hbCB0b29sc1xuICAgKi9cbiAgZ2V0IGludGVybmFsKCkge1xuICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZS5pbnRlcm5hbFRvb2xzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGluc3RhbmNlcyB2aWEgcGFzc2VkIG9yIGRlZmF1bHQgY29uZmlndXJhdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIHByZXBhcmUoKSB7XG4gICAgaWYgKHRoaXMudmFsaWRhdGVUb29scygpLCB0aGlzLmNvbmZpZy50b29scyA9IHFlKHt9LCB0aGlzLmludGVybmFsVG9vbHMsIHRoaXMuY29uZmlnLnRvb2xzKSwgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbmZpZywgXCJ0b29sc1wiKSB8fCBPYmplY3Qua2V5cyh0aGlzLmNvbmZpZy50b29scykubGVuZ3RoID09PSAwKVxuICAgICAgdGhyb3cgRXJyb3IoXCJDYW4ndCBzdGFydCB3aXRob3V0IHRvb2xzXCIpO1xuICAgIGNvbnN0IGUgPSB0aGlzLnByZXBhcmVDb25maWcoKTtcbiAgICB0aGlzLmZhY3RvcnkgPSBuZXcgYnMoZSwgdGhpcy5jb25maWcsIHRoaXMuRWRpdG9yLkFQSSk7XG4gICAgY29uc3QgdCA9IHRoaXMuZ2V0TGlzdE9mUHJlcGFyZUZ1bmN0aW9ucyhlKTtcbiAgICBpZiAodC5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgYXdhaXQgRW8odCwgKG8pID0+IHtcbiAgICAgIHRoaXMudG9vbFByZXBhcmVNZXRob2RTdWNjZXNzKG8pO1xuICAgIH0sIChvKSA9PiB7XG4gICAgICB0aGlzLnRvb2xQcmVwYXJlTWV0aG9kRmFsbGJhY2sobyk7XG4gICAgfSksIHRoaXMucHJlcGFyZUJsb2NrVG9vbHMoKTtcbiAgfVxuICBnZXRBbGxJbmxpbmVUb29sc1Nhbml0aXplQ29uZmlnKCkge1xuICAgIGNvbnN0IGUgPSB7fTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmlubGluZVRvb2xzLnZhbHVlcygpKS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKGUsIHQuc2FuaXRpemVDb25maWcpO1xuICAgIH0pLCBlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBlYWNoIFRvb2wgcmVzZXQgbWV0aG9kIHRvIGNsZWFuIHVwIGFueXRoaW5nIHNldCBieSBUb29sXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIE9iamVjdC52YWx1ZXModGhpcy5hdmFpbGFibGUpLmZvckVhY2goYXN5bmMgKGUpID0+IHtcbiAgICAgIE8oZS5yZXNldCkgJiYgYXdhaXQgZS5yZXNldCgpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGludGVybmFsIHRvb2xzXG4gICAqIEluY2x1ZGVzIEJvbGQsIEl0YWxpYywgTGluayBhbmQgUGFyYWdyYXBoXG4gICAqL1xuICBnZXQgaW50ZXJuYWxUb29scygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udmVydFRvOiB7XG4gICAgICAgIGNsYXNzOiBhbyxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBsaW5rOiB7XG4gICAgICAgIGNsYXNzOiBwdCxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBib2xkOiB7XG4gICAgICAgIGNsYXNzOiBodCxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBpdGFsaWM6IHtcbiAgICAgICAgY2xhc3M6IHV0LFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIHBhcmFncmFwaDoge1xuICAgICAgICBjbGFzczogZHQsXG4gICAgICAgIGlubGluZVRvb2xiYXI6ICEwLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIHN0dWI6IHtcbiAgICAgICAgY2xhc3M6IGNvLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIG1vdmVVcDoge1xuICAgICAgICBjbGFzczogZm8sXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgZGVsZXRlOiB7XG4gICAgICAgIGNsYXNzOiBwbyxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBtb3ZlRG93bjoge1xuICAgICAgICBjbGFzczogdW8sXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVG9vbCBwcmVwYXJlIG1ldGhvZCBzdWNjZXNzIGNhbGxiYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gYXBwZW5kIHRvb2wgdG8gYXZhaWxhYmxlIGxpc3RcbiAgICovXG4gIHRvb2xQcmVwYXJlTWV0aG9kU3VjY2VzcyhlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZmFjdG9yeS5nZXQoZS50b29sTmFtZSk7XG4gICAgaWYgKHQuaXNJbmxpbmUoKSkge1xuICAgICAgY29uc3QgaSA9IFtcInJlbmRlclwiXS5maWx0ZXIoKHMpID0+ICF0LmNyZWF0ZSgpW3NdKTtcbiAgICAgIGlmIChpLmxlbmd0aCkge1xuICAgICAgICBJKFxuICAgICAgICAgIGBJbmNvcnJlY3QgSW5saW5lIFRvb2w6ICR7dC5uYW1lfS4gU29tZSBvZiByZXF1aXJlZCBtZXRob2RzIGlzIG5vdCBpbXBsZW1lbnRlZCAlb2AsXG4gICAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgICAgaVxuICAgICAgICApLCB0aGlzLnRvb2xzVW5hdmFpbGFibGUuc2V0KHQubmFtZSwgdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50b29sc0F2YWlsYWJsZS5zZXQodC5uYW1lLCB0KTtcbiAgfVxuICAvKipcbiAgICogVG9vbCBwcmVwYXJlIG1ldGhvZCBmYWlsIGNhbGxiYWNrXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gYXBwZW5kIHRvb2wgdG8gdW5hdmFpbGFibGUgbGlzdFxuICAgKi9cbiAgdG9vbFByZXBhcmVNZXRob2RGYWxsYmFjayhlKSB7XG4gICAgdGhpcy50b29sc1VuYXZhaWxhYmxlLnNldChlLnRvb2xOYW1lLCB0aGlzLmZhY3RvcnkuZ2V0KGUudG9vbE5hbWUpKTtcbiAgfVxuICAvKipcbiAgICogQmluZHMgcHJlcGFyZSBmdW5jdGlvbiBvZiBwbHVnaW5zIHdpdGggdXNlciBvciBkZWZhdWx0IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGxpc3Qgb2YgZnVuY3Rpb25zIHRoYXQgbmVlZHMgdG8gYmUgZmlyZWQgc2VxdWVudGlhbGx5XG4gICAqIEBwYXJhbSBjb25maWcgLSB0b29scyBjb25maWdcbiAgICovXG4gIGdldExpc3RPZlByZXBhcmVGdW5jdGlvbnMoZSkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZSkuZm9yRWFjaCgoW28sIGldKSA9PiB7XG4gICAgICB0LnB1c2goe1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgICAgIGZ1bmN0aW9uOiBPKGkuY2xhc3MucHJlcGFyZSkgPyBpLmNsYXNzLnByZXBhcmUgOiAoKSA9PiB7XG4gICAgICAgIH0sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0b29sTmFtZTogbyxcbiAgICAgICAgICBjb25maWc6IGkuY29uZmlnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pLCB0O1xuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gZW5hYmxlZCBJbmxpbmUgVG9vbHMgYW5kIEJsb2NrIFR1bmVzIGZvciBCbG9jayBUb29sXG4gICAqL1xuICBwcmVwYXJlQmxvY2tUb29scygpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuYmxvY2tUb29scy52YWx1ZXMoKSkuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgdGhpcy5hc3NpZ25JbmxpbmVUb29sc1RvQmxvY2tUb29sKGUpLCB0aGlzLmFzc2lnbkJsb2NrVHVuZXNUb0Jsb2NrVG9vbChlKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQXNzaWduIGVuYWJsZWQgSW5saW5lIFRvb2xzIGZvciBCbG9jayBUb29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIC0gQmxvY2sgVG9vbFxuICAgKi9cbiAgYXNzaWduSW5saW5lVG9vbHNUb0Jsb2NrVG9vbChlKSB7XG4gICAgaWYgKHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIgIT09ICExKSB7XG4gICAgICBpZiAoZS5lbmFibGVkSW5saW5lVG9vbHMgPT09ICEwKSB7XG4gICAgICAgIGUuaW5saW5lVG9vbHMgPSBuZXcgRihcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIpID8gdGhpcy5jb25maWcuaW5saW5lVG9vbGJhci5tYXAoKHQpID0+IFt0LCB0aGlzLmlubGluZVRvb2xzLmdldCh0KV0pIDogQXJyYXkuZnJvbSh0aGlzLmlubGluZVRvb2xzLmVudHJpZXMoKSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgQXJyYXkuaXNBcnJheShlLmVuYWJsZWRJbmxpbmVUb29scykgJiYgKGUuaW5saW5lVG9vbHMgPSBuZXcgRihcbiAgICAgICAgLyoqIFByZXBlbmQgQ29udmVydFRvIElubGluZSBUb29sICovXG4gICAgICAgIFtcImNvbnZlcnRUb1wiLCAuLi5lLmVuYWJsZWRJbmxpbmVUb29sc10ubWFwKCh0KSA9PiBbdCwgdGhpcy5pbmxpbmVUb29scy5nZXQodCldKVxuICAgICAgKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gZW5hYmxlZCBCbG9jayBUdW5lcyBmb3IgQmxvY2sgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCDigJQgQmxvY2sgVG9vbFxuICAgKi9cbiAgYXNzaWduQmxvY2tUdW5lc1RvQmxvY2tUb29sKGUpIHtcbiAgICBpZiAoZS5lbmFibGVkQmxvY2tUdW5lcyAhPT0gITEpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGUuZW5hYmxlZEJsb2NrVHVuZXMpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgRihcbiAgICAgICAgICBlLmVuYWJsZWRCbG9ja1R1bmVzLm1hcCgobykgPT4gW28sIHRoaXMuYmxvY2tUdW5lcy5nZXQobyldKVxuICAgICAgICApO1xuICAgICAgICBlLnR1bmVzID0gbmV3IEYoWy4uLnQsIC4uLnRoaXMuYmxvY2tUdW5lcy5pbnRlcm5hbFRvb2xzXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLnR1bmVzKSkge1xuICAgICAgICBjb25zdCB0ID0gbmV3IEYoXG4gICAgICAgICAgdGhpcy5jb25maWcudHVuZXMubWFwKChvKSA9PiBbbywgdGhpcy5ibG9ja1R1bmVzLmdldChvKV0pXG4gICAgICAgICk7XG4gICAgICAgIGUudHVuZXMgPSBuZXcgRihbLi4udCwgLi4udGhpcy5ibG9ja1R1bmVzLmludGVybmFsVG9vbHNdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZS50dW5lcyA9IHRoaXMuYmxvY2tUdW5lcy5pbnRlcm5hbFRvb2xzO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGUgVG9vbHMgY29uZmlndXJhdGlvbiBvYmplY3RzIGFuZCB0aHJvdyBFcnJvciBmb3IgdXNlciBpZiBpdCBpcyBpbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZVRvb2xzKCkge1xuICAgIGZvciAoY29uc3QgZSBpbiB0aGlzLmNvbmZpZy50b29scylcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb25maWcudG9vbHMsIGUpKSB7XG4gICAgICAgIGlmIChlIGluIHRoaXMuaW50ZXJuYWxUb29scylcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvbmZpZy50b29sc1tlXTtcbiAgICAgICAgaWYgKCFPKHQpICYmICFPKHQuY2xhc3MpKVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgYFRvb2wgwqske2V9wrsgbXVzdCBiZSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uIGluIHRoZSDCq2NsYXNzwrsgcHJvcGVydHlgXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxuICAvKipcbiAgICogVW5pZnkgdG9vbHMgY29uZmlnXG4gICAqL1xuICBwcmVwYXJlQ29uZmlnKCkge1xuICAgIGNvbnN0IGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHQgaW4gdGhpcy5jb25maWcudG9vbHMpXG4gICAgICBSKHRoaXMuY29uZmlnLnRvb2xzW3RdKSA/IGVbdF0gPSB0aGlzLmNvbmZpZy50b29sc1t0XSA6IGVbdF0gPSB7IGNsYXNzOiB0aGlzLmNvbmZpZy50b29sc1t0XSB9O1xuICAgIHJldHVybiBlO1xuICB9XG59XG53cyhbXG4gIHVlXG5dLCBnby5wcm90b3R5cGUsIFwiZ2V0QWxsSW5saW5lVG9vbHNTYW5pdGl6ZUNvbmZpZ1wiLCAxKTtcbmNvbnN0IHhzID0gYDpyb290ey0tc2VsZWN0aW9uQ29sb3I6ICNlMWYyZmY7LS1pbmxpbmVTZWxlY3Rpb25Db2xvcjogI2Q0ZWNmZjstLWJnLWxpZ2h0OiAjZWZmMmY1Oy0tZ3JheVRleHQ6ICM3MDc2ODQ7LS1jb2xvci1kYXJrOiAjMUQyMDJCOy0tY29sb3ItYWN0aXZlLWljb246ICMzODhBRTU7LS1jb2xvci1ncmF5LWJvcmRlcjogcmdiYSgyMDEsIDIwMSwgMjA0LCAuNDgpOy0tY29udGVudC13aWR0aDogNjUwcHg7LS1uYXJyb3ctbW9kZS1yaWdodC1wYWRkaW5nOiA1MHB4Oy0tdG9vbGJveC1idXR0b25zLXNpemU6IDI2cHg7LS10b29sYm94LWJ1dHRvbnMtc2l6ZS0tbW9iaWxlOiAzNnB4Oy0taWNvbi1zaXplOiAyMHB4Oy0taWNvbi1zaXplLS1tb2JpbGU6IDI4cHg7LS1ibG9jay1wYWRkaW5nLXZlcnRpY2FsOiAuNGVtOy0tY29sb3ItbGluZS1ncmF5OiAjRUZGMEYxIH0uY29kZXgtZWRpdG9ye3Bvc2l0aW9uOnJlbGF0aXZlOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt6LWluZGV4OjF9LmNvZGV4LWVkaXRvciAuaGlkZXtkaXNwbGF5Om5vbmV9LmNvZGV4LWVkaXRvcl9fcmVkYWN0b3IgW2NvbnRlbnRlZGl0YWJsZV06ZW1wdHk6YWZ0ZXJ7Y29udGVudDpcIlxcXFxmZWZmXCJ9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNvZGV4LWVkaXRvcl9fcmVkYWN0b3J7bWFyZ2luLXJpZ2h0OjUwcHh9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93LmNvZGV4LWVkaXRvci0tcnRsIC5jb2RleC1lZGl0b3JfX3JlZGFjdG9ye21hcmdpbi1sZWZ0OjUwcHg7bWFyZ2luLXJpZ2h0OjB9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0Oi01cHh9fS5jb2RleC1lZGl0b3ItY29weWFibGV7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjFweDt3aWR0aDoxcHg7dG9wOi00MDAlO29wYWNpdHk6LjAwMX0uY29kZXgtZWRpdG9yLW92ZXJsYXl7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ei1pbmRleDo5OTk7cG9pbnRlci1ldmVudHM6bm9uZTtvdmVyZmxvdzpoaWRkZW59LmNvZGV4LWVkaXRvci1vdmVybGF5X19jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7cG9pbnRlci1ldmVudHM6YXV0bzt6LWluZGV4OjB9LmNvZGV4LWVkaXRvci1vdmVybGF5X19yZWN0YW5nbGV7cG9zaXRpb246YWJzb2x1dGU7cG9pbnRlci1ldmVudHM6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiMyZWFhZGMzMztib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50fS5jb2RleC1lZGl0b3Igc3Zne21heC1oZWlnaHQ6MTAwJX0uY29kZXgtZWRpdG9yIHBhdGh7c3Ryb2tlOmN1cnJlbnRDb2xvcn0uY29kZXgtZWRpdG9yIDo6LW1vei1zZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojZDRlY2ZmfS5jb2RleC1lZGl0b3IgOjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjojZDRlY2ZmfS5jb2RleC1lZGl0b3ItLXRvb2xib3gtb3BlbmVkIFtjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06Zm9jdXM6YmVmb3Jle29wYWNpdHk6MCFpbXBvcnRhbnR9LmNlLXNjcm9sbC1sb2NrZWR7b3ZlcmZsb3c6aGlkZGVufS5jZS1zY3JvbGwtbG9ja2VkLS1oYXJke292ZXJmbG93OmhpZGRlbjt0b3A6Y2FsYygtMSAqIHZhcigtLXdpbmRvdy1zY3JvbGwtb2Zmc2V0KSk7cG9zaXRpb246Zml4ZWQ7d2lkdGg6MTAwJX0uY2UtdG9vbGJhcntwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZTt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2U7d2lsbC1jaGFuZ2U6b3BhY2l0eSx0b3A7ZGlzcGxheTpub25lfS5jZS10b29sYmFyLS1vcGVuZWR7ZGlzcGxheTpibG9ja30uY2UtdG9vbGJhcl9fY29udGVudHttYXgtd2lkdGg6NjUwcHg7bWFyZ2luOjAgYXV0bztwb3NpdGlvbjpyZWxhdGl2ZX0uY2UtdG9vbGJhcl9fcGx1c3tjb2xvcjojMWQyMDJiO2N1cnNvcjpwb2ludGVyO3dpZHRoOjI2cHg7aGVpZ2h0OjI2cHg7Ym9yZGVyLXJhZGl1czo3cHg7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjB9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtdG9vbGJhcl9fcGx1c3t3aWR0aDozNnB4O2hlaWdodDozNnB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLXRvb2xiYXJfX3BsdXM6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWZmMmY1fX0uY2UtdG9vbGJhcl9fcGx1cy0tYWN0aXZle2JhY2tncm91bmQtY29sb3I6I2VmZjJmNTstd2Via2l0LWFuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7YW5pbWF0aW9uOmJvdW5jZUluIC43NXMgMTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkc30uY2UtdG9vbGJhcl9fcGx1cy1zaG9ydGN1dHtvcGFjaXR5Oi42O3dvcmQtc3BhY2luZzotMnB4O21hcmdpbi10b3A6NXB4fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX3BsdXN7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI0U4RThFQjstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCAjMGQxNDIxMjE7Ym9yZGVyLXJhZGl1czo2cHg7ei1pbmRleDoyO3Bvc2l0aW9uOnN0YXRpY30uY2UtdG9vbGJhcl9fcGx1cy0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLXRvb2xiYXJfX3BsdXMtLXJpZ2h0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MTVweDttYXJnaW4tbGVmdDowfX0uY2UtdG9vbGJhcl9fYWN0aW9uc3twb3NpdGlvbjphYnNvbHV0ZTtyaWdodDoxMDAlO29wYWNpdHk6MDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3BhZGRpbmctcmlnaHQ6NXB4fS5jZS10b29sYmFyX19hY3Rpb25zLS1vcGVuZWR7b3BhY2l0eToxfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX2FjdGlvbnN7cmlnaHQ6YXV0b319LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bntjb2xvcjojMWQyMDJiO3dpZHRoOjI2cHg7aGVpZ2h0OjI2cHg7Ym9yZGVyLXJhZGl1czo3cHg7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7bWFyZ2luLWxlZnQ6M3B4O2N1cnNvcjpwb2ludGVyO3VzZXItc2VsZWN0Om5vbmV9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue3dpZHRoOjM2cHg7aGVpZ2h0OjM2cHh9fUBtZWRpYSAoaG92ZXI6IGhvdmVyKXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRuOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0tYWN0aXZle2JhY2tncm91bmQtY29sb3I6I2VmZjJmNTstd2Via2l0LWFuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7YW5pbWF0aW9uOmJvdW5jZUluIC43NXMgMTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkc31AbWVkaWEgKG1pbi13aWR0aDogNjUxcHgpey5jZS10b29sYmFyX19zZXR0aW5ncy1idG57d2lkdGg6MjRweH19LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0taGlkZGVue2Rpc3BsYXk6bm9uZX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS10b29sYmFyX19zZXR0aW5ncy1idG57cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI0U4RThFQjstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCAjMGQxNDIxMjE7Ym9yZGVyLXJhZGl1czo2cHg7ei1pbmRleDoyO3Bvc2l0aW9uOnN0YXRpY30uY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRuLS1sZWZ0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OjE1cHg7bWFyZ2luLWxlZnQ6MH0uY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRuLS1yaWdodC1vcmllbnRlZDpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6MH19LmNlLXRvb2xiYXJfX3BsdXMgc3ZnLC5jZS10b29sYmFyX19zZXR0aW5ncy1idG4gc3Zne3dpZHRoOjI0cHg7aGVpZ2h0OjI0cHh9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLXRvb2xiYXJfX3BsdXN7bGVmdDo1cHh9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS10b29sYm94IC5jZS1wb3BvdmVye3JpZ2h0OjA7bGVmdDphdXRvO2xlZnQ6aW5pdGlhbH19LmNlLWlubGluZS10b29sYmFyey0teS1vZmZzZXQ6IDhweDstLWNvbG9yLWJhY2tncm91bmQtaWNvbi1hY3RpdmU6IHJnYmEoNTYsIDEzOCwgMjI5LCAuMSk7LS1jb2xvci10ZXh0LWljb24tYWN0aXZlOiAjMzg4QUU1Oy0tY29sb3ItdGV4dC1wcmltYXJ5OiBibGFjaztwb3NpdGlvbjphYnNvbHV0ZTt2aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZTt3aWxsLWNoYW5nZTpvcGFjaXR5LGxlZnQsdG9wO3RvcDowO2xlZnQ6MDt6LWluZGV4OjM7b3BhY2l0eToxO3Zpc2liaWxpdHk6dmlzaWJsZX0uY2UtaW5saW5lLXRvb2xiYXIgW2hpZGRlbl17ZGlzcGxheTpub25lIWltcG9ydGFudH0uY2UtaW5saW5lLXRvb2xiYXJfX3RvZ2dsZXItYW5kLWJ1dHRvbi13cmFwcGVye2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7d2lkdGg6MTAwJTtwYWRkaW5nOjAgNnB4fS5jZS1pbmxpbmUtdG9vbGJhcl9fYnV0dG9uc3tkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4fS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd257ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjZweDttYXJnaW46MCA2cHggMCAtNnB4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2N1cnNvcjpwb2ludGVyO2JvcmRlci1yaWdodDoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bjpob3ZlcntiYWNrZ3JvdW5kOiNlZmYyZjV9fS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tLWhpZGRlbntkaXNwbGF5Om5vbmV9LmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi1jb250ZW50LC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tYXJyb3d7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWNvbnRlbnQgc3ZnLC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tYXJyb3cgc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9LmNlLWlubGluZS10b29sYmFyX19zaG9ydGN1dHtvcGFjaXR5Oi42O3dvcmQtc3BhY2luZzotM3B4O21hcmdpbi10b3A6M3B4fS5jZS1pbmxpbmUtdG9vbHtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXByaW1hcnkpO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtib3JkZXI6MDtib3JkZXItcmFkaXVzOjRweDtsaW5lLWhlaWdodDpub3JtYWw7aGVpZ2h0OjEwMCU7cGFkZGluZzowO3dpZHRoOjI4cHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcn1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1pbmxpbmUtdG9vbHt3aWR0aDozNnB4O2hlaWdodDozNnB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLWlubGluZS10b29sOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2Y4ZjhmOH19LmNlLWlubGluZS10b29sIHN2Z3tkaXNwbGF5OmJsb2NrO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtaW5saW5lLXRvb2wgc3Zne3dpZHRoOjI4cHg7aGVpZ2h0OjI4cHh9fS5jZS1pbmxpbmUtdG9vbC0tbGluayAuaWNvbi0tdW5saW5rLC5jZS1pbmxpbmUtdG9vbC0tdW5saW5rIC5pY29uLS1saW5re2Rpc3BsYXk6bm9uZX0uY2UtaW5saW5lLXRvb2wtLXVubGluayAuaWNvbi0tdW5saW5re2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1ib3R0b206LTFweH0uY2UtaW5saW5lLXRvb2wtaW5wdXR7YmFja2dyb3VuZDojRjhGOEY4O2JvcmRlcjoxcHggc29saWQgcmdiYSgyMjYsMjI2LDIyOSwuMik7Ym9yZGVyLXJhZGl1czo2cHg7cGFkZGluZzo0cHggOHB4O2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjIycHg7b3V0bGluZTpub25lO21hcmdpbjowO3dpZHRoOjEwMCU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6bm9uZTtmb250LXdlaWdodDo1MDA7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7Zm9udC1mYW1pbHk6aW5oZXJpdH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1pbmxpbmUtdG9vbC1pbnB1dHtmb250LXNpemU6MTVweDtmb250LXdlaWdodDo1MDB9fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NH0uY2UtaW5saW5lLXRvb2wtaW5wdXQ6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6cGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NH0uY2UtaW5saW5lLXRvb2wtaW5wdXQtLXNob3dlZHtkaXNwbGF5OmJsb2NrfS5jZS1pbmxpbmUtdG9vbC0tYWN0aXZle2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pY29uLWFjdGl2ZSk7Y29sb3I6dmFyKC0tY29sb3ItdGV4dC1pY29uLWFjdGl2ZSl9QC13ZWJraXQta2V5ZnJhbWVzIGZhZGUtaW57MCV7b3BhY2l0eTowfXRve29wYWNpdHk6MX19QGtleWZyYW1lcyBmYWRlLWluezAle29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fS5jZS1ibG9ja3std2Via2l0LWFuaW1hdGlvbjpmYWRlLWluIC4zcyBlYXNlO2FuaW1hdGlvbjpmYWRlLWluIC4zcyBlYXNlOy13ZWJraXQtYW5pbWF0aW9uLWZpbGwtbW9kZTpub25lO2FuaW1hdGlvbi1maWxsLW1vZGU6bm9uZTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6aW5pdGlhbDthbmltYXRpb24tZmlsbC1tb2RlOmluaXRpYWx9LmNlLWJsb2NrOmZpcnN0LW9mLXR5cGV7bWFyZ2luLXRvcDowfS5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50e2JhY2tncm91bmQ6I2UxZjJmZn0uY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudCBbY29udGVudGVkaXRhYmxlXXstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9LmNlLWJsb2NrLS1zZWxlY3RlZCAuY2UtYmxvY2tfX2NvbnRlbnQgaW1nLC5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50IC5jZS1zdHVie29wYWNpdHk6LjU1fS5jZS1ibG9jay0tc3RyZXRjaGVkIC5jZS1ibG9ja19fY29udGVudHttYXgtd2lkdGg6bm9uZX0uY2UtYmxvY2tfX2NvbnRlbnR7cG9zaXRpb246cmVsYXRpdmU7bWF4LXdpZHRoOjY1MHB4O21hcmdpbjowIGF1dG87LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMTVzIGVhc2V9LmNlLWJsb2NrLS1kcm9wLXRhcmdldCAuY2UtYmxvY2tfX2NvbnRlbnQ6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTtsZWZ0Oi0yMHB4O21hcmdpbi10b3A6LTFweDtoZWlnaHQ6OHB4O3dpZHRoOjhweDtib3JkZXI6c29saWQgIzM4OEFFNTtib3JkZXItd2lkdGg6MXB4IDFweCAwIDA7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46cmlnaHQ7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKX0uY2UtYmxvY2stLWRyb3AtdGFyZ2V0IC5jZS1ibG9ja19fY29udGVudDphZnRlcntjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7aGVpZ2h0OjFweDt3aWR0aDoxMDAlO2NvbG9yOiMzODhhZTU7YmFja2dyb3VuZDpyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDkwZGVnLCMzODhBRTUsIzM4OEFFNSAxcHgsI2ZmZiAxcHgsI2ZmZiA2cHgpfS5jZS1ibG9jayBhe2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5jZS1ibG9jayBie2ZvbnQtd2VpZ2h0OjcwMH0uY2UtYmxvY2sgaXtmb250LXN0eWxlOml0YWxpY31ALXdlYmtpdC1rZXlmcmFtZXMgYm91bmNlSW57MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpO3RyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KX0yMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMywxLjAzLDEuMDMpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX1Aa2V5ZnJhbWVzIGJvdW5jZUluezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX0wJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KTt0cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSl9MjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMywxLjAzLDEuMDMpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDMsMS4wMywxLjAzKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19QC13ZWJraXQta2V5ZnJhbWVzIHNlbGVjdGlvbkJvdW5jZXswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMSwxLjAxLDEuMDEpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDEsMS4wMSwxLjAxKX03MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19QGtleWZyYW1lcyBzZWxlY3Rpb25Cb3VuY2V7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDEsMS4wMSwxLjAxKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSl9NzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fUAtd2Via2l0LWtleWZyYW1lcyBidXR0b25DbGlja2VkezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX0wJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKC45NSwuOTUsLjk1KTt0cmFuc2Zvcm06c2NhbGUzZCguOTUsLjk1LC45NSl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMiwxLjAyLDEuMDIpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDIsMS4wMiwxLjAyKX04MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19QGtleWZyYW1lcyBidXR0b25DbGlja2VkezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX0wJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKC45NSwuOTUsLjk1KTt0cmFuc2Zvcm06c2NhbGUzZCguOTUsLjk1LC45NSl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMiwxLjAyLDEuMDIpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDIsMS4wMiwxLjAyKX04MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19LmNkeC1ibG9ja3twYWRkaW5nOi40ZW0gMH0uY2R4LWJsb2NrOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2xpbmUtaGVpZ2h0Om5vcm1hbCFpbXBvcnRhbnR9LmNkeC1pbnB1dHtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4IDAgcmdiYSgzNSw0NCw3MiwuMDYpO2JveC1zaGFkb3c6aW5zZXQgMCAxcHggMnB4ICMyMzJjNDgwZjtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjEwcHggMTJweDtvdXRsaW5lOm5vbmU7d2lkdGg6MTAwJTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LmNkeC1pbnB1dFtkYXRhLXBsYWNlaG9sZGVyXTpiZWZvcmV7cG9zaXRpb246c3RhdGljIWltcG9ydGFudH0uY2R4LWlucHV0W2RhdGEtcGxhY2Vob2xkZXJdOmJlZm9yZXtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDowO3doaXRlLXNwYWNlOm5vd3JhcDtwb2ludGVyLWV2ZW50czpub25lfS5jZHgtc2V0dGluZ3MtYnV0dG9ue2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3JkZXItcmFkaXVzOjNweDtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt2ZXJ0aWNhbC1hbGlnbjpib3R0b207Y29sb3I6aW5oZXJpdDttYXJnaW46MDttaW4td2lkdGg6MjZweDttaW4taGVpZ2h0OjI2cHh9LmNkeC1zZXR0aW5ncy1idXR0b24tLWZvY3VzZWR7YmFja2dyb3VuZDpyZ2JhKDM0LDE4NiwyNTUsLjA4KSFpbXBvcnRhbnR9LmNkeC1zZXR0aW5ncy1idXR0b24tLWZvY3VzZWR7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMCAwcHggMXB4IHJnYmEoNywxNjEsMjI3LC4wOCk7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggIzA3YTFlMzE0fS5jZHgtc2V0dGluZ3MtYnV0dG9uLS1mb2N1c2VkLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDthbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yNXM7YW5pbWF0aW9uLWR1cmF0aW9uOi4yNXN9LmNkeC1zZXR0aW5ncy1idXR0b24tLWFjdGl2ZXtjb2xvcjojMzg4YWU1fS5jZHgtc2V0dGluZ3MtYnV0dG9uIHN2Z3t3aWR0aDphdXRvO2hlaWdodDphdXRvfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNkeC1zZXR0aW5ncy1idXR0b24gc3Zne3dpZHRoOjI4cHg7aGVpZ2h0OjI4cHh9fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNkeC1zZXR0aW5ncy1idXR0b257d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtib3JkZXItcmFkaXVzOjhweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZHgtc2V0dGluZ3MtYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNkeC1sb2FkZXJ7cG9zaXRpb246cmVsYXRpdmU7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCl9LmNkeC1sb2FkZXI6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjUwJTt0b3A6NTAlO3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7bWFyZ2luOi0xMXB4IDAgMCAtMTFweDtib3JkZXI6MnB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTtib3JkZXItbGVmdC1jb2xvcjojMzg4YWU1O2JvcmRlci1yYWRpdXM6NTAlOy13ZWJraXQtYW5pbWF0aW9uOmNkeFJvdGF0aW9uIDEuMnMgaW5maW5pdGUgbGluZWFyO2FuaW1hdGlvbjpjZHhSb3RhdGlvbiAxLjJzIGluZmluaXRlIGxpbmVhcn1ALXdlYmtpdC1rZXlmcmFtZXMgY2R4Um90YXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIGNkeFJvdGF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19LmNkeC1idXR0b257cGFkZGluZzoxM3B4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO2ZvbnQtc2l6ZToxNC45cHg7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtYm94LXNoYWRvdzowIDJweCAycHggMCByZ2JhKDE4LDMwLDU3LC4wNCk7Ym94LXNoYWRvdzowIDJweCAycHggIzEyMWUzOTBhO2NvbG9yOiM3MDc2ODQ7dGV4dC1hbGlnbjpjZW50ZXI7Y3Vyc29yOnBvaW50ZXJ9QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZHgtYnV0dG9uOmhvdmVye2JhY2tncm91bmQ6I0ZCRkNGRTstd2Via2l0LWJveC1zaGFkb3c6MCAxcHggM3B4IDAgcmdiYSgxOCwzMCw1NywuMDgpO2JveC1zaGFkb3c6MCAxcHggM3B4ICMxMjFlMzkxNH19LmNkeC1idXR0b24gc3Zne2hlaWdodDoyMHB4O21hcmdpbi1yaWdodDouMmVtO21hcmdpbi10b3A6LTJweH0uY2Utc3R1YntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO3BhZGRpbmc6MTJweCAxOHB4O21hcmdpbjoxMHB4IDA7Ym9yZGVyLXJhZGl1czoxMHB4O2JhY2tncm91bmQ6I2VmZjJmNTtib3JkZXI6MXB4IHNvbGlkICNFRkYwRjE7Y29sb3I6IzcwNzY4NDtmb250LXNpemU6MTRweH0uY2Utc3R1YiBzdmd7d2lkdGg6MjBweDtoZWlnaHQ6MjBweH0uY2Utc3R1Yl9faW5mb3ttYXJnaW4tbGVmdDoxNHB4fS5jZS1zdHViX190aXRsZXtmb250LXdlaWdodDo1MDA7dGV4dC10cmFuc2Zvcm06Y2FwaXRhbGl6ZX0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRse2RpcmVjdGlvbjpydGx9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2R4LWxpc3R7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDo0MHB4fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX3BsdXN7cmlnaHQ6LTI2cHg7bGVmdDphdXRvfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX2FjdGlvbnN7cmlnaHQ6YXV0bztsZWZ0Oi0yNnB4fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fYWN0aW9uc3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDphdXRvO3BhZGRpbmctcmlnaHQ6MDtwYWRkaW5nLWxlZnQ6MTBweH19LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2Utc2V0dGluZ3N7bGVmdDo1cHg7cmlnaHQ6YXV0b30uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1zZXR0aW5nczpiZWZvcmV7cmlnaHQ6YXV0bztsZWZ0OjI1cHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2Utc2V0dGluZ3NfX2J1dHRvbjpub3QoOm50aC1jaGlsZCgzbiszKSl7bWFyZ2luLWxlZnQ6M3B4O21hcmdpbi1yaWdodDowfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLWNvbnZlcnNpb24tdG9vbF9faWNvbnttYXJnaW4tcmlnaHQ6MDttYXJnaW4tbGVmdDoxMHB4fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bntib3JkZXItcmlnaHQ6MHB4IHNvbGlkIHRyYW5zcGFyZW50O2JvcmRlci1sZWZ0OjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCk7bWFyZ2luOjAgLTZweCAwIDZweH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24gLmljb24tLXRvZ2dsZXItZG93bnttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDo0cHh9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX3BsdXN7bGVmdDowO3JpZ2h0OjVweH19QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXRvb2xiYXJfX2FjdGlvbnN7bGVmdDotNXB4fX0uY2R4LXNlYXJjaC1maWVsZHstLWljb24tbWFyZ2luLXJpZ2h0OiAxMHB4O2JhY2tncm91bmQ6I0Y4RjhGODtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjI2LDIyNiwyMjksLjIpO2JvcmRlci1yYWRpdXM6NnB4O3BhZGRpbmc6MnB4O2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0byBhdXRvIDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6YXV0b30uY2R4LXNlYXJjaC1maWVsZF9faWNvbnt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tcmlnaHQ6dmFyKC0taWNvbi1tYXJnaW4tcmlnaHQpfS5jZHgtc2VhcmNoLWZpZWxkX19pY29uIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2NvbG9yOiM3MDc2ODR9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0e2ZvbnQtc2l6ZToxNHB4O291dGxpbmU6bm9uZTtmb250LXdlaWdodDo1MDA7Zm9udC1mYW1pbHk6aW5oZXJpdDtib3JkZXI6MDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O21hcmdpbjowO3BhZGRpbmc6MDtsaW5lLWhlaWdodDoyMnB4O21pbi13aWR0aDpjYWxjKDEwMCUgLSAyNnB4IC0gdmFyKC0taWNvbi1tYXJnaW4tcmlnaHQpKX0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODQ7Zm9udC13ZWlnaHQ6NTAwfS5jZHgtc2VhcmNoLWZpZWxkX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjUwMH0uY2UtcG9wb3ZlcnstLWJvcmRlci1yYWRpdXM6IDZweDstLXdpZHRoOiAyMDBweDstLW1heC1oZWlnaHQ6IDI3MHB4Oy0tcGFkZGluZzogNnB4Oy0tb2Zmc2V0LWZyb20tdGFyZ2V0OiA4cHg7LS1jb2xvci1ib3JkZXI6ICNFRkYwRjE7LS1jb2xvci1zaGFkb3c6IHJnYmEoMTMsIDIwLCAzMywgLjEpOy0tY29sb3ItYmFja2dyb3VuZDogd2hpdGU7LS1jb2xvci10ZXh0LXByaW1hcnk6IGJsYWNrOy0tY29sb3ItdGV4dC1zZWNvbmRhcnk6ICM3MDc2ODQ7LS1jb2xvci1ib3JkZXItaWNvbjogcmdiYSgyMDEsIDIwMSwgMjA0LCAuNDgpOy0tY29sb3ItYm9yZGVyLWljb24tZGlzYWJsZWQ6ICNFRkYwRjE7LS1jb2xvci10ZXh0LWljb24tYWN0aXZlOiAjMzg4QUU1Oy0tY29sb3ItYmFja2dyb3VuZC1pY29uLWFjdGl2ZTogcmdiYSg1NiwgMTM4LCAyMjksIC4xKTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1mb2N1czogcmdiYSgzNCwgMTg2LCAyNTUsIC4wOCk7LS1jb2xvci1zaGFkb3ctaXRlbS1mb2N1czogcmdiYSg3LCAxNjEsIDIyNywgLjA4KTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1ob3ZlcjogI0Y4RjhGODstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtOiAjRTI0QTRBOy0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWNvbmZpcm0taG92ZXI6ICNDRTQzNDM7LS1wb3BvdmVyLXRvcDogY2FsYygxMDAlICsgdmFyKC0tb2Zmc2V0LWZyb20tdGFyZ2V0KSk7LS1wb3BvdmVyLWxlZnQ6IDA7LS1uZXN0ZWQtcG9wb3Zlci1vdmVybGFwOiA0cHg7LS1pY29uLXNpemU6IDIwcHg7LS1pdGVtLXBhZGRpbmc6IDNweDstLWl0ZW0taGVpZ2h0OiBjYWxjKHZhcigtLWljb24tc2l6ZSkgKyAyICogdmFyKC0taXRlbS1wYWRkaW5nKSl9LmNlLXBvcG92ZXJfX2NvbnRhaW5lcnttaW4td2lkdGg6dmFyKC0td2lkdGgpO3dpZHRoOnZhcigtLXdpZHRoKTttYXgtaGVpZ2h0OnZhcigtLW1heC1oZWlnaHQpO2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7b3ZlcmZsb3c6aGlkZGVuOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDstd2Via2l0LWJveC1zaGFkb3c6MHB4IDNweCAxNXB4IC0zcHggdmFyKC0tY29sb3Itc2hhZG93KTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCB2YXIoLS1jb2xvci1zaGFkb3cpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6dmFyKC0tcG9wb3Zlci1sZWZ0KTt0b3A6dmFyKC0tcG9wb3Zlci10b3ApO2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYmFja2dyb3VuZCk7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjt6LWluZGV4OjQ7b3BhY2l0eTowO21heC1oZWlnaHQ6MDtwb2ludGVyLWV2ZW50czpub25lO3BhZGRpbmc6MDtib3JkZXI6bm9uZX0uY2UtcG9wb3Zlci0tb3BlbmVkPi5jZS1wb3BvdmVyX19jb250YWluZXJ7b3BhY2l0eToxO3BhZGRpbmc6dmFyKC0tcGFkZGluZyk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtwb2ludGVyLWV2ZW50czphdXRvOy13ZWJraXQtYW5pbWF0aW9uOnBhbmVsU2hvd2luZyAuMXMgZWFzZTthbmltYXRpb246cGFuZWxTaG93aW5nIC4xcyBlYXNlO2JvcmRlcjoxcHggc29saWQgdmFyKC0tY29sb3ItYm9yZGVyKX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLS1vcGVuZWQ+LmNlLXBvcG92ZXJfX2NvbnRhaW5lcnstd2Via2l0LWFuaW1hdGlvbjpwYW5lbFNob3dpbmdNb2JpbGUgLjI1cyBlYXNlO2FuaW1hdGlvbjpwYW5lbFNob3dpbmdNb2JpbGUgLjI1cyBlYXNlfX0uY2UtcG9wb3Zlci0tb3Blbi10b3AgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnstLXBvcG92ZXItdG9wOiBjYWxjKC0xICogKHZhcigtLW9mZnNldC1mcm9tLXRhcmdldCkgKyB2YXIoLS1wb3BvdmVyLWhlaWdodCkpKX0uY2UtcG9wb3Zlci0tb3Blbi1sZWZ0IC5jZS1wb3BvdmVyX19jb250YWluZXJ7LS1wb3BvdmVyLWxlZnQ6IGNhbGMoLTEgKiB2YXIoLS13aWR0aCkgKyAxMDAlKX0uY2UtcG9wb3Zlcl9faXRlbXN7b3ZlcmZsb3cteTphdXRvOy1tcy1zY3JvbGwtY2hhaW5pbmc6bm9uZTtvdmVyc2Nyb2xsLWJlaGF2aW9yOmNvbnRhaW59QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlcl9fb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOiMxRDIwMkI7ei1pbmRleDozO29wYWNpdHk6LjU7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjEycyBlYXNlLWluO3RyYW5zaXRpb246b3BhY2l0eSAuMTJzIGVhc2UtaW47d2lsbC1jaGFuZ2U6b3BhY2l0eTt2aXNpYmlsaXR5OnZpc2libGV9fS5jZS1wb3BvdmVyX19vdmVybGF5LS1oaWRkZW57ZGlzcGxheTpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXIgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnstLW9mZnNldDogNXB4O3Bvc2l0aW9uOmZpeGVkO21heC13aWR0aDpub25lO21pbi13aWR0aDpjYWxjKDEwMCUgLSB2YXIoLS1vZmZzZXQpICogMik7bGVmdDp2YXIoLS1vZmZzZXQpO3JpZ2h0OnZhcigtLW9mZnNldCk7Ym90dG9tOmNhbGModmFyKC0tb2Zmc2V0KSArIGVudihzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSk7dG9wOmF1dG87Ym9yZGVyLXJhZGl1czoxMHB4fX0uY2UtcG9wb3Zlcl9fc2VhcmNoe21hcmdpbi1ib3R0b206NXB4fS5jZS1wb3BvdmVyX19ub3RoaW5nLWZvdW5kLW1lc3NhZ2V7Y29sb3I6IzcwNzY4NDtkaXNwbGF5Om5vbmU7Y3Vyc29yOmRlZmF1bHQ7cGFkZGluZzozcHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtmb250LXdlaWdodDo1MDA7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5jZS1wb3BvdmVyX19ub3RoaW5nLWZvdW5kLW1lc3NhZ2UtLWRpc3BsYXllZHtkaXNwbGF5OmJsb2NrfS5jZS1wb3BvdmVyLS1uZXN0ZWQgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnstLXBvcG92ZXItbGVmdDogY2FsYyh2YXIoLS1uZXN0aW5nLWxldmVsKSAqICh2YXIoLS13aWR0aCkgLSB2YXIoLS1uZXN0ZWQtcG9wb3Zlci1vdmVybGFwKSkpO3RvcDpjYWxjKHZhcigtLXRyaWdnZXItaXRlbS10b3ApIC0gdmFyKC0tbmVzdGVkLXBvcG92ZXItb3ZlcmxhcCkpO3Bvc2l0aW9uOmFic29sdXRlfS5jZS1wb3BvdmVyLS1vcGVuLXRvcC5jZS1wb3BvdmVyLS1uZXN0ZWQgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnt0b3A6Y2FsYyh2YXIoLS10cmlnZ2VyLWl0ZW0tdG9wKSAtIHZhcigtLXBvcG92ZXItaGVpZ2h0KSArIHZhcigtLWl0ZW0taGVpZ2h0KSArIHZhcigtLW9mZnNldC1mcm9tLXRhcmdldCkgKyB2YXIoLS1uZXN0ZWQtcG9wb3Zlci1vdmVybGFwKSl9LmNlLXBvcG92ZXItLW9wZW4tbGVmdCAuY2UtcG9wb3Zlci0tbmVzdGVkIC5jZS1wb3BvdmVyX19jb250YWluZXJ7LS1wb3BvdmVyLWxlZnQ6IGNhbGMoLTEgKiAodmFyKC0tbmVzdGluZy1sZXZlbCkgKyAxKSAqIHZhcigtLXdpZHRoKSArIDEwMCUpfS5jZS1wb3BvdmVyLWl0ZW0tc2VwYXJhdG9ye3BhZGRpbmc6NHB4IDNweH0uY2UtcG9wb3Zlci1pdGVtLXNlcGFyYXRvci0taGlkZGVue2Rpc3BsYXk6bm9uZX0uY2UtcG9wb3Zlci1pdGVtLXNlcGFyYXRvcl9fbGluZXtoZWlnaHQ6MXB4O2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYm9yZGVyKTt3aWR0aDoxMDAlfS5jZS1wb3BvdmVyLWl0ZW0taHRtbC0taGlkZGVue2Rpc3BsYXk6bm9uZX0uY2UtcG9wb3Zlci1pdGVtey0tYm9yZGVyLXJhZGl1czogNnB4O2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOnZhcigtLWl0ZW0tcGFkZGluZyk7Y29sb3I6dmFyKC0tY29sb3ItdGV4dC1wcmltYXJ5KTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7Ym9yZGVyOm5vbmU7YmFja2dyb3VuZDp0cmFuc3BhcmVudH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLWl0ZW17cGFkZGluZzo0cHh9fS5jZS1wb3BvdmVyLWl0ZW06bm90KDpsYXN0LW9mLXR5cGUpe21hcmdpbi1ib3R0b206MXB4fS5jZS1wb3BvdmVyLWl0ZW1fX2ljb257d2lkdGg6MjZweDtoZWlnaHQ6MjZweDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmNlLXBvcG92ZXItaXRlbV9faWNvbiBzdmd7d2lkdGg6MjBweDtoZWlnaHQ6MjBweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLWl0ZW1fX2ljb257d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtib3JkZXItcmFkaXVzOjhweH0uY2UtcG9wb3Zlci1pdGVtX19pY29uIHN2Z3t3aWR0aDoyOHB4O2hlaWdodDoyOHB4fX0uY2UtcG9wb3Zlci1pdGVtX19pY29uLS10b29se21hcmdpbi1yaWdodDo0cHh9LmNlLXBvcG92ZXItaXRlbV9fdGl0bGV7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtmb250LXdlaWdodDo1MDA7b3ZlcmZsb3c6aGlkZGVuO3doaXRlLXNwYWNlOm5vd3JhcDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO21hcmdpbi1yaWdodDphdXRvfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItaXRlbV9fdGl0bGV7Zm9udC1zaXplOjE2cHh9fS5jZS1wb3BvdmVyLWl0ZW1fX3NlY29uZGFyeS10aXRsZXtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXNlY29uZGFyeSk7Zm9udC1zaXplOjEycHg7d2hpdGUtc3BhY2U6bm93cmFwO2xldHRlci1zcGFjaW5nOi0uMWVtO3BhZGRpbmctcmlnaHQ6NXB4O29wYWNpdHk6LjZ9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci1pdGVtX19zZWNvbmRhcnktdGl0bGV7ZGlzcGxheTpub25lfX0uY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWljb24tYWN0aXZlKTtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LWljb24tYWN0aXZlKX0uY2UtcG9wb3Zlci1pdGVtLS1kaXNhYmxlZHtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXNlY29uZGFyeSk7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX0uY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1cyl7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tZm9jdXMpIWltcG9ydGFudH0uY2UtcG9wb3Zlci1pdGVtLS1oaWRkZW57ZGlzcGxheTpub25lfUBtZWRpYSAoaG92ZXI6IGhvdmVyKXsuY2UtcG9wb3Zlci1pdGVtOmhvdmVye2N1cnNvcjpwb2ludGVyfS5jZS1wb3BvdmVyLWl0ZW06aG92ZXI6bm90KC5jZS1wb3BvdmVyLWl0ZW0tLW5vLWhvdmVyKXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaXRlbS1ob3Zlcil9fS5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbntiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtKX0uY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb24gLmNlLXBvcG92ZXItaXRlbV9fdGl0bGUsLmNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb257Y29sb3I6I2ZmZn1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1ob3Zlcik6aG92ZXJ7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tY29uZmlybS1ob3Zlcil9fS5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbjpub3QoLmNlLXBvcG92ZXItaXRlbS0tbm8tZm9jdXMpLmNlLXBvcG92ZXItaXRlbS0tZm9jdXNlZHtiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtLWhvdmVyKSFpbXBvcnRhbnR9QC13ZWJraXQta2V5ZnJhbWVzIHBhbmVsU2hvd2luZ3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KSBzY2FsZSguOSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCl9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBwYW5lbFNob3dpbmd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC04cHgpIHNjYWxlKC45KX03MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUAtd2Via2l0LWtleWZyYW1lcyBwYW5lbFNob3dpbmdNb2JpbGV7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTRweCkgc2NhbGUoLjk4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxNHB4KSBzY2FsZSguOTgpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1Aa2V5ZnJhbWVzIHBhbmVsU2hvd2luZ01vYmlsZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgxNHB4KSBzY2FsZSguOTgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDE0cHgpIHNjYWxlKC45OCl9NzAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC00cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC00cHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fS53b2JibGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTp3b2JibGU7YW5pbWF0aW9uLW5hbWU6d29iYmxlOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi40czthbmltYXRpb24tZHVyYXRpb246LjRzfUAtd2Via2l0LWtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtOSUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX19QGtleWZyYW1lcyB3b2JibGV7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTE1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtOSUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDklLDAsMCl9NDUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC00JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoNCUsMCwwKX03NSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTElLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX19LmNlLXBvcG92ZXItaGVhZGVye21hcmdpbi1ib3R0b206OHB4O21hcmdpbi10b3A6NHB4O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmNlLXBvcG92ZXItaGVhZGVyX190ZXh0e2ZvbnQtc2l6ZToxOHB4O2ZvbnQtd2VpZ2h0OjYwMH0uY2UtcG9wb3Zlci1oZWFkZXJfX2JhY2stYnV0dG9ue2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXByaW1hcnkpfS5jZS1wb3BvdmVyLWhlYWRlcl9fYmFjay1idXR0b24gc3Zne2Rpc3BsYXk6YmxvY2s7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH0uY2UtcG9wb3Zlci0taW5saW5ley0taGVpZ2h0OiAzOHB4Oy0taGVpZ2h0LW1vYmlsZTogNDZweDstLWNvbnRhaW5lci1wYWRkaW5nOiA0cHg7cG9zaXRpb246cmVsYXRpdmV9LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnR7bWFyZ2luLWJvdHRvbTowfS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXJfX2l0ZW1ze2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlcl9fY29udGFpbmVyey13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3c7cGFkZGluZzp2YXIoLS1jb250YWluZXItcGFkZGluZyk7aGVpZ2h0OnZhcigtLWhlaWdodCk7dG9wOjA7bWluLXdpZHRoOi13ZWJraXQtbWF4LWNvbnRlbnQ7bWluLXdpZHRoOi1tb3otbWF4LWNvbnRlbnQ7bWluLXdpZHRoOm1heC1jb250ZW50O3dpZHRoOi13ZWJraXQtbWF4LWNvbnRlbnQ7d2lkdGg6LW1vei1tYXgtY29udGVudDt3aWR0aDptYXgtY29udGVudDstd2Via2l0LWFuaW1hdGlvbjpub25lO2FuaW1hdGlvbjpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlcl9fY29udGFpbmVye2hlaWdodDp2YXIoLS1oZWlnaHQtbW9iaWxlKTtwb3NpdGlvbjphYnNvbHV0ZX19LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci1pdGVtLXNlcGFyYXRvcntwYWRkaW5nOjAgNHB4fS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItaXRlbS1zZXBhcmF0b3JfX2xpbmV7aGVpZ2h0OjEwMCU7d2lkdGg6MXB4fS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItaXRlbXtib3JkZXItcmFkaXVzOjRweDtwYWRkaW5nOjRweH0uY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb24tLXRvb2x7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7bWFyZ2luLXJpZ2h0OjB9LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci1pdGVtX19pY29ue3dpZHRoOmF1dG87d2lkdGg6aW5pdGlhbDtoZWlnaHQ6YXV0bztoZWlnaHQ6aW5pdGlhbH0uY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb24gc3Zne3dpZHRoOjI4cHg7aGVpZ2h0OjI4cHh9fS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItaXRlbTpub3QoOmxhc3Qtb2YtdHlwZSl7bWFyZ2luLWJvdHRvbTowO21hcmdpbi1ib3R0b206aW5pdGlhbH0uY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLWl0ZW0taHRtbHtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItaXRlbV9faWNvbi0tY2hldnJvbi1yaWdodHstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItLW5lc3RlZC1sZXZlbC0xIC5jZS1wb3BvdmVyX19jb250YWluZXJ7LS1vZmZzZXQ6IDNweDtsZWZ0OjA7dG9wOmNhbGModmFyKC0taGVpZ2h0KSArIHZhcigtLW9mZnNldCkpfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci0tbmVzdGVkLWxldmVsLTEgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnt0b3A6Y2FsYyh2YXIoLS1oZWlnaHQtbW9iaWxlKSArIHZhcigtLW9mZnNldCkpfX0uY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLS1uZXN0ZWQgLmNlLXBvcG92ZXJfX2NvbnRhaW5lcnttaW4td2lkdGg6dmFyKC0td2lkdGgpO3dpZHRoOnZhcigtLXdpZHRoKTtoZWlnaHQ6LXdlYmtpdC1maXQtY29udGVudDtoZWlnaHQ6LW1vei1maXQtY29udGVudDtoZWlnaHQ6Zml0LWNvbnRlbnQ7cGFkZGluZzo2cHg7LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci0tbmVzdGVkIC5jZS1wb3BvdmVyX19pdGVtc3tkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCV9LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci0tbmVzdGVkIC5jZS1wb3BvdmVyLWl0ZW17Ym9yZGVyLXJhZGl1czo2cHg7cGFkZGluZzozcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLS1uZXN0ZWQgLmNlLXBvcG92ZXItaXRlbXtwYWRkaW5nOjRweH19LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci0tbmVzdGVkIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb24tLXRvb2x7bWFyZ2luLXJpZ2h0OjRweH0uY2UtcG9wb3Zlci0taW5saW5lIC5jZS1wb3BvdmVyLS1uZXN0ZWQgLmNlLXBvcG92ZXItaXRlbV9faWNvbnt3aWR0aDoyNnB4O2hlaWdodDoyNnB4fS5jZS1wb3BvdmVyLS1pbmxpbmUgLmNlLXBvcG92ZXItLW5lc3RlZCAuY2UtcG9wb3Zlci1pdGVtLXNlcGFyYXRvcntwYWRkaW5nOjRweCAzcHh9LmNlLXBvcG92ZXItLWlubGluZSAuY2UtcG9wb3Zlci0tbmVzdGVkIC5jZS1wb3BvdmVyLWl0ZW0tc2VwYXJhdG9yX19saW5le3dpZHRoOjEwMCU7aGVpZ2h0OjFweH0uY29kZXgtZWRpdG9yIFtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpiZWZvcmUsLmNvZGV4LWVkaXRvciBbZGF0YS1wbGFjZWhvbGRlcl1bZGF0YS1lbXB0eT10cnVlXTpiZWZvcmV7cG9pbnRlci1ldmVudHM6bm9uZTtjb2xvcjojNzA3Njg0O2N1cnNvcjp0ZXh0O2NvbnRlbnQ6YXR0cihkYXRhLXBsYWNlaG9sZGVyKX0uY29kZXgtZWRpdG9yIFtkYXRhLXBsYWNlaG9sZGVyLWFjdGl2ZV06ZW1wdHk6YmVmb3JlLC5jb2RleC1lZGl0b3IgW2RhdGEtcGxhY2Vob2xkZXItYWN0aXZlXVtkYXRhLWVtcHR5PXRydWVdOmJlZm9yZXtwb2ludGVyLWV2ZW50czpub25lO2NvbG9yOiM3MDc2ODQ7Y3Vyc29yOnRleHR9LmNvZGV4LWVkaXRvciBbZGF0YS1wbGFjZWhvbGRlci1hY3RpdmVdOmVtcHR5OmZvY3VzOmJlZm9yZSwuY29kZXgtZWRpdG9yIFtkYXRhLXBsYWNlaG9sZGVyLWFjdGl2ZV1bZGF0YS1lbXB0eT10cnVlXTpmb2N1czpiZWZvcmV7Y29udGVudDphdHRyKGRhdGEtcGxhY2Vob2xkZXItYWN0aXZlKX1cbmA7XG5jbGFzcyB5cyBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLmlzTW9iaWxlID0gITEsIHRoaXMuY29udGVudFJlY3RDYWNoZSA9IHZvaWQgMCwgdGhpcy5yZXNpemVEZWJvdW5jZXIgPSBrdCgoKSA9PiB7XG4gICAgICB0aGlzLndpbmRvd1Jlc2l6ZSgpO1xuICAgIH0sIDIwMCk7XG4gIH1cbiAgLyoqXG4gICAqIEVkaXRvci5qcyBVSSBDU1MgY2xhc3MgbmFtZXNcbiAgICpcbiAgICogQHJldHVybnMge3tlZGl0b3JXcmFwcGVyOiBzdHJpbmcsIGVkaXRvclpvbmU6IHN0cmluZ319XG4gICAqL1xuICBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBlZGl0b3JXcmFwcGVyOiBcImNvZGV4LWVkaXRvclwiLFxuICAgICAgZWRpdG9yV3JhcHBlck5hcnJvdzogXCJjb2RleC1lZGl0b3ItLW5hcnJvd1wiLFxuICAgICAgZWRpdG9yWm9uZTogXCJjb2RleC1lZGl0b3JfX3JlZGFjdG9yXCIsXG4gICAgICBlZGl0b3Jab25lSGlkZGVuOiBcImNvZGV4LWVkaXRvcl9fcmVkYWN0b3ItLWhpZGRlblwiLFxuICAgICAgZWRpdG9yRW1wdHk6IFwiY29kZXgtZWRpdG9yLS1lbXB0eVwiLFxuICAgICAgZWRpdG9yUnRsRml4OiBcImNvZGV4LWVkaXRvci0tcnRsXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gV2lkdGggb2YgY2VudGVyIGNvbHVtbiBvZiBFZGl0b3JcbiAgICpcbiAgICogQHJldHVybnMge0RPTVJlY3R9XG4gICAqL1xuICBnZXQgY29udGVudFJlY3QoKSB7XG4gICAgaWYgKHRoaXMuY29udGVudFJlY3RDYWNoZSlcbiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRSZWN0Q2FjaGU7XG4gICAgY29uc3QgZSA9IHRoaXMubm9kZXMud3JhcHBlci5xdWVyeVNlbGVjdG9yKGAuJHtELkNTUy5jb250ZW50fWApO1xuICAgIHJldHVybiBlID8gKHRoaXMuY29udGVudFJlY3RDYWNoZSA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRoaXMuY29udGVudFJlY3RDYWNoZSkgOiB7XG4gICAgICB3aWR0aDogNjUwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTWFraW5nIG1haW4gaW50ZXJmYWNlXG4gICAqL1xuICBhc3luYyBwcmVwYXJlKCkge1xuICAgIHRoaXMuc2V0SXNNb2JpbGUoKSwgdGhpcy5tYWtlKCksIHRoaXMubG9hZFN0eWxlcygpO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGUgcmVhZC1vbmx5IHN0YXRlXG4gICAqXG4gICAqIElmIHJlYWRPbmx5IGlzIHRydWU6XG4gICAqICAtIHJlbW92ZXMgYWxsIGxpc3RlbmVycyBmcm9tIG1haW4gVUkgbW9kdWxlIGVsZW1lbnRzXG4gICAqXG4gICAqIGlmIHJlYWRPbmx5IGlzIGZhbHNlOlxuICAgKiAgLSBlbmFibGVzIGFsbCBsaXN0ZW5lcnMgdG8gVUkgbW9kdWxlIGVsZW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVhZE9ubHlFbmFibGVkIC0gXCJyZWFkIG9ubHlcIiBzdGF0ZVxuICAgKi9cbiAgdG9nZ2xlUmVhZE9ubHkoZSkge1xuICAgIGUgPyB0aGlzLmRpc2FibGVNb2R1bGVCaW5kaW5ncygpIDogd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICAgIH0sIHtcbiAgICAgIHRpbWVvdXQ6IDJlM1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBFZGl0b3IgaXMgZW1wdHkgYW5kIHNldCBDU1MgY2xhc3MgdG8gd3JhcHBlclxuICAgKi9cbiAgY2hlY2tFbXB0aW5lc3MoKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmVkaXRvckVtcHR5LCBlLmlzRWRpdG9yRW1wdHkpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBvbmUgb2YgVG9vbGJhciBpcyBvcGVuZWRcbiAgICogVXNlZCB0byBwcmV2ZW50IGdsb2JhbCBrZXlkb3ducyAoZm9yIGV4YW1wbGUsIEVudGVyKSBjb25mbGljdHMgd2l0aCBFbnRlci1vbi10b29sYmFyXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IHNvbWVUb29sYmFyT3BlbmVkKCkge1xuICAgIGNvbnN0IHsgVG9vbGJhcjogZSwgQmxvY2tTZXR0aW5nczogdCwgSW5saW5lVG9vbGJhcjogbyB9ID0gdGhpcy5FZGl0b3I7XG4gICAgcmV0dXJuICEhKHQub3BlbmVkIHx8IG8ub3BlbmVkIHx8IGUudG9vbGJveC5vcGVuZWQpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBmb3Igc29tZSBGbGlwcGVyLWJ1dHRvbnMgaXMgdW5kZXIgZm9jdXNcbiAgICovXG4gIGdldCBzb21lRmxpcHBlckJ1dHRvbkZvY3VzZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5oYXNGb2N1cygpID8gITAgOiBPYmplY3QuZW50cmllcyh0aGlzLkVkaXRvcikuZmlsdGVyKChbZSwgdF0pID0+IHQuZmxpcHBlciBpbnN0YW5jZW9mIGxlKS5zb21lKChbZSwgdF0pID0+IHQuZmxpcHBlci5oYXNGb2N1cygpKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW4gZWRpdG9yYHMgVUlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub2Rlcy5ob2xkZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgYWxsIEVkaXRvcidzIHRvb2xiYXJzXG4gICAqL1xuICBjbG9zZUFsbFRvb2xiYXJzKCkge1xuICAgIGNvbnN0IHsgVG9vbGJhcjogZSwgQmxvY2tTZXR0aW5nczogdCwgSW5saW5lVG9vbGJhcjogbyB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdC5jbG9zZSgpLCBvLmNsb3NlKCksIGUudG9vbGJveC5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBmb3IgbW9iaWxlIG1vZGUgYW5kIHNhdmUgdGhlIHJlc3VsdFxuICAgKi9cbiAgc2V0SXNNb2JpbGUoKSB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgQXQ7XG4gICAgZSAhPT0gdGhpcy5pc01vYmlsZSAmJiB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdCh5ZSwge1xuICAgICAgaXNFbmFibGVkOiB0aGlzLmlzTW9iaWxlXG4gICAgfSksIHRoaXMuaXNNb2JpbGUgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlcyBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMuaG9sZGVyID0gZC5nZXRIb2xkZXIodGhpcy5jb25maWcuaG9sZGVyKSwgdGhpcy5ub2Rlcy53cmFwcGVyID0gZC5tYWtlKFwiZGl2XCIsIFtcbiAgICAgIHRoaXMuQ1NTLmVkaXRvcldyYXBwZXIsXG4gICAgICAuLi50aGlzLmlzUnRsID8gW3RoaXMuQ1NTLmVkaXRvclJ0bEZpeF0gOiBbXVxuICAgIF0pLCB0aGlzLm5vZGVzLnJlZGFjdG9yID0gZC5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmVkaXRvclpvbmUpLCB0aGlzLm5vZGVzLmhvbGRlci5vZmZzZXRXaWR0aCA8IHRoaXMuY29udGVudFJlY3Qud2lkdGggJiYgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuZWRpdG9yV3JhcHBlck5hcnJvdyksIHRoaXMubm9kZXMucmVkYWN0b3Iuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMuY29uZmlnLm1pbkhlaWdodCArIFwicHhcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMucmVkYWN0b3IpLCB0aGlzLm5vZGVzLmhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLndyYXBwZXIpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmRzIENTU1xuICAgKi9cbiAgbG9hZFN0eWxlcygpIHtcbiAgICBjb25zdCBlID0gXCJlZGl0b3ItanMtc3R5bGVzXCI7XG4gICAgaWYgKGQuZ2V0KGUpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBkLm1ha2UoXCJzdHlsZVwiLCBudWxsLCB7XG4gICAgICBpZDogZSxcbiAgICAgIHRleHRDb250ZW50OiB4cy50b1N0cmluZygpXG4gICAgfSk7XG4gICAgdGhpcy5jb25maWcuc3R5bGUgJiYgIVYodGhpcy5jb25maWcuc3R5bGUpICYmIHRoaXMuY29uZmlnLnN0eWxlLm5vbmNlICYmIHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgdGhpcy5jb25maWcuc3R5bGUubm9uY2UpLCBkLnByZXBlbmQoZG9jdW1lbnQuaGVhZCwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmQgZXZlbnRzIG9uIHRoZSBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnJlZGFjdG9yLCBcImNsaWNrXCIsICh0KSA9PiB7XG4gICAgICB0aGlzLnJlZGFjdG9yQ2xpY2tlZCh0KTtcbiAgICB9LCAhMSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwibW91c2Vkb3duXCIsICh0KSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50VG91Y2hlZCh0KTtcbiAgICB9LCB7XG4gICAgICBjYXB0dXJlOiAhMCxcbiAgICAgIHBhc3NpdmU6ICEwXG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwidG91Y2hzdGFydFwiLCAodCkgPT4ge1xuICAgICAgdGhpcy5kb2N1bWVudFRvdWNoZWQodCk7XG4gICAgfSwge1xuICAgICAgY2FwdHVyZTogITAsXG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJrZXlkb3duXCIsICh0KSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50S2V5ZG93bih0KTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcIm1vdXNlZG93blwiLCAodCkgPT4ge1xuICAgICAgdGhpcy5kb2N1bWVudENsaWNrZWQodCk7XG4gICAgfSwgITApO1xuICAgIGNvbnN0IGUgPSBrdCgoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICB9LCBzcyk7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZG9jdW1lbnQsIFwic2VsZWN0aW9uY2hhbmdlXCIsIGUsICEwKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24od2luZG93LCBcInJlc2l6ZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlc2l6ZURlYm91bmNlcigpO1xuICAgIH0sIHtcbiAgICAgIHBhc3NpdmU6ICEwXG4gICAgfSksIHRoaXMud2F0Y2hCbG9ja0hvdmVyZWRFdmVudHMoKSwgdGhpcy5lbmFibGVJbnB1dHNFbXB0eU1hcmsoKTtcbiAgfVxuICAvKipcbiAgICogTGlzdGVuIHJlZGFjdG9yIG1vdXNlbW92ZSB0byBlbWl0ICdibG9jay1ob3ZlcmVkJyBldmVudFxuICAgKi9cbiAgd2F0Y2hCbG9ja0hvdmVyZWRFdmVudHMoKSB7XG4gICAgbGV0IGU7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy5yZWRhY3RvciwgXCJtb3VzZW1vdmVcIiwgVmUoKHQpID0+IHtcbiAgICAgIGNvbnN0IG8gPSB0LnRhcmdldC5jbG9zZXN0KFwiLmNlLWJsb2NrXCIpO1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYW55QmxvY2tTZWxlY3RlZCB8fCBvICYmIGUgIT09IG8gJiYgKGUgPSBvLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIuZW1pdChvbywge1xuICAgICAgICBibG9jazogdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlDaGlsZE5vZGUobylcbiAgICAgIH0pKTtcbiAgICB9LCAyMCksIHtcbiAgICAgIHBhc3NpdmU6ICEwXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFVuYmluZCBldmVudHMgb24gdGhlIEVkaXRvci5qcyBpbnRlcmZhY2VcbiAgICovXG4gIGRpc2FibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5jbGVhckFsbCgpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNpemUgd2luZG93IGhhbmRsZXJcbiAgICovXG4gIHdpbmRvd1Jlc2l6ZSgpIHtcbiAgICB0aGlzLmNvbnRlbnRSZWN0Q2FjaGUgPSBudWxsLCB0aGlzLnNldElzTW9iaWxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBrZXlkb3ducyBvbiBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50S2V5ZG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2Ugdy5FTlRFUjpcbiAgICAgICAgdGhpcy5lbnRlclByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB3LkJBQ0tTUEFDRTpcbiAgICAgIGNhc2Ugdy5ERUxFVEU6XG4gICAgICAgIHRoaXMuYmFja3NwYWNlUHJlc3NlZChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHcuRVNDOlxuICAgICAgICB0aGlzLmVzY2FwZVByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5kZWZhdWx0QmVoYXZpb3VyKGUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElnbm9yZSBhbGwgb3RoZXIgZG9jdW1lbnQncyBrZXlkb3duIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGRlZmF1bHRCZWhhdmlvdXIoZSkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiB0IH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIsIG8gPSBlLnRhcmdldC5jbG9zZXN0KGAuJHt0aGlzLkNTUy5lZGl0b3JXcmFwcGVyfWApLCBpID0gZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5O1xuICAgIGlmICh0ICE9PSB2b2lkIDAgJiYgbyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tFdmVudHMua2V5ZG93bihlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbyB8fCB0ICYmIGkgfHwgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci51bnNldEN1cnJlbnRCbG9jaygpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGJhY2tzcGFjZVByZXNzZWQoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbywgQ2FyZXQ6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGlmIChvLmFueUJsb2NrU2VsZWN0ZWQgJiYgIWIuaXNTZWxlY3Rpb25FeGlzdHMpIHtcbiAgICAgIGNvbnN0IHMgPSB0LnJlbW92ZVNlbGVjdGVkQmxvY2tzKCksIHIgPSB0Lmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgocywgITApO1xuICAgICAgaS5zZXRUb0Jsb2NrKHIsIGkucG9zaXRpb25zLlNUQVJUKSwgby5jbGVhclNlbGVjdGlvbihlKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXNjYXBlIHByZXNzZWRcbiAgICogSWYgc29tZSBvZiBUb29sYmFyIGNvbXBvbmVudHMgYXJlIG9wZW5lZCwgdGhlbiBjbG9zZSBpdCBvdGhlcndpc2UgY2xvc2UgVG9vbGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIGVzY2FwZSBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBlc2NhcGVQcmVzc2VkKGUpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKSwgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW5lZCA/ICh0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3guY2xvc2UoKSwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLCB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuRU5EKSkgOiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCA/IHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3MuY2xvc2UoKSA6IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIub3BlbmVkID8gdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpIDogdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBFbnRlciBwcmVzc2VkIG9uIGRvY3VtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgZW50ZXJQcmVzc2VkKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQmxvY2tTZWxlY3Rpb246IG8gfSA9IHRoaXMuRWRpdG9yO1xuICAgIGlmICh0aGlzLnNvbWVUb29sYmFyT3BlbmVkKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGkgPSB0LmN1cnJlbnRCbG9ja0luZGV4ID49IDA7XG4gICAgaWYgKG8uYW55QmxvY2tTZWxlY3RlZCAmJiAhYi5pc1NlbGVjdGlvbkV4aXN0cykge1xuICAgICAgby5jbGVhclNlbGVjdGlvbihlKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuc29tZVRvb2xiYXJPcGVuZWQgJiYgaSAmJiBlLnRhcmdldC50YWdOYW1lID09PSBcIkJPRFlcIikge1xuICAgICAgY29uc3QgcyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnQoKTtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhzKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbihzKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBjbGlja3Mgb24gZG9jdW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIENsaWNrIGV2ZW50XG4gICAqL1xuICBkb2N1bWVudENsaWNrZWQoZSkge1xuICAgIHZhciBsLCBhO1xuICAgIGlmICghZS5pc1RydXN0ZWQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgdCA9IGUudGFyZ2V0O1xuICAgIHRoaXMubm9kZXMuaG9sZGVyLmNvbnRhaW5zKHQpIHx8IGIuaXNBdEVkaXRvciB8fCAodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnVuc2V0Q3VycmVudEJsb2NrKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSk7XG4gICAgY29uc3QgaSA9IChsID0gdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5ub2Rlcy53cmFwcGVyKSA9PSBudWxsID8gdm9pZCAwIDogbC5jb250YWlucyh0KSwgcyA9IChhID0gdGhpcy5FZGl0b3IuVG9vbGJhci5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIpID09IG51bGwgPyB2b2lkIDAgOiBhLmNvbnRhaW5zKHQpLCByID0gaSB8fCBzO1xuICAgIGlmICh0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCAmJiAhcikge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpO1xuICAgICAgY29uc3QgYyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKHQpO1xuICAgICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbihjKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcnN0IHRvdWNoIG9uIGVkaXRvclxuICAgKiBGaXJlZCBiZWZvcmUgY2xpY2tcbiAgICpcbiAgICogVXNlZCB0byBjaGFuZ2UgY3VycmVudCBibG9jayDigJQgd2UgbmVlZCB0byBkbyBpdCBiZWZvcmUgJ3NlbGVjdGlvbkNoYW5nZScgZXZlbnQuXG4gICAqIEFsc286XG4gICAqIC0gTW92ZSBhbmQgc2hvdyB0aGUgVG9vbGJhclxuICAgKiAtIFNldCBhIENhcmV0XG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudCB8IFRvdWNoRXZlbnR9IGV2ZW50IC0gdG91Y2ggb3IgbW91c2UgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50VG91Y2hlZChlKSB7XG4gICAgbGV0IHQgPSBlLnRhcmdldDtcbiAgICBpZiAodCA9PT0gdGhpcy5ub2Rlcy5yZWRhY3Rvcikge1xuICAgICAgY29uc3QgbyA9IGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ID8gZS5jbGllbnRYIDogZS50b3VjaGVzWzBdLmNsaWVudFgsIGkgPSBlIGluc3RhbmNlb2YgTW91c2VFdmVudCA/IGUuY2xpZW50WSA6IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgdCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQobywgaSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUodCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uaXNSZWN0QWN0aXZhdGVkKCkgfHwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9UaGVMYXN0QmxvY2soKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBBbGwgY2xpY2tzIG9uIHRoZSByZWRhY3RvciB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBjbGljayBldmVudFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogLSBCeSBjbGlja3Mgb24gdGhlIEVkaXRvcidzIGJvdHRvbSB6b25lOlxuICAgKiAgICAgIC0gaWYgbGFzdCBCbG9jayBpcyBlbXB0eSwgc2V0IGEgQ2FyZXQgdG8gdGhpc1xuICAgKiAgICAgIC0gb3RoZXJ3aXNlLCBhZGQgYSBuZXcgZW1wdHkgQmxvY2sgYW5kIHNldCBhIENhcmV0IHRvIHRoYXRcbiAgICovXG4gIHJlZGFjdG9yQ2xpY2tlZChlKSB7XG4gICAgaWYgKCFiLmlzQ29sbGFwc2VkKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBlLnRhcmdldCwgbyA9IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG4gICAgaWYgKGQuaXNBbmNob3IodCkgJiYgbykge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnN0IGkgPSB0LmdldEF0dHJpYnV0ZShcImhyZWZcIiksIHMgPSBTbyhpKTtcbiAgICAgIE1vKHMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByb2Nlc3NCb3R0b21ab25lQ2xpY2soZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHVzZXIgY2xpY2tzIG9uIHRoZSBFZGl0b3IncyBib3R0b20gem9uZTpcbiAgICogIC0gc2V0IGNhcmV0IHRvIHRoZSBsYXN0IGJsb2NrXG4gICAqICAtIG9yIGFkZCBuZXcgZW1wdHkgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IC0gY2xpY2sgZXZlbnRcbiAgICovXG4gIHByb2Nlc3NCb3R0b21ab25lQ2xpY2soZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KC0xKSwgbyA9IGQub2Zmc2V0KHQuaG9sZGVyKS5ib3R0b20sIGkgPSBlLnBhZ2VZLCB7IEJsb2NrU2VsZWN0aW9uOiBzIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGUudGFyZ2V0LmlzRXF1YWxOb2RlKHRoaXMubm9kZXMucmVkYWN0b3IpICYmIC8qKlxuICAgICogSWYgdGhlcmUgaXMgY3Jvc3MgYmxvY2sgc2VsZWN0aW9uIHN0YXJ0ZWQsIHRhcmdldCB3aWxsIGJlIGVxdWFsIHRvIHJlZGFjdG9yIHNvIHdlIG5lZWQgYWRkaXRpb25hbCBjaGVja1xuICAgICovXG4gICAgIXMuYW55QmxvY2tTZWxlY3RlZCAmJiAvKipcbiAgICAqIFByZXZlbnQgY2FyZXQganVtcGluZyAodG8gbGFzdCBibG9jaykgd2hlbiBjbGlja2luZyBiZXR3ZWVuIGJsb2Nrc1xuICAgICovXG4gICAgbyA8IGkpIHtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbCwgQ2FyZXQ6IGEsIFRvb2xiYXI6IGMgfSA9IHRoaXMuRWRpdG9yO1xuICAgICAgKCFsLmxhc3RCbG9jay50b29sLmlzRGVmYXVsdCB8fCAhbC5sYXN0QmxvY2suaXNFbXB0eSkgJiYgbC5pbnNlcnRBdEVuZCgpLCBhLnNldFRvVGhlTGFzdEJsb2NrKCksIGMubW92ZUFuZE9wZW4obC5sYXN0QmxvY2spO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHNlbGVjdGlvbiBjaGFuZ2VzIG9uIG1vYmlsZSBkZXZpY2VzXG4gICAqIFVzZXMgZm9yIHNob3dpbmcgdGhlIElubGluZSBUb29sYmFyXG4gICAqL1xuICBzZWxlY3Rpb25DaGFuZ2VkKCkge1xuICAgIGNvbnN0IHsgQ3Jvc3NCbG9ja1NlbGVjdGlvbjogZSwgQmxvY2tTZWxlY3Rpb246IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gYi5hbmNob3JFbGVtZW50O1xuICAgIGlmIChlLmlzQ3Jvc3NCbG9ja1NlbGVjdGlvblN0YXJ0ZWQgJiYgdC5hbnlCbG9ja1NlbGVjdGVkICYmIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksICFvKSB7XG4gICAgICBiLnJhbmdlIHx8IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgby5jbG9zZXN0KGAuJHtELkNTUy5jb250ZW50fWApID09PSBudWxsICYmICh0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNvbnRhaW5zTm9kZShvKSB8fCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksICEoby5kYXRhc2V0LmlubGluZVRvb2xiYXIgPT09IFwidHJ1ZVwiKSkgfHwgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgfHwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKG8pLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLnRyeVRvU2hvdyghMCkpO1xuICB9XG4gIC8qKlxuICAgKiBFZGl0b3IuanMgcHJvdmlkZXMgYW5kIGFiaWxpdHkgdG8gc2hvdyBwbGFjZWhvbGRlcnMgZm9yIGVtcHR5IGNvbnRlbnRlZGl0YWJsZSBlbGVtZW50c1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCB3YXRjaGVzIGZvciBpbnB1dCBhbmQgZm9jdXMgZXZlbnRzIGFuZCB0b2dnbGVzICdkYXRhLWVtcHR5JyBhdHRyaWJ1dGVcbiAgICogdG8gd29ya2Fyb3VkIHRoZSBjYXNlLCB3aGVuIGlucHV0cyBjb250YWlucyBvbmx5IDxicj5zIGFuZCBoYXMgbm8gdmlzaWJsZSBjb250ZW50XG4gICAqIFRoZW4sIENTUyBjb3VsZCByZWx5IG9uIHRoaXMgYXR0cmlidXRlIHRvIHNob3cgcGxhY2Vob2xkZXJzXG4gICAqL1xuICBlbmFibGVJbnB1dHNFbXB0eU1hcmsoKSB7XG4gICAgZnVuY3Rpb24gZSh0KSB7XG4gICAgICBjb25zdCBvID0gdC50YXJnZXQ7XG4gICAgICBPdChvKTtcbiAgICB9XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy53cmFwcGVyLCBcImlucHV0XCIsIGUpLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLndyYXBwZXIsIFwiZm9jdXNpblwiLCBlKSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24odGhpcy5ub2Rlcy53cmFwcGVyLCBcImZvY3Vzb3V0XCIsIGUpO1xuICB9XG59XG5jb25zdCBFcyA9IHtcbiAgLy8gQVBJIE1vZHVsZXNcbiAgQmxvY2tzQVBJOiB6byxcbiAgQ2FyZXRBUEk6IGpvLFxuICBFdmVudHNBUEk6ICRvLFxuICBJMThuQVBJOiB0dCxcbiAgQVBJOiBZbyxcbiAgSW5saW5lVG9vbGJhckFQSTogV28sXG4gIExpc3RlbmVyc0FQSTogS28sXG4gIE5vdGlmaWVyQVBJOiBabyxcbiAgUmVhZE9ubHlBUEk6IEdvLFxuICBTYW5pdGl6ZXJBUEk6IHNpLFxuICBTYXZlckFQSTogbmksXG4gIFNlbGVjdGlvbkFQSTogcmksXG4gIFRvb2xzQVBJOiBsaSxcbiAgU3R5bGVzQVBJOiBhaSxcbiAgVG9vbGJhckFQSTogY2ksXG4gIFRvb2x0aXBBUEk6IGZpLFxuICBVaUFQSTogZ2ksXG4gIC8vIFRvb2xiYXIgTW9kdWxlc1xuICBCbG9ja1NldHRpbmdzOiBVaSxcbiAgVG9vbGJhcjogcWksXG4gIElubGluZVRvb2xiYXI6IFppLFxuICAvLyBNb2R1bGVzXG4gIEJsb2NrRXZlbnRzOiBHaSxcbiAgQmxvY2tNYW5hZ2VyOiBlcyxcbiAgQmxvY2tTZWxlY3Rpb246IHRzLFxuICBDYXJldDogUmUsXG4gIENyb3NzQmxvY2tTZWxlY3Rpb246IG9zLFxuICBEcmFnTkRyb3A6IGlzLFxuICBNb2RpZmljYXRpb25zT2JzZXJ2ZXI6IHJzLFxuICBQYXN0ZTogbHMsXG4gIFJlYWRPbmx5OiBhcyxcbiAgUmVjdGFuZ2xlU2VsZWN0aW9uOiB4ZSxcbiAgUmVuZGVyZXI6IGNzLFxuICBTYXZlcjogZHMsXG4gIFRvb2xzOiBnbyxcbiAgVUk6IHlzXG59O1xuY2xhc3MgQnMge1xuICAvKipcbiAgICogQHBhcmFtIHtFZGl0b3JDb25maWd9IGNvbmZpZyAtIHVzZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMubW9kdWxlSW5zdGFuY2VzID0ge30sIHRoaXMuZXZlbnRzRGlzcGF0Y2hlciA9IG5ldyBUZSgpO1xuICAgIGxldCB0LCBvO1xuICAgIHRoaXMuaXNSZWFkeSA9IG5ldyBQcm9taXNlKChpLCBzKSA9PiB7XG4gICAgICB0ID0gaSwgbyA9IHM7XG4gICAgfSksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgdGhpcy5jb25maWd1cmF0aW9uID0gZSwgdGhpcy52YWxpZGF0ZSgpLCB0aGlzLmluaXQoKSwgYXdhaXQgdGhpcy5zdGFydCgpLCBhd2FpdCB0aGlzLnJlbmRlcigpO1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGksIENhcmV0OiBzLCBVSTogciwgTW9kaWZpY2F0aW9uc09ic2VydmVyOiBsIH0gPSB0aGlzLm1vZHVsZUluc3RhbmNlcztcbiAgICAgIHIuY2hlY2tFbXB0aW5lc3MoKSwgbC5lbmFibGUoKSwgdGhpcy5jb25maWd1cmF0aW9uLmF1dG9mb2N1cyAmJiBzLnNldFRvQmxvY2soaS5ibG9ja3NbMF0sIHMucG9zaXRpb25zLlNUQVJUKSwgdCgpO1xuICAgIH0pLmNhdGNoKChpKSA9PiB7XG4gICAgICBJKGBFZGl0b3IuanMgaXMgbm90IHJlYWR5IGJlY2F1c2Ugb2YgJHtpfWAsIFwiZXJyb3JcIiksIG8oaSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHRpbmcgZm9yIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtFZGl0b3JDb25maWd8c3RyaW5nfSBjb25maWcgLSBFZGl0b3IncyBjb25maWcgdG8gc2V0XG4gICAqL1xuICBzZXQgY29uZmlndXJhdGlvbihlKSB7XG4gICAgdmFyIG8sIGk7XG4gICAgUihlKSA/IHRoaXMuY29uZmlnID0ge1xuICAgICAgLi4uZVxuICAgIH0gOiB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIGhvbGRlcjogZVxuICAgIH0sIFplKCEhdGhpcy5jb25maWcuaG9sZGVySWQsIFwiY29uZmlnLmhvbGRlcklkXCIsIFwiY29uZmlnLmhvbGRlclwiKSwgdGhpcy5jb25maWcuaG9sZGVySWQgJiYgIXRoaXMuY29uZmlnLmhvbGRlciAmJiAodGhpcy5jb25maWcuaG9sZGVyID0gdGhpcy5jb25maWcuaG9sZGVySWQsIHRoaXMuY29uZmlnLmhvbGRlcklkID0gbnVsbCksIHRoaXMuY29uZmlnLmhvbGRlciA9PSBudWxsICYmICh0aGlzLmNvbmZpZy5ob2xkZXIgPSBcImVkaXRvcmpzXCIpLCB0aGlzLmNvbmZpZy5sb2dMZXZlbCB8fCAodGhpcy5jb25maWcubG9nTGV2ZWwgPSBTdC5WRVJCT1NFKSwgeG8odGhpcy5jb25maWcubG9nTGV2ZWwpLCBaZSghIXRoaXMuY29uZmlnLmluaXRpYWxCbG9jaywgXCJjb25maWcuaW5pdGlhbEJsb2NrXCIsIFwiY29uZmlnLmRlZmF1bHRCbG9ja1wiKSwgdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrID0gdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrIHx8IHRoaXMuY29uZmlnLmluaXRpYWxCbG9jayB8fCBcInBhcmFncmFwaFwiLCB0aGlzLmNvbmZpZy5taW5IZWlnaHQgPSB0aGlzLmNvbmZpZy5taW5IZWlnaHQgIT09IHZvaWQgMCA/IHRoaXMuY29uZmlnLm1pbkhlaWdodCA6IDMwMDtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgdHlwZTogdGhpcy5jb25maWcuZGVmYXVsdEJsb2NrLFxuICAgICAgZGF0YToge31cbiAgICB9O1xuICAgIHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyID0gdGhpcy5jb25maWcucGxhY2Vob2xkZXIgfHwgITEsIHRoaXMuY29uZmlnLnNhbml0aXplciA9IHRoaXMuY29uZmlnLnNhbml0aXplciB8fCB7XG4gICAgICBwOiAhMCxcbiAgICAgIGI6ICEwLFxuICAgICAgYTogITBcbiAgICB9LCB0aGlzLmNvbmZpZy5oaWRlVG9vbGJhciA9IHRoaXMuY29uZmlnLmhpZGVUb29sYmFyID8gdGhpcy5jb25maWcuaGlkZVRvb2xiYXIgOiAhMSwgdGhpcy5jb25maWcudG9vbHMgPSB0aGlzLmNvbmZpZy50b29scyB8fCB7fSwgdGhpcy5jb25maWcuaTE4biA9IHRoaXMuY29uZmlnLmkxOG4gfHwge30sIHRoaXMuY29uZmlnLmRhdGEgPSB0aGlzLmNvbmZpZy5kYXRhIHx8IHsgYmxvY2tzOiBbXSB9LCB0aGlzLmNvbmZpZy5vblJlYWR5ID0gdGhpcy5jb25maWcub25SZWFkeSB8fCAoKCkgPT4ge1xuICAgIH0pLCB0aGlzLmNvbmZpZy5vbkNoYW5nZSA9IHRoaXMuY29uZmlnLm9uQ2hhbmdlIHx8ICgoKSA9PiB7XG4gICAgfSksIHRoaXMuY29uZmlnLmlubGluZVRvb2xiYXIgPSB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyICE9PSB2b2lkIDAgPyB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyIDogITAsIChWKHRoaXMuY29uZmlnLmRhdGEpIHx8ICF0aGlzLmNvbmZpZy5kYXRhLmJsb2NrcyB8fCB0aGlzLmNvbmZpZy5kYXRhLmJsb2Nrcy5sZW5ndGggPT09IDApICYmICh0aGlzLmNvbmZpZy5kYXRhID0geyBibG9ja3M6IFt0XSB9KSwgdGhpcy5jb25maWcucmVhZE9ubHkgPSB0aGlzLmNvbmZpZy5yZWFkT25seSB8fCAhMSwgKG8gPSB0aGlzLmNvbmZpZy5pMThuKSAhPSBudWxsICYmIG8ubWVzc2FnZXMgJiYgei5zZXREaWN0aW9uYXJ5KHRoaXMuY29uZmlnLmkxOG4ubWVzc2FnZXMpLCB0aGlzLmNvbmZpZy5pMThuLmRpcmVjdGlvbiA9ICgoaSA9IHRoaXMuY29uZmlnLmkxOG4pID09IG51bGwgPyB2b2lkIDAgOiBpLmRpcmVjdGlvbikgfHwgXCJsdHJcIjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBwcml2YXRlIHByb3BlcnR5XG4gICAqXG4gICAqIEByZXR1cm5zIHtFZGl0b3JDb25maWd9XG4gICAqL1xuICBnZXQgY29uZmlndXJhdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jb25maWc7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBmb3IgcmVxdWlyZWQgZmllbGRzIGluIEVkaXRvcidzIGNvbmZpZ1xuICAgKi9cbiAgdmFsaWRhdGUoKSB7XG4gICAgY29uc3QgeyBob2xkZXJJZDogZSwgaG9sZGVyOiB0IH0gPSB0aGlzLmNvbmZpZztcbiAgICBpZiAoZSAmJiB0KVxuICAgICAgdGhyb3cgRXJyb3IoXCLCq2hvbGRlcklkwrsgYW5kIMKraG9sZGVywrsgcGFyYW0gY2FuJ3QgYXNzaWduIGF0IHRoZSBzYW1lIHRpbWUuXCIpO1xuICAgIGlmIChRKHQpICYmICFkLmdldCh0KSlcbiAgICAgIHRocm93IEVycm9yKGBlbGVtZW50IHdpdGggSUQgwqske3R9wrsgaXMgbWlzc2luZy4gUGFzcyBjb3JyZWN0IGhvbGRlcidzIElELmApO1xuICAgIGlmICh0ICYmIFIodCkgJiYgIWQuaXNFbGVtZW50KHQpKVxuICAgICAgdGhyb3cgRXJyb3IoXCLCq2hvbGRlcsK7IHZhbHVlIG11c3QgYmUgYW4gRWxlbWVudCBub2RlXCIpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBtb2R1bGVzOlxuICAgKiAgLSBtYWtlIGFuZCBzYXZlIGluc3RhbmNlc1xuICAgKiAgLSBjb25maWd1cmVcbiAgICovXG4gIGluaXQoKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RNb2R1bGVzKCksIHRoaXMuY29uZmlndXJlTW9kdWxlcygpO1xuICB9XG4gIC8qKlxuICAgKiBTdGFydCBFZGl0b3IhXG4gICAqXG4gICAqIEdldCBsaXN0IG9mIG1vZHVsZXMgdGhhdCBuZWVkcyB0byBiZSBwcmVwYXJlZCBhbmQgcmV0dXJuIGEgc2VxdWVuY2UgKFByb21pc2UpXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgc3RhcnQoKSB7XG4gICAgYXdhaXQgW1xuICAgICAgXCJUb29sc1wiLFxuICAgICAgXCJVSVwiLFxuICAgICAgXCJCbG9ja01hbmFnZXJcIixcbiAgICAgIFwiUGFzdGVcIixcbiAgICAgIFwiQmxvY2tTZWxlY3Rpb25cIixcbiAgICAgIFwiUmVjdGFuZ2xlU2VsZWN0aW9uXCIsXG4gICAgICBcIkNyb3NzQmxvY2tTZWxlY3Rpb25cIixcbiAgICAgIFwiUmVhZE9ubHlcIlxuICAgIF0ucmVkdWNlKFxuICAgICAgKHQsIG8pID0+IHQudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy5tb2R1bGVJbnN0YW5jZXNbb10ucHJlcGFyZSgpO1xuICAgICAgICB9IGNhdGNoIChpKSB7XG4gICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiBOdClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihpLm1lc3NhZ2UpO1xuICAgICAgICAgIEkoYE1vZHVsZSAke299IHdhcyBza2lwcGVkIGJlY2F1c2Ugb2YgJW9gLCBcIndhcm5cIiwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgUHJvbWlzZS5yZXNvbHZlKClcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXIgaW5pdGlhbCBkYXRhXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kdWxlSW5zdGFuY2VzLlJlbmRlcmVyLnJlbmRlcih0aGlzLmNvbmZpZy5kYXRhLmJsb2Nrcyk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgbW9kdWxlcyBpbnN0YW5jZXMgYW5kIHNhdmUgaXQgdG8gdGhlIEBwcm9wZXJ0eSB0aGlzLm1vZHVsZUluc3RhbmNlc1xuICAgKi9cbiAgY29uc3RydWN0TW9kdWxlcygpIHtcbiAgICBPYmplY3QuZW50cmllcyhFcykuZm9yRWFjaCgoW2UsIHRdKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLm1vZHVsZUluc3RhbmNlc1tlXSA9IG5ldyB0KHtcbiAgICAgICAgICBjb25maWc6IHRoaXMuY29uZmlndXJhdGlvbixcbiAgICAgICAgICBldmVudHNEaXNwYXRjaGVyOiB0aGlzLmV2ZW50c0Rpc3BhdGNoZXJcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChvKSB7XG4gICAgICAgIEkoXCJbY29uc3RydWN0TW9kdWxlc11cIiwgYE1vZHVsZSAke2V9IHNraXBwZWQgYmVjYXVzZWAsIFwiZXJyb3JcIiwgbyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZXMgaW5zdGFuY2VzIGNvbmZpZ3VyYXRpb246XG4gICAqICAtIHBhc3Mgb3RoZXIgbW9kdWxlcyB0byB0aGUgJ3N0YXRlJyBwcm9wZXJ0eVxuICAgKiAgLSAuLi5cbiAgICovXG4gIGNvbmZpZ3VyZU1vZHVsZXMoKSB7XG4gICAgZm9yIChjb25zdCBlIGluIHRoaXMubW9kdWxlSW5zdGFuY2VzKVxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMubW9kdWxlSW5zdGFuY2VzLCBlKSAmJiAodGhpcy5tb2R1bGVJbnN0YW5jZXNbZV0uc3RhdGUgPSB0aGlzLmdldE1vZHVsZXNEaWZmKGUpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIG1vZHVsZXMgd2l0aG91dCBwYXNzZWQgbmFtZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIG1vZHVsZSBmb3Igd2l0Y2ggbW9kdWxlcyBkaWZmZXJlbmNlIHNob3VsZCBiZSBjYWxjdWxhdGVkXG4gICAqL1xuICBnZXRNb2R1bGVzRGlmZihlKSB7XG4gICAgY29uc3QgdCA9IHt9O1xuICAgIGZvciAoY29uc3QgbyBpbiB0aGlzLm1vZHVsZUluc3RhbmNlcylcbiAgICAgIG8gIT09IGUgJiYgKHRbb10gPSB0aGlzLm1vZHVsZUluc3RhbmNlc1tvXSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cbi8qKlxuICogRWRpdG9yLmpzXG4gKlxuICogQGxpY2Vuc2UgQXBhY2hlLTIuMFxuICogQHNlZSBFZGl0b3IuanMgPGh0dHBzOi8vZWRpdG9yanMuaW8+XG4gKiBAYXV0aG9yIENvZGVYIFRlYW0gPGh0dHBzOi8vY29kZXguc28+XG4gKi9cbmNsYXNzIFRzIHtcbiAgLyoqIEVkaXRvciB2ZXJzaW9uICovXG4gIHN0YXRpYyBnZXQgdmVyc2lvbigpIHtcbiAgICByZXR1cm4gXCIyLjMwLjVcIjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHtFZGl0b3JDb25maWd8c3RyaW5nfHVuZGVmaW5lZH0gW2NvbmZpZ3VyYXRpb25dIC0gdXNlciBjb25maWd1cmF0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgbGV0IHQgPSAoKSA9PiB7XG4gICAgfTtcbiAgICBSKGUpICYmIE8oZS5vblJlYWR5KSAmJiAodCA9IGUub25SZWFkeSk7XG4gICAgY29uc3QgbyA9IG5ldyBCcyhlKTtcbiAgICB0aGlzLmlzUmVhZHkgPSBvLmlzUmVhZHkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmV4cG9ydEFQSShvKSwgdCgpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnQgZXh0ZXJuYWwgQVBJIG1ldGhvZHNcbiAgICpcbiAgICogQHBhcmFtIHtDb3JlfSBlZGl0b3Ig4oCUIEVkaXRvcidzIGluc3RhbmNlXG4gICAqL1xuICBleHBvcnRBUEkoZSkge1xuICAgIGNvbnN0IHQgPSBbXCJjb25maWd1cmF0aW9uXCJdLCBvID0gKCkgPT4ge1xuICAgICAgT2JqZWN0LnZhbHVlcyhlLm1vZHVsZUluc3RhbmNlcykuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICBPKHMuZGVzdHJveSkgJiYgcy5kZXN0cm95KCksIHMubGlzdGVuZXJzLnJlbW92ZUFsbCgpO1xuICAgICAgfSksIHBpKCksIGUgPSBudWxsO1xuICAgICAgZm9yIChjb25zdCBzIGluIHRoaXMpXG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLCBzKSAmJiBkZWxldGUgdGhpc1tzXTtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBudWxsKTtcbiAgICB9O1xuICAgIHQuZm9yRWFjaCgocykgPT4ge1xuICAgICAgdGhpc1tzXSA9IGVbc107XG4gICAgfSksIHRoaXMuZGVzdHJveSA9IG8sIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBlLm1vZHVsZUluc3RhbmNlcy5BUEkubWV0aG9kcyksIGRlbGV0ZSB0aGlzLmV4cG9ydEFQSSwgT2JqZWN0LmVudHJpZXMoe1xuICAgICAgYmxvY2tzOiB7XG4gICAgICAgIGNsZWFyOiBcImNsZWFyXCIsXG4gICAgICAgIHJlbmRlcjogXCJyZW5kZXJcIlxuICAgICAgfSxcbiAgICAgIGNhcmV0OiB7XG4gICAgICAgIGZvY3VzOiBcImZvY3VzXCJcbiAgICAgIH0sXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgb246IFwib25cIixcbiAgICAgICAgb2ZmOiBcIm9mZlwiLFxuICAgICAgICBlbWl0OiBcImVtaXRcIlxuICAgICAgfSxcbiAgICAgIHNhdmVyOiB7XG4gICAgICAgIHNhdmU6IFwic2F2ZVwiXG4gICAgICB9XG4gICAgfSkuZm9yRWFjaCgoW3MsIHJdKSA9PiB7XG4gICAgICBPYmplY3QuZW50cmllcyhyKS5mb3JFYWNoKChbbCwgYV0pID0+IHtcbiAgICAgICAgdGhpc1thXSA9IGUubW9kdWxlSW5zdGFuY2VzLkFQSS5tZXRob2RzW3NdW2xdO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCB7XG4gIFRzIGFzIGRlZmF1bHRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/editorjs/dist/editorjs.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/embed/dist/embed.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/embed/dist/embed.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ m)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.embed-tool--loading .embed-tool__caption{display:none}.embed-tool--loading .embed-tool__preloader{display:block}.embed-tool--loading .embed-tool__content{display:none}.embed-tool__preloader{display:none;position:relative;height:200px;box-sizing:border-box;border-radius:5px;border:1px solid #e6e9eb}.embed-tool__preloader:before{content:\"\";position:absolute;z-index:3;left:50%;top:50%;width:30px;height:30px;margin-top:-25px;margin-left:-15px;border-radius:50%;border:2px solid #cdd1e0;border-top-color:#388ae5;box-sizing:border-box;animation:embed-preloader-spin 2s infinite linear}.embed-tool__url{position:absolute;bottom:20px;left:50%;transform:translate(-50%);max-width:250px;color:#7b7e89;font-size:11px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.embed-tool__content{width:100%}.embed-tool__caption{margin-top:7px}.embed-tool__caption[contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.embed-tool__caption[contentEditable=true][data-placeholder]:empty:before{opacity:1}.embed-tool__caption[contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}@keyframes embed-preloader-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}')),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nconst g = {\n  vimeo: {\n    regex: /(?:http[s]?:\\/\\/)?(?:www.)?(?:player.)?vimeo\\.co(?:.+\\/([^\\/]\\d+)(?:#t=[\\d]+)?s?$)/,\n    embedUrl: \"https://player.vimeo.com/video/<%= remote_id %>?title=0&byline=0\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\"></iframe>',\n    height: 320,\n    width: 580\n  },\n  youtube: {\n    regex: /(?:https?:\\/\\/)?(?:www\\.)?(?:(?:youtu\\.be\\/)|(?:youtube\\.com)\\/(?:v\\/|u\\/\\w\\/|embed\\/|watch))(?:(?:\\?v=)?([^#&?=]*))?((?:[?&]\\w*=\\w*)*)/,\n    embedUrl: \"https://www.youtube.com/embed/<%= remote_id %>\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580,\n    id: ([n, r]) => {\n      if (!r && n)\n        return n;\n      const i = {\n        start: \"start\",\n        end: \"end\",\n        t: \"start\",\n        // eslint-disable-next-line camelcase\n        time_continue: \"start\",\n        list: \"list\"\n      };\n      let e = r.slice(1).split(\"&\").map((o) => {\n        const [l, t] = o.split(\"=\");\n        return !n && l === \"v\" ? (n = t, null) : !i[l] || t === \"LL\" || t.startsWith(\"RDMM\") || t.startsWith(\"FL\") ? null : `${i[l]}=${t}`;\n      }).filter((o) => !!o);\n      return n + \"?\" + e.join(\"&\");\n    }\n  },\n  coub: {\n    regex: /https?:\\/\\/coub\\.com\\/view\\/([^\\/\\?\\&]+)/,\n    embedUrl: \"https://coub.com/embed/<%= remote_id %>\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580\n  },\n  vine: {\n    regex: /https?:\\/\\/vine\\.co\\/v\\/([^\\/\\?\\&]+)/,\n    embedUrl: \"https://vine.co/v/<%= remote_id %>/embed/simple/\",\n    html: '<iframe style=\"width:100%;\" height=\"320\" frameborder=\"0\" allowfullscreen></iframe>',\n    height: 320,\n    width: 580\n  },\n  imgur: {\n    regex: /https?:\\/\\/(?:i\\.)?imgur\\.com.*\\/([a-zA-Z0-9]+)(?:\\.gifv)?/,\n    embedUrl: \"http://imgur.com/<%= remote_id %>/embed\",\n    html: '<iframe allowfullscreen=\"true\" scrolling=\"no\" id=\"imgur-embed-iframe-pub-<%= remote_id %>\" class=\"imgur-embed-iframe-pub\" style=\"height: 500px; width: 100%; border: 1px solid #000\"></iframe>',\n    height: 500,\n    width: 540\n  },\n  gfycat: {\n    regex: /https?:\\/\\/gfycat\\.com(?:\\/detail)?\\/([a-zA-Z]+)/,\n    embedUrl: \"https://gfycat.com/ifr/<%= remote_id %>\",\n    html: `<iframe frameborder='0' scrolling='no' style=\"width:100%;\" height='436' allowfullscreen ></iframe>`,\n    height: 436,\n    width: 580\n  },\n  \"twitch-channel\": {\n    regex: /https?:\\/\\/www\\.twitch\\.tv\\/([^\\/\\?\\&]*)\\/?$/,\n    embedUrl: \"https://player.twitch.tv/?channel=<%= remote_id %>\",\n    html: '<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',\n    height: 366,\n    width: 600\n  },\n  \"twitch-video\": {\n    regex: /https?:\\/\\/www\\.twitch\\.tv\\/(?:[^\\/\\?\\&]*\\/v|videos)\\/([0-9]*)/,\n    embedUrl: \"https://player.twitch.tv/?video=v<%= remote_id %>\",\n    html: '<iframe frameborder=\"0\" allowfullscreen=\"true\" scrolling=\"no\" height=\"366\" style=\"width:100%;\"></iframe>',\n    height: 366,\n    width: 600\n  },\n  \"yandex-music-album\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/?$/,\n    embedUrl: \"https://music.yandex.ru/iframe/#album/<%= remote_id %>/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" style=\"width:100%;\" height=\"400\"></iframe>',\n    height: 400,\n    width: 540\n  },\n  \"yandex-music-track\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/album\\/([0-9]*)\\/track\\/([0-9]*)/,\n    embedUrl: \"https://music.yandex.ru/iframe/#track/<%= remote_id %>/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:100px;\" style=\"width:100%;\" height=\"100\"></iframe>',\n    height: 100,\n    width: 540,\n    id: (n) => n.join(\"/\")\n  },\n  \"yandex-music-playlist\": {\n    regex: /https?:\\/\\/music\\.yandex\\.ru\\/users\\/([^\\/\\?\\&]*)\\/playlists\\/([0-9]*)/,\n    embedUrl: \"https://music.yandex.ru/iframe/#playlist/<%= remote_id %>/show/cover/description/\",\n    html: '<iframe frameborder=\"0\" style=\"border:none;width:540px;height:400px;\" width=\"540\" height=\"400\"></iframe>',\n    height: 400,\n    width: 540,\n    id: (n) => n.join(\"/\")\n  },\n  codepen: {\n    regex: /https?:\\/\\/codepen\\.io\\/([^\\/\\?\\&]*)\\/pen\\/([^\\/\\?\\&]*)/,\n    embedUrl: \"https://codepen.io/<%= remote_id %>?height=300&theme-id=0&default-tab=css,result&embed-version=2\",\n    html: \"<iframe height='300' scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'></iframe>\",\n    height: 300,\n    width: 600,\n    id: (n) => n.join(\"/embed/\")\n  },\n  instagram: {\n    regex: /https?:\\/\\/www\\.instagram\\.com\\/p\\/([^\\/\\?\\&]+)\\/?.*/,\n    embedUrl: \"https://www.instagram.com/p/<%= remote_id %>/embed\",\n    html: '<iframe width=\"400\" height=\"505\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 505,\n    width: 400\n  },\n  twitter: {\n    regex: /^https?:\\/\\/(www\\.)?(?:twitter\\.com|x\\.com)\\/.+\\/status\\/(\\d+)/,\n    embedUrl: \"https://platform.twitter.com/embed/Tweet.html?id=<%= remote_id %>\",\n    html: '<iframe width=\"600\" height=\"600\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 300,\n    width: 600,\n    id: (n) => n[1]\n  },\n  pinterest: {\n    regex: /https?:\\/\\/([^\\/\\?\\&]*).pinterest.com\\/pin\\/([^\\/\\?\\&]*)\\/?$/,\n    embedUrl: \"https://assets.pinterest.com/ext/embed.html?id=<%= remote_id %>\",\n    html: \"<iframe scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%; min-height: 400px; max-height: 1000px;'></iframe>\",\n    id: (n) => n[1]\n  },\n  facebook: {\n    regex: /https?:\\/\\/www.facebook.com\\/([^\\/\\?\\&]*)\\/(.*)/,\n    embedUrl: \"https://www.facebook.com/plugins/post.php?href=https://www.facebook.com/<%= remote_id %>&width=500\",\n    html: \"<iframe scrolling='no' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%; min-height: 500px; max-height: 1000px;'></iframe>\",\n    id: (n) => n.join(\"/\")\n  },\n  aparat: {\n    regex: /(?:http[s]?:\\/\\/)?(?:www.)?aparat\\.com\\/v\\/([^\\/\\?\\&]+)\\/?/,\n    embedUrl: \"https://www.aparat.com/video/video/embed/videohash/<%= remote_id %>/vt/frame\",\n    html: '<iframe width=\"600\" height=\"300\" style=\"margin: 0 auto;\" frameborder=\"0\" scrolling=\"no\" allowtransparency=\"true\"></iframe>',\n    height: 300,\n    width: 600\n  },\n  miro: {\n    regex: /https:\\/\\/miro.com\\/\\S+(\\S{12})\\/(\\S+)?/,\n    embedUrl: \"https://miro.com/app/live-embed/<%= remote_id %>\",\n    html: '<iframe width=\"700\" height=\"500\" style=\"margin: 0 auto;\" allowFullScreen frameBorder=\"0\" scrolling=\"no\"></iframe>'\n  },\n  github: {\n    regex: /https?:\\/\\/gist.github.com\\/([^\\/\\?\\&]*)\\/([^\\/\\?\\&]*)/,\n    embedUrl: 'data:text/html;charset=utf-8,<head><base target=\"_blank\" /></head><body><script src=\"https://gist.github.com/<%= remote_id %>\" ><\\/script></body>',\n    html: '<iframe width=\"100%\" height=\"350\" frameborder=\"0\" style=\"margin: 0 auto;\"></iframe>',\n    height: 300,\n    width: 600,\n    id: (n) => `${n.join(\"/\")}.js`\n  }\n};\nfunction p(n, r, i) {\n  var e, o, l, t, a;\n  r == null && (r = 100);\n  function s() {\n    var d = Date.now() - t;\n    d < r && d >= 0 ? e = setTimeout(s, r - d) : (e = null, i || (a = n.apply(l, o), l = o = null));\n  }\n  var h = function() {\n    l = this, o = arguments, t = Date.now();\n    var d = i && !e;\n    return e || (e = setTimeout(s, r)), d && (a = n.apply(l, o), l = o = null), a;\n  };\n  return h.clear = function() {\n    e && (clearTimeout(e), e = null);\n  }, h.flush = function() {\n    e && (a = n.apply(l, o), l = o = null, clearTimeout(e), e = null);\n  }, h;\n}\np.debounce = p;\nvar w = p;\nclass m {\n  /**\n   * @param {{data: EmbedData, config: EmbedConfig, api: object}}\n   *   data — previously saved data\n   *   config - user config for Tool\n   *   api - Editor.js API\n   *   readOnly - read-only mode flag\n   */\n  constructor({ data: r, api: i, readOnly: e }) {\n    this.api = i, this._data = {}, this.element = null, this.readOnly = e, this.data = r;\n  }\n  /**\n   * @param {EmbedData} data - embed data\n   * @param {RegExp} [data.regex] - pattern of source URLs\n   * @param {string} [data.embedUrl] - URL scheme to embedded page. Use '<%= remote_id %>' to define a place to insert resource id\n   * @param {string} [data.html] - iframe which contains embedded content\n   * @param {number} [data.height] - iframe height\n   * @param {number} [data.width] - iframe width\n   * @param {string} [data.caption] - caption\n   */\n  set data(r) {\n    var h;\n    if (!(r instanceof Object))\n      throw Error(\"Embed Tool data should be object\");\n    const { service: i, source: e, embed: o, width: l, height: t, caption: a = \"\" } = r;\n    this._data = {\n      service: i || this.data.service,\n      source: e || this.data.source,\n      embed: o || this.data.embed,\n      width: l || this.data.width,\n      height: t || this.data.height,\n      caption: a || this.data.caption || \"\"\n    };\n    const s = this.element;\n    s && ((h = s.parentNode) == null || h.replaceChild(this.render(), s));\n  }\n  /**\n   * @returns {EmbedData}\n   */\n  get data() {\n    if (this.element) {\n      const r = this.element.querySelector(`.${this.api.styles.input}`);\n      this._data.caption = r ? r.innerHTML : \"\";\n    }\n    return this._data;\n  }\n  /**\n   * Get plugin styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      container: \"embed-tool\",\n      containerLoading: \"embed-tool--loading\",\n      preloader: \"embed-tool__preloader\",\n      caption: \"embed-tool__caption\",\n      url: \"embed-tool__url\",\n      content: \"embed-tool__content\"\n    };\n  }\n  /**\n   * Render Embed tool content\n   *\n   * @returns {HTMLElement}\n   */\n  render() {\n    if (!this.data.service) {\n      const a = document.createElement(\"div\");\n      return this.element = a, a;\n    }\n    const { html: r } = m.services[this.data.service], i = document.createElement(\"div\"), e = document.createElement(\"div\"), o = document.createElement(\"template\"), l = this.createPreloader();\n    i.classList.add(this.CSS.baseClass, this.CSS.container, this.CSS.containerLoading), e.classList.add(this.CSS.input, this.CSS.caption), i.appendChild(l), e.contentEditable = (!this.readOnly).toString(), e.dataset.placeholder = this.api.i18n.t(\"Enter a caption\"), e.innerHTML = this.data.caption || \"\", o.innerHTML = r, o.content.firstChild.setAttribute(\"src\", this.data.embed), o.content.firstChild.classList.add(this.CSS.content);\n    const t = this.embedIsReady(i);\n    return o.content.firstChild && i.appendChild(o.content.firstChild), i.appendChild(e), t.then(() => {\n      i.classList.remove(this.CSS.containerLoading);\n    }), this.element = i, i;\n  }\n  /**\n   * Creates preloader to append to container while data is loading\n   *\n   * @returns {HTMLElement}\n   */\n  createPreloader() {\n    const r = document.createElement(\"preloader\"), i = document.createElement(\"div\");\n    return i.textContent = this.data.source, r.classList.add(this.CSS.preloader), i.classList.add(this.CSS.url), r.appendChild(i), r;\n  }\n  /**\n   * Save current content and return EmbedData object\n   *\n   * @returns {EmbedData}\n   */\n  save() {\n    return this.data;\n  }\n  /**\n   * Handle pasted url and return Service object\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(r) {\n    var c;\n    const { key: i, data: e } = r.detail, { regex: o, embedUrl: l, width: t, height: a, id: s = (u) => u.shift() || \"\" } = m.services[i], h = (c = o.exec(e)) == null ? void 0 : c.slice(1), d = h ? l.replace(/<%= remote_id %>/g, s(h)) : \"\";\n    this.data = {\n      service: i,\n      source: e,\n      embed: d,\n      width: t,\n      height: a\n    };\n  }\n  /**\n   * Analyze provided config and make object with services to use\n   *\n   * @param {EmbedConfig} config - configuration of embed block element\n   */\n  static prepare({ config: r = {} }) {\n    const { services: i = {} } = r;\n    let e = Object.entries(g);\n    const o = Object.entries(i).filter(([t, a]) => typeof a == \"boolean\" && a === !0).map(([t]) => t), l = Object.entries(i).filter(([t, a]) => typeof a == \"object\").filter(([t, a]) => m.checkServiceConfig(a)).map(([t, a]) => {\n      const { regex: s, embedUrl: h, html: d, height: c, width: u, id: f } = a;\n      return [t, {\n        regex: s,\n        embedUrl: h,\n        html: d,\n        height: c,\n        width: u,\n        id: f\n      }];\n    });\n    o.length && (e = e.filter(([t]) => o.includes(t))), e = e.concat(l), m.services = e.reduce((t, [a, s]) => a in t ? (t[a] = Object.assign({}, t[a], s), t) : (t[a] = s, t), {}), m.patterns = e.reduce((t, [a, s]) => (s && typeof s != \"boolean\" && (t[a] = s.regex), t), {});\n  }\n  /**\n   * Check if Service config is valid\n   *\n   * @param {Service} config - configuration of embed block element\n   * @returns {boolean}\n   */\n  static checkServiceConfig(r) {\n    const { regex: i, embedUrl: e, html: o, height: l, width: t, id: a } = r;\n    let s = !!(i && i instanceof RegExp) && !!(e && typeof e == \"string\") && !!(o && typeof o == \"string\");\n    return s = s && (a !== void 0 ? a instanceof Function : !0), s = s && (l !== void 0 ? Number.isFinite(l) : !0), s = s && (t !== void 0 ? Number.isFinite(t) : !0), s;\n  }\n  /**\n   * Paste configuration to enable pasted URLs processing by Editor\n   *\n   * @returns {object} - object of patterns which contain regx for pasteConfig\n   */\n  static get pasteConfig() {\n    return {\n      patterns: m.patterns\n    };\n  }\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Checks that mutations in DOM have finished after appending iframe content\n   *\n   * @param {HTMLElement} targetNode - HTML-element mutations of which to listen\n   * @returns {Promise<any>} - result that all mutations have finished\n   */\n  embedIsReady(r) {\n    let e;\n    return new Promise((o, l) => {\n      e = new MutationObserver(w.debounce(o, 450)), e.observe(r, {\n        childList: !0,\n        subtree: !0\n      });\n    }).then(() => {\n      e.disconnect();\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/embed/dist/embed.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/header/dist/header.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@editorjs/header/dist/header.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ c)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-header{padding:.6em 0 3px;margin:0;line-height:1.25em;outline:none}.ce-header p,.ce-header div{padding:0!important;margin:0!important}\")),document.head.appendChild(e)}}catch(n){console.error(\"vite-plugin-css-injected-by-js\",n)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5\"/></svg>', l = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17\"/></svg>', o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3\"/></svg>', h = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8\"/></svg>', u = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z\"/></svg>', g = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12\"/></svg>';\n/**\n * Header block for the Editor.js.\n *\n * @author CodeX (team@ifmo.su)\n * @copyright CodeX 2018\n * @license MIT\n * @version 2.0.0\n */\nclass c {\n  constructor({ data: e, config: t, api: s, readOnly: r }) {\n    this.api = s, this.readOnly = r, this._settings = t, this._data = this.normalizeData(e), this._element = this.getTag();\n  }\n  /**\n   * Styles\n   */\n  get _CSS() {\n    return {\n      block: this.api.styles.block,\n      wrapper: \"ce-header\"\n    };\n  }\n  /**\n   * Check if data is valid\n   * \n   * @param {any} data - data to check\n   * @returns {data is HeaderData}\n   * @private\n   */\n  isHeaderData(e) {\n    return e.text !== void 0;\n  }\n  /**\n   * Normalize input data\n   *\n   * @param {HeaderData} data - saved data to process\n   *\n   * @returns {HeaderData}\n   * @private\n   */\n  normalizeData(e) {\n    const t = { text: \"\", level: this.defaultLevel.number };\n    return this.isHeaderData(e) && (t.text = e.text || \"\", e.level !== void 0 && !isNaN(parseInt(e.level.toString())) && (t.level = parseInt(e.level.toString()))), t;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLHeadingElement}\n   * @public\n   */\n  render() {\n    return this._element;\n  }\n  /**\n   * Returns header block tunes config\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.levels.map((e) => ({\n      icon: e.svg,\n      label: this.api.i18n.t(`Heading ${e.number}`),\n      onActivate: () => this.setLevel(e.number),\n      closeOnActivate: !0,\n      isActive: this.currentLevel.number === e.number,\n      render: () => document.createElement(\"div\")\n    }));\n  }\n  /**\n   * Callback for Block's settings buttons\n   *\n   * @param {number} level - level to set\n   */\n  setLevel(e) {\n    this.data = {\n      level: e,\n      text: this.data.text\n    };\n  }\n  /**\n   * Method that specified how to merge two Text blocks.\n   * Called by Editor.js by backspace at the beginning of the Block\n   *\n   * @param {HeaderData} data - saved data to merger with current block\n   * @public\n   */\n  merge(e) {\n    const t = {\n      text: this.data.text + e.text,\n      level: this.data.level\n    };\n    this.data = t;\n  }\n  /**\n   * Validate Text block data:\n   * - check for emptiness\n   *\n   * @param {HeaderData} blockData — data received after saving\n   * @returns {boolean} false if saved data is not correct, otherwise true\n   * @public\n   */\n  validate(e) {\n    return e.text.trim() !== \"\";\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLHeadingElement} toolsContent - Text tools rendered view\n   * @returns {HeaderData} - saved data\n   * @public\n   */\n  save(e) {\n    return {\n      text: e.innerHTML,\n      level: this.currentLevel.number\n    };\n  }\n  /**\n   * Allow Header to be converted to/from other blocks\n   */\n  static get conversionConfig() {\n    return {\n      export: \"text\",\n      // use 'text' property for other blocks\n      import: \"text\"\n      // fill 'text' property from other block's export string\n    };\n  }\n  /**\n   * Sanitizer Rules\n   */\n  static get sanitize() {\n    return {\n      level: !1,\n      text: {}\n    };\n  }\n  /**\n   * Returns true to notify core that read-only is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get current Tools`s data\n   *\n   * @returns {HeaderData} Current data\n   * @private\n   */\n  get data() {\n    return this._data.text = this._element.innerHTML, this._data.level = this.currentLevel.number, this._data;\n  }\n  /**\n   * Store data in plugin:\n   * - at the this._data property\n   * - at the HTML\n   *\n   * @param {HeaderData} data — data to set\n   * @private\n   */\n  set data(e) {\n    if (this._data = this.normalizeData(e), e.level !== void 0 && this._element.parentNode) {\n      const t = this.getTag();\n      t.innerHTML = this._element.innerHTML, this._element.parentNode.replaceChild(t, this._element), this._element = t;\n    }\n    e.text !== void 0 && (this._element.innerHTML = this._data.text || \"\");\n  }\n  /**\n   * Get tag for target level\n   * By default returns second-leveled header\n   *\n   * @returns {HTMLElement}\n   */\n  getTag() {\n    const e = document.createElement(this.currentLevel.tag);\n    return e.innerHTML = this._data.text || \"\", e.classList.add(this._CSS.wrapper), e.contentEditable = this.readOnly ? \"false\" : \"true\", e.dataset.placeholder = this.api.i18n.t(this._settings.placeholder || \"\"), e;\n  }\n  /**\n   * Get current level\n   *\n   * @returns {level}\n   */\n  get currentLevel() {\n    let e = this.levels.find((t) => t.number === this._data.level);\n    return e || (e = this.defaultLevel), e;\n  }\n  /**\n   * Return default level\n   *\n   * @returns {level}\n   */\n  get defaultLevel() {\n    if (this._settings.defaultLevel) {\n      const e = this.levels.find((t) => t.number === this._settings.defaultLevel);\n      if (e)\n        return e;\n      console.warn(\"(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels\");\n    }\n    return this.levels[1];\n  }\n  /**\n   * @typedef {object} level\n   * @property {number} number - level number\n   * @property {string} tag - tag corresponds with level number\n   * @property {string} svg - icon\n   */\n  /**\n   * Available header levels\n   *\n   * @returns {level[]}\n   */\n  get levels() {\n    const e = [\n      {\n        number: 1,\n        tag: \"H1\",\n        svg: a\n      },\n      {\n        number: 2,\n        tag: \"H2\",\n        svg: l\n      },\n      {\n        number: 3,\n        tag: \"H3\",\n        svg: o\n      },\n      {\n        number: 4,\n        tag: \"H4\",\n        svg: h\n      },\n      {\n        number: 5,\n        tag: \"H5\",\n        svg: d\n      },\n      {\n        number: 6,\n        tag: \"H6\",\n        svg: u\n      }\n    ];\n    return this._settings.levels ? e.filter(\n      (t) => this._settings.levels.includes(t.number)\n    ) : e;\n  }\n  /**\n   * Handle H1-H6 tags on paste to substitute it with header Tool\n   *\n   * @param {PasteEvent} event - event with pasted content\n   */\n  onPaste(e) {\n    const t = e.detail;\n    if (\"data\" in t) {\n      const s = t.data;\n      let r = this.defaultLevel.number;\n      switch (s.tagName) {\n        case \"H1\":\n          r = 1;\n          break;\n        case \"H2\":\n          r = 2;\n          break;\n        case \"H3\":\n          r = 3;\n          break;\n        case \"H4\":\n          r = 4;\n          break;\n        case \"H5\":\n          r = 5;\n          break;\n        case \"H6\":\n          r = 6;\n          break;\n      }\n      this._settings.levels && (r = this._settings.levels.reduce((n, i) => Math.abs(i - r) < Math.abs(n - r) ? i : n)), this.data = {\n        level: r,\n        text: s.innerHTML\n      };\n    }\n  }\n  /**\n   * Used by Editor.js paste handling API.\n   * Provides configuration to handle H1-H6 tags.\n   *\n   * @returns {{handler: (function(HTMLElement): {text: string}), tags: string[]}}\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"]\n    };\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: g,\n      title: \"Heading\"\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2hlYWRlci9kaXN0L2hlYWRlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFlBQVksYUFBYSxJQUFJLHdCQUF3QixzQ0FBc0Msa0RBQWtELG1CQUFtQixTQUFTLG1CQUFtQixhQUFhLDRCQUE0QixvQkFBb0IsbUJBQW1CLGtDQUFrQyxTQUFTLG1EQUFtRDtBQUMxVztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5Q0FBeUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFNBQVM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QixlQUFlLFNBQVM7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsb0JBQW9CO0FBQ2pDLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0NBQWtDLGFBQWE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lZGl0b3Jqc19uZXh0anMvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2hlYWRlci9kaXN0L2hlYWRlci5tanM/MTdlNCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIi5jZS1oZWFkZXJ7cGFkZGluZzouNmVtIDAgM3B4O21hcmdpbjowO2xpbmUtaGVpZ2h0OjEuMjVlbTtvdXRsaW5lOm5vbmV9LmNlLWhlYWRlciBwLC5jZS1oZWFkZXIgZGl2e3BhZGRpbmc6MCFpbXBvcnRhbnQ7bWFyZ2luOjAhaW1wb3J0YW50fVwiKSksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKX19Y2F0Y2gobil7Y29uc29sZS5lcnJvcihcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiLG4pfX0pKCk7XG5jb25zdCBhID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk02IDdMNiAxMk02IDE3TDYgMTJNNiAxMkwxMiAxMk0xMiA3VjEyTTEyIDE3TDEyIDEyXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xOSAxN1YxMC4yMTM1QzE5IDEwLjEyODcgMTguOTAxMSAxMC4wODI0IDE4LjgzNiAxMC4xMzY3TDE2IDEyLjVcIi8+PC9zdmc+JywgbCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYgMTFDMTYgMTAgMTkgOS41IDE5IDEyQzE5IDEzLjk3NzEgMTYuMDY4NCAxMy45OTk3IDE2LjAwMTIgMTYuODk4MUMxNS45OTk5IDE2Ljk1MzMgMTYuMDQ0OCAxNyAxNi4xIDE3TDE5LjMgMTdcIi8+PC9zdmc+JywgbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYgMTFDMTYgMTAuNSAxNi44MzIzIDEwIDE3LjYgMTBDMTguMzY3NyAxMCAxOS41IDEwLjMxMSAxOS41IDExLjVDMTkuNSAxMi41MzE1IDE4Ljc0NzQgMTIuOTAyMiAxOC41NDggMTIuOTgyM0MxOC41Mzc4IDEyLjk4NjQgMTguNTM5NSAxMy4wMDQ3IDE4LjU1MDMgMTMuMDA2M0MxOC44MTE1IDEzLjA0NTYgMjAgMTMuMzA2NSAyMCAxNC44QzIwIDE2IDE5LjUgMTcgMTcuOCAxN0MxNy44IDE3IDE2IDE3IDE2IDE2LjNcIi8+PC9zdmc+JywgaCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTggMTBMMTUuMjgzNCAxNC44NTExQzE1LjI0NiAxNC45MTc4IDE1LjI5NCAxNSAxNS4zNzA0IDE1QzE2Ljg0ODkgMTUgMTguNzU2MSAxNSAyMC4yIDE1TTE5IDE3QzE5IDE1LjcxODcgMTkgMTQuODgxMyAxOSAxMy42XCIvPjwvc3ZnPicsIGQgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTYgN0w2IDEyTTYgMTdMNiAxMk02IDEyTDEyIDEyTTEyIDdWMTJNMTIgMTdMMTIgMTJcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE2IDE1LjlDMTYgMTUuOSAxNi4zNzY4IDE3IDE3LjggMTdDMTkuNSAxNyAyMCAxNS42MTk5IDIwIDE0LjdDMjAgMTIuNzMyMyAxNy42NzQ1IDEyLjA0ODYgMTYuMTYzNSAxMi45ODk0QzE2LjA5NCAxMy4wMzI3IDE2IDEyLjk4NDYgMTYgMTIuOTAyN1YxMC4xQzE2IDEwLjA0NDggMTYuMDQ0OCAxMCAxNi4xIDEwSDE5LjhcIi8+PC9zdmc+JywgdSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTkuNSAxMEMxNi41IDEwLjUgMTYgMTMuMzI4NSAxNiAxNU0xNiAxNVYxNUMxNiAxNi4xMDQ2IDE2Ljg5NTQgMTcgMTggMTdIMTguMzI0NkMxOS4zMjUxIDE3IDIwLjMxOTEgMTYuMzQ5MiAyMC4yNTIyIDE1LjM1MDlDMjAuMDYxMiAxMi40OTU4IDE2IDEyLjY2MTEgMTYgMTVaXCIvPjwvc3ZnPicsIGcgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkgN0w5IDEyTTkgMTdWMTJNOSAxMkwxNSAxMk0xNSA3VjEyTTE1IDE3TDE1IDEyXCIvPjwvc3ZnPic7XG4vKipcbiAqIEhlYWRlciBibG9jayBmb3IgdGhlIEVkaXRvci5qcy5cbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGlmbW8uc3UpXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIE1JVFxuICogQHZlcnNpb24gMi4wLjBcbiAqL1xuY2xhc3MgYyB7XG4gIGNvbnN0cnVjdG9yKHsgZGF0YTogZSwgY29uZmlnOiB0LCBhcGk6IHMsIHJlYWRPbmx5OiByIH0pIHtcbiAgICB0aGlzLmFwaSA9IHMsIHRoaXMucmVhZE9ubHkgPSByLCB0aGlzLl9zZXR0aW5ncyA9IHQsIHRoaXMuX2RhdGEgPSB0aGlzLm5vcm1hbGl6ZURhdGEoZSksIHRoaXMuX2VsZW1lbnQgPSB0aGlzLmdldFRhZygpO1xuICB9XG4gIC8qKlxuICAgKiBTdHlsZXNcbiAgICovXG4gIGdldCBfQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBibG9jazogdGhpcy5hcGkuc3R5bGVzLmJsb2NrLFxuICAgICAgd3JhcHBlcjogXCJjZS1oZWFkZXJcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGRhdGEgaXMgdmFsaWRcbiAgICogXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhIC0gZGF0YSB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7ZGF0YSBpcyBIZWFkZXJEYXRhfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNIZWFkZXJEYXRhKGUpIHtcbiAgICByZXR1cm4gZS50ZXh0ICE9PSB2b2lkIDA7XG4gIH1cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSBpbnB1dCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7SGVhZGVyRGF0YX0gZGF0YSAtIHNhdmVkIGRhdGEgdG8gcHJvY2Vzc1xuICAgKlxuICAgKiBAcmV0dXJucyB7SGVhZGVyRGF0YX1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIG5vcm1hbGl6ZURhdGEoZSkge1xuICAgIGNvbnN0IHQgPSB7IHRleHQ6IFwiXCIsIGxldmVsOiB0aGlzLmRlZmF1bHRMZXZlbC5udW1iZXIgfTtcbiAgICByZXR1cm4gdGhpcy5pc0hlYWRlckRhdGEoZSkgJiYgKHQudGV4dCA9IGUudGV4dCB8fCBcIlwiLCBlLmxldmVsICE9PSB2b2lkIDAgJiYgIWlzTmFOKHBhcnNlSW50KGUubGV2ZWwudG9TdHJpbmcoKSkpICYmICh0LmxldmVsID0gcGFyc2VJbnQoZS5sZXZlbC50b1N0cmluZygpKSkpLCB0O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gVG9vbCdzIHZpZXdcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxIZWFkaW5nRWxlbWVudH1cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGhlYWRlciBibG9jayB0dW5lcyBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgcmVuZGVyU2V0dGluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMubGV2ZWxzLm1hcCgoZSkgPT4gKHtcbiAgICAgIGljb246IGUuc3ZnLFxuICAgICAgbGFiZWw6IHRoaXMuYXBpLmkxOG4udChgSGVhZGluZyAke2UubnVtYmVyfWApLFxuICAgICAgb25BY3RpdmF0ZTogKCkgPT4gdGhpcy5zZXRMZXZlbChlLm51bWJlciksXG4gICAgICBjbG9zZU9uQWN0aXZhdGU6ICEwLFxuICAgICAgaXNBY3RpdmU6IHRoaXMuY3VycmVudExldmVsLm51bWJlciA9PT0gZS5udW1iZXIsXG4gICAgICByZW5kZXI6ICgpID0+IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZvciBCbG9jaydzIHNldHRpbmdzIGJ1dHRvbnNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxldmVsIC0gbGV2ZWwgdG8gc2V0XG4gICAqL1xuICBzZXRMZXZlbChlKSB7XG4gICAgdGhpcy5kYXRhID0ge1xuICAgICAgbGV2ZWw6IGUsXG4gICAgICB0ZXh0OiB0aGlzLmRhdGEudGV4dFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1ldGhvZCB0aGF0IHNwZWNpZmllZCBob3cgdG8gbWVyZ2UgdHdvIFRleHQgYmxvY2tzLlxuICAgKiBDYWxsZWQgYnkgRWRpdG9yLmpzIGJ5IGJhY2tzcGFjZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge0hlYWRlckRhdGF9IGRhdGEgLSBzYXZlZCBkYXRhIHRvIG1lcmdlciB3aXRoIGN1cnJlbnQgYmxvY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgbWVyZ2UoZSkge1xuICAgIGNvbnN0IHQgPSB7XG4gICAgICB0ZXh0OiB0aGlzLmRhdGEudGV4dCArIGUudGV4dCxcbiAgICAgIGxldmVsOiB0aGlzLmRhdGEubGV2ZWxcbiAgICB9O1xuICAgIHRoaXMuZGF0YSA9IHQ7XG4gIH1cbiAgLyoqXG4gICAqIFZhbGlkYXRlIFRleHQgYmxvY2sgZGF0YTpcbiAgICogLSBjaGVjayBmb3IgZW1wdGluZXNzXG4gICAqXG4gICAqIEBwYXJhbSB7SGVhZGVyRGF0YX0gYmxvY2tEYXRhIOKAlCBkYXRhIHJlY2VpdmVkIGFmdGVyIHNhdmluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gZmFsc2UgaWYgc2F2ZWQgZGF0YSBpcyBub3QgY29ycmVjdCwgb3RoZXJ3aXNlIHRydWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdmFsaWRhdGUoZSkge1xuICAgIHJldHVybiBlLnRleHQudHJpbSgpICE9PSBcIlwiO1xuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0IFRvb2wncyBkYXRhIGZyb20gdGhlIHZpZXdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MSGVhZGluZ0VsZW1lbnR9IHRvb2xzQ29udGVudCAtIFRleHQgdG9vbHMgcmVuZGVyZWQgdmlld1xuICAgKiBAcmV0dXJucyB7SGVhZGVyRGF0YX0gLSBzYXZlZCBkYXRhXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNhdmUoZSkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiBlLmlubmVySFRNTCxcbiAgICAgIGxldmVsOiB0aGlzLmN1cnJlbnRMZXZlbC5udW1iZXJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyBIZWFkZXIgdG8gYmUgY29udmVydGVkIHRvL2Zyb20gb3RoZXIgYmxvY2tzXG4gICAqL1xuICBzdGF0aWMgZ2V0IGNvbnZlcnNpb25Db25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4cG9ydDogXCJ0ZXh0XCIsXG4gICAgICAvLyB1c2UgJ3RleHQnIHByb3BlcnR5IGZvciBvdGhlciBibG9ja3NcbiAgICAgIGltcG9ydDogXCJ0ZXh0XCJcbiAgICAgIC8vIGZpbGwgJ3RleHQnIHByb3BlcnR5IGZyb20gb3RoZXIgYmxvY2sncyBleHBvcnQgc3RyaW5nXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIFJ1bGVzXG4gICAqL1xuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZXZlbDogITEsXG4gICAgICB0ZXh0OiB7fVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSB0byBub3RpZnkgY29yZSB0aGF0IHJlYWQtb25seSBpcyBzdXBwb3J0ZWRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBUb29sc2BzIGRhdGFcbiAgICpcbiAgICogQHJldHVybnMge0hlYWRlckRhdGF9IEN1cnJlbnQgZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGEudGV4dCA9IHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MLCB0aGlzLl9kYXRhLmxldmVsID0gdGhpcy5jdXJyZW50TGV2ZWwubnVtYmVyLCB0aGlzLl9kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTdG9yZSBkYXRhIGluIHBsdWdpbjpcbiAgICogLSBhdCB0aGUgdGhpcy5fZGF0YSBwcm9wZXJ0eVxuICAgKiAtIGF0IHRoZSBIVE1MXG4gICAqXG4gICAqIEBwYXJhbSB7SGVhZGVyRGF0YX0gZGF0YSDigJQgZGF0YSB0byBzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldCBkYXRhKGUpIHtcbiAgICBpZiAodGhpcy5fZGF0YSA9IHRoaXMubm9ybWFsaXplRGF0YShlKSwgZS5sZXZlbCAhPT0gdm9pZCAwICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0VGFnKCk7XG4gICAgICB0LmlubmVySFRNTCA9IHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MLCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHQsIHRoaXMuX2VsZW1lbnQpLCB0aGlzLl9lbGVtZW50ID0gdDtcbiAgICB9XG4gICAgZS50ZXh0ICE9PSB2b2lkIDAgJiYgKHRoaXMuX2VsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5fZGF0YS50ZXh0IHx8IFwiXCIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGFnIGZvciB0YXJnZXQgbGV2ZWxcbiAgICogQnkgZGVmYXVsdCByZXR1cm5zIHNlY29uZC1sZXZlbGVkIGhlYWRlclxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXRUYWcoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5jdXJyZW50TGV2ZWwudGFnKTtcbiAgICByZXR1cm4gZS5pbm5lckhUTUwgPSB0aGlzLl9kYXRhLnRleHQgfHwgXCJcIiwgZS5jbGFzc0xpc3QuYWRkKHRoaXMuX0NTUy53cmFwcGVyKSwgZS5jb250ZW50RWRpdGFibGUgPSB0aGlzLnJlYWRPbmx5ID8gXCJmYWxzZVwiIDogXCJ0cnVlXCIsIGUuZGF0YXNldC5wbGFjZWhvbGRlciA9IHRoaXMuYXBpLmkxOG4udCh0aGlzLl9zZXR0aW5ncy5wbGFjZWhvbGRlciB8fCBcIlwiKSwgZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgbGV2ZWxcbiAgICpcbiAgICogQHJldHVybnMge2xldmVsfVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRMZXZlbCgpIHtcbiAgICBsZXQgZSA9IHRoaXMubGV2ZWxzLmZpbmQoKHQpID0+IHQubnVtYmVyID09PSB0aGlzLl9kYXRhLmxldmVsKTtcbiAgICByZXR1cm4gZSB8fCAoZSA9IHRoaXMuZGVmYXVsdExldmVsKSwgZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGRlZmF1bHQgbGV2ZWxcbiAgICpcbiAgICogQHJldHVybnMge2xldmVsfVxuICAgKi9cbiAgZ2V0IGRlZmF1bHRMZXZlbCgpIHtcbiAgICBpZiAodGhpcy5fc2V0dGluZ3MuZGVmYXVsdExldmVsKSB7XG4gICAgICBjb25zdCBlID0gdGhpcy5sZXZlbHMuZmluZCgodCkgPT4gdC5udW1iZXIgPT09IHRoaXMuX3NldHRpbmdzLmRlZmF1bHRMZXZlbCk7XG4gICAgICBpZiAoZSlcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgICBjb25zb2xlLndhcm4oXCIo4LiHJ8yALSfMgSnguIcgSGVhZGluZyBUb29sOiB0aGUgZGVmYXVsdCBsZXZlbCBzcGVjaWZpZWQgd2FzIG5vdCBmb3VuZCBpbiBhdmFpbGFibGUgbGV2ZWxzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5sZXZlbHNbMV07XG4gIH1cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtvYmplY3R9IGxldmVsXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBudW1iZXIgLSBsZXZlbCBudW1iZXJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHRhZyAtIHRhZyBjb3JyZXNwb25kcyB3aXRoIGxldmVsIG51bWJlclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gc3ZnIC0gaWNvblxuICAgKi9cbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBoZWFkZXIgbGV2ZWxzXG4gICAqXG4gICAqIEByZXR1cm5zIHtsZXZlbFtdfVxuICAgKi9cbiAgZ2V0IGxldmVscygpIHtcbiAgICBjb25zdCBlID0gW1xuICAgICAge1xuICAgICAgICBudW1iZXI6IDEsXG4gICAgICAgIHRhZzogXCJIMVwiLFxuICAgICAgICBzdmc6IGFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG51bWJlcjogMixcbiAgICAgICAgdGFnOiBcIkgyXCIsXG4gICAgICAgIHN2ZzogbFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbnVtYmVyOiAzLFxuICAgICAgICB0YWc6IFwiSDNcIixcbiAgICAgICAgc3ZnOiBvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBudW1iZXI6IDQsXG4gICAgICAgIHRhZzogXCJINFwiLFxuICAgICAgICBzdmc6IGhcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG51bWJlcjogNSxcbiAgICAgICAgdGFnOiBcIkg1XCIsXG4gICAgICAgIHN2ZzogZFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbnVtYmVyOiA2LFxuICAgICAgICB0YWc6IFwiSDZcIixcbiAgICAgICAgc3ZnOiB1XG4gICAgICB9XG4gICAgXTtcbiAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MubGV2ZWxzID8gZS5maWx0ZXIoXG4gICAgICAodCkgPT4gdGhpcy5fc2V0dGluZ3MubGV2ZWxzLmluY2x1ZGVzKHQubnVtYmVyKVxuICAgICkgOiBlO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgSDEtSDYgdGFncyBvbiBwYXN0ZSB0byBzdWJzdGl0dXRlIGl0IHdpdGggaGVhZGVyIFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHtQYXN0ZUV2ZW50fSBldmVudCAtIGV2ZW50IHdpdGggcGFzdGVkIGNvbnRlbnRcbiAgICovXG4gIG9uUGFzdGUoZSkge1xuICAgIGNvbnN0IHQgPSBlLmRldGFpbDtcbiAgICBpZiAoXCJkYXRhXCIgaW4gdCkge1xuICAgICAgY29uc3QgcyA9IHQuZGF0YTtcbiAgICAgIGxldCByID0gdGhpcy5kZWZhdWx0TGV2ZWwubnVtYmVyO1xuICAgICAgc3dpdGNoIChzLnRhZ05hbWUpIHtcbiAgICAgICAgY2FzZSBcIkgxXCI6XG4gICAgICAgICAgciA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJIMlwiOlxuICAgICAgICAgIHIgPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiSDNcIjpcbiAgICAgICAgICByID0gMztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkg0XCI6XG4gICAgICAgICAgciA9IDQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJINVwiOlxuICAgICAgICAgIHIgPSA1O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiSDZcIjpcbiAgICAgICAgICByID0gNjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NldHRpbmdzLmxldmVscyAmJiAociA9IHRoaXMuX3NldHRpbmdzLmxldmVscy5yZWR1Y2UoKG4sIGkpID0+IE1hdGguYWJzKGkgLSByKSA8IE1hdGguYWJzKG4gLSByKSA/IGkgOiBuKSksIHRoaXMuZGF0YSA9IHtcbiAgICAgICAgbGV2ZWw6IHIsXG4gICAgICAgIHRleHQ6IHMuaW5uZXJIVE1MXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXNlZCBieSBFZGl0b3IuanMgcGFzdGUgaGFuZGxpbmcgQVBJLlxuICAgKiBQcm92aWRlcyBjb25maWd1cmF0aW9uIHRvIGhhbmRsZSBIMS1INiB0YWdzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7e2hhbmRsZXI6IChmdW5jdGlvbihIVE1MRWxlbWVudCk6IHt0ZXh0OiBzdHJpbmd9KSwgdGFnczogc3RyaW5nW119fVxuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFnczogW1wiSDFcIiwgXCJIMlwiLCBcIkgzXCIsIFwiSDRcIiwgXCJINVwiLCBcIkg2XCJdXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0IFRvb2wgdG9vbGJveCBzZXR0aW5nc1xuICAgKiBpY29uIC0gVG9vbCBpY29uJ3MgU1ZHXG4gICAqIHRpdGxlIC0gdGl0bGUgdG8gc2hvdyBpbiB0b29sYm94XG4gICAqXG4gICAqIEByZXR1cm5zIHt7aWNvbjogc3RyaW5nLCB0aXRsZTogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgdG9vbGJveCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogZyxcbiAgICAgIHRpdGxlOiBcIkhlYWRpbmdcIlxuICAgIH07XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGMgYXMgZGVmYXVsdFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/header/dist/header.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/inline-code/dist/inline-code.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@editorjs/inline-code/dist/inline-code.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ s)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".inline-code{background:rgba(250,239,240,.78);color:#b44437;padding:3px 4px;border-radius:5px;margin:0 1px;font-family:inherit;font-size:.86em;font-weight:500;letter-spacing:.3px}\")),document.head.appendChild(e)}}catch(n){console.error(\"vite-plugin-css-injected-by-js\",n)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9 8L5 12L9 16\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8L19 12L15 16\"/></svg>';\nclass s {\n  constructor({ api: t }) {\n    this.tag = \"CODE\", this.api = t, this.button = null, this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n  }\n  /**\n   * Class name for term-tag\n   *\n   * @type {string}\n   */\n  static get CSS() {\n    return \"inline-code\";\n  }\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  static get isInline() {\n    return !0;\n  }\n  /**\n   * Create button element for Toolbar\n   *\n   * @return {HTMLElement}\n   */\n  render() {\n    return this.button = document.createElement(\"button\"), this.button.type = \"button\", this.button.classList.add(this.iconClasses.base), this.button.innerHTML = this.toolboxIcon, this.button;\n  }\n  /**\n   * Wrap/Unwrap selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  surround(t) {\n    if (!t)\n      return;\n    let e = this.api.selection.findParentTag(this.tag, s.CSS);\n    e ? this.unwrap(e) : this.wrap(t);\n  }\n  /**\n   * Wrap selection with term-tag\n   *\n   * @param {Range} range - selected fragment\n   */\n  wrap(t) {\n    let e = document.createElement(this.tag);\n    e.classList.add(s.CSS), e.appendChild(t.extractContents()), t.insertNode(e), this.api.selection.expandToTag(e);\n  }\n  /**\n   * Unwrap term-tag\n   *\n   * @param {HTMLElement} termWrapper - term wrapper tag\n   */\n  unwrap(t) {\n    var i;\n    this.api.selection.expandToTag(t);\n    const e = window.getSelection();\n    if (!e)\n      return;\n    const n = e.getRangeAt(0), o = n.extractContents();\n    (i = t.parentNode) == null || i.removeChild(t), n.insertNode(o), e.removeAllRanges(), e.addRange(n);\n  }\n  /**\n   * Check and change Term's state for current selection\n   * \n   * @return {boolean}\n   */\n  checkState() {\n    const t = this.api.selection.findParentTag(this.tag, s.CSS);\n    return this.button && this.button.classList.toggle(this.iconClasses.active, !!t), !!t;\n  }\n  /**\n   * Get Tool icon's SVG\n   * @return {string}\n   */\n  get toolboxIcon() {\n    return a;\n  }\n  /**\n   * Sanitizer rule\n   * @return {SanitizerConfig}\n   */\n  static get sanitize() {\n    return {\n      code: {\n        class: s.CSS\n      }\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL2lubGluZS1jb2RlL2Rpc3QvaW5saW5lLWNvZGUubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxZQUFZLGFBQWEsSUFBSSx3QkFBd0Isc0NBQXNDLG9EQUFvRCxpQ0FBaUMsY0FBYyxnQkFBZ0Isa0JBQWtCLGFBQWEsb0JBQW9CLGdCQUFnQixnQkFBZ0Isb0JBQW9CLGtDQUFrQyxTQUFTLG1EQUFtRDtBQUNuWjtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2VkaXRvcmpzX25leHRqcy8uL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvaW5saW5lLWNvZGUvZGlzdC9pbmxpbmUtY29kZS5tanM/ZWE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIi5pbmxpbmUtY29kZXtiYWNrZ3JvdW5kOnJnYmEoMjUwLDIzOSwyNDAsLjc4KTtjb2xvcjojYjQ0NDM3O3BhZGRpbmc6M3B4IDRweDtib3JkZXItcmFkaXVzOjVweDttYXJnaW46MCAxcHg7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6Ljg2ZW07Zm9udC13ZWlnaHQ6NTAwO2xldHRlci1zcGFjaW5nOi4zcHh9XCIpKSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpfX1jYXRjaChuKXtjb25zb2xlLmVycm9yKFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCIsbil9fSkoKTtcbmNvbnN0IGEgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSA4TDUgMTJMOSAxNlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNSA4TDE5IDEyTDE1IDE2XCIvPjwvc3ZnPic7XG5jbGFzcyBzIHtcbiAgY29uc3RydWN0b3IoeyBhcGk6IHQgfSkge1xuICAgIHRoaXMudGFnID0gXCJDT0RFXCIsIHRoaXMuYXBpID0gdCwgdGhpcy5idXR0b24gPSBudWxsLCB0aGlzLmljb25DbGFzc2VzID0ge1xuICAgICAgYmFzZTogdGhpcy5hcGkuc3R5bGVzLmlubGluZVRvb2xCdXR0b24sXG4gICAgICBhY3RpdmU6IHRoaXMuYXBpLnN0eWxlcy5pbmxpbmVUb29sQnV0dG9uQWN0aXZlXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ2xhc3MgbmFtZSBmb3IgdGVybS10YWdcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiBcImlubGluZS1jb2RlXCI7XG4gIH1cbiAgLyoqXG4gICAqIFNwZWNpZmllcyBUb29sIGFzIElubGluZSBUb29sYmFyIFRvb2xcbiAgICpcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgaXNJbmxpbmUoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYnV0dG9uIGVsZW1lbnQgZm9yIFRvb2xiYXJcbiAgICpcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgdGhpcy5idXR0b24udHlwZSA9IFwiYnV0dG9uXCIsIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5pY29uQ2xhc3Nlcy5iYXNlKSwgdGhpcy5idXR0b24uaW5uZXJIVE1MID0gdGhpcy50b29sYm94SWNvbiwgdGhpcy5idXR0b247XG4gIH1cbiAgLyoqXG4gICAqIFdyYXAvVW53cmFwIHNlbGVjdGVkIGZyYWdtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7UmFuZ2V9IHJhbmdlIC0gc2VsZWN0ZWQgZnJhZ21lbnRcbiAgICovXG4gIHN1cnJvdW5kKHQpIHtcbiAgICBpZiAoIXQpXG4gICAgICByZXR1cm47XG4gICAgbGV0IGUgPSB0aGlzLmFwaS5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyh0aGlzLnRhZywgcy5DU1MpO1xuICAgIGUgPyB0aGlzLnVud3JhcChlKSA6IHRoaXMud3JhcCh0KTtcbiAgfVxuICAvKipcbiAgICogV3JhcCBzZWxlY3Rpb24gd2l0aCB0ZXJtLXRhZ1xuICAgKlxuICAgKiBAcGFyYW0ge1JhbmdlfSByYW5nZSAtIHNlbGVjdGVkIGZyYWdtZW50XG4gICAqL1xuICB3cmFwKHQpIHtcbiAgICBsZXQgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy50YWcpO1xuICAgIGUuY2xhc3NMaXN0LmFkZChzLkNTUyksIGUuYXBwZW5kQ2hpbGQodC5leHRyYWN0Q29udGVudHMoKSksIHQuaW5zZXJ0Tm9kZShlKSwgdGhpcy5hcGkuc2VsZWN0aW9uLmV4cGFuZFRvVGFnKGUpO1xuICB9XG4gIC8qKlxuICAgKiBVbndyYXAgdGVybS10YWdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGVybVdyYXBwZXIgLSB0ZXJtIHdyYXBwZXIgdGFnXG4gICAqL1xuICB1bndyYXAodCkge1xuICAgIHZhciBpO1xuICAgIHRoaXMuYXBpLnNlbGVjdGlvbi5leHBhbmRUb1RhZyh0KTtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIGlmICghZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBuID0gZS5nZXRSYW5nZUF0KDApLCBvID0gbi5leHRyYWN0Q29udGVudHMoKTtcbiAgICAoaSA9IHQucGFyZW50Tm9kZSkgPT0gbnVsbCB8fCBpLnJlbW92ZUNoaWxkKHQpLCBuLmluc2VydE5vZGUobyksIGUucmVtb3ZlQWxsUmFuZ2VzKCksIGUuYWRkUmFuZ2Uobik7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGFuZCBjaGFuZ2UgVGVybSdzIHN0YXRlIGZvciBjdXJyZW50IHNlbGVjdGlvblxuICAgKiBcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGNoZWNrU3RhdGUoKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuYXBpLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKHRoaXMudGFnLCBzLkNTUyk7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uICYmIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC50b2dnbGUodGhpcy5pY29uQ2xhc3Nlcy5hY3RpdmUsICEhdCksICEhdDtcbiAgfVxuICAvKipcbiAgICogR2V0IFRvb2wgaWNvbidzIFNWR1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdG9vbGJveEljb24oKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBydWxlXG4gICAqIEByZXR1cm4ge1Nhbml0aXplckNvbmZpZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvZGU6IHtcbiAgICAgICAgY2xhc3M6IHMuQ1NTXG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZXhwb3J0IHtcbiAgcyBhcyBkZWZhdWx0XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/inline-code/dist/inline-code.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/link/dist/link.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@editorjs/link/dist/link.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ I)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var o=document.createElement(\"style\");o.appendChild(document.createTextNode(`.link-tool{position:relative}.link-tool__input{padding-left:38px;background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath stroke='%23707684' stroke-linecap='round' stroke-width='2' d='m7.7 12.6-.021.02a2.795 2.795 0 0 0-.044 4.005v0a2.795 2.795 0 0 0 3.936.006l1.455-1.438a3 3 0 0 0 .34-3.866l-.146-.207'/%3E%3Cpath stroke='%23707684' stroke-linecap='round' stroke-width='2' d='m16.22 11.12.136-.14c.933-.954.992-2.46.135-3.483v0a2.597 2.597 0 0 0-3.664-.32L11.39 8.386a3 3 0 0 0-.301 4.3l.031.034'/%3E%3C/svg%3E\");background-repeat:no-repeat;background-position:10px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.link-tool__input-holder{position:relative}.link-tool__input-holder--error .link-tool__input{background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' fill='none'%3E%3Cpath stroke='rgb(224, 147, 147)' stroke-linecap='round' stroke-width='2' d='m7.7 12.6-.021.02a2.795 2.795 0 0 0-.044 4.005v0a2.795 2.795 0 0 0 3.936.006l1.455-1.438a3 3 0 0 0 .34-3.866l-.146-.207'/%3E%3Cpath stroke='rgb(224, 147, 147)' stroke-linecap='round' stroke-width='2' d='m16.22 11.12.136-.14c.933-.954.992-2.46.135-3.483v0a2.597 2.597 0 0 0-3.664-.32L11.39 8.386a3 3 0 0 0-.301 4.3l.031.034'/%3E%3C/svg%3E\");background-color:#fff3f6;border-color:#f3e0e0;color:#a95a5a;box-shadow:inset 0 1px 3px #923e3e0d}.link-tool__input[contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.link-tool__input[contentEditable=true][data-placeholder]:empty:before{opacity:1}.link-tool__input[contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.link-tool__progress{position:absolute;box-shadow:inset 0 1px 3px #66556b0a;height:100%;width:0;background-color:#f4f5f7;z-index:-1}.link-tool__progress--loading{-webkit-animation:progress .5s ease-in;-webkit-animation-fill-mode:forwards}.link-tool__progress--loaded{width:100%}.link-tool__content{display:block;padding:25px;border-radius:2px;box-shadow:0 0 0 2px #fff;color:initial!important;text-decoration:none!important}.link-tool__content:after{content:\"\";clear:both;display:table}.link-tool__content--rendered{background:#fff;border:1px solid rgba(201,201,204,.48);box-shadow:0 1px 3px #0000001a;border-radius:6px;will-change:filter;animation:link-in .45s 1 cubic-bezier(.215,.61,.355,1)}.link-tool__content--rendered:hover{box-shadow:0 0 3px #00000029}.link-tool__image{background-position:center center;background-repeat:no-repeat;background-size:cover;margin:0 0 0 30px;width:65px;height:65px;border-radius:3px;float:right}.link-tool__title{font-size:17px;font-weight:600;line-height:1.5em;margin:0 0 10px}.link-tool__title+.link-tool__anchor{margin-top:25px}.link-tool__description{margin:0 0 20px;font-size:15px;line-height:1.55em;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden}.link-tool__anchor{display:block;font-size:15px;line-height:1em;color:#888!important;border:0!important;padding:0!important}@keyframes link-in{0%{filter:blur(5px)}to{filter:none}}.codex-editor--narrow .link-tool__image{display:none}@-webkit-keyframes progress{0%{width:0}to{width:85%}}`)),document.head.appendChild(o)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nvar C = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction O(k) {\n  return k && k.__esModule && Object.prototype.hasOwnProperty.call(k, \"default\") ? k.default : k;\n}\n(function(k) {\n  var w = function() {\n    try {\n      return !!Symbol.iterator;\n    } catch {\n      return !1;\n    }\n  }, d = w(), v = function(n) {\n    var o = {\n      next: function() {\n        var e = n.shift();\n        return { done: e === void 0, value: e };\n      }\n    };\n    return d && (o[Symbol.iterator] = function() {\n      return o;\n    }), o;\n  }, c = function(n) {\n    return encodeURIComponent(n).replace(/%20/g, \"+\");\n  }, i = function(n) {\n    return decodeURIComponent(String(n).replace(/\\+/g, \" \"));\n  }, a = function() {\n    var n = function(e) {\n      Object.defineProperty(this, \"_entries\", { writable: !0, value: {} });\n      var s = typeof e;\n      if (s !== \"undefined\")\n        if (s === \"string\")\n          e !== \"\" && this._fromString(e);\n        else if (e instanceof n) {\n          var h = this;\n          e.forEach(function(u, f) {\n            h.append(f, u);\n          });\n        } else if (e !== null && s === \"object\")\n          if (Object.prototype.toString.call(e) === \"[object Array]\")\n            for (var t = 0; t < e.length; t++) {\n              var y = e[t];\n              if (Object.prototype.toString.call(y) === \"[object Array]\" || y.length !== 2)\n                this.append(y[0], y[1]);\n              else\n                throw new TypeError(\"Expected [string, any] as entry at index \" + t + \" of URLSearchParams's input\");\n            }\n          else\n            for (var r in e)\n              e.hasOwnProperty(r) && this.append(r, e[r]);\n        else\n          throw new TypeError(\"Unsupported input's type for URLSearchParams\");\n    }, o = n.prototype;\n    o.append = function(e, s) {\n      e in this._entries ? this._entries[e].push(String(s)) : this._entries[e] = [String(s)];\n    }, o.delete = function(e) {\n      delete this._entries[e];\n    }, o.get = function(e) {\n      return e in this._entries ? this._entries[e][0] : null;\n    }, o.getAll = function(e) {\n      return e in this._entries ? this._entries[e].slice(0) : [];\n    }, o.has = function(e) {\n      return e in this._entries;\n    }, o.set = function(e, s) {\n      this._entries[e] = [String(s)];\n    }, o.forEach = function(e, s) {\n      var h;\n      for (var t in this._entries)\n        if (this._entries.hasOwnProperty(t)) {\n          h = this._entries[t];\n          for (var y = 0; y < h.length; y++)\n            e.call(s, h[y], t, this);\n        }\n    }, o.keys = function() {\n      var e = [];\n      return this.forEach(function(s, h) {\n        e.push(h);\n      }), v(e);\n    }, o.values = function() {\n      var e = [];\n      return this.forEach(function(s) {\n        e.push(s);\n      }), v(e);\n    }, o.entries = function() {\n      var e = [];\n      return this.forEach(function(s, h) {\n        e.push([h, s]);\n      }), v(e);\n    }, d && (o[Symbol.iterator] = o.entries), o.toString = function() {\n      var e = [];\n      return this.forEach(function(s, h) {\n        e.push(c(h) + \"=\" + c(s));\n      }), e.join(\"&\");\n    }, k.URLSearchParams = n;\n  }, p = function() {\n    try {\n      var n = k.URLSearchParams;\n      return new n(\"?a=1\").toString() === \"a=1\" && typeof n.prototype.set == \"function\";\n    } catch {\n      return !1;\n    }\n  };\n  p() || a();\n  var l = k.URLSearchParams.prototype;\n  typeof l.sort != \"function\" && (l.sort = function() {\n    var n = this, o = [];\n    this.forEach(function(s, h) {\n      o.push([h, s]), n._entries || n.delete(h);\n    }), o.sort(function(s, h) {\n      return s[0] < h[0] ? -1 : s[0] > h[0] ? 1 : 0;\n    }), n._entries && (n._entries = {});\n    for (var e = 0; e < o.length; e++)\n      this.append(o[e][0], o[e][1]);\n  }), typeof l._fromString != \"function\" && Object.defineProperty(l, \"_fromString\", {\n    enumerable: !1,\n    configurable: !1,\n    writable: !1,\n    value: function(n) {\n      if (this._entries)\n        this._entries = {};\n      else {\n        var o = [];\n        this.forEach(function(t, y) {\n          o.push(y);\n        });\n        for (var e = 0; e < o.length; e++)\n          this.delete(o[e]);\n      }\n      n = n.replace(/^\\?/, \"\");\n      for (var s = n.split(\"&\"), h, e = 0; e < s.length; e++)\n        h = s[e].split(\"=\"), this.append(\n          i(h[0]),\n          h.length > 1 ? i(h[1]) : \"\"\n        );\n    }\n  });\n})(\n  typeof C < \"u\" ? C : typeof window < \"u\" ? window : typeof self < \"u\" ? self : C\n);\n(function(k) {\n  var w = function() {\n    try {\n      var c = new k.URL(\"b\", \"http://a\");\n      return c.pathname = \"c d\", c.href === \"http://a/c%20d\" && c.searchParams;\n    } catch {\n      return !1;\n    }\n  }, d = function() {\n    var c = k.URL, i = function(l, n) {\n      typeof l != \"string\" && (l = String(l));\n      var o = document, e;\n      if (n && (k.location === void 0 || n !== k.location.href)) {\n        o = document.implementation.createHTMLDocument(\"\"), e = o.createElement(\"base\"), e.href = n, o.head.appendChild(e);\n        try {\n          if (e.href.indexOf(n) !== 0)\n            throw new Error(e.href);\n        } catch (m) {\n          throw new Error(\"URL unable to set base \" + n + \" due to \" + m);\n        }\n      }\n      var s = o.createElement(\"a\");\n      s.href = l, e && (o.body.appendChild(s), s.href = s.href);\n      var h = o.createElement(\"input\");\n      if (h.type = \"url\", h.value = l, s.protocol === \":\" || !/:/.test(s.href) || !h.checkValidity() && !n)\n        throw new TypeError(\"Invalid URL\");\n      Object.defineProperty(this, \"_anchorElement\", {\n        value: s\n      });\n      var t = new k.URLSearchParams(this.search), y = !0, r = !0, u = this;\n      [\"append\", \"delete\", \"set\"].forEach(function(m) {\n        var b = t[m];\n        t[m] = function() {\n          b.apply(t, arguments), y && (r = !1, u.search = t.toString(), r = !0);\n        };\n      }), Object.defineProperty(this, \"searchParams\", {\n        value: t,\n        enumerable: !0\n      });\n      var f = void 0;\n      Object.defineProperty(this, \"_updateSearchParams\", {\n        enumerable: !1,\n        configurable: !1,\n        writable: !1,\n        value: function() {\n          this.search !== f && (f = this.search, r && (y = !1, this.searchParams._fromString(this.search), y = !0));\n        }\n      });\n    }, a = i.prototype, p = function(l) {\n      Object.defineProperty(a, l, {\n        get: function() {\n          return this._anchorElement[l];\n        },\n        set: function(n) {\n          this._anchorElement[l] = n;\n        },\n        enumerable: !0\n      });\n    };\n    [\"hash\", \"host\", \"hostname\", \"port\", \"protocol\"].forEach(function(l) {\n      p(l);\n    }), Object.defineProperty(a, \"search\", {\n      get: function() {\n        return this._anchorElement.search;\n      },\n      set: function(l) {\n        this._anchorElement.search = l, this._updateSearchParams();\n      },\n      enumerable: !0\n    }), Object.defineProperties(a, {\n      toString: {\n        get: function() {\n          var l = this;\n          return function() {\n            return l.href;\n          };\n        }\n      },\n      href: {\n        get: function() {\n          return this._anchorElement.href.replace(/\\?$/, \"\");\n        },\n        set: function(l) {\n          this._anchorElement.href = l, this._updateSearchParams();\n        },\n        enumerable: !0\n      },\n      pathname: {\n        get: function() {\n          return this._anchorElement.pathname.replace(/(^\\/?)/, \"/\");\n        },\n        set: function(l) {\n          this._anchorElement.pathname = l;\n        },\n        enumerable: !0\n      },\n      origin: {\n        get: function() {\n          var l = { \"http:\": 80, \"https:\": 443, \"ftp:\": 21 }[this._anchorElement.protocol], n = this._anchorElement.port != l && this._anchorElement.port !== \"\";\n          return this._anchorElement.protocol + \"//\" + this._anchorElement.hostname + (n ? \":\" + this._anchorElement.port : \"\");\n        },\n        enumerable: !0\n      },\n      password: {\n        // TODO\n        get: function() {\n          return \"\";\n        },\n        set: function(l) {\n        },\n        enumerable: !0\n      },\n      username: {\n        // TODO\n        get: function() {\n          return \"\";\n        },\n        set: function(l) {\n        },\n        enumerable: !0\n      }\n    }), i.createObjectURL = function(l) {\n      return c.createObjectURL.apply(c, arguments);\n    }, i.revokeObjectURL = function(l) {\n      return c.revokeObjectURL.apply(c, arguments);\n    }, k.URL = i;\n  };\n  if (w() || d(), k.location !== void 0 && !(\"origin\" in k.location)) {\n    var v = function() {\n      return k.location.protocol + \"//\" + k.location.hostname + (k.location.port ? \":\" + k.location.port : \"\");\n    };\n    try {\n      Object.defineProperty(k.location, \"origin\", {\n        get: v,\n        enumerable: !0\n      });\n    } catch {\n      setInterval(function() {\n        k.location.origin = v();\n      }, 100);\n    }\n  }\n})(\n  typeof C < \"u\" ? C : typeof window < \"u\" ? window : typeof self < \"u\" ? self : C\n);\nvar j = { exports: {} };\n(function(k, w) {\n  (function(d, v) {\n    k.exports = v();\n  })(window, function() {\n    return function(d) {\n      var v = {};\n      function c(i) {\n        if (v[i])\n          return v[i].exports;\n        var a = v[i] = { i, l: !1, exports: {} };\n        return d[i].call(a.exports, a, a.exports, c), a.l = !0, a.exports;\n      }\n      return c.m = d, c.c = v, c.d = function(i, a, p) {\n        c.o(i, a) || Object.defineProperty(i, a, { enumerable: !0, get: p });\n      }, c.r = function(i) {\n        typeof Symbol < \"u\" && Symbol.toStringTag && Object.defineProperty(i, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(i, \"__esModule\", { value: !0 });\n      }, c.t = function(i, a) {\n        if (1 & a && (i = c(i)), 8 & a || 4 & a && typeof i == \"object\" && i && i.__esModule)\n          return i;\n        var p = /* @__PURE__ */ Object.create(null);\n        if (c.r(p), Object.defineProperty(p, \"default\", { enumerable: !0, value: i }), 2 & a && typeof i != \"string\")\n          for (var l in i)\n            c.d(p, l, (function(n) {\n              return i[n];\n            }).bind(null, l));\n        return p;\n      }, c.n = function(i) {\n        var a = i && i.__esModule ? function() {\n          return i.default;\n        } : function() {\n          return i;\n        };\n        return c.d(a, \"a\", a), a;\n      }, c.o = function(i, a) {\n        return Object.prototype.hasOwnProperty.call(i, a);\n      }, c.p = \"\", c(c.s = 3);\n    }([function(d, v) {\n      var c;\n      c = function() {\n        return this;\n      }();\n      try {\n        c = c || new Function(\"return this\")();\n      } catch {\n        typeof window == \"object\" && (c = window);\n      }\n      d.exports = c;\n    }, function(d, v, c) {\n      (function(i) {\n        var a = c(2), p = setTimeout;\n        function l() {\n        }\n        function n(r) {\n          if (!(this instanceof n))\n            throw new TypeError(\"Promises must be constructed via new\");\n          if (typeof r != \"function\")\n            throw new TypeError(\"not a function\");\n          this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], y(r, this);\n        }\n        function o(r, u) {\n          for (; r._state === 3; )\n            r = r._value;\n          r._state !== 0 ? (r._handled = !0, n._immediateFn(function() {\n            var f = r._state === 1 ? u.onFulfilled : u.onRejected;\n            if (f !== null) {\n              var m;\n              try {\n                m = f(r._value);\n              } catch (b) {\n                return void s(u.promise, b);\n              }\n              e(u.promise, m);\n            } else\n              (r._state === 1 ? e : s)(u.promise, r._value);\n          })) : r._deferreds.push(u);\n        }\n        function e(r, u) {\n          try {\n            if (u === r)\n              throw new TypeError(\"A promise cannot be resolved with itself.\");\n            if (u && (typeof u == \"object\" || typeof u == \"function\")) {\n              var f = u.then;\n              if (u instanceof n)\n                return r._state = 3, r._value = u, void h(r);\n              if (typeof f == \"function\")\n                return void y((m = f, b = u, function() {\n                  m.apply(b, arguments);\n                }), r);\n            }\n            r._state = 1, r._value = u, h(r);\n          } catch (g) {\n            s(r, g);\n          }\n          var m, b;\n        }\n        function s(r, u) {\n          r._state = 2, r._value = u, h(r);\n        }\n        function h(r) {\n          r._state === 2 && r._deferreds.length === 0 && n._immediateFn(function() {\n            r._handled || n._unhandledRejectionFn(r._value);\n          });\n          for (var u = 0, f = r._deferreds.length; u < f; u++)\n            o(r, r._deferreds[u]);\n          r._deferreds = null;\n        }\n        function t(r, u, f) {\n          this.onFulfilled = typeof r == \"function\" ? r : null, this.onRejected = typeof u == \"function\" ? u : null, this.promise = f;\n        }\n        function y(r, u) {\n          var f = !1;\n          try {\n            r(function(m) {\n              f || (f = !0, e(u, m));\n            }, function(m) {\n              f || (f = !0, s(u, m));\n            });\n          } catch (m) {\n            if (f)\n              return;\n            f = !0, s(u, m);\n          }\n        }\n        n.prototype.catch = function(r) {\n          return this.then(null, r);\n        }, n.prototype.then = function(r, u) {\n          var f = new this.constructor(l);\n          return o(this, new t(r, u, f)), f;\n        }, n.prototype.finally = a.a, n.all = function(r) {\n          return new n(function(u, f) {\n            if (!r || r.length === void 0)\n              throw new TypeError(\"Promise.all accepts an array\");\n            var m = Array.prototype.slice.call(r);\n            if (m.length === 0)\n              return u([]);\n            var b = m.length;\n            function g(T, E) {\n              try {\n                if (E && (typeof E == \"object\" || typeof E == \"function\")) {\n                  var S = E.then;\n                  if (typeof S == \"function\")\n                    return void S.call(E, function(L) {\n                      g(T, L);\n                    }, f);\n                }\n                m[T] = E, --b == 0 && u(m);\n              } catch (L) {\n                f(L);\n              }\n            }\n            for (var _ = 0; _ < m.length; _++)\n              g(_, m[_]);\n          });\n        }, n.resolve = function(r) {\n          return r && typeof r == \"object\" && r.constructor === n ? r : new n(function(u) {\n            u(r);\n          });\n        }, n.reject = function(r) {\n          return new n(function(u, f) {\n            f(r);\n          });\n        }, n.race = function(r) {\n          return new n(function(u, f) {\n            for (var m = 0, b = r.length; m < b; m++)\n              r[m].then(u, f);\n          });\n        }, n._immediateFn = typeof i == \"function\" && function(r) {\n          i(r);\n        } || function(r) {\n          p(r, 0);\n        }, n._unhandledRejectionFn = function(r) {\n          typeof console < \"u\" && console && console.warn(\"Possible Unhandled Promise Rejection:\", r);\n        }, v.a = n;\n      }).call(this, c(5).setImmediate);\n    }, function(d, v, c) {\n      v.a = function(i) {\n        var a = this.constructor;\n        return this.then(function(p) {\n          return a.resolve(i()).then(function() {\n            return p;\n          });\n        }, function(p) {\n          return a.resolve(i()).then(function() {\n            return a.reject(p);\n          });\n        });\n      };\n    }, function(d, v, c) {\n      function i(t) {\n        return (i = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(y) {\n          return typeof y;\n        } : function(y) {\n          return y && typeof Symbol == \"function\" && y.constructor === Symbol && y !== Symbol.prototype ? \"symbol\" : typeof y;\n        })(t);\n      }\n      c(4);\n      var a, p, l, n, o, e, s = c(8), h = (p = function(t) {\n        return new Promise(function(y, r) {\n          t = n(t), t = o(t);\n          var u = window.XMLHttpRequest ? new window.XMLHttpRequest() : new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n          u.open(t.method, t.url), u.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"), Object.keys(t.headers).forEach(function(m) {\n            var b = t.headers[m];\n            u.setRequestHeader(m, b);\n          });\n          var f = t.ratio;\n          u.upload.addEventListener(\"progress\", function(m) {\n            var b = Math.round(m.loaded / m.total * 100), g = Math.ceil(b * f / 100);\n            t.progress(g);\n          }, !1), u.addEventListener(\"progress\", function(m) {\n            var b = Math.round(m.loaded / m.total * 100), g = Math.ceil(b * (100 - f) / 100) + f;\n            t.progress(g);\n          }, !1), u.onreadystatechange = function() {\n            if (u.readyState === 4) {\n              var m = u.response;\n              try {\n                m = JSON.parse(m);\n              } catch {\n              }\n              var b = s.parseHeaders(u.getAllResponseHeaders()), g = { body: m, code: u.status, headers: b };\n              u.status === 200 ? y(g) : r(g);\n            }\n          }, u.send(t.data);\n        });\n      }, l = function(t) {\n        return t.method = \"POST\", p(t);\n      }, n = function() {\n        var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        if (t.url && typeof t.url != \"string\")\n          throw new Error(\"Url must be a string\");\n        if (t.url = t.url || \"\", t.method && typeof t.method != \"string\")\n          throw new Error(\"`method` must be a string or null\");\n        if (t.method = t.method ? t.method.toUpperCase() : \"GET\", t.headers && i(t.headers) !== \"object\")\n          throw new Error(\"`headers` must be an object or null\");\n        if (t.headers = t.headers || {}, t.type && (typeof t.type != \"string\" || !Object.values(a).includes(t.type)))\n          throw new Error(\"`type` must be taken from module's «contentType» library\");\n        if (t.progress && typeof t.progress != \"function\")\n          throw new Error(\"`progress` must be a function or null\");\n        if (t.progress = t.progress || function(y) {\n        }, t.beforeSend = t.beforeSend || function(y) {\n        }, t.ratio && typeof t.ratio != \"number\")\n          throw new Error(\"`ratio` must be a number\");\n        if (t.ratio < 0 || t.ratio > 100)\n          throw new Error(\"`ratio` must be in a 0-100 interval\");\n        if (t.ratio = t.ratio || 90, t.accept && typeof t.accept != \"string\")\n          throw new Error(\"`accept` must be a string with a list of allowed mime-types\");\n        if (t.accept = t.accept || \"*/*\", t.multiple && typeof t.multiple != \"boolean\")\n          throw new Error(\"`multiple` must be a true or false\");\n        if (t.multiple = t.multiple || !1, t.fieldName && typeof t.fieldName != \"string\")\n          throw new Error(\"`fieldName` must be a string\");\n        return t.fieldName = t.fieldName || \"files\", t;\n      }, o = function(t) {\n        switch (t.method) {\n          case \"GET\":\n            var y = e(t.data, a.URLENCODED);\n            delete t.data, t.url = /\\?/.test(t.url) ? t.url + \"&\" + y : t.url + \"?\" + y;\n            break;\n          case \"POST\":\n          case \"PUT\":\n          case \"DELETE\":\n          case \"UPDATE\":\n            var r = function() {\n              return (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).type || a.JSON;\n            }(t);\n            (s.isFormData(t.data) || s.isFormElement(t.data)) && (r = a.FORM), t.data = e(t.data, r), r !== h.contentType.FORM && (t.headers[\"content-type\"] = r);\n        }\n        return t;\n      }, e = function() {\n        var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        switch (arguments.length > 1 ? arguments[1] : void 0) {\n          case a.URLENCODED:\n            return s.urlEncode(t);\n          case a.JSON:\n            return s.jsonEncode(t);\n          case a.FORM:\n            return s.formEncode(t);\n          default:\n            return t;\n        }\n      }, { contentType: a = { URLENCODED: \"application/x-www-form-urlencoded; charset=utf-8\", FORM: \"multipart/form-data\", JSON: \"application/json; charset=utf-8\" }, request: p, get: function(t) {\n        return t.method = \"GET\", p(t);\n      }, post: l, transport: function(t) {\n        return t = n(t), s.selectFiles(t).then(function(y) {\n          for (var r = new FormData(), u = 0; u < y.length; u++)\n            r.append(t.fieldName, y[u], y[u].name);\n          return s.isObject(t.data) && Object.keys(t.data).forEach(function(f) {\n            var m = t.data[f];\n            r.append(f, m);\n          }), t.beforeSend && t.beforeSend(y), t.data = r, l(t);\n        });\n      }, selectFiles: function(t) {\n        return delete (t = n(t)).beforeSend, s.selectFiles(t);\n      } });\n      d.exports = h;\n    }, function(d, v, c) {\n      c.r(v);\n      var i = c(1);\n      window.Promise = window.Promise || i.a;\n    }, function(d, v, c) {\n      (function(i) {\n        var a = i !== void 0 && i || typeof self < \"u\" && self || window, p = Function.prototype.apply;\n        function l(n, o) {\n          this._id = n, this._clearFn = o;\n        }\n        v.setTimeout = function() {\n          return new l(p.call(setTimeout, a, arguments), clearTimeout);\n        }, v.setInterval = function() {\n          return new l(p.call(setInterval, a, arguments), clearInterval);\n        }, v.clearTimeout = v.clearInterval = function(n) {\n          n && n.close();\n        }, l.prototype.unref = l.prototype.ref = function() {\n        }, l.prototype.close = function() {\n          this._clearFn.call(a, this._id);\n        }, v.enroll = function(n, o) {\n          clearTimeout(n._idleTimeoutId), n._idleTimeout = o;\n        }, v.unenroll = function(n) {\n          clearTimeout(n._idleTimeoutId), n._idleTimeout = -1;\n        }, v._unrefActive = v.active = function(n) {\n          clearTimeout(n._idleTimeoutId);\n          var o = n._idleTimeout;\n          o >= 0 && (n._idleTimeoutId = setTimeout(function() {\n            n._onTimeout && n._onTimeout();\n          }, o));\n        }, c(6), v.setImmediate = typeof self < \"u\" && self.setImmediate || i !== void 0 && i.setImmediate || this && this.setImmediate, v.clearImmediate = typeof self < \"u\" && self.clearImmediate || i !== void 0 && i.clearImmediate || this && this.clearImmediate;\n      }).call(this, c(0));\n    }, function(d, v, c) {\n      (function(i, a) {\n        (function(p, l) {\n          if (!p.setImmediate) {\n            var n, o, e, s, h, t = 1, y = {}, r = !1, u = p.document, f = Object.getPrototypeOf && Object.getPrototypeOf(p);\n            f = f && f.setTimeout ? f : p, {}.toString.call(p.process) === \"[object process]\" ? n = function(g) {\n              a.nextTick(function() {\n                b(g);\n              });\n            } : function() {\n              if (p.postMessage && !p.importScripts) {\n                var g = !0, _ = p.onmessage;\n                return p.onmessage = function() {\n                  g = !1;\n                }, p.postMessage(\"\", \"*\"), p.onmessage = _, g;\n              }\n            }() ? (s = \"setImmediate$\" + Math.random() + \"$\", h = function(g) {\n              g.source === p && typeof g.data == \"string\" && g.data.indexOf(s) === 0 && b(+g.data.slice(s.length));\n            }, p.addEventListener ? p.addEventListener(\"message\", h, !1) : p.attachEvent(\"onmessage\", h), n = function(g) {\n              p.postMessage(s + g, \"*\");\n            }) : p.MessageChannel ? ((e = new MessageChannel()).port1.onmessage = function(g) {\n              b(g.data);\n            }, n = function(g) {\n              e.port2.postMessage(g);\n            }) : u && \"onreadystatechange\" in u.createElement(\"script\") ? (o = u.documentElement, n = function(g) {\n              var _ = u.createElement(\"script\");\n              _.onreadystatechange = function() {\n                b(g), _.onreadystatechange = null, o.removeChild(_), _ = null;\n              }, o.appendChild(_);\n            }) : n = function(g) {\n              setTimeout(b, 0, g);\n            }, f.setImmediate = function(g) {\n              typeof g != \"function\" && (g = new Function(\"\" + g));\n              for (var _ = new Array(arguments.length - 1), T = 0; T < _.length; T++)\n                _[T] = arguments[T + 1];\n              var E = { callback: g, args: _ };\n              return y[t] = E, n(t), t++;\n            }, f.clearImmediate = m;\n          }\n          function m(g) {\n            delete y[g];\n          }\n          function b(g) {\n            if (r)\n              setTimeout(b, 0, g);\n            else {\n              var _ = y[g];\n              if (_) {\n                r = !0;\n                try {\n                  (function(T) {\n                    var E = T.callback, S = T.args;\n                    switch (S.length) {\n                      case 0:\n                        E();\n                        break;\n                      case 1:\n                        E(S[0]);\n                        break;\n                      case 2:\n                        E(S[0], S[1]);\n                        break;\n                      case 3:\n                        E(S[0], S[1], S[2]);\n                        break;\n                      default:\n                        E.apply(l, S);\n                    }\n                  })(_);\n                } finally {\n                  m(g), r = !1;\n                }\n              }\n            }\n          }\n        })(typeof self > \"u\" ? i === void 0 ? this : i : self);\n      }).call(this, c(0), c(7));\n    }, function(d, v) {\n      var c, i, a = d.exports = {};\n      function p() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function l() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      function n(f) {\n        if (c === setTimeout)\n          return setTimeout(f, 0);\n        if ((c === p || !c) && setTimeout)\n          return c = setTimeout, setTimeout(f, 0);\n        try {\n          return c(f, 0);\n        } catch {\n          try {\n            return c.call(null, f, 0);\n          } catch {\n            return c.call(this, f, 0);\n          }\n        }\n      }\n      (function() {\n        try {\n          c = typeof setTimeout == \"function\" ? setTimeout : p;\n        } catch {\n          c = p;\n        }\n        try {\n          i = typeof clearTimeout == \"function\" ? clearTimeout : l;\n        } catch {\n          i = l;\n        }\n      })();\n      var o, e = [], s = !1, h = -1;\n      function t() {\n        s && o && (s = !1, o.length ? e = o.concat(e) : h = -1, e.length && y());\n      }\n      function y() {\n        if (!s) {\n          var f = n(t);\n          s = !0;\n          for (var m = e.length; m; ) {\n            for (o = e, e = []; ++h < m; )\n              o && o[h].run();\n            h = -1, m = e.length;\n          }\n          o = null, s = !1, function(b) {\n            if (i === clearTimeout)\n              return clearTimeout(b);\n            if ((i === l || !i) && clearTimeout)\n              return i = clearTimeout, clearTimeout(b);\n            try {\n              i(b);\n            } catch {\n              try {\n                return i.call(null, b);\n              } catch {\n                return i.call(this, b);\n              }\n            }\n          }(f);\n        }\n      }\n      function r(f, m) {\n        this.fun = f, this.array = m;\n      }\n      function u() {\n      }\n      a.nextTick = function(f) {\n        var m = new Array(arguments.length - 1);\n        if (arguments.length > 1)\n          for (var b = 1; b < arguments.length; b++)\n            m[b - 1] = arguments[b];\n        e.push(new r(f, m)), e.length !== 1 || s || n(y);\n      }, r.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      }, a.title = \"browser\", a.browser = !0, a.env = {}, a.argv = [], a.version = \"\", a.versions = {}, a.on = u, a.addListener = u, a.once = u, a.off = u, a.removeListener = u, a.removeAllListeners = u, a.emit = u, a.prependListener = u, a.prependOnceListener = u, a.listeners = function(f) {\n        return [];\n      }, a.binding = function(f) {\n        throw new Error(\"process.binding is not supported\");\n      }, a.cwd = function() {\n        return \"/\";\n      }, a.chdir = function(f) {\n        throw new Error(\"process.chdir is not supported\");\n      }, a.umask = function() {\n        return 0;\n      };\n    }, function(d, v, c) {\n      function i(p, l) {\n        for (var n = 0; n < l.length; n++) {\n          var o = l[n];\n          o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(p, o.key, o);\n        }\n      }\n      var a = c(9);\n      d.exports = function() {\n        function p() {\n          (function(e, s) {\n            if (!(e instanceof s))\n              throw new TypeError(\"Cannot call a class as a function\");\n          })(this, p);\n        }\n        var l, n, o;\n        return l = p, o = [{ key: \"urlEncode\", value: function(e) {\n          return a(e);\n        } }, { key: \"jsonEncode\", value: function(e) {\n          return JSON.stringify(e);\n        } }, { key: \"formEncode\", value: function(e) {\n          if (this.isFormData(e))\n            return e;\n          if (this.isFormElement(e))\n            return new FormData(e);\n          if (this.isObject(e)) {\n            var s = new FormData();\n            return Object.keys(e).forEach(function(h) {\n              var t = e[h];\n              s.append(h, t);\n            }), s;\n          }\n          throw new Error(\"`data` must be an instance of Object, FormData or <FORM> HTMLElement\");\n        } }, { key: \"isObject\", value: function(e) {\n          return Object.prototype.toString.call(e) === \"[object Object]\";\n        } }, { key: \"isFormData\", value: function(e) {\n          return e instanceof FormData;\n        } }, { key: \"isFormElement\", value: function(e) {\n          return e instanceof HTMLFormElement;\n        } }, { key: \"selectFiles\", value: function() {\n          var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n          return new Promise(function(s, h) {\n            var t = document.createElement(\"INPUT\");\n            t.type = \"file\", e.multiple && t.setAttribute(\"multiple\", \"multiple\"), e.accept && t.setAttribute(\"accept\", e.accept), t.style.display = \"none\", document.body.appendChild(t), t.addEventListener(\"change\", function(y) {\n              var r = y.target.files;\n              s(r), document.body.removeChild(t);\n            }, !1), t.click();\n          });\n        } }, { key: \"parseHeaders\", value: function(e) {\n          var s = e.trim().split(/[\\r\\n]+/), h = {};\n          return s.forEach(function(t) {\n            var y = t.split(\": \"), r = y.shift(), u = y.join(\": \");\n            r && (h[r] = u);\n          }), h;\n        } }], (n = null) && i(l.prototype, n), o && i(l, o), p;\n      }();\n    }, function(d, v) {\n      var c = function(a) {\n        return encodeURIComponent(a).replace(/[!'()*]/g, escape).replace(/%20/g, \"+\");\n      }, i = function(a, p, l, n) {\n        return p = p || null, l = l || \"&\", n = n || null, a ? function(o) {\n          for (var e = new Array(), s = 0; s < o.length; s++)\n            o[s] && e.push(o[s]);\n          return e;\n        }(Object.keys(a).map(function(o) {\n          var e, s, h = o;\n          if (n && (h = n + \"[\" + h + \"]\"), typeof a[o] == \"object\" && a[o] !== null)\n            e = i(a[o], null, l, h);\n          else {\n            p && (s = h, h = !isNaN(parseFloat(s)) && isFinite(s) ? p + Number(h) : h);\n            var t = a[o];\n            t = (t = (t = (t = t === !0 ? \"1\" : t) === !1 ? \"0\" : t) === 0 ? \"0\" : t) || \"\", e = c(h) + \"=\" + c(t);\n          }\n          return e;\n        })).join(l).replace(/[!'()*]/g, \"\") : \"\";\n      };\n      d.exports = i;\n    }]);\n  });\n})(j);\nvar P = j.exports;\nconst R = /* @__PURE__ */ O(P), F = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.569 6.39509 13.9269 6.25143 12.8271 7.17675L11.39 8.38588C10.0935 9.47674 9.95704 11.4241 11.0887 12.6852L11.12 12.72\"/></svg>';\nclass I {\n  /**\n   * Notify core that read-only mode supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: F,\n      title: \"Link\"\n    };\n  }\n  /**\n   * Allow to press Enter inside the LinkTool input\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * @param {object} options - Tool constructor options fot from Editor.js\n   * @param {LinkToolData} options.data - previously saved data\n   * @param {LinkToolConfig} options.config - user config for Tool\n   * @param {object} options.api - Editor.js API\n   * @param {boolean} options.readOnly - read-only mode flag\n   */\n  constructor({ data: w, config: d, api: v, readOnly: c }) {\n    this.api = v, this.readOnly = c, this.config = {\n      endpoint: d.endpoint || \"\",\n      headers: d.headers || {}\n    }, this.nodes = {\n      wrapper: null,\n      container: null,\n      progress: null,\n      input: null,\n      inputHolder: null,\n      linkContent: null,\n      linkImage: null,\n      linkTitle: null,\n      linkDescription: null,\n      linkText: null\n    }, this._data = {\n      link: \"\",\n      meta: {}\n    }, this.data = w;\n  }\n  /**\n   * Renders Block content\n   *\n   * @public\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this.nodes.wrapper = this.make(\"div\", this.CSS.baseClass), this.nodes.container = this.make(\"div\", this.CSS.container), this.nodes.inputHolder = this.makeInputHolder(), this.nodes.linkContent = this.prepareLinkPreview(), Object.keys(this.data.meta).length ? (this.nodes.container.appendChild(this.nodes.linkContent), this.showLinkPreview(this.data.meta)) : this.nodes.container.appendChild(this.nodes.inputHolder), this.nodes.wrapper.appendChild(this.nodes.container), this.nodes.wrapper;\n  }\n  /**\n   * Return Block data\n   *\n   * @public\n   *\n   * @returns {LinkToolData}\n   */\n  save() {\n    return this.data;\n  }\n  /**\n   * Validate Block data\n   * - check if given link is an empty string or not.\n   *\n   * @public\n   *\n   * @returns {boolean} false if saved data is incorrect, otherwise true\n   */\n  validate() {\n    return this.data.link.trim() !== \"\";\n  }\n  /**\n   * Stores all Tool's data\n   *\n   * @param {LinkToolData} data - data to store\n   */\n  set data(w) {\n    this._data = Object.assign({}, {\n      link: w.link || this._data.link,\n      meta: w.meta || this._data.meta\n    });\n  }\n  /**\n   * Return Tool data\n   *\n   * @returns {LinkToolData}\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * @returns {object} - Link Tool styles\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      /**\n       * Tool's classes\n       */\n      container: \"link-tool\",\n      inputEl: \"link-tool__input\",\n      inputHolder: \"link-tool__input-holder\",\n      inputError: \"link-tool__input-holder--error\",\n      linkContent: \"link-tool__content\",\n      linkContentRendered: \"link-tool__content--rendered\",\n      linkImage: \"link-tool__image\",\n      linkTitle: \"link-tool__title\",\n      linkDescription: \"link-tool__description\",\n      linkText: \"link-tool__anchor\",\n      progress: \"link-tool__progress\",\n      progressLoading: \"link-tool__progress--loading\",\n      progressLoaded: \"link-tool__progress--loaded\"\n    };\n  }\n  /**\n   * Prepare input holder\n   *\n   * @returns {HTMLElement}\n   */\n  makeInputHolder() {\n    const w = this.make(\"div\", this.CSS.inputHolder);\n    return this.nodes.progress = this.make(\"label\", this.CSS.progress), this.nodes.input = this.make(\"div\", [this.CSS.input, this.CSS.inputEl], {\n      contentEditable: !this.readOnly\n    }), this.nodes.input.dataset.placeholder = this.api.i18n.t(\"Link\"), this.readOnly || (this.nodes.input.addEventListener(\"paste\", (d) => {\n      this.startFetching(d);\n    }), this.nodes.input.addEventListener(\"keydown\", (d) => {\n      const [v, c] = [13, 65], i = d.ctrlKey || d.metaKey;\n      switch (d.keyCode) {\n        case v:\n          d.preventDefault(), d.stopPropagation(), this.startFetching(d);\n          break;\n        case c:\n          i && this.selectLinkUrl(d);\n          break;\n      }\n    })), w.appendChild(this.nodes.progress), w.appendChild(this.nodes.input), w;\n  }\n  /**\n   * Activates link data fetching by url\n   *\n   * @param {PasteEvent|KeyboardEvent} event - fetching could be fired by a pase or keydown events\n   */\n  startFetching(w) {\n    let d = this.nodes.input.textContent;\n    w.type === \"paste\" && (d = (w.clipboardData || window.clipboardData).getData(\"text\")), this.removeErrorStyle(), this.fetchLinkData(d);\n  }\n  /**\n   * If previous link data fetching failed, remove error styles\n   */\n  removeErrorStyle() {\n    this.nodes.inputHolder.classList.remove(this.CSS.inputError), this.nodes.inputHolder.insertBefore(this.nodes.progress, this.nodes.input);\n  }\n  /**\n   * Select LinkTool input content by CMD+A\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  selectLinkUrl(w) {\n    w.preventDefault(), w.stopPropagation();\n    const d = window.getSelection(), v = new Range(), a = d.anchorNode.parentNode.closest(`.${this.CSS.inputHolder}`).querySelector(`.${this.CSS.inputEl}`);\n    v.selectNodeContents(a), d.removeAllRanges(), d.addRange(v);\n  }\n  /**\n   * Prepare link preview holder\n   *\n   * @returns {HTMLElement}\n   */\n  prepareLinkPreview() {\n    const w = this.make(\"a\", this.CSS.linkContent, {\n      target: \"_blank\",\n      rel: \"nofollow noindex noreferrer\"\n    });\n    return this.nodes.linkImage = this.make(\"div\", this.CSS.linkImage), this.nodes.linkTitle = this.make(\"div\", this.CSS.linkTitle), this.nodes.linkDescription = this.make(\"p\", this.CSS.linkDescription), this.nodes.linkText = this.make(\"span\", this.CSS.linkText), w;\n  }\n  /**\n   * Compose link preview from fetched data\n   *\n   * @param {metaData} meta - link meta data\n   */\n  showLinkPreview({ image: w, title: d, description: v }) {\n    this.nodes.container.appendChild(this.nodes.linkContent), w && w.url && (this.nodes.linkImage.style.backgroundImage = \"url(\" + w.url + \")\", this.nodes.linkContent.appendChild(this.nodes.linkImage)), d && (this.nodes.linkTitle.textContent = d, this.nodes.linkContent.appendChild(this.nodes.linkTitle)), v && (this.nodes.linkDescription.textContent = v, this.nodes.linkContent.appendChild(this.nodes.linkDescription)), this.nodes.linkContent.classList.add(this.CSS.linkContentRendered), this.nodes.linkContent.setAttribute(\"href\", this.data.link), this.nodes.linkContent.appendChild(this.nodes.linkText);\n    try {\n      this.nodes.linkText.textContent = new URL(this.data.link).hostname;\n    } catch {\n      this.nodes.linkText.textContent = this.data.link;\n    }\n  }\n  /**\n   * Show loading progress bar\n   */\n  showProgress() {\n    this.nodes.progress.classList.add(this.CSS.progressLoading);\n  }\n  /**\n   * Hide loading progress bar\n   *\n   * @returns {Promise<void>}\n   */\n  hideProgress() {\n    return new Promise((w) => {\n      this.nodes.progress.classList.remove(this.CSS.progressLoading), this.nodes.progress.classList.add(this.CSS.progressLoaded), setTimeout(w, 500);\n    });\n  }\n  /**\n   * If data fetching failed, set input error style\n   */\n  applyErrorStyle() {\n    this.nodes.inputHolder.classList.add(this.CSS.inputError), this.nodes.progress.remove();\n  }\n  /**\n   * Sends to backend pasted url and receives link data\n   *\n   * @param {string} url - link source url\n   */\n  async fetchLinkData(w) {\n    this.showProgress(), this.data = { link: w };\n    try {\n      const { body: d } = await R.get({\n        url: this.config.endpoint,\n        headers: this.config.headers,\n        data: {\n          url: w\n        }\n      });\n      this.onFetch(d);\n    } catch {\n      this.fetchingFailed(this.api.i18n.t(\"Couldn't fetch the link data\"));\n    }\n  }\n  /**\n   * Link data fetching callback\n   *\n   * @param {UploadResponseFormat} response - backend response\n   */\n  onFetch(w) {\n    if (!w || !w.success) {\n      this.fetchingFailed(this.api.i18n.t(\"Couldn't get this link data, try the other one\"));\n      return;\n    }\n    const d = w.meta, v = w.link || this.data.link;\n    if (this.data = {\n      meta: d,\n      link: v\n    }, !d) {\n      this.fetchingFailed(this.api.i18n.t(\"Wrong response format from the server\"));\n      return;\n    }\n    this.hideProgress().then(() => {\n      this.nodes.inputHolder.remove(), this.showLinkPreview(d);\n    });\n  }\n  /**\n   * Handle link fetching errors\n   *\n   * @private\n   *\n   * @param {string} errorMessage - message to explain user what he should do\n   */\n  fetchingFailed(w) {\n    this.api.notifier.show({\n      message: w,\n      style: \"error\"\n    }), this.applyErrorStyle();\n  }\n  /**\n   * Helper method for elements creation\n   *\n   * @param {string} tagName - name of creating element\n   * @param {string|string[]} [classNames] - list of CSS classes to add\n   * @param {object} [attributes] - object with attributes to add\n   * @returns {HTMLElement}\n   */\n  make(w, d = null, v = {}) {\n    const c = document.createElement(w);\n    Array.isArray(d) ? c.classList.add(...d) : d && c.classList.add(d);\n    for (const i in v)\n      c[i] = v[i];\n    return c;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/link/dist/link.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/list/dist/list.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@editorjs/list/dist/list.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ d)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".cdx-list{margin:0;padding-left:40px;outline:none}.cdx-list__item{padding:5.5px 0 5.5px 3px;line-height:1.6em}.cdx-list--unordered{list-style:disc}.cdx-list--ordered{list-style:decimal}.cdx-list-settings{display:flex}.cdx-list-settings .cdx-settings-button{width:50%}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>';\nclass d {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"List\"\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - tool constructor options\n   * @param {ListData} params.data - previously saved data\n   * @param {object} params.config - user config for Tool\n   * @param {object} params.api - Editor.js API\n   * @param {boolean} params.readOnly - read-only mode flag\n   */\n  constructor({ data: e, config: t, api: r, readOnly: s }) {\n    this._elements = {\n      wrapper: null\n    }, this.api = r, this.readOnly = s, this.settings = [\n      {\n        name: \"unordered\",\n        label: this.api.i18n.t(\"Unordered\"),\n        icon: a,\n        default: t.defaultStyle === \"unordered\" || !1\n      },\n      {\n        name: \"ordered\",\n        label: this.api.i18n.t(\"Ordered\"),\n        icon: o,\n        default: t.defaultStyle === \"ordered\" || !0\n      }\n    ], this._data = {\n      style: this.settings.find((i) => i.default === !0).name,\n      items: []\n    }, this.data = e;\n  }\n  /**\n   * Returns list tag with items\n   *\n   * @returns {Element}\n   * @public\n   */\n  render() {\n    return this._elements.wrapper = this.makeMainTag(this._data.style), this._data.items.length ? this._data.items.forEach((e) => {\n      this._elements.wrapper.appendChild(this._make(\"li\", this.CSS.item, {\n        innerHTML: e\n      }));\n    }) : this._elements.wrapper.appendChild(this._make(\"li\", this.CSS.item)), this.readOnly || this._elements.wrapper.addEventListener(\"keydown\", (e) => {\n      const [t, r] = [13, 8];\n      switch (e.keyCode) {\n        case t:\n          this.getOutofList(e);\n          break;\n        case r:\n          this.backspace(e);\n          break;\n      }\n    }, !1), this._elements.wrapper;\n  }\n  /**\n   * @returns {ListData}\n   * @public\n   */\n  save() {\n    return this.data;\n  }\n  /**\n   * Allow List Tool to be converted to/from other block\n   *\n   * @returns {{export: Function, import: Function}}\n   */\n  static get conversionConfig() {\n    return {\n      /**\n       * To create exported string from list, concatenate items by dot-symbol.\n       *\n       * @param {ListData} data - list data to create a string from thats\n       * @returns {string}\n       */\n      export: (e) => e.items.join(\". \"),\n      /**\n       * To create a list from other block's string, just put it at the first item\n       *\n       * @param {string} string - string to create list tool data from that\n       * @returns {ListData}\n       */\n      import: (e) => ({\n        items: [e],\n        style: \"unordered\"\n      })\n    };\n  }\n  /**\n   * Sanitizer rules\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      style: {},\n      items: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Settings\n   *\n   * @public\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.settings.map((e) => ({\n      ...e,\n      isActive: this._data.style === e.name,\n      closeOnActivate: !0,\n      onActivate: () => this.toggleTune(e.name)\n    }));\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = e.detail.data;\n    this.data = this.pasteHandler(t);\n  }\n  /**\n   * List Tool on paste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * Creates main <ul> or <ol> tag depended on style\n   *\n   * @param {string} style - 'ordered' or 'unordered'\n   * @returns {HTMLOListElement|HTMLUListElement}\n   */\n  makeMainTag(e) {\n    const t = e === \"ordered\" ? this.CSS.wrapperOrdered : this.CSS.wrapperUnordered, r = e === \"ordered\" ? \"ol\" : \"ul\";\n    return this._make(r, [this.CSS.baseBlock, this.CSS.wrapper, t], {\n      contentEditable: !this.readOnly\n    });\n  }\n  /**\n   * Toggles List style\n   *\n   * @param {string} style - 'ordered'|'unordered'\n   */\n  toggleTune(e) {\n    const t = this.makeMainTag(e);\n    for (; this._elements.wrapper.hasChildNodes(); )\n      t.appendChild(this._elements.wrapper.firstChild);\n    this._elements.wrapper.replaceWith(t), this._elements.wrapper = t, this._data.style = e;\n  }\n  /**\n   * Styles\n   *\n   * @private\n   */\n  get CSS() {\n    return {\n      baseBlock: this.api.styles.block,\n      wrapper: \"cdx-list\",\n      wrapperOrdered: \"cdx-list--ordered\",\n      wrapperUnordered: \"cdx-list--unordered\",\n      item: \"cdx-list__item\"\n    };\n  }\n  /**\n   * List data setter\n   *\n   * @param {ListData} listData\n   */\n  set data(e) {\n    e || (e = {}), this._data.style = e.style || this.settings.find((r) => r.default === !0).name, this._data.items = e.items || [];\n    const t = this._elements.wrapper;\n    t && t.parentNode.replaceChild(this.render(), t);\n  }\n  /**\n   * Return List data\n   *\n   * @returns {ListData}\n   */\n  get data() {\n    this._data.items = [];\n    const e = this._elements.wrapper.querySelectorAll(`.${this.CSS.item}`);\n    for (let t = 0; t < e.length; t++)\n      e[t].innerHTML.replace(\"<br>\", \" \").trim() && this._data.items.push(e[t].innerHTML);\n    return this._data;\n  }\n  /**\n   * Helper for making Elements with attributes\n   *\n   * @param  {string} tagName           - new Element tag name\n   * @param  {Array|string} classNames  - list or name of CSS classname(s)\n   * @param  {object} attributes        - any attributes\n   * @returns {Element}\n   */\n  _make(e, t = null, r = {}) {\n    const s = document.createElement(e);\n    Array.isArray(t) ? s.classList.add(...t) : t && s.classList.add(t);\n    for (const i in r)\n      s[i] = r[i];\n    return s;\n  }\n  /**\n   * Returns current List item by the caret position\n   *\n   * @returns {Element}\n   */\n  get currentItem() {\n    let e = window.getSelection().anchorNode;\n    return e.nodeType !== Node.ELEMENT_NODE && (e = e.parentNode), e.closest(`.${this.CSS.item}`);\n  }\n  /**\n   * Get out from List Tool\n   * by Enter on the empty last item\n   *\n   * @param {KeyboardEvent} event\n   */\n  getOutofList(e) {\n    const t = this._elements.wrapper.querySelectorAll(\".\" + this.CSS.item);\n    if (t.length < 2)\n      return;\n    const r = t[t.length - 1], s = this.currentItem;\n    s === r && !r.textContent.trim().length && (s.parentElement.removeChild(s), this.api.blocks.insert(), this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex()), e.preventDefault(), e.stopPropagation());\n  }\n  /**\n   * Handle backspace\n   *\n   * @param {KeyboardEvent} event\n   */\n  backspace(e) {\n    const t = this._elements.wrapper.querySelectorAll(\".\" + this.CSS.item), r = t[0];\n    r && t.length < 2 && !r.innerHTML.replace(\"<br>\", \" \").trim() && e.preventDefault();\n  }\n  /**\n   * Select LI content by CMD+A\n   *\n   * @param {KeyboardEvent} event\n   */\n  selectItem(e) {\n    e.preventDefault();\n    const t = window.getSelection(), r = t.anchorNode.parentNode, s = r.closest(\".\" + this.CSS.item), i = new Range();\n    i.selectNodeContents(s), t.removeAllRanges(), t.addRange(i);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   *\n   * @param {HTMLUListElement|HTMLOListElement|HTMLLIElement} element\n   * @returns {ListData}\n   */\n  pasteHandler(e) {\n    const { tagName: t } = e;\n    let r;\n    switch (t) {\n      case \"OL\":\n        r = \"ordered\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        r = \"unordered\";\n    }\n    const s = {\n      style: r,\n      items: []\n    };\n    if (t === \"LI\")\n      s.items = [e.innerHTML];\n    else {\n      const i = Array.from(e.querySelectorAll(\"LI\"));\n      s.items = i.map((n) => n.innerHTML).filter((n) => !!n.trim());\n    }\n    return s;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/list/dist/list.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/marker/dist/marker.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/@editorjs/marker/dist/marker.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ s)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".cdx-marker{background:rgba(245,235,111,.29);padding:3px 0}\")),document.head.appendChild(e)}}catch(d){console.error(\"vite-plugin-css-injected-by-js\",d)}})();\nconst o = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M11.3536 9.31802L12.7678 7.90381C13.5488 7.12276 14.8151 7.12276 15.5962 7.90381C16.3772 8.68486 16.3772 9.95119 15.5962 10.7322L14.182 12.1464M11.3536 9.31802L7.96729 12.7043C7.40889 13.2627 7.02827 13.9739 6.8734 14.7482L6.69798 15.6253C6.55804 16.325 7.17496 16.942 7.87468 16.802L8.75176 16.6266C9.52612 16.4717 10.2373 16.0911 10.7957 15.5327L14.182 12.1464M11.3536 9.31802L14.182 12.1464\"/><line x1=\"15\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/></svg>';\nclass s {\n  /**\n   * Class name for term-tag\n   *\n   * @type {string}\n   */\n  static get CSS() {\n    return \"cdx-marker\";\n  }\n  /**\n   * @param {{api: object}}  - Editor.js API\n   */\n  constructor({ api: t }) {\n    this.api = t, this.button = null, this.tag = \"MARK\", this.iconClasses = {\n      base: this.api.styles.inlineToolButton,\n      active: this.api.styles.inlineToolButtonActive\n    };\n  }\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  static get isInline() {\n    return !0;\n  }\n  /**\n   * Create button element for Toolbar\n   *\n   * @return {HTMLElement}\n   */\n  render() {\n    return this.button = document.createElement(\"button\"), this.button.type = \"button\", this.button.classList.add(this.iconClasses.base), this.button.innerHTML = this.toolboxIcon, this.button;\n  }\n  /**\n   * Wrap/Unwrap selected fragment\n   *\n   * @param {Range} range - selected fragment\n   */\n  surround(t) {\n    if (!t)\n      return;\n    let e = this.api.selection.findParentTag(this.tag, s.CSS);\n    e ? this.unwrap(e) : this.wrap(t);\n  }\n  /**\n   * Wrap selection with term-tag\n   *\n   * @param {Range} range - selected fragment\n   */\n  wrap(t) {\n    let e = document.createElement(this.tag);\n    e.classList.add(s.CSS), e.appendChild(t.extractContents()), t.insertNode(e), this.api.selection.expandToTag(e);\n  }\n  /**\n   * Unwrap term-tag\n   *\n   * @param {HTMLElement} termWrapper - term wrapper tag\n   */\n  unwrap(t) {\n    this.api.selection.expandToTag(t);\n    let e = window.getSelection(), n = e.getRangeAt(0), i = n.extractContents();\n    t.parentNode.removeChild(t), n.insertNode(i), e.removeAllRanges(), e.addRange(n);\n  }\n  /**\n   * Check and change Term's state for current selection\n   */\n  checkState() {\n    const t = this.api.selection.findParentTag(this.tag, s.CSS);\n    this.button.classList.toggle(this.iconClasses.active, !!t);\n  }\n  /**\n   * Get Tool icon's SVG\n   * @return {string}\n   */\n  get toolboxIcon() {\n    return o;\n  }\n  /**\n   * Sanitizer rule\n   * @return {{mark: {class: string}}}\n   */\n  static get sanitize() {\n    return {\n      mark: {\n        class: s.CSS\n      }\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL21hcmtlci9kaXN0L21hcmtlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFlBQVksYUFBYSxJQUFJLHdCQUF3QixzQ0FBc0MsbURBQW1ELGlDQUFpQyxjQUFjLGtDQUFrQyxTQUFTLG1EQUFtRDtBQUMzUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWU7QUFDN0I7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2VkaXRvcmpzX25leHRqcy8uL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvbWFya2VyL2Rpc3QvbWFya2VyLm1qcz9lYjFiIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3RyeXtpZih0eXBlb2YgZG9jdW1lbnQ8XCJ1XCIpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLmNkeC1tYXJrZXJ7YmFja2dyb3VuZDpyZ2JhKDI0NSwyMzUsMTExLC4yOSk7cGFkZGluZzozcHggMH1cIikpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoZSl9fWNhdGNoKGQpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIixkKX19KSgpO1xuY29uc3QgbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMS4zNTM2IDkuMzE4MDJMMTIuNzY3OCA3LjkwMzgxQzEzLjU0ODggNy4xMjI3NiAxNC44MTUxIDcuMTIyNzYgMTUuNTk2MiA3LjkwMzgxQzE2LjM3NzIgOC42ODQ4NiAxNi4zNzcyIDkuOTUxMTkgMTUuNTk2MiAxMC43MzIyTDE0LjE4MiAxMi4xNDY0TTExLjM1MzYgOS4zMTgwMkw3Ljk2NzI5IDEyLjcwNDNDNy40MDg4OSAxMy4yNjI3IDcuMDI4MjcgMTMuOTczOSA2Ljg3MzQgMTQuNzQ4Mkw2LjY5Nzk4IDE1LjYyNTNDNi41NTgwNCAxNi4zMjUgNy4xNzQ5NiAxNi45NDIgNy44NzQ2OCAxNi44MDJMOC43NTE3NiAxNi42MjY2QzkuNTI2MTIgMTYuNDcxNyAxMC4yMzczIDE2LjA5MTEgMTAuNzk1NyAxNS41MzI3TDE0LjE4MiAxMi4xNDY0TTExLjM1MzYgOS4zMTgwMkwxNC4xODIgMTIuMTQ2NFwiLz48bGluZSB4MT1cIjE1XCIgeDI9XCIxOVwiIHkxPVwiMTdcIiB5Mj1cIjE3XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+JztcbmNsYXNzIHMge1xuICAvKipcbiAgICogQ2xhc3MgbmFtZSBmb3IgdGVybS10YWdcbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiBcImNkeC1tYXJrZXJcIjtcbiAgfVxuICAvKipcbiAgICogQHBhcmFtIHt7YXBpOiBvYmplY3R9fSAgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogdCB9KSB7XG4gICAgdGhpcy5hcGkgPSB0LCB0aGlzLmJ1dHRvbiA9IG51bGwsIHRoaXMudGFnID0gXCJNQVJLXCIsIHRoaXMuaWNvbkNsYXNzZXMgPSB7XG4gICAgICBiYXNlOiB0aGlzLmFwaS5zdHlsZXMuaW5saW5lVG9vbEJ1dHRvbixcbiAgICAgIGFjdGl2ZTogdGhpcy5hcGkuc3R5bGVzLmlubGluZVRvb2xCdXR0b25BY3RpdmVcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTcGVjaWZpZXMgVG9vbCBhcyBJbmxpbmUgVG9vbGJhciBUb29sXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzSW5saW5lKCkge1xuICAgIHJldHVybiAhMDtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGJ1dHRvbiBlbGVtZW50IGZvciBUb29sYmFyXG4gICAqXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHRoaXMuYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiLCB0aGlzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuaWNvbkNsYXNzZXMuYmFzZSksIHRoaXMuYnV0dG9uLmlubmVySFRNTCA9IHRoaXMudG9vbGJveEljb24sIHRoaXMuYnV0dG9uO1xuICB9XG4gIC8qKlxuICAgKiBXcmFwL1Vud3JhcCBzZWxlY3RlZCBmcmFnbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge1JhbmdlfSByYW5nZSAtIHNlbGVjdGVkIGZyYWdtZW50XG4gICAqL1xuICBzdXJyb3VuZCh0KSB7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBlID0gdGhpcy5hcGkuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcodGhpcy50YWcsIHMuQ1NTKTtcbiAgICBlID8gdGhpcy51bndyYXAoZSkgOiB0aGlzLndyYXAodCk7XG4gIH1cbiAgLyoqXG4gICAqIFdyYXAgc2VsZWN0aW9uIHdpdGggdGVybS10YWdcbiAgICpcbiAgICogQHBhcmFtIHtSYW5nZX0gcmFuZ2UgLSBzZWxlY3RlZCBmcmFnbWVudFxuICAgKi9cbiAgd3JhcCh0KSB7XG4gICAgbGV0IGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnKTtcbiAgICBlLmNsYXNzTGlzdC5hZGQocy5DU1MpLCBlLmFwcGVuZENoaWxkKHQuZXh0cmFjdENvbnRlbnRzKCkpLCB0Lmluc2VydE5vZGUoZSksIHRoaXMuYXBpLnNlbGVjdGlvbi5leHBhbmRUb1RhZyhlKTtcbiAgfVxuICAvKipcbiAgICogVW53cmFwIHRlcm0tdGFnXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRlcm1XcmFwcGVyIC0gdGVybSB3cmFwcGVyIHRhZ1xuICAgKi9cbiAgdW53cmFwKHQpIHtcbiAgICB0aGlzLmFwaS5zZWxlY3Rpb24uZXhwYW5kVG9UYWcodCk7XG4gICAgbGV0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIG4gPSBlLmdldFJhbmdlQXQoMCksIGkgPSBuLmV4dHJhY3RDb250ZW50cygpO1xuICAgIHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSwgbi5pbnNlcnROb2RlKGkpLCBlLnJlbW92ZUFsbFJhbmdlcygpLCBlLmFkZFJhbmdlKG4pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBhbmQgY2hhbmdlIFRlcm0ncyBzdGF0ZSBmb3IgY3VycmVudCBzZWxlY3Rpb25cbiAgICovXG4gIGNoZWNrU3RhdGUoKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuYXBpLnNlbGVjdGlvbi5maW5kUGFyZW50VGFnKHRoaXMudGFnLCBzLkNTUyk7XG4gICAgdGhpcy5idXR0b24uY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLmljb25DbGFzc2VzLmFjdGl2ZSwgISF0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IFRvb2wgaWNvbidzIFNWR1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgdG9vbGJveEljb24oKSB7XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBydWxlXG4gICAqIEByZXR1cm4ge3ttYXJrOiB7Y2xhc3M6IHN0cmluZ319fVxuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWFyazoge1xuICAgICAgICBjbGFzczogcy5DU1NcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5leHBvcnQge1xuICBzIGFzIGRlZmF1bHRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/marker/dist/marker.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/nested-list/dist/nested-list.mjs":
/*!*****************************************************************!*\
  !*** ./node_modules/@editorjs/nested-list/dist/nested-list.mjs ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ f)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode('.cdx-nested-list{margin:0;padding:0;outline:none;counter-reset:item;list-style:none}.cdx-nested-list__item{line-height:1.6em;display:flex;margin:2px 0}.cdx-nested-list__item [contenteditable]{outline:none}.cdx-nested-list__item-body{flex-grow:2}.cdx-nested-list__item-content,.cdx-nested-list__item-children{flex-basis:100%}.cdx-nested-list__item-content{word-break:break-word;white-space:pre-wrap}.cdx-nested-list__item:before{counter-increment:item;margin-right:5px;white-space:nowrap}.cdx-nested-list--ordered>.cdx-nested-list__item:before{content:counters(item,\".\") \". \"}.cdx-nested-list--unordered>.cdx-nested-list__item:before{content:\"•\"}.cdx-nested-list__settings{display:flex}.cdx-nested-list__settings .cdx-settings-button{width:50%}')),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nfunction c(d) {\n  return d.nodeType === Node.ELEMENT_NODE;\n}\nfunction p(d, e = null, t) {\n  const r = document.createElement(d);\n  Array.isArray(e) ? r.classList.add(...e) : e && r.classList.add(e);\n  for (const n in t)\n    r[n] = t[n];\n  return r;\n}\nfunction g(d) {\n  const e = p(\"div\");\n  return e.appendChild(d), e.innerHTML;\n}\nfunction C(d) {\n  let e;\n  return d.nodeType !== Node.ELEMENT_NODE ? e = d.textContent : (e = d.innerHTML, e = e.replaceAll(\"<br>\", \"\")), (e == null ? void 0 : e.trim().length) === 0;\n}\nclass u {\n  /**\n   * Store internal properties\n   */\n  constructor() {\n    this.savedFakeCaret = void 0;\n  }\n  /**\n   * Saves caret position using hidden <span>\n   *\n   * @returns {void}\n   */\n  save() {\n    const e = u.range, t = p(\"span\");\n    t.hidden = !0, e && (e.insertNode(t), this.savedFakeCaret = t);\n  }\n  /**\n   * Restores the caret position saved by the save() method\n   *\n   * @returns {void}\n   */\n  restore() {\n    if (!this.savedFakeCaret)\n      return;\n    const e = window.getSelection();\n    if (!e)\n      return;\n    const t = new Range();\n    t.setStartAfter(this.savedFakeCaret), t.setEndAfter(this.savedFakeCaret), e.removeAllRanges(), e.addRange(t), setTimeout(() => {\n      var r;\n      (r = this.savedFakeCaret) == null || r.remove();\n    }, 150);\n  }\n  /**\n   * Returns the first range\n   *\n   * @returns {Range|null}\n   */\n  static get range() {\n    const e = window.getSelection();\n    return e && e.rangeCount ? e.getRangeAt(0) : null;\n  }\n  /**\n   * Extract content fragment from Caret position to the end of contenteditable element\n   *\n   * @returns {DocumentFragment|void}\n   */\n  static extractFragmentFromCaretPositionTillTheEnd() {\n    const e = window.getSelection();\n    if (!e || !e.rangeCount)\n      return;\n    const t = e.getRangeAt(0);\n    let r = t.startContainer;\n    if (r.nodeType !== Node.ELEMENT_NODE) {\n      if (!r.parentNode)\n        return;\n      r = r.parentNode;\n    }\n    if (!c(r))\n      return;\n    const n = r.closest(\"[contenteditable]\");\n    if (!n)\n      return;\n    t.deleteContents();\n    const s = t.cloneRange();\n    return s.selectNodeContents(n), s.setStart(t.endContainer, t.endOffset), s.extractContents();\n  }\n  /**\n   * Set focus to contenteditable or native input element\n   *\n   * @param {HTMLElement} element - element where to set focus\n   * @param {boolean} atStart - where to set focus: at the start or at the end\n   * @returns {void}\n   */\n  static focus(e, t = !0) {\n    const r = document.createRange(), n = window.getSelection();\n    n && (r.selectNodeContents(e), r.collapse(t), n.removeAllRanges(), n.addRange(r));\n  }\n  /**\n   * Check if the caret placed at the start of the contenteditable element\n   *\n   * @returns {boolean}\n   */\n  static isAtStart() {\n    const e = window.getSelection();\n    if (!e || e.focusOffset > 0)\n      return !1;\n    const t = e.focusNode;\n    return !t || !c(t) ? !1 : u.getHigherLevelSiblings(t, \"left\").every((s) => C(s));\n  }\n  /**\n   * Get all first-level (first child of [contenteditabel]) siblings from passed node\n   * Then you can check it for emptiness\n   *\n   * @example\n   * <div contenteditable>\n   * <p></p>                            |\n   * <p></p>                            | left first-level siblings\n   * <p></p>                            |\n   * <blockquote><a><b>adaddad</b><a><blockquote>       <-- passed node for example <b>\n   * <p></p>                            |\n   * <p></p>                            | right first-level siblings\n   * <p></p>                            |\n   * </div>\n   * @param {HTMLElement} from - element from which siblings should be searched\n   * @param {'left' | 'right'} direction - direction of search\n   * @returns {HTMLElement[]}\n   */\n  static getHigherLevelSiblings(e, t = \"left\") {\n    let r = e;\n    const n = [];\n    for (; r.parentNode && r.parentNode.contentEditable !== \"true\"; )\n      r = r.parentNode;\n    const s = t === \"left\" ? \"previousSibling\" : \"nextSibling\";\n    for (; r[s]; )\n      r = r[s], n.push(r);\n    return n;\n  }\n}\nconst w = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"9\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"9\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 17H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 12H4.99002\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M5.00001 7H4.99002\"/></svg>', S = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><line x1=\"12\" x2=\"19\" y1=\"7\" y2=\"7\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"12\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><line x1=\"12\" x2=\"19\" y1=\"17\" y2=\"17\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5\"/></svg>';\nclass f {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to use native Enter behaviour\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {ToolboxConfig}\n   */\n  static get toolbox() {\n    return {\n      icon: S,\n      title: \"List\"\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - tool constructor options\n   * @param {ListData} params.data - previously saved data\n   * @param {object} params.config - user config for Tool\n   * @param {object} params.api - Editor.js API\n   * @param {boolean} params.readOnly - read-only mode flag\n   */\n  constructor({ data: e, config: t, api: r, readOnly: n }) {\n    var i;\n    this.nodes = {\n      wrapper: null\n    }, this.api = r, this.readOnly = n, this.config = t, this.defaultListStyle = ((i = this.config) == null ? void 0 : i.defaultStyle) === \"ordered\" ? \"ordered\" : \"unordered\";\n    const s = {\n      style: this.defaultListStyle,\n      items: []\n    };\n    this.data = e && Object.keys(e).length ? e : s, this.caret = new u();\n  }\n  /**\n   * Returns list tag with items\n   *\n   * @returns {Element}\n   * @public\n   */\n  render() {\n    return this.nodes.wrapper = this.makeListWrapper(this.data.style, [\n      this.CSS.baseBlock\n    ]), this.data.items.length ? this.appendItems(this.data.items, this.nodes.wrapper) : this.appendItems(\n      [\n        {\n          content: \"\",\n          items: []\n        }\n      ],\n      this.nodes.wrapper\n    ), this.readOnly || this.nodes.wrapper.addEventListener(\n      \"keydown\",\n      (e) => {\n        switch (e.key) {\n          case \"Enter\":\n            this.enterPressed(e);\n            break;\n          case \"Backspace\":\n            this.backspace(e);\n            break;\n          case \"Tab\":\n            e.shiftKey ? this.shiftTab(e) : this.addTab(e);\n            break;\n        }\n      },\n      !1\n    ), this.nodes.wrapper;\n  }\n  /**\n   * Creates Block Tune allowing to change the list style\n   *\n   * @public\n   * @returns {Array}\n   */\n  renderSettings() {\n    return [\n      {\n        name: \"unordered\",\n        label: this.api.i18n.t(\"Unordered\"),\n        icon: w\n      },\n      {\n        name: \"ordered\",\n        label: this.api.i18n.t(\"Ordered\"),\n        icon: S\n      }\n    ].map((t) => ({\n      name: t.name,\n      icon: t.icon,\n      label: t.label,\n      isActive: this.data.style === t.name,\n      closeOnActivate: !0,\n      onActivate: () => {\n        this.listStyle = t.name;\n      }\n    }));\n  }\n  /**\n   * On paste sanitzation config. Allow only tags that are allowed in the Tool.\n   *\n   * @returns {PasteConfig} - paste config.\n   */\n  static get pasteConfig() {\n    return {\n      tags: [\"OL\", \"UL\", \"LI\"]\n    };\n  }\n  /**\n   * On paste callback that is fired from Editor.\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(e) {\n    const t = e.detail.data;\n    this.data = this.pasteHandler(t);\n    const r = this.nodes.wrapper;\n    r && r.parentNode && r.parentNode.replaceChild(this.render(), r);\n  }\n  /**\n   * Handle UL, OL and LI tags paste and returns List data\n   *\n   * @param {HTMLUListElement|HTMLOListElement|HTMLLIElement} element\n   * @returns {ListData}\n   */\n  pasteHandler(e) {\n    const { tagName: t } = e;\n    let r = \"unordered\", n;\n    switch (t) {\n      case \"OL\":\n        r = \"ordered\", n = \"ol\";\n        break;\n      case \"UL\":\n      case \"LI\":\n        r = \"unordered\", n = \"ul\";\n    }\n    const s = {\n      style: r,\n      items: []\n    }, i = (l) => Array.from(l.querySelectorAll(\":scope > li\")).map((o) => {\n      var m;\n      const a = o.querySelector(`:scope > ${n}`), y = a ? i(a) : [];\n      return {\n        content: ((m = o == null ? void 0 : o.firstChild) == null ? void 0 : m.textContent) || \"\",\n        items: y\n      };\n    });\n    return s.items = i(e), s;\n  }\n  /**\n   * Renders children list\n   *\n   * @param {ListItem[]} items - items data to append\n   * @param {Element} parentItem - where to append\n   * @returns {void}\n   */\n  appendItems(e, t) {\n    e.forEach((r) => {\n      const n = this.createItem(r.content, r.items);\n      t.appendChild(n);\n    });\n  }\n  /**\n   * Renders the single item\n   *\n   * @param {string} content - item content to render\n   * @param {ListItem[]} [items] - children\n   * @returns {Element}\n   */\n  createItem(e, t = []) {\n    const r = p(\"li\", this.CSS.item), n = p(\"div\", this.CSS.itemBody), s = p(\"div\", this.CSS.itemContent, {\n      innerHTML: e,\n      contentEditable: (!this.readOnly).toString()\n    });\n    return n.appendChild(s), r.appendChild(n), t && t.length > 0 && this.addChildrenList(r, t), r;\n  }\n  /**\n   * Extracts tool's data from the DOM\n   *\n   * @returns {ListData}\n   */\n  save() {\n    const e = (t) => Array.from(\n      t.querySelectorAll(`:scope > .${this.CSS.item}`)\n    ).map((n) => {\n      const s = n.querySelector(`.${this.CSS.itemChildren}`), i = this.getItemContent(n), l = s ? e(s) : [];\n      return {\n        content: i,\n        items: l\n      };\n    });\n    return {\n      style: this.data.style,\n      items: this.nodes.wrapper ? e(this.nodes.wrapper) : []\n    };\n  }\n  /**\n   * Append children list to passed item\n   *\n   * @param {Element} parentItem - item that should contain passed sub-items\n   * @param {ListItem[]} items - sub items to append\n   */\n  addChildrenList(e, t) {\n    const r = e.querySelector(`.${this.CSS.itemBody}`), n = this.makeListWrapper(void 0, [\n      this.CSS.itemChildren\n    ]);\n    this.appendItems(t, n), r && r.appendChild(n);\n  }\n  /**\n   * Creates main <ul> or <ol> tag depended on style\n   *\n   * @param {string} [style] - 'ordered' or 'unordered'\n   * @param {string[]} [classes] - additional classes to append\n   * @returns {HTMLOListElement|HTMLUListElement}\n   */\n  makeListWrapper(e = this.listStyle, t = []) {\n    const r = e === \"ordered\" ? \"ol\" : \"ul\", n = e === \"ordered\" ? this.CSS.wrapperOrdered : this.CSS.wrapperUnordered;\n    return t.push(n), p(r, [this.CSS.wrapper, ...t]);\n  }\n  /**\n   * Styles\n   *\n   * @returns {NestedListCssClasses} - CSS classes names by keys\n   * @private\n   */\n  get CSS() {\n    return {\n      baseBlock: this.api.styles.block,\n      wrapper: \"cdx-nested-list\",\n      wrapperOrdered: \"cdx-nested-list--ordered\",\n      wrapperUnordered: \"cdx-nested-list--unordered\",\n      item: \"cdx-nested-list__item\",\n      itemBody: \"cdx-nested-list__item-body\",\n      itemContent: \"cdx-nested-list__item-content\",\n      itemChildren: \"cdx-nested-list__item-children\",\n      settingsWrapper: \"cdx-nested-list__settings\",\n      settingsButton: this.api.styles.settingsButton,\n      settingsButtonActive: this.api.styles.settingsButtonActive\n    };\n  }\n  /**\n   * Get list style name\n   *\n   * @returns {string}\n   */\n  get listStyle() {\n    return this.data.style || this.defaultListStyle;\n  }\n  /**\n   * Set list style\n   *\n   * @param {ListDataStyle} style - new style to set\n   */\n  set listStyle(e) {\n    if (!this.nodes || !this.nodes.wrapper)\n      return;\n    const t = Array.from(\n      this.nodes.wrapper.querySelectorAll(`.${this.CSS.wrapper}`)\n    );\n    t.push(this.nodes.wrapper), t.forEach((r) => {\n      r.classList.toggle(this.CSS.wrapperUnordered, e === \"unordered\"), r.classList.toggle(this.CSS.wrapperOrdered, e === \"ordered\");\n    }), this.data.style = e;\n  }\n  /**\n   * Returns current List item by the caret position\n   *\n   * @returns {Element}\n   */\n  get currentItem() {\n    const e = window.getSelection();\n    if (!e)\n      return null;\n    let t = e.anchorNode;\n    return !t || (c(t) || (t = t.parentNode), !t) || !c(t) ? null : t.closest(`.${this.CSS.item}`);\n  }\n  /**\n   * Handles Enter keypress\n   *\n   * @param {KeyboardEvent} event - keydown\n   * @returns {void}\n   */\n  enterPressed(e) {\n    const t = this.currentItem;\n    if (e.stopPropagation(), e.preventDefault(), e.isComposing)\n      return;\n    const r = t ? this.getItemContent(t).trim().length === 0 : !0, n = (t == null ? void 0 : t.parentNode) === this.nodes.wrapper, s = (t == null ? void 0 : t.nextElementSibling) === null;\n    if (n && s && r) {\n      this.getOutOfList();\n      return;\n    } else if (s && r) {\n      this.unshiftItem();\n      return;\n    }\n    const i = u.extractFragmentFromCaretPositionTillTheEnd();\n    if (!i)\n      return;\n    const l = g(i), h = t == null ? void 0 : t.querySelector(\n      `.${this.CSS.itemChildren}`\n    ), o = this.createItem(l, void 0);\n    h && Array.from(h.querySelectorAll(`.${this.CSS.item}`)).length > 0 ? h.prepend(o) : t == null || t.after(o), this.focusItem(o);\n  }\n  /**\n   * Decrease indentation of the current item\n   *\n   * @returns {void}\n   */\n  unshiftItem() {\n    const e = this.currentItem;\n    if (!e || !e.parentNode || !c(e.parentNode))\n      return;\n    const t = e.parentNode.closest(`.${this.CSS.item}`);\n    if (!t)\n      return;\n    this.caret.save(), t.after(e), this.caret.restore();\n    const r = t.querySelector(\n      `.${this.CSS.itemChildren}`\n    );\n    if (!r)\n      return;\n    r.children.length === 0 && r.remove();\n  }\n  /**\n   * Return the item content\n   *\n   * @param {Element} item - item wrapper (<li>)\n   * @returns {string}\n   */\n  getItemContent(e) {\n    const t = e.querySelector(`.${this.CSS.itemContent}`);\n    return !t || C(t) ? \"\" : t.innerHTML;\n  }\n  /**\n   * Sets focus to the item's content\n   *\n   * @param {Element} item - item (<li>) to select\n   * @param {boolean} atStart - where to set focus: at the start or at the end\n   * @returns {void}\n   */\n  focusItem(e, t = !0) {\n    const r = e.querySelector(\n      `.${this.CSS.itemContent}`\n    );\n    r && u.focus(r, t);\n  }\n  /**\n   * Get out from List Tool by Enter on the empty last item\n   *\n   * @returns {void}\n   */\n  getOutOfList() {\n    var e;\n    (e = this.currentItem) == null || e.remove(), this.api.blocks.insert(), this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex());\n  }\n  /**\n   * Handle backspace\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  backspace(e) {\n    if (!u.isAtStart())\n      return;\n    e.preventDefault();\n    const t = this.currentItem;\n    if (!t)\n      return;\n    const r = t.previousSibling;\n    if (!t.parentNode || !c(t.parentNode))\n      return;\n    const n = t.parentNode.closest(`.${this.CSS.item}`);\n    if (!r && !n || r && !c(r))\n      return;\n    e.stopPropagation();\n    let s;\n    if (r) {\n      const a = r.querySelectorAll(\n        `.${this.CSS.item}`\n      );\n      s = Array.from(a).pop() || r;\n    } else\n      s = n;\n    const i = u.extractFragmentFromCaretPositionTillTheEnd();\n    if (!i)\n      return;\n    const l = g(i);\n    if (!s)\n      return;\n    const h = s.querySelector(\n      `.${this.CSS.itemContent}`\n    );\n    if (!h)\n      return;\n    u.focus(h, !1), this.caret.save(), h.insertAdjacentHTML(\"beforeend\", l);\n    let o = t.querySelectorAll(\n      `.${this.CSS.itemChildren} > .${this.CSS.item}`\n    );\n    o = Array.from(o), o = o.filter((a) => !a.parentNode || !c(a.parentNode) ? !1 : a.parentNode.closest(`.${this.CSS.item}`) === t), o.reverse().forEach((a) => {\n      r ? s.after(a) : t.after(a);\n    }), t.remove(), this.caret.restore();\n  }\n  /**\n   * Add indentation to current item\n   *\n   * @param {KeyboardEvent} event - keydown\n   */\n  addTab(e) {\n    e.stopPropagation(), e.preventDefault();\n    const t = this.currentItem;\n    if (!t)\n      return;\n    const r = t.previousSibling;\n    if (!r || !c(r) || !r)\n      return;\n    const s = r.querySelector(\n      `.${this.CSS.itemChildren}`\n    );\n    if (this.caret.save(), s)\n      s.appendChild(t);\n    else {\n      const i = this.makeListWrapper(void 0, [\n        this.CSS.itemChildren\n      ]), l = r.querySelector(`.${this.CSS.itemBody}`);\n      i.appendChild(t), l == null || l.appendChild(i);\n    }\n    this.caret.restore();\n  }\n  /**\n   * Reduce indentation for current item\n   *\n   * @param {KeyboardEvent} event - keydown\n   * @returns {void}\n   */\n  shiftTab(e) {\n    e.stopPropagation(), e.preventDefault(), this.unshiftItem();\n  }\n  /**\n   * Convert from list to text for conversionConfig\n   *\n   * @param {ListData} data\n   * @returns {string}\n   */\n  static joinRecursive(e) {\n    return e.items.map((t) => `${t.content} ${f.joinRecursive(t)}`).join(\"\");\n  }\n  /**\n   * Convert from text to list with import and export list to text\n   */\n  static get conversionConfig() {\n    return {\n      export: (e) => f.joinRecursive(e),\n      import: (e) => ({\n        items: [\n          {\n            content: e,\n            items: []\n          }\n        ],\n        style: \"unordered\"\n      })\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/nested-list/dist/nested-list.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/quote/dist/quote.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/quote/dist/quote.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ o)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var t=document.createElement(\"style\");t.appendChild(document.createTextNode(\".cdx-quote-icon svg{transform:rotate(180deg)}.cdx-quote{margin:0}.cdx-quote__text{min-height:158px;margin-bottom:10px}.cdx-quote [contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-quote [contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-quote [contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-quote-settings{display:flex}.cdx-quote-settings .cdx-settings-button{width:50%}\")),document.head.appendChild(t)}}catch(e){console.error(\"vite-plugin-css-injected-by-js\",e)}})();\nconst c = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 7L6 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M18 17H6\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 12L8 12\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 7L5 7\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M17 17H5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M13 12L5 12\"/></svg>', p = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10 10.8182L9 10.8182C8.80222 10.8182 8.60888 10.7649 8.44443 10.665C8.27998 10.5651 8.15181 10.4231 8.07612 10.257C8.00043 10.0909 7.98063 9.90808 8.01922 9.73174C8.0578 9.55539 8.15304 9.39341 8.29289 9.26627C8.43275 9.13913 8.61093 9.05255 8.80491 9.01747C8.99889 8.98239 9.19996 9.00039 9.38268 9.0692C9.56541 9.13801 9.72159 9.25453 9.83147 9.40403C9.94135 9.55353 10 9.72929 10 9.90909L10 12.1818C10 12.664 9.78929 13.1265 9.41421 13.4675C9.03914 13.8084 8.53043 14 8 14\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 10.8182L15 10.8182C14.8022 10.8182 14.6089 10.7649 14.4444 10.665C14.28 10.5651 14.1518 10.4231 14.0761 10.257C14.0004 10.0909 13.9806 9.90808 14.0192 9.73174C14.0578 9.55539 14.153 9.39341 14.2929 9.26627C14.4327 9.13913 14.6109 9.05255 14.8049 9.01747C14.9989 8.98239 15.2 9.00039 15.3827 9.0692C15.5654 9.13801 15.7216 9.25453 15.8315 9.40403C15.9414 9.55353 16 9.72929 16 9.90909L16 12.1818C16 12.664 15.7893 13.1265 15.4142 13.4675C15.0391 13.8084 14.5304 14 14 14\"/></svg>';\nfunction a(i, t = null, e = {}) {\n  const n = document.createElement(i);\n  if (Array.isArray(t)) {\n    const r = t.filter((s) => s !== void 0);\n    n.classList.add(...r);\n  } else\n    t !== null && n.classList.add(t);\n  for (const r in e)\n    Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);\n  return n;\n}\nvar l = /* @__PURE__ */ ((i) => (i.Left = \"left\", i.Center = \"center\", i))(l || {});\nclass o {\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {object} params - constructor params\n   * @param {QuoteData} params.data - previously saved data\n   * @param {QuoteConfig} params.config - user config for Tool\n   * @param {API} params.api - editor.js api\n   * @param {boolean} params.readOnly - read only mode flag\n   */\n  constructor({ data: t, config: e, api: n, readOnly: r }) {\n    const { DEFAULT_ALIGNMENT: s } = o;\n    this.api = n, this.readOnly = r, this._quotePlaceholder = e.quotePlaceholder || o.DEFAULT_QUOTE_PLACEHOLDER, this._captionPlaceholder = e.captionPlaceholder || o.DEFAULT_CAPTION_PLACEHOLDER, this._data = {\n      text: t.text || \"\",\n      caption: t.caption || \"\",\n      alignment: Object.values(l).includes(t.alignment) && t.alignment || e.defaultAlignment || s\n    }, this._CSS = {\n      baseClass: this.api.styles.block,\n      wrapper: \"cdx-quote\",\n      text: \"cdx-quote__text\",\n      input: this.api.styles.input,\n      caption: \"cdx-quote__caption\"\n    };\n  }\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: p,\n      title: \"Quote\"\n    };\n  }\n  /**\n   * Empty Quote is not empty Block\n   *\n   * @public\n   * @returns {boolean}\n   */\n  static get contentless() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the Quote\n   *\n   * @public\n   * @returns {boolean}\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Default placeholder for quote text\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_QUOTE_PLACEHOLDER() {\n    return \"Enter a quote\";\n  }\n  /**\n   * Default placeholder for quote caption\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_CAPTION_PLACEHOLDER() {\n    return \"Enter a caption\";\n  }\n  /**\n   * Default quote alignment\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_ALIGNMENT() {\n    return \"left\";\n  }\n  /**\n   * Allow Quote to be converted to/from other blocks\n   */\n  static get conversionConfig() {\n    return {\n      /**\n       * To create Quote data from string, simple fill 'text' property\n       */\n      import: \"text\",\n      /**\n       * To create string from Quote data, concatenate text and caption\n       *\n       * @param {QuoteData} quoteData\n       * @returns {string}\n       */\n      export: function(t) {\n        return t.caption ? `${t.text} — ${t.caption}` : t.text;\n      }\n    };\n  }\n  /**\n   * Tool`s styles\n   *\n   * @returns {QuoteCSS}\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      wrapper: \"cdx-quote\",\n      text: \"cdx-quote__text\",\n      input: this.api.styles.input,\n      caption: \"cdx-quote__caption\"\n    };\n  }\n  /**\n   * Tool`s settings properties\n   *\n   * @returns {*[]}\n   */\n  get settings() {\n    return [\n      {\n        name: \"left\",\n        icon: d\n      },\n      {\n        name: \"center\",\n        icon: c\n      }\n    ];\n  }\n  /**\n   * Create Quote Tool container with inputs\n   *\n   * @returns {Element}\n   */\n  render() {\n    const t = a(\"blockquote\", [\n      this._CSS.baseClass,\n      this._CSS.wrapper\n    ]), e = a(\"div\", [this._CSS.input, this._CSS.text], {\n      contentEditable: !this.readOnly,\n      innerHTML: this._data.text\n    }), n = a(\"div\", [this._CSS.input, this._CSS.caption], {\n      contentEditable: !this.readOnly,\n      innerHTML: this._data.caption\n    });\n    return e.dataset.placeholder = this._quotePlaceholder, n.dataset.placeholder = this._captionPlaceholder, t.appendChild(e), t.appendChild(n), t;\n  }\n  /**\n   * Extract Quote data from Quote Tool element\n   *\n   * @param {HTMLDivElement} quoteElement - element to save\n   * @returns {QuoteData}\n   */\n  save(t) {\n    const e = t.querySelector(`.${this._CSS.text}`), n = t.querySelector(`.${this._CSS.caption}`);\n    return Object.assign(this._data, {\n      text: (e == null ? void 0 : e.innerHTML) ?? \"\",\n      caption: (n == null ? void 0 : n.innerHTML) ?? \"\"\n    });\n  }\n  /**\n   * Sanitizer rules\n   */\n  static get sanitize() {\n    return {\n      text: {\n        br: !0\n      },\n      caption: {\n        br: !0\n      },\n      alignment: {}\n    };\n  }\n  /**\n   * Create wrapper for Tool`s settings buttons:\n   * 1. Left alignment\n   * 2. Center alignment\n   *\n   * @returns {MenuConfig}\n   *\n   */\n  renderSettings() {\n    const t = (e) => e && e[0].toUpperCase() + e.slice(1);\n    return this.settings.map((e) => ({\n      icon: e.icon,\n      label: this.api.i18n.t(`Align ${t(e.name)}`),\n      onActivate: () => this._toggleTune(e.name),\n      isActive: this._data.alignment === e.name,\n      closeOnActivate: !0\n    }));\n  }\n  /**\n   * Toggle quote`s alignment\n   *\n   * @param {string} tune - alignment\n   * @private\n   */\n  _toggleTune(t) {\n    this._data.alignment = t;\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/quote/dist/quote.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/raw/dist/raw.mjs":
/*!*************************************************!*\
  !*** ./node_modules/@editorjs/raw/dist/raw.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-rawtool__textarea{min-height:200px;resize:vertical;border-radius:8px;border:0;background-color:#1e2128;font-family:Menlo,Monaco,Consolas,Courier New,monospace;font-size:12px;line-height:1.6;letter-spacing:-.2px;color:#a1a7b6;overscroll-behavior:contain}\")),document.head.appendChild(e)}}catch(o){console.error(\"vite-plugin-css-injected-by-js\",o)}})();\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394\"/></svg>';\n/**\n * Raw HTML Tool for CodeX Editor\n *\n * @author CodeX (team@codex.so)\n * @copyright CodeX 2018\n * @license The MIT License (MIT)\n */\nclass r {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Should this tool be displayed at the Editor's Toolbox\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get displayInToolbox() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the RawTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: a,\n      title: \"Raw HTML\"\n    };\n  }\n  /**\n   * @typedef {object} RawData — plugin saved data\n   * @param {string} html - previously saved HTML code\n   * @property\n   */\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {RawData} data — previously saved HTML data\n   * @param {object} config - user config for Tool\n   * @param {object} api - CodeX Editor API\n   * @param {boolean} readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: e, api: s, readOnly: i }) {\n    this.api = s, this.readOnly = i, this.placeholder = e.placeholder || r.DEFAULT_PLACEHOLDER, this.CSS = {\n      baseClass: this.api.styles.block,\n      input: this.api.styles.input,\n      wrapper: \"ce-rawtool\",\n      textarea: \"ce-rawtool__textarea\"\n    }, this.data = {\n      html: t.html || \"\"\n    }, this.textarea = null, this.resizeDebounce = null;\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement} this.element - RawTool's wrapper\n   * @public\n   */\n  render() {\n    const t = document.createElement(\"div\"), e = 100;\n    return this.textarea = document.createElement(\"textarea\"), t.classList.add(this.CSS.baseClass, this.CSS.wrapper), this.textarea.classList.add(this.CSS.textarea, this.CSS.input), this.textarea.textContent = this.data.html, this.textarea.placeholder = this.placeholder, this.readOnly ? this.textarea.disabled = !0 : this.textarea.addEventListener(\"input\", () => {\n      this.onInput();\n    }), t.appendChild(this.textarea), setTimeout(() => {\n      this.resize();\n    }, e), t;\n  }\n  /**\n   * Extract Tool's data from the view\n   *\n   * @param {HTMLDivElement} rawToolsWrapper - RawTool's wrapper, containing textarea with raw HTML code\n   * @returns {RawData} - raw HTML code\n   * @public\n   */\n  save(t) {\n    return {\n      html: t.querySelector(\"textarea\").value\n    };\n  }\n  /**\n   * Default placeholder for RawTool's textarea\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_PLACEHOLDER() {\n    return \"Enter HTML code\";\n  }\n  /**\n   * Automatic sanitize config\n   */\n  static get sanitize() {\n    return {\n      html: !0\n      // Allow HTML tags\n    };\n  }\n  /**\n   * Textarea change event\n   *\n   * @returns {void}\n   */\n  onInput() {\n    this.resizeDebounce && clearTimeout(this.resizeDebounce), this.resizeDebounce = setTimeout(() => {\n      this.resize();\n    }, 200);\n  }\n  /**\n   * Resize textarea to fit whole height\n   *\n   * @returns {void}\n   */\n  resize() {\n    this.textarea.style.height = \"auto\", this.textarea.style.height = this.textarea.scrollHeight + \"px\";\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/raw/dist/raw.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/simple-image/dist/simple-image.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/@editorjs/simple-image/dist/simple-image.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ h)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".cdx-simple-image .cdx-loader{min-height:200px}.cdx-simple-image .cdx-input{margin-top:10px}.cdx-simple-image img{max-width:100%;vertical-align:bottom}.cdx-simple-image__caption[contentEditable=true][data-placeholder]:empty:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-simple-image__caption[contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-simple-image__caption[contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-simple-image__picture--with-background{background:#eff2f5;padding:10px}.cdx-simple-image__picture--with-background img{display:block;max-width:60%;margin:0 auto}.cdx-simple-image__picture--with-border{border:1px solid #e8e8eb;padding:1px}.cdx-simple-image__picture--stretched img{max-width:none;width:100%}\")),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst s = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M11 19V19C9.13623 19 8.20435 19 7.46927 18.6955C6.48915 18.2895 5.71046 17.5108 5.30448 16.5307C5 15.7956 5 14.8638 5 13V12C5 9.19108 5 7.78661 5.67412 6.77772C5.96596 6.34096 6.34096 5.96596 6.77772 5.67412C7.78661 5 9.19108 5 12 5H13.5C14.8956 5 15.5933 5 16.1611 5.17224C17.4395 5.56004 18.44 6.56046 18.8278 7.83886C19 8.40666 19 9.10444 19 10.5V10.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6.5 17.5L17.5 6.5\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 10.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.9919 19H11.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13L13 5\"/></svg>', a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18.9919 9.5H19.0015\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.5 5H14.5096\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M14.625 5H15C17.2091 5 19 6.79086 19 9V9.375\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M9.375 5L9 5C6.79086 5 5 6.79086 5 9V9.375\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 5H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 9.5H5.00957\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M9.375 19H9C6.79086 19 5 17.2091 5 15V14.625\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.3725 19H9.38207\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 14.55H5.00957\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M16 13V16M16 19V16M19 16H16M16 16H13\"/></svg>', d = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M17 9L20 12L17 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14 12H20\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 9L4 12L7 15\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 12H10\"/></svg>';\nclass h {\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {{data: SimpleImageData, config: object, api: object}}\n   *   data — previously saved data\n   *   config - user config for Tool\n   *   api - Editor.js API\n   *   readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: e, api: r, readOnly: o }) {\n    this.api = r, this.readOnly = o, this.blockIndex = this.api.blocks.getCurrentBlockIndex() + 1, this.CSS = {\n      baseClass: this.api.styles.block,\n      loading: this.api.styles.loader,\n      input: this.api.styles.input,\n      /**\n       * Tool's classes\n       */\n      wrapper: \"cdx-simple-image\",\n      imageHolder: \"cdx-simple-image__picture\",\n      caption: \"cdx-simple-image__caption\"\n    }, this.nodes = {\n      wrapper: null,\n      imageHolder: null,\n      image: null,\n      caption: null\n    }, this.data = {\n      url: t.url || \"\",\n      caption: t.caption || \"\",\n      withBorder: t.withBorder !== void 0 ? t.withBorder : !1,\n      withBackground: t.withBackground !== void 0 ? t.withBackground : !1,\n      stretched: t.stretched !== void 0 ? t.stretched : !1\n    }, this.tunes = [\n      {\n        name: \"withBorder\",\n        label: \"Add Border\",\n        icon: a\n      },\n      {\n        name: \"stretched\",\n        label: \"Stretch Image\",\n        icon: d\n      },\n      {\n        name: \"withBackground\",\n        label: \"Add Background\",\n        icon: s\n      }\n    ];\n  }\n  /**\n   * Creates a Block:\n   *  1) Show preloader\n   *  2) Start to load an image\n   *  3) After loading, append image and caption input\n   *\n   * @public\n   */\n  render() {\n    const t = this._make(\"div\", [this.CSS.baseClass, this.CSS.wrapper]), e = this._make(\"div\", this.CSS.loading), r = this._make(\"div\", this.CSS.imageHolder), o = this._make(\"img\"), i = this._make(\"div\", [this.CSS.input, this.CSS.caption], {\n      contentEditable: !this.readOnly,\n      innerHTML: this.data.caption || \"\"\n    });\n    return i.dataset.placeholder = \"Enter a caption\", t.appendChild(e), this.data.url && (o.src = this.data.url), o.onload = () => {\n      t.classList.remove(this.CSS.loading), r.appendChild(o), t.appendChild(r), t.appendChild(i), e.remove(), this._acceptTuneView();\n    }, o.onerror = (n) => {\n      console.log(\"Failed to load an image\", n);\n    }, this.nodes.imageHolder = r, this.nodes.wrapper = t, this.nodes.image = o, this.nodes.caption = i, t;\n  }\n  /**\n   * @public\n   * @param {Element} blockContent - Tool's wrapper\n   * @returns {SimpleImageData}\n   */\n  save(t) {\n    const e = t.querySelector(\"img\"), r = t.querySelector(\".\" + this.CSS.input);\n    return e ? Object.assign(this.data, {\n      url: e.src,\n      caption: r.innerHTML\n    }) : this.data;\n  }\n  /**\n   * Sanitizer rules\n   */\n  static get sanitize() {\n    return {\n      url: {},\n      withBorder: {},\n      withBackground: {},\n      stretched: {},\n      caption: {\n        br: !0\n      }\n    };\n  }\n  /**\n   * Notify core that read-only mode is suppoorted\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Read pasted image and convert it to base64\n   *\n   * @static\n   * @param {File} file\n   * @returns {Promise<SimpleImageData>}\n   */\n  onDropHandler(t) {\n    const e = new FileReader();\n    return e.readAsDataURL(t), new Promise((r) => {\n      e.onload = (o) => {\n        r({\n          url: o.target.result,\n          caption: t.name\n        });\n      };\n    });\n  }\n  /**\n   * On paste callback that is fired from Editor.\n   *\n   * @param {PasteEvent} event - event with pasted config\n   */\n  onPaste(t) {\n    switch (t.type) {\n      case \"tag\": {\n        const e = t.detail.data;\n        this.data = {\n          url: e.src\n        };\n        break;\n      }\n      case \"pattern\": {\n        const { data: e } = t.detail;\n        this.data = {\n          url: e\n        };\n        break;\n      }\n      case \"file\": {\n        const { file: e } = t.detail;\n        this.onDropHandler(e).then((r) => {\n          this.data = r;\n        });\n        break;\n      }\n    }\n  }\n  /**\n   * Returns image data\n   *\n   * @returns {SimpleImageData}\n   */\n  get data() {\n    return this._data;\n  }\n  /**\n   * Set image data and update the view\n   *\n   * @param {SimpleImageData} data\n   */\n  set data(t) {\n    this._data = Object.assign({}, this.data, t), this.nodes.image && (this.nodes.image.src = this.data.url), this.nodes.caption && (this.nodes.caption.innerHTML = this.data.caption);\n  }\n  /**\n   * Specify paste substitutes\n   *\n   * @see {@link ../../../docs/tools.md#paste-handling}\n   * @public\n   */\n  static get pasteConfig() {\n    return {\n      patterns: {\n        image: /https?:\\/\\/\\S+\\.(gif|jpe?g|tiff|png|webp)$/i\n      },\n      tags: [\n        {\n          img: { src: !0 }\n        }\n      ],\n      files: {\n        mimeTypes: [\"image/*\"]\n      }\n    };\n  }\n  /**\n   * Returns image tunes config\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return this.tunes.map((t) => ({\n      ...t,\n      label: this.api.i18n.t(t.label),\n      toggle: !0,\n      onActivate: () => this._toggleTune(t.name),\n      isActive: !!this.data[t.name]\n    }));\n  }\n  /**\n   * Helper for making Elements with attributes\n   *\n   * @param  {string} tagName           - new Element tag name\n   * @param  {Array|string} classNames  - list or name of CSS classname(s)\n   * @param  {object} attributes        - any attributes\n   * @returns {Element}\n   */\n  _make(t, e = null, r = {}) {\n    const o = document.createElement(t);\n    Array.isArray(e) ? o.classList.add(...e) : e && o.classList.add(e);\n    for (const i in r)\n      o[i] = r[i];\n    return o;\n  }\n  /**\n   * Click on the Settings Button\n   *\n   * @private\n   * @param tune\n   */\n  _toggleTune(t) {\n    this.data[t] = !this.data[t], this._acceptTuneView();\n  }\n  /**\n   * Add specified class corresponds with activated tunes\n   *\n   * @private\n   */\n  _acceptTuneView() {\n    this.tunes.forEach((t) => {\n      this.nodes.imageHolder.classList.toggle(this.CSS.imageHolder + \"--\" + t.name.replace(/([A-Z])/g, (e) => `-${e[0].toLowerCase()}`), !!this.data[t.name]), t.name === \"stretched\" && this.api.blocks.stretchBlock(this.blockIndex, !!this.data.stretched);\n    });\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/simple-image/dist/simple-image.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/table/dist/table.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/@editorjs/table/dist/table.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ I)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var o=document.createElement(\"style\");o.appendChild(document.createTextNode('.tc-wrap{--color-background:#f9f9fb;--color-text-secondary:#7b7e89;--color-border:#e8e8eb;--cell-size:34px;--toolbox-icon-size:18px;--toolbox-padding:6px;--toolbox-aiming-field-size:calc(var(--toolbox-icon-size) + var(--toolbox-padding)*2);border-left:0;position:relative;height:100%;width:100%;margin-top:var(--toolbox-icon-size);box-sizing:border-box;display:grid;grid-template-columns:calc(100% - var(--cell-size)) var(--cell-size)}.tc-wrap--readonly{grid-template-columns:100% var(--cell-size)}.tc-wrap svg{vertical-align:top}@media print{.tc-wrap{border-left-color:var(--color-border);border-left-style:solid;border-left-width:1px;grid-template-columns:100% var(--cell-size)}}@media print{.tc-wrap .tc-row:after{display:none}}.tc-table{position:relative;width:100%;height:100%;display:grid;font-size:14px;border-top:1px solid var(--color-border);line-height:1.4}.tc-table:after{width:calc(var(--cell-size));height:100%;left:calc(var(--cell-size)*-1);top:0}.tc-table:after,.tc-table:before{position:absolute;content:\"\"}.tc-table:before{width:100%;height:var(--toolbox-aiming-field-size);top:calc(var(--toolbox-aiming-field-size)*-1);left:0}.tc-table--heading .tc-row:first-child{font-weight:600;border-bottom:2px solid var(--color-border)}.tc-table--heading .tc-row:first-child [contenteditable]:empty:before{content:attr(heading);color:var(--color-text-secondary)}.tc-table--heading .tc-row:first-child:after{bottom:-2px;border-bottom:2px solid var(--color-border)}.tc-add-column,.tc-add-row{display:flex;color:var(--color-text-secondary)}@media print{.tc-add{display:none}}.tc-add-column{padding:4px 0;justify-content:center;border-top:1px solid var(--color-border)}@media print{.tc-add-column{display:none}}.tc-add-row{height:var(--cell-size);align-items:center;padding-left:4px;position:relative}.tc-add-row:before{content:\"\";position:absolute;right:calc(var(--cell-size)*-1);width:var(--cell-size);height:100%}@media print{.tc-add-row{display:none}}.tc-add-column,.tc-add-row{transition:0s;cursor:pointer;will-change:background-color}.tc-add-column:hover,.tc-add-row:hover{transition:background-color .1s ease;background-color:var(--color-background)}.tc-add-row{margin-top:1px}.tc-add-row:hover:before{transition:.1s;background-color:var(--color-background)}.tc-row{display:grid;grid-template-columns:repeat(auto-fit,minmax(10px,1fr));position:relative;border-bottom:1px solid var(--color-border)}.tc-row:after{content:\"\";pointer-events:none;position:absolute;width:var(--cell-size);height:100%;bottom:-1px;right:calc(var(--cell-size)*-1);border-bottom:1px solid var(--color-border)}.tc-row--selected{background:var(--color-background)}.tc-row--selected:after{background:var(--color-background)}.tc-cell{border-right:1px solid var(--color-border);padding:6px 12px;overflow:hidden;outline:none;line-break:normal}.tc-cell--selected{background:var(--color-background)}.tc-wrap--readonly .tc-row:after{display:none}.tc-toolbox{--toolbox-padding:6px;--popover-margin:30px;--toggler-click-zone-size:30px;--toggler-dots-color:#7b7e89;--toggler-dots-color-hovered:#1d202b;position:absolute;cursor:pointer;z-index:1;opacity:0;transition:opacity .1s;will-change:left,opacity}.tc-toolbox--column{top:calc(var(--toggler-click-zone-size)*-1);transform:translate(calc(var(--toggler-click-zone-size)*-1/2));will-change:left,opacity}.tc-toolbox--row{left:calc(var(--popover-margin)*-1);transform:translateY(calc(var(--toggler-click-zone-size)*-1/2));margin-top:-1px;will-change:top,opacity}.tc-toolbox--showed{opacity:1}.tc-toolbox .tc-popover{position:absolute;top:0;left:var(--popover-margin)}.tc-toolbox__toggler{display:flex;align-items:center;justify-content:center;width:var(--toggler-click-zone-size);height:var(--toggler-click-zone-size);color:var(--toggler-dots-color);opacity:0;transition:opacity .15s ease;will-change:opacity}.tc-toolbox__toggler:hover{color:var(--toggler-dots-color-hovered)}.tc-toolbox__toggler svg{fill:currentColor}.tc-wrap:hover .tc-toolbox__toggler{opacity:1}.tc-settings .cdx-settings-button{width:50%;margin:0}.tc-popover{--color-border:#eaeaea;--color-background:#fff;--color-background-hover:rgba(232,232,235,.49);--color-background-confirm:#e24a4a;--color-background-confirm-hover:#d54040;--color-text-confirm:#fff;background:var(--color-background);border:1px solid var(--color-border);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;padding:6px;display:none;will-change:opacity,transform}.tc-popover--opened{display:block;animation:menuShowing .1s cubic-bezier(.215,.61,.355,1) forwards}.tc-popover__item{display:flex;align-items:center;padding:2px 14px 2px 2px;border-radius:5px;cursor:pointer;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;user-select:none}.tc-popover__item:hover{background:var(--color-background-hover)}.tc-popover__item:not(:last-of-type){margin-bottom:2px}.tc-popover__item-icon{display:inline-flex;width:26px;height:26px;align-items:center;justify-content:center;background:var(--color-background);border-radius:5px;border:1px solid var(--color-border);margin-right:8px}.tc-popover__item-label{line-height:22px;font-size:14px;font-weight:500}.tc-popover__item--confirm{background:var(--color-background-confirm);color:var(--color-text-confirm)}.tc-popover__item--confirm:hover{background-color:var(--color-background-confirm-hover)}.tc-popover__item--confirm .tc-popover__item-icon{background:var(--color-background-confirm);border-color:#0000001a}.tc-popover__item--confirm .tc-popover__item-icon svg{transition:transform .2s ease-in;transform:rotate(90deg) scale(1.2)}.tc-popover__item--hidden{display:none}@keyframes menuShowing{0%{opacity:0;transform:translateY(-8px) scale(.9)}70%{opacity:1;transform:translateY(2px)}to{transform:translateY(0)}}')),document.head.appendChild(o)}}catch(r){console.error(\"vite-plugin-css-injected-by-js\",r)}})();\nfunction c(d, t, e = {}) {\n  const o = document.createElement(d);\n  Array.isArray(t) ? o.classList.add(...t) : t && o.classList.add(t);\n  for (const i in e)\n    Object.prototype.hasOwnProperty.call(e, i) && (o[i] = e[i]);\n  return o;\n}\nfunction f(d) {\n  const t = d.getBoundingClientRect();\n  return {\n    y1: Math.floor(t.top + window.pageYOffset),\n    x1: Math.floor(t.left + window.pageXOffset),\n    x2: Math.floor(t.right + window.pageXOffset),\n    y2: Math.floor(t.bottom + window.pageYOffset)\n  };\n}\nfunction g(d, t) {\n  const e = f(d), o = f(t);\n  return {\n    fromTopBorder: o.y1 - e.y1,\n    fromLeftBorder: o.x1 - e.x1,\n    fromRightBorder: e.x2 - o.x2,\n    fromBottomBorder: e.y2 - o.y2\n  };\n}\nfunction R(d, t) {\n  const e = d.getBoundingClientRect(), { width: o, height: i, x: s, y: n } = e, { clientX: h, clientY: l } = t;\n  return {\n    width: o,\n    height: i,\n    x: h - s,\n    y: l - n\n  };\n}\nfunction C(d, t) {\n  return t.parentNode.insertBefore(d, t);\n}\nfunction m(d, t = !0) {\n  const e = document.createRange(), o = window.getSelection();\n  e.selectNodeContents(d), e.collapse(t), o.removeAllRanges(), o.addRange(e);\n}\nclass a {\n  /**\n   * @param {object} options - constructor options\n   * @param {PopoverItem[]} options.items - constructor options\n   */\n  constructor({ items: t }) {\n    this.items = t, this.wrapper = void 0, this.itemEls = [];\n  }\n  /**\n   * Set of CSS classnames used in popover\n   *\n   * @returns {object}\n   */\n  static get CSS() {\n    return {\n      popover: \"tc-popover\",\n      popoverOpened: \"tc-popover--opened\",\n      item: \"tc-popover__item\",\n      itemHidden: \"tc-popover__item--hidden\",\n      itemConfirmState: \"tc-popover__item--confirm\",\n      itemIcon: \"tc-popover__item-icon\",\n      itemLabel: \"tc-popover__item-label\"\n    };\n  }\n  /**\n   * Returns the popover element\n   *\n   * @returns {Element}\n   */\n  render() {\n    return this.wrapper = c(\"div\", a.CSS.popover), this.items.forEach((t, e) => {\n      const o = c(\"div\", a.CSS.item), i = c(\"div\", a.CSS.itemIcon, {\n        innerHTML: t.icon\n      }), s = c(\"div\", a.CSS.itemLabel, {\n        textContent: t.label\n      });\n      o.dataset.index = e, o.appendChild(i), o.appendChild(s), this.wrapper.appendChild(o), this.itemEls.push(o);\n    }), this.wrapper.addEventListener(\"click\", (t) => {\n      this.popoverClicked(t);\n    }), this.wrapper;\n  }\n  /**\n   * Popover wrapper click listener\n   * Used to delegate clicks in items\n   *\n   * @returns {void}\n   */\n  popoverClicked(t) {\n    const e = t.target.closest(`.${a.CSS.item}`);\n    if (!e)\n      return;\n    const o = e.dataset.index, i = this.items[o];\n    if (i.confirmationRequired && !this.hasConfirmationState(e)) {\n      this.setConfirmationState(e);\n      return;\n    }\n    i.onClick();\n  }\n  /**\n   * Enable the confirmation state on passed item\n   *\n   * @returns {void}\n   */\n  setConfirmationState(t) {\n    t.classList.add(a.CSS.itemConfirmState);\n  }\n  /**\n   * Disable the confirmation state on passed item\n   *\n   * @returns {void}\n   */\n  clearConfirmationState(t) {\n    t.classList.remove(a.CSS.itemConfirmState);\n  }\n  /**\n   * Check if passed item has the confirmation state\n   *\n   * @returns {boolean}\n   */\n  hasConfirmationState(t) {\n    return t.classList.contains(a.CSS.itemConfirmState);\n  }\n  /**\n   * Return an opening state\n   *\n   * @returns {boolean}\n   */\n  get opened() {\n    return this.wrapper.classList.contains(a.CSS.popoverOpened);\n  }\n  /**\n   * Opens the popover\n   *\n   * @returns {void}\n   */\n  open() {\n    this.items.forEach((t, e) => {\n      typeof t.hideIf == \"function\" && this.itemEls[e].classList.toggle(a.CSS.itemHidden, t.hideIf());\n    }), this.wrapper.classList.add(a.CSS.popoverOpened);\n  }\n  /**\n   * Closes the popover\n   *\n   * @returns {void}\n   */\n  close() {\n    this.wrapper.classList.remove(a.CSS.popoverOpened), this.itemEls.forEach((t) => {\n      this.clearConfirmationState(t);\n    });\n  }\n}\nconst b = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16\"/></svg>', k = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 9.16666L18.2167 12.5M18.2167 12.5L14.8833 15.8333M18.2167 12.5H10.05C9.16594 12.5 8.31809 12.1488 7.69297 11.5237C7.06785 10.8986 6.71666 10.0507 6.71666 9.16666\"/></svg>', S = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.9167 14.9167L11.5833 18.25M11.5833 18.25L8.25 14.9167M11.5833 18.25L11.5833 10.0833C11.5833 9.19928 11.9345 8.35143 12.5596 7.72631C13.1848 7.10119 14.0326 6.75 14.9167 6.75\"/></svg>', x = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M9.13333 14.9167L12.4667 18.25M12.4667 18.25L15.8 14.9167M12.4667 18.25L12.4667 10.0833C12.4667 9.19928 12.1155 8.35143 11.4904 7.72631C10.8652 7.10119 10.0174 6.75 9.13333 6.75\"/></svg>', y = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M14.8833 15.8333L18.2167 12.5M18.2167 12.5L14.8833 9.16667M18.2167 12.5L10.05 12.5C9.16595 12.5 8.31811 12.8512 7.69299 13.4763C7.06787 14.1014 6.71667 14.9493 6.71667 15.8333\"/></svg>', T = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.41 9.66H9.4\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 9.66H14.59\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M9.31 14.36H9.3\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2.6\" d=\"M14.6 14.36H14.59\"/></svg>', v = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 7V12M12 17V12M17 12H12M12 12H7\"/></svg>', L = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', M = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M14 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 14H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>', O = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M10 5V18.5\"/><path stroke=\"currentColor\" stroke-width=\"2\" d=\"M5 10H19\"/><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/></svg>';\nclass u {\n  /**\n   * Creates toolbox buttons and toolbox menus\n   *\n   * @param {object} api - Editor.js api\n   * @param {PopoverItem[]} items - Editor.js api\n   * @param {function} onOpen - callback fired when the Popover is opening\n   * @param {function} onClose - callback fired when the Popover is closing\n   * @param {string} [cssModifier] - the modifier for the Toolbox. Allows to add some specific styles.\n   */\n  constructor({ api: t, items: e, onOpen: o, onClose: i, cssModifier: s = \"\" }) {\n    this.api = t, this.items = e, this.onOpen = o, this.onClose = i, this.cssModifier = s, this.popover = null, this.wrapper = this.createToolbox();\n  }\n  /**\n   * Style classes\n   */\n  static get CSS() {\n    return {\n      toolbox: \"tc-toolbox\",\n      toolboxShowed: \"tc-toolbox--showed\",\n      toggler: \"tc-toolbox__toggler\"\n    };\n  }\n  /**\n   * Returns rendered Toolbox element\n   */\n  get element() {\n    return this.wrapper;\n  }\n  /**\n   * Creating a toolbox to open menu for a manipulating columns\n   *\n   * @returns {Element}\n   */\n  createToolbox() {\n    const t = c(\"div\", [\n      u.CSS.toolbox,\n      this.cssModifier ? `${u.CSS.toolbox}--${this.cssModifier}` : \"\"\n    ]);\n    t.dataset.mutationFree = \"true\";\n    const e = this.createPopover(), o = this.createToggler();\n    return t.appendChild(o), t.appendChild(e), t;\n  }\n  /**\n   * Creates the Toggler\n   *\n   * @returns {Element}\n   */\n  createToggler() {\n    const t = c(\"div\", u.CSS.toggler, {\n      innerHTML: T\n    });\n    return t.addEventListener(\"click\", () => {\n      this.togglerClicked();\n    }), t;\n  }\n  /**\n   * Creates the Popover instance and render it\n   *\n   * @returns {Element}\n   */\n  createPopover() {\n    return this.popover = new a({\n      items: this.items\n    }), this.popover.render();\n  }\n  /**\n   * Toggler click handler. Opens/Closes the popover\n   *\n   * @returns {void}\n   */\n  togglerClicked() {\n    this.popover.opened ? (this.popover.close(), this.onClose()) : (this.popover.open(), this.onOpen());\n  }\n  /**\n   * Shows the Toolbox\n   *\n   * @param {function} computePositionMethod - method that returns the position coordinate\n   * @returns {void}\n   */\n  show(t) {\n    const e = t();\n    Object.entries(e).forEach(([o, i]) => {\n      this.wrapper.style[o] = i;\n    }), this.wrapper.classList.add(u.CSS.toolboxShowed);\n  }\n  /**\n   * Hides the Toolbox\n   *\n   * @returns {void}\n   */\n  hide() {\n    this.popover.close(), this.wrapper.classList.remove(u.CSS.toolboxShowed);\n  }\n}\nfunction H(d, t) {\n  let e = 0;\n  return function(...o) {\n    const i = (/* @__PURE__ */ new Date()).getTime();\n    if (!(i - e < d))\n      return e = i, t(...o);\n  };\n}\nconst r = {\n  wrapper: \"tc-wrap\",\n  wrapperReadOnly: \"tc-wrap--readonly\",\n  table: \"tc-table\",\n  row: \"tc-row\",\n  withHeadings: \"tc-table--heading\",\n  rowSelected: \"tc-row--selected\",\n  cell: \"tc-cell\",\n  cellSelected: \"tc-cell--selected\",\n  addRow: \"tc-add-row\",\n  addColumn: \"tc-add-column\"\n};\nclass A {\n  /**\n   * Creates\n   *\n   * @constructor\n   * @param {boolean} readOnly - read-only mode flag\n   * @param {object} api - Editor.js API\n   * @param {TableData} data - Editor.js API\n   * @param {TableConfig} config - Editor.js API\n   */\n  constructor(t, e, o, i) {\n    this.readOnly = t, this.api = e, this.data = o, this.config = i, this.wrapper = null, this.table = null, this.toolboxColumn = this.createColumnToolbox(), this.toolboxRow = this.createRowToolbox(), this.createTableWrapper(), this.hoveredRow = 0, this.hoveredColumn = 0, this.selectedRow = 0, this.selectedColumn = 0, this.tunes = {\n      withHeadings: !1\n    }, this.resize(), this.fill(), this.focusedCell = {\n      row: 0,\n      column: 0\n    }, this.documentClicked = (s) => {\n      const n = s.target.closest(`.${r.table}`) !== null, h = s.target.closest(`.${r.wrapper}`) === null;\n      (n || h) && this.hideToolboxes();\n      const w = s.target.closest(`.${r.addRow}`), p = s.target.closest(`.${r.addColumn}`);\n      w && w.parentNode === this.wrapper ? (this.addRow(void 0, !0), this.hideToolboxes()) : p && p.parentNode === this.wrapper && (this.addColumn(void 0, !0), this.hideToolboxes());\n    }, this.readOnly || this.bindEvents();\n  }\n  /**\n   * Returns the rendered table wrapper\n   *\n   * @returns {Element}\n   */\n  getWrapper() {\n    return this.wrapper;\n  }\n  /**\n   * Hangs the necessary handlers to events\n   */\n  bindEvents() {\n    document.addEventListener(\"click\", this.documentClicked), this.table.addEventListener(\"mousemove\", H(150, (t) => this.onMouseMoveInTable(t)), { passive: !0 }), this.table.onkeypress = (t) => this.onKeyPressListener(t), this.table.addEventListener(\"keydown\", (t) => this.onKeyDownListener(t)), this.table.addEventListener(\"focusin\", (t) => this.focusInTableListener(t));\n  }\n  /**\n   * Configures and creates the toolbox for manipulating with columns\n   *\n   * @returns {Toolbox}\n   */\n  createColumnToolbox() {\n    return new u({\n      api: this.api,\n      cssModifier: \"column\",\n      items: [\n        {\n          label: this.api.i18n.t(\"Add column to left\"),\n          icon: S,\n          onClick: () => {\n            this.addColumn(this.selectedColumn, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Add column to right\"),\n          icon: x,\n          onClick: () => {\n            this.addColumn(this.selectedColumn + 1, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Delete column\"),\n          icon: b,\n          hideIf: () => this.numberOfColumns === 1,\n          confirmationRequired: !0,\n          onClick: () => {\n            this.deleteColumn(this.selectedColumn), this.hideToolboxes();\n          }\n        }\n      ],\n      onOpen: () => {\n        this.selectColumn(this.hoveredColumn), this.hideRowToolbox();\n      },\n      onClose: () => {\n        this.unselectColumn();\n      }\n    });\n  }\n  /**\n   * Configures and creates the toolbox for manipulating with rows\n   *\n   * @returns {Toolbox}\n   */\n  createRowToolbox() {\n    return new u({\n      api: this.api,\n      cssModifier: \"row\",\n      items: [\n        {\n          label: this.api.i18n.t(\"Add row above\"),\n          icon: y,\n          onClick: () => {\n            this.addRow(this.selectedRow, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Add row below\"),\n          icon: k,\n          onClick: () => {\n            this.addRow(this.selectedRow + 1, !0), this.hideToolboxes();\n          }\n        },\n        {\n          label: this.api.i18n.t(\"Delete row\"),\n          icon: b,\n          hideIf: () => this.numberOfRows === 1,\n          confirmationRequired: !0,\n          onClick: () => {\n            this.deleteRow(this.selectedRow), this.hideToolboxes();\n          }\n        }\n      ],\n      onOpen: () => {\n        this.selectRow(this.hoveredRow), this.hideColumnToolbox();\n      },\n      onClose: () => {\n        this.unselectRow();\n      }\n    });\n  }\n  /**\n   * When you press enter it moves the cursor down to the next row\n   * or creates it if the click occurred on the last one\n   */\n  moveCursorToNextRow() {\n    this.focusedCell.row !== this.numberOfRows ? (this.focusedCell.row += 1, this.focusCell(this.focusedCell)) : (this.addRow(), this.focusedCell.row += 1, this.focusCell(this.focusedCell), this.updateToolboxesPosition(0, 0));\n  }\n  /**\n   * Get table cell by row and col index\n   *\n   * @param {number} row - cell row coordinate\n   * @param {number} column - cell column coordinate\n   * @returns {HTMLElement}\n   */\n  getCell(t, e) {\n    return this.table.querySelectorAll(`.${r.row}:nth-child(${t}) .${r.cell}`)[e - 1];\n  }\n  /**\n   * Get table row by index\n   *\n   * @param {number} row - row coordinate\n   * @returns {HTMLElement}\n   */\n  getRow(t) {\n    return this.table.querySelector(`.${r.row}:nth-child(${t})`);\n  }\n  /**\n   * The parent of the cell which is the row\n   *\n   * @param {HTMLElement} cell - cell element\n   * @returns {HTMLElement}\n   */\n  getRowByCell(t) {\n    return t.parentElement;\n  }\n  /**\n   * Ger row's first cell\n   *\n   * @param {Element} row - row to find its first cell\n   * @returns {Element}\n   */\n  getRowFirstCell(t) {\n    return t.querySelector(`.${r.cell}:first-child`);\n  }\n  /**\n   * Set the sell's content by row and column numbers\n   *\n   * @param {number} row - cell row coordinate\n   * @param {number} column - cell column coordinate\n   * @param {string} content - cell HTML content\n   */\n  setCellContent(t, e, o) {\n    const i = this.getCell(t, e);\n    i.innerHTML = o;\n  }\n  /**\n   * Add column in table on index place\n   * Add cells in each row\n   *\n   * @param {number} columnIndex - number in the array of columns, where new column to insert, -1 if insert at the end\n   * @param {boolean} [setFocus] - pass true to focus the first cell\n   */\n  addColumn(t = -1, e = !1) {\n    let o = this.numberOfColumns;\n    for (let i = 1; i <= this.numberOfRows; i++) {\n      let s;\n      const n = this.createCell();\n      if (t > 0 && t <= o ? (s = this.getCell(i, t), C(n, s)) : s = this.getRow(i).appendChild(n), i === 1) {\n        const h = this.getCell(i, t > 0 ? t : o + 1);\n        h && e && m(h);\n      }\n    }\n    this.addHeadingAttrToFirstRow();\n  }\n  /**\n   * Add row in table on index place\n   *\n   * @param {number} index - number in the array of rows, where new column to insert, -1 if insert at the end\n   * @param {boolean} [setFocus] - pass true to focus the inserted row\n   * @returns {HTMLElement} row\n   */\n  addRow(t = -1, e = !1) {\n    let o, i = c(\"div\", r.row);\n    this.tunes.withHeadings && this.removeHeadingAttrFromFirstRow();\n    let s = this.numberOfColumns;\n    if (t > 0 && t <= this.numberOfRows) {\n      let h = this.getRow(t);\n      o = C(i, h);\n    } else\n      o = this.table.appendChild(i);\n    this.fillRow(o, s), this.tunes.withHeadings && this.addHeadingAttrToFirstRow();\n    const n = this.getRowFirstCell(o);\n    return n && e && m(n), o;\n  }\n  /**\n   * Delete a column by index\n   *\n   * @param {number} index\n   */\n  deleteColumn(t) {\n    for (let e = 1; e <= this.numberOfRows; e++) {\n      const o = this.getCell(e, t);\n      if (!o)\n        return;\n      o.remove();\n    }\n  }\n  /**\n   * Delete a row by index\n   *\n   * @param {number} index\n   */\n  deleteRow(t) {\n    this.getRow(t).remove(), this.addHeadingAttrToFirstRow();\n  }\n  /**\n   * Create a wrapper containing a table, toolboxes\n   * and buttons for adding rows and columns\n   *\n   * @returns {HTMLElement} wrapper - where all buttons for a table and the table itself will be\n   */\n  createTableWrapper() {\n    if (this.wrapper = c(\"div\", r.wrapper), this.table = c(\"div\", r.table), this.readOnly && this.wrapper.classList.add(r.wrapperReadOnly), this.wrapper.appendChild(this.toolboxRow.element), this.wrapper.appendChild(this.toolboxColumn.element), this.wrapper.appendChild(this.table), !this.readOnly) {\n      const t = c(\"div\", r.addColumn, {\n        innerHTML: v\n      }), e = c(\"div\", r.addRow, {\n        innerHTML: v\n      });\n      this.wrapper.appendChild(t), this.wrapper.appendChild(e);\n    }\n  }\n  /**\n   * Returns the size of the table based on initial data or config \"size\" property\n   *\n   * @return {{rows: number, cols: number}} - number of cols and rows\n   */\n  computeInitialSize() {\n    const t = this.data && this.data.content, e = Array.isArray(t), o = e ? t.length : !1, i = e ? t.length : void 0, s = o ? t[0].length : void 0, n = Number.parseInt(this.config && this.config.rows), h = Number.parseInt(this.config && this.config.cols), l = !isNaN(n) && n > 0 ? n : void 0, w = !isNaN(h) && h > 0 ? h : void 0;\n    return {\n      rows: i || l || 2,\n      cols: s || w || 2\n    };\n  }\n  /**\n   * Resize table to match config size or transmitted data size\n   *\n   * @return {{rows: number, cols: number}} - number of cols and rows\n   */\n  resize() {\n    const { rows: t, cols: e } = this.computeInitialSize();\n    for (let o = 0; o < t; o++)\n      this.addRow();\n    for (let o = 0; o < e; o++)\n      this.addColumn();\n  }\n  /**\n   * Fills the table with data passed to the constructor\n   *\n   * @returns {void}\n   */\n  fill() {\n    const t = this.data;\n    if (t && t.content)\n      for (let e = 0; e < t.content.length; e++)\n        for (let o = 0; o < t.content[e].length; o++)\n          this.setCellContent(e + 1, o + 1, t.content[e][o]);\n  }\n  /**\n   * Fills a row with cells\n   *\n   * @param {HTMLElement} row - row to fill\n   * @param {number} numberOfColumns - how many cells should be in a row\n   */\n  fillRow(t, e) {\n    for (let o = 1; o <= e; o++) {\n      const i = this.createCell();\n      t.appendChild(i);\n    }\n  }\n  /**\n   * Creating a cell element\n   *\n   * @return {Element}\n   */\n  createCell() {\n    return c(\"div\", r.cell, {\n      contentEditable: !this.readOnly\n    });\n  }\n  /**\n   * Get number of rows in the table\n   */\n  get numberOfRows() {\n    return this.table.childElementCount;\n  }\n  /**\n   * Get number of columns in the table\n   */\n  get numberOfColumns() {\n    return this.numberOfRows ? this.table.querySelectorAll(`.${r.row}:first-child .${r.cell}`).length : 0;\n  }\n  /**\n   * Is the column toolbox menu displayed or not\n   *\n   * @returns {boolean}\n   */\n  get isColumnMenuShowing() {\n    return this.selectedColumn !== 0;\n  }\n  /**\n   * Is the row toolbox menu displayed or not\n   *\n   * @returns {boolean}\n   */\n  get isRowMenuShowing() {\n    return this.selectedRow !== 0;\n  }\n  /**\n   * Recalculate position of toolbox icons\n   *\n   * @param {Event} event - mouse move event\n   */\n  onMouseMoveInTable(t) {\n    const { row: e, column: o } = this.getHoveredCell(t);\n    this.hoveredColumn = o, this.hoveredRow = e, this.updateToolboxesPosition();\n  }\n  /**\n   * Prevents default Enter behaviors\n   * Adds Shift+Enter processing\n   *\n   * @param {KeyboardEvent} event - keypress event\n   */\n  onKeyPressListener(t) {\n    if (t.key === \"Enter\") {\n      if (t.shiftKey)\n        return !0;\n      this.moveCursorToNextRow();\n    }\n    return t.key !== \"Enter\";\n  }\n  /**\n   * Prevents tab keydown event from bubbling\n   * so that it only works inside the table\n   *\n   * @param {KeyboardEvent} event - keydown event\n   */\n  onKeyDownListener(t) {\n    t.key === \"Tab\" && t.stopPropagation();\n  }\n  /**\n   * Set the coordinates of the cell that the focus has moved to\n   *\n   * @param {FocusEvent} event - focusin event\n   */\n  focusInTableListener(t) {\n    const e = t.target, o = this.getRowByCell(e);\n    this.focusedCell = {\n      row: Array.from(this.table.querySelectorAll(`.${r.row}`)).indexOf(o) + 1,\n      column: Array.from(o.querySelectorAll(`.${r.cell}`)).indexOf(e) + 1\n    };\n  }\n  /**\n   * Unselect row/column\n   * Close toolbox menu\n   * Hide toolboxes\n   *\n   * @returns {void}\n   */\n  hideToolboxes() {\n    this.hideRowToolbox(), this.hideColumnToolbox(), this.updateToolboxesPosition();\n  }\n  /**\n   * Unselect row, close toolbox\n   *\n   * @returns {void}\n   */\n  hideRowToolbox() {\n    this.unselectRow(), this.toolboxRow.hide();\n  }\n  /**\n   * Unselect column, close toolbox\n   *\n   * @returns {void}\n   */\n  hideColumnToolbox() {\n    this.unselectColumn(), this.toolboxColumn.hide();\n  }\n  /**\n   * Set the cursor focus to the focused cell\n   *\n   * @returns {void}\n   */\n  focusCell() {\n    this.focusedCellElem.focus();\n  }\n  /**\n   * Get current focused element\n   *\n   * @returns {HTMLElement} - focused cell\n   */\n  get focusedCellElem() {\n    const { row: t, column: e } = this.focusedCell;\n    return this.getCell(t, e);\n  }\n  /**\n   * Update toolboxes position\n   *\n   * @param {number} row - hovered row\n   * @param {number} column - hovered column\n   */\n  updateToolboxesPosition(t = this.hoveredRow, e = this.hoveredColumn) {\n    this.isColumnMenuShowing || e > 0 && e <= this.numberOfColumns && this.toolboxColumn.show(() => ({\n      left: `calc((100% - var(--cell-size)) / (${this.numberOfColumns} * 2) * (1 + (${e} - 1) * 2))`\n    })), this.isRowMenuShowing || t > 0 && t <= this.numberOfRows && this.toolboxRow.show(() => {\n      const o = this.getRow(t), { fromTopBorder: i } = g(this.table, o), { height: s } = o.getBoundingClientRect();\n      return {\n        top: `${Math.ceil(i + s / 2)}px`\n      };\n    });\n  }\n  /**\n   * Makes the first row headings\n   *\n   * @param {boolean} withHeadings - use headings row or not\n   */\n  setHeadingsSetting(t) {\n    this.tunes.withHeadings = t, t ? (this.table.classList.add(r.withHeadings), this.addHeadingAttrToFirstRow()) : (this.table.classList.remove(r.withHeadings), this.removeHeadingAttrFromFirstRow());\n  }\n  /**\n   * Adds an attribute for displaying the placeholder in the cell\n   */\n  addHeadingAttrToFirstRow() {\n    for (let t = 1; t <= this.numberOfColumns; t++) {\n      let e = this.getCell(1, t);\n      e && e.setAttribute(\"heading\", this.api.i18n.t(\"Heading\"));\n    }\n  }\n  /**\n   * Removes an attribute for displaying the placeholder in the cell\n   */\n  removeHeadingAttrFromFirstRow() {\n    for (let t = 1; t <= this.numberOfColumns; t++) {\n      let e = this.getCell(1, t);\n      e && e.removeAttribute(\"heading\");\n    }\n  }\n  /**\n   * Add effect of a selected row\n   *\n   * @param {number} index\n   */\n  selectRow(t) {\n    const e = this.getRow(t);\n    e && (this.selectedRow = t, e.classList.add(r.rowSelected));\n  }\n  /**\n   * Remove effect of a selected row\n   */\n  unselectRow() {\n    if (this.selectedRow <= 0)\n      return;\n    const t = this.table.querySelector(`.${r.rowSelected}`);\n    t && t.classList.remove(r.rowSelected), this.selectedRow = 0;\n  }\n  /**\n   * Add effect of a selected column\n   *\n   * @param {number} index\n   */\n  selectColumn(t) {\n    for (let e = 1; e <= this.numberOfRows; e++) {\n      const o = this.getCell(e, t);\n      o && o.classList.add(r.cellSelected);\n    }\n    this.selectedColumn = t;\n  }\n  /**\n   * Remove effect of a selected column\n   */\n  unselectColumn() {\n    if (this.selectedColumn <= 0)\n      return;\n    let t = this.table.querySelectorAll(`.${r.cellSelected}`);\n    Array.from(t).forEach((e) => {\n      e.classList.remove(r.cellSelected);\n    }), this.selectedColumn = 0;\n  }\n  /**\n   * Calculates the row and column that the cursor is currently hovering over\n   * The search was optimized from O(n) to O (log n) via bin search to reduce the number of calculations\n   *\n   * @param {Event} event - mousemove event\n   * @returns hovered cell coordinates as an integer row and column\n   */\n  getHoveredCell(t) {\n    let e = this.hoveredRow, o = this.hoveredColumn;\n    const { width: i, height: s, x: n, y: h } = R(this.table, t);\n    return n >= 0 && (o = this.binSearch(\n      this.numberOfColumns,\n      (l) => this.getCell(1, l),\n      ({ fromLeftBorder: l }) => n < l,\n      ({ fromRightBorder: l }) => n > i - l\n    )), h >= 0 && (e = this.binSearch(\n      this.numberOfRows,\n      (l) => this.getCell(l, 1),\n      ({ fromTopBorder: l }) => h < l,\n      ({ fromBottomBorder: l }) => h > s - l\n    )), {\n      row: e || this.hoveredRow,\n      column: o || this.hoveredColumn\n    };\n  }\n  /**\n   * Looks for the index of the cell the mouse is hovering over.\n   * Cells can be represented as ordered intervals with left and\n   * right (upper and lower for rows) borders inside the table, if the mouse enters it, then this is our index\n   *\n   * @param {number} numberOfCells - upper bound of binary search\n   * @param {function} getCell - function to take the currently viewed cell\n   * @param {function} beforeTheLeftBorder - determines the cursor position, to the left of the cell or not\n   * @param {function} afterTheRightBorder - determines the cursor position, to the right of the cell or not\n   * @returns {number}\n   */\n  binSearch(t, e, o, i) {\n    let s = 0, n = t + 1, h = 0, l;\n    for (; s < n - 1 && h < 10; ) {\n      l = Math.ceil((s + n) / 2);\n      const w = e(l), p = g(this.table, w);\n      if (o(p))\n        n = l;\n      else if (i(p))\n        s = l;\n      else\n        break;\n      h++;\n    }\n    return l;\n  }\n  /**\n   * Collects data from cells into a two-dimensional array\n   *\n   * @returns {string[][]}\n   */\n  getData() {\n    const t = [];\n    for (let e = 1; e <= this.numberOfRows; e++) {\n      const o = this.table.querySelector(`.${r.row}:nth-child(${e})`), i = Array.from(o.querySelectorAll(`.${r.cell}`));\n      i.every((n) => !n.textContent.trim()) || t.push(i.map((n) => n.innerHTML));\n    }\n    return t;\n  }\n  /**\n   * Remove listeners on the document\n   */\n  destroy() {\n    document.removeEventListener(\"click\", this.documentClicked);\n  }\n}\nclass I {\n  /**\n   * Notify core that read-only mode is supported\n   *\n   * @returns {boolean}\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Allow to press Enter inside the CodeTool textarea\n   *\n   * @returns {boolean}\n   * @public\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {TableData} data — previously saved data\n   * @param {TableConfig} config - user config for Tool\n   * @param {object} api - Editor.js API\n   * @param {boolean} readOnly - read-only mode flag\n   */\n  constructor({ data: t, config: e, api: o, readOnly: i }) {\n    this.api = o, this.readOnly = i, this.config = e, this.data = {\n      withHeadings: this.getConfig(\"withHeadings\", !1, t),\n      content: t && t.content ? t.content : []\n    }, this.table = null;\n  }\n  /**\n   * Get Tool toolbox settings\n   * icon - Tool icon's SVG\n   * title - title to show in toolbox\n   *\n   * @returns {{icon: string, title: string}}\n   */\n  static get toolbox() {\n    return {\n      icon: O,\n      title: \"Table\"\n    };\n  }\n  /**\n   * Return Tool's view\n   *\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    return this.table = new A(this.readOnly, this.api, this.data, this.config), this.container = c(\"div\", this.api.styles.block), this.container.appendChild(this.table.getWrapper()), this.table.setHeadingsSetting(this.data.withHeadings), this.container;\n  }\n  /**\n   * Returns plugin settings\n   *\n   * @returns {Array}\n   */\n  renderSettings() {\n    return [\n      {\n        label: this.api.i18n.t(\"With headings\"),\n        icon: L,\n        isActive: this.data.withHeadings,\n        closeOnActivate: !0,\n        toggle: !0,\n        onActivate: () => {\n          this.data.withHeadings = !0, this.table.setHeadingsSetting(this.data.withHeadings);\n        }\n      },\n      {\n        label: this.api.i18n.t(\"Without headings\"),\n        icon: M,\n        isActive: !this.data.withHeadings,\n        closeOnActivate: !0,\n        toggle: !0,\n        onActivate: () => {\n          this.data.withHeadings = !1, this.table.setHeadingsSetting(this.data.withHeadings);\n        }\n      }\n    ];\n  }\n  /**\n   * Extract table data from the view\n   *\n   * @returns {TableData} - saved data\n   */\n  save() {\n    const t = this.table.getData();\n    return {\n      withHeadings: this.data.withHeadings,\n      content: t\n    };\n  }\n  /**\n   * Plugin destroyer\n   *\n   * @returns {void}\n   */\n  destroy() {\n    this.table.destroy();\n  }\n  /**\n   * A helper to get config value.\n   * \n   * @param {string} configName - the key to get from the config. \n   * @param {any} defaultValue - default value if config doesn't have passed key\n   * @param {object} savedData - previously saved data. If passed, the key will be got from there, otherwise from the config\n   * @returns {any} - config value.\n   */\n  getConfig(t, e = void 0, o = void 0) {\n    const i = this.data || o;\n    return i ? i[t] ? i[t] : e : this.config && this.config[t] ? this.config[t] : e;\n  }\n  /**  \n   * Table onPaste configuration\n   *\n   * @public\n   */\n  static get pasteConfig() {\n    return { tags: [\"TABLE\", \"TR\", \"TH\", \"TD\"] };\n  }\n  /**\n   * On paste callback that is fired from Editor\n   *\n   * @param {PasteEvent} event - event with pasted data\n   */\n  onPaste(t) {\n    const e = t.detail.data, o = e.querySelector(\":scope > thead, tr:first-of-type th\"), s = Array.from(e.querySelectorAll(\"tr\")).map((n) => Array.from(n.querySelectorAll(\"th, td\")).map((l) => l.innerHTML));\n    this.data = {\n      withHeadings: o !== null,\n      content: s\n    }, this.table.wrapper && this.table.wrapper.replaceWith(this.render());\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/table/dist/table.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@editorjs/warning/dist/warning.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/@editorjs/warning/dist/warning.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ r)\n/* harmony export */ });\n(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(`.cdx-warning{position:relative}@media all and (min-width: 736px){.cdx-warning{padding-left:36px}}.cdx-warning [contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-warning [contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-warning [contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-warning:before{content:\"\";background-image:url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='5' y='5' width='14' height='14' rx='4' stroke='black' stroke-width='2'/%3E%3Cline x1='12' y1='9' x2='12' y2='12' stroke='black' stroke-width='2' stroke-linecap='round'/%3E%3Cpath d='M12 15.02V15.01' stroke='black' stroke-width='2' stroke-linecap='round'/%3E%3C/svg%3E\");width:24px;height:24px;background-size:24px 24px;position:absolute;margin-top:8px;left:0}@media all and (max-width: 735px){.cdx-warning:before{display:none}}.cdx-warning__message{min-height:85px}.cdx-warning__title{margin-bottom:6px}`)),document.head.appendChild(e)}}catch(t){console.error(\"vite-plugin-css-injected-by-js\",t)}})();\nconst n = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><rect width=\"14\" height=\"14\" x=\"5\" y=\"5\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"4\"/><line x1=\"12\" x2=\"12\" y1=\"9\" y2=\"12\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\"/><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M12 15.02V15.01\"/></svg>';\nclass r {\n  /**\n   * Notify core that read-only mode is supported\n   */\n  static get isReadOnlySupported() {\n    return !0;\n  }\n  /**\n   * Get Toolbox settings\n   *\n   * @public\n   * @returns {string}\n   */\n  static get toolbox() {\n    return {\n      icon: n,\n      title: \"Warning\"\n    };\n  }\n  /**\n   * Allow to press Enter inside the Warning\n   *\n   * @public\n   * @returns {boolean}\n   */\n  static get enableLineBreaks() {\n    return !0;\n  }\n  /**\n   * Default placeholder for warning title\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_TITLE_PLACEHOLDER() {\n    return \"Title\";\n  }\n  /**\n   * Default placeholder for warning message\n   *\n   * @public\n   * @returns {string}\n   */\n  static get DEFAULT_MESSAGE_PLACEHOLDER() {\n    return \"Message\";\n  }\n  /**\n   * Warning Tool`s styles\n   *\n   * @returns {object}\n   */\n  get CSS() {\n    return {\n      baseClass: this.api.styles.block,\n      wrapper: \"cdx-warning\",\n      title: \"cdx-warning__title\",\n      input: this.api.styles.input,\n      message: \"cdx-warning__message\"\n    };\n  }\n  /**\n   * Render plugin`s main Element and fill it with saved data\n   *\n   * @param {WarningData} data — previously saved data\n   * @param {WarningConfig} config — user config for Tool\n   * @param {object} api - Editor.js API\n   * @param {boolean} readOnly - read-only mode flag\n   */\n  constructor({ data: e, config: t, api: s, readOnly: i }) {\n    this.api = s, this.readOnly = i, this.titlePlaceholder = t.titlePlaceholder || r.DEFAULT_TITLE_PLACEHOLDER, this.messagePlaceholder = t.messagePlaceholder || r.DEFAULT_MESSAGE_PLACEHOLDER, this.data = {\n      title: e.title || \"\",\n      message: e.message || \"\"\n    };\n  }\n  /**\n   * Create Warning Tool container with inputs\n   *\n   * @returns {Element}\n   */\n  render() {\n    const e = this._make(\"div\", [this.CSS.baseClass, this.CSS.wrapper]), t = this._make(\"div\", [this.CSS.input, this.CSS.title], {\n      contentEditable: !this.readOnly,\n      innerHTML: this.data.title\n    }), s = this._make(\"div\", [this.CSS.input, this.CSS.message], {\n      contentEditable: !this.readOnly,\n      innerHTML: this.data.message\n    });\n    return t.dataset.placeholder = this.titlePlaceholder, s.dataset.placeholder = this.messagePlaceholder, e.appendChild(t), e.appendChild(s), e;\n  }\n  /**\n   * Extract Warning data from Warning Tool element\n   *\n   * @param {HTMLDivElement} warningElement - element to save\n   * @returns {WarningData}\n   */\n  save(e) {\n    const t = e.querySelector(`.${this.CSS.title}`), s = e.querySelector(`.${this.CSS.message}`);\n    return Object.assign(this.data, {\n      title: t.innerHTML,\n      message: s.innerHTML\n    });\n  }\n  /**\n   * Helper for making Elements with attributes\n   *\n   * @param  {string} tagName           - new Element tag name\n   * @param  {Array|string} classNames  - list or name of CSS classname(s)\n   * @param  {object} attributes        - any attributes\n   * @returns {Element}\n   */\n  _make(e, t = null, s = {}) {\n    const i = document.createElement(e);\n    Array.isArray(t) ? i.classList.add(...t) : t && i.classList.add(t);\n    for (const a in s)\n      i[a] = s[a];\n    return i;\n  }\n  /**\n   * Sanitizer config for Warning Tool saved data\n   *\n   * @returns {object}\n   */\n  static get sanitize() {\n    return {\n      title: {},\n      message: {}\n    };\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@editorjs/warning/dist/warning.mjs\n");

/***/ })

};
;